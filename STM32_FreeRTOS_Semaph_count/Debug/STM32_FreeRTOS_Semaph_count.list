
STM32_FreeRTOS_Semaph_count.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002338  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08002448  08002448  00012448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002538  08002538  00012538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800253c  0800253c  0001253c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08002540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003a10  20000018  08002558  00020018  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20003a28  08002558  00023a28  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  9 .debug_info   000087b3  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001789  00000000  00000000  000287f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000007b0  00000000  00000000  00029f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006f8  00000000  00000000  0002a730  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003c03  00000000  00000000  0002ae28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002f5f  00000000  00000000  0002ea2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003198a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001f4c  00000000  00000000  00031a08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08002430 	.word	0x08002430

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08002430 	.word	0x08002430

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000160:	b480      	push	{r7}
 8000162:	b083      	sub	sp, #12
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000168:	4a05      	ldr	r2, [pc, #20]	; (8000180 <NVIC_PriorityGroupConfig+0x20>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000174:	60d3      	str	r3, [r2, #12]
}
 8000176:	bf00      	nop
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	e000ed00 	.word	0xe000ed00

08000184 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000184:	b480      	push	{r7}
 8000186:	b089      	sub	sp, #36	; 0x24
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800018e:	2300      	movs	r3, #0
 8000190:	61fb      	str	r3, [r7, #28]
 8000192:	2300      	movs	r3, #0
 8000194:	613b      	str	r3, [r7, #16]
 8000196:	2300      	movs	r3, #0
 8000198:	61bb      	str	r3, [r7, #24]
 800019a:	2300      	movs	r3, #0
 800019c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800019e:	2300      	movs	r3, #0
 80001a0:	617b      	str	r3, [r7, #20]
 80001a2:	2300      	movs	r3, #0
 80001a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80001a6:	683b      	ldr	r3, [r7, #0]
 80001a8:	78db      	ldrb	r3, [r3, #3]
 80001aa:	f003 030f 	and.w	r3, r3, #15
 80001ae:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	78db      	ldrb	r3, [r3, #3]
 80001b4:	f003 0310 	and.w	r3, r3, #16
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d005      	beq.n	80001c8 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80001bc:	683b      	ldr	r3, [r7, #0]
 80001be:	789b      	ldrb	r3, [r3, #2]
 80001c0:	461a      	mov	r2, r3
 80001c2:	69fb      	ldr	r3, [r7, #28]
 80001c4:	4313      	orrs	r3, r2
 80001c6:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80001c8:	683b      	ldr	r3, [r7, #0]
 80001ca:	881b      	ldrh	r3, [r3, #0]
 80001cc:	b2db      	uxtb	r3, r3
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d044      	beq.n	800025c <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80001d8:	2300      	movs	r3, #0
 80001da:	61bb      	str	r3, [r7, #24]
 80001dc:	e038      	b.n	8000250 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80001de:	2201      	movs	r2, #1
 80001e0:	69bb      	ldr	r3, [r7, #24]
 80001e2:	fa02 f303 	lsl.w	r3, r2, r3
 80001e6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	881b      	ldrh	r3, [r3, #0]
 80001ec:	461a      	mov	r2, r3
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	4013      	ands	r3, r2
 80001f2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80001f4:	693a      	ldr	r2, [r7, #16]
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	429a      	cmp	r2, r3
 80001fa:	d126      	bne.n	800024a <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80001fc:	69bb      	ldr	r3, [r7, #24]
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000202:	220f      	movs	r2, #15
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	fa02 f303 	lsl.w	r3, r2, r3
 800020a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800020c:	68bb      	ldr	r3, [r7, #8]
 800020e:	43db      	mvns	r3, r3
 8000210:	697a      	ldr	r2, [r7, #20]
 8000212:	4013      	ands	r3, r2
 8000214:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000216:	69fa      	ldr	r2, [r7, #28]
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	fa02 f303 	lsl.w	r3, r2, r3
 800021e:	697a      	ldr	r2, [r7, #20]
 8000220:	4313      	orrs	r3, r2
 8000222:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	78db      	ldrb	r3, [r3, #3]
 8000228:	2b28      	cmp	r3, #40	; 0x28
 800022a:	d105      	bne.n	8000238 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800022c:	2201      	movs	r2, #1
 800022e:	69bb      	ldr	r3, [r7, #24]
 8000230:	409a      	lsls	r2, r3
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	615a      	str	r2, [r3, #20]
 8000236:	e008      	b.n	800024a <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	78db      	ldrb	r3, [r3, #3]
 800023c:	2b48      	cmp	r3, #72	; 0x48
 800023e:	d104      	bne.n	800024a <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000240:	2201      	movs	r2, #1
 8000242:	69bb      	ldr	r3, [r7, #24]
 8000244:	409a      	lsls	r2, r3
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800024a:	69bb      	ldr	r3, [r7, #24]
 800024c:	3301      	adds	r3, #1
 800024e:	61bb      	str	r3, [r7, #24]
 8000250:	69bb      	ldr	r3, [r7, #24]
 8000252:	2b07      	cmp	r3, #7
 8000254:	d9c3      	bls.n	80001de <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	697a      	ldr	r2, [r7, #20]
 800025a:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	2bff      	cmp	r3, #255	; 0xff
 8000262:	d946      	bls.n	80002f2 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800026a:	2300      	movs	r3, #0
 800026c:	61bb      	str	r3, [r7, #24]
 800026e:	e03a      	b.n	80002e6 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000270:	69bb      	ldr	r3, [r7, #24]
 8000272:	3308      	adds	r3, #8
 8000274:	2201      	movs	r2, #1
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	881b      	ldrh	r3, [r3, #0]
 8000280:	461a      	mov	r2, r3
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	4013      	ands	r3, r2
 8000286:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000288:	693a      	ldr	r2, [r7, #16]
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	429a      	cmp	r2, r3
 800028e:	d127      	bne.n	80002e0 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000290:	69bb      	ldr	r3, [r7, #24]
 8000292:	009b      	lsls	r3, r3, #2
 8000294:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000296:	220f      	movs	r2, #15
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	fa02 f303 	lsl.w	r3, r2, r3
 800029e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	43db      	mvns	r3, r3
 80002a4:	697a      	ldr	r2, [r7, #20]
 80002a6:	4013      	ands	r3, r2
 80002a8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80002aa:	69fa      	ldr	r2, [r7, #28]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	697a      	ldr	r2, [r7, #20]
 80002b4:	4313      	orrs	r3, r2
 80002b6:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	78db      	ldrb	r3, [r3, #3]
 80002bc:	2b28      	cmp	r3, #40	; 0x28
 80002be:	d105      	bne.n	80002cc <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80002c0:	69bb      	ldr	r3, [r7, #24]
 80002c2:	3308      	adds	r3, #8
 80002c4:	2201      	movs	r2, #1
 80002c6:	409a      	lsls	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	78db      	ldrb	r3, [r3, #3]
 80002d0:	2b48      	cmp	r3, #72	; 0x48
 80002d2:	d105      	bne.n	80002e0 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80002d4:	69bb      	ldr	r3, [r7, #24]
 80002d6:	3308      	adds	r3, #8
 80002d8:	2201      	movs	r2, #1
 80002da:	409a      	lsls	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002e0:	69bb      	ldr	r3, [r7, #24]
 80002e2:	3301      	adds	r3, #1
 80002e4:	61bb      	str	r3, [r7, #24]
 80002e6:	69bb      	ldr	r3, [r7, #24]
 80002e8:	2b07      	cmp	r3, #7
 80002ea:	d9c1      	bls.n	8000270 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	697a      	ldr	r2, [r7, #20]
 80002f0:	605a      	str	r2, [r3, #4]
  }
}
 80002f2:	bf00      	nop
 80002f4:	3724      	adds	r7, #36	; 0x24
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr

080002fc <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	460b      	mov	r3, r1
 8000306:	807b      	strh	r3, [r7, #2]
 8000308:	4613      	mov	r3, r2
 800030a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 800030c:	787b      	ldrb	r3, [r7, #1]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d003      	beq.n	800031a <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000312:	887a      	ldrh	r2, [r7, #2]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 8000318:	e002      	b.n	8000320 <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 800031a:	887a      	ldrh	r2, [r7, #2]
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	615a      	str	r2, [r3, #20]
}
 8000320:	bf00      	nop
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr
	...

0800032c <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800032c:	b480      	push	{r7}
 800032e:	b087      	sub	sp, #28
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	617b      	str	r3, [r7, #20]
 8000338:	2300      	movs	r3, #0
 800033a:	613b      	str	r3, [r7, #16]
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	2300      	movs	r3, #0
 8000342:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000344:	4b4c      	ldr	r3, [pc, #304]	; (8000478 <RCC_GetClocksFreq+0x14c>)
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	f003 030c 	and.w	r3, r3, #12
 800034c:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800034e:	697b      	ldr	r3, [r7, #20]
 8000350:	2b04      	cmp	r3, #4
 8000352:	d007      	beq.n	8000364 <RCC_GetClocksFreq+0x38>
 8000354:	2b08      	cmp	r3, #8
 8000356:	d009      	beq.n	800036c <RCC_GetClocksFreq+0x40>
 8000358:	2b00      	cmp	r3, #0
 800035a:	d133      	bne.n	80003c4 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a47      	ldr	r2, [pc, #284]	; (800047c <RCC_GetClocksFreq+0x150>)
 8000360:	601a      	str	r2, [r3, #0]
      break;
 8000362:	e033      	b.n	80003cc <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a45      	ldr	r2, [pc, #276]	; (800047c <RCC_GetClocksFreq+0x150>)
 8000368:	601a      	str	r2, [r3, #0]
      break;
 800036a:	e02f      	b.n	80003cc <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800036c:	4b42      	ldr	r3, [pc, #264]	; (8000478 <RCC_GetClocksFreq+0x14c>)
 800036e:	685b      	ldr	r3, [r3, #4]
 8000370:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000374:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000376:	4b40      	ldr	r3, [pc, #256]	; (8000478 <RCC_GetClocksFreq+0x14c>)
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800037e:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000380:	693b      	ldr	r3, [r7, #16]
 8000382:	0c9b      	lsrs	r3, r3, #18
 8000384:	3302      	adds	r3, #2
 8000386:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d106      	bne.n	800039c <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800038e:	693b      	ldr	r3, [r7, #16]
 8000390:	4a3b      	ldr	r2, [pc, #236]	; (8000480 <RCC_GetClocksFreq+0x154>)
 8000392:	fb02 f203 	mul.w	r2, r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 800039a:	e017      	b.n	80003cc <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 800039c:	4b36      	ldr	r3, [pc, #216]	; (8000478 <RCC_GetClocksFreq+0x14c>)
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d006      	beq.n	80003b6 <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80003a8:	693b      	ldr	r3, [r7, #16]
 80003aa:	4a35      	ldr	r2, [pc, #212]	; (8000480 <RCC_GetClocksFreq+0x154>)
 80003ac:	fb02 f203 	mul.w	r2, r2, r3
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	601a      	str	r2, [r3, #0]
      break;
 80003b4:	e00a      	b.n	80003cc <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80003b6:	693b      	ldr	r3, [r7, #16]
 80003b8:	4a30      	ldr	r2, [pc, #192]	; (800047c <RCC_GetClocksFreq+0x150>)
 80003ba:	fb02 f203 	mul.w	r2, r2, r3
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	601a      	str	r2, [r3, #0]
      break;
 80003c2:	e003      	b.n	80003cc <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a2d      	ldr	r2, [pc, #180]	; (800047c <RCC_GetClocksFreq+0x150>)
 80003c8:	601a      	str	r2, [r3, #0]
      break;
 80003ca:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80003cc:	4b2a      	ldr	r3, [pc, #168]	; (8000478 <RCC_GetClocksFreq+0x14c>)
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80003d4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	091b      	lsrs	r3, r3, #4
 80003da:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80003dc:	4a29      	ldr	r2, [pc, #164]	; (8000484 <RCC_GetClocksFreq+0x158>)
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	4413      	add	r3, r2
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	40da      	lsrs	r2, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80003f4:	4b20      	ldr	r3, [pc, #128]	; (8000478 <RCC_GetClocksFreq+0x14c>)
 80003f6:	685b      	ldr	r3, [r3, #4]
 80003f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80003fc:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	0a1b      	lsrs	r3, r3, #8
 8000402:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000404:	4a1f      	ldr	r2, [pc, #124]	; (8000484 <RCC_GetClocksFreq+0x158>)
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	4413      	add	r3, r2
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	b2db      	uxtb	r3, r3
 800040e:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	685a      	ldr	r2, [r3, #4]
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	40da      	lsrs	r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800041c:	4b16      	ldr	r3, [pc, #88]	; (8000478 <RCC_GetClocksFreq+0x14c>)
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000424:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	0adb      	lsrs	r3, r3, #11
 800042a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800042c:	4a15      	ldr	r2, [pc, #84]	; (8000484 <RCC_GetClocksFreq+0x158>)
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	4413      	add	r3, r2
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	b2db      	uxtb	r3, r3
 8000436:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	685a      	ldr	r2, [r3, #4]
 800043c:	68bb      	ldr	r3, [r7, #8]
 800043e:	40da      	lsrs	r2, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <RCC_GetClocksFreq+0x14c>)
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800044c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	0b9b      	lsrs	r3, r3, #14
 8000452:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000454:	4a0c      	ldr	r2, [pc, #48]	; (8000488 <RCC_GetClocksFreq+0x15c>)
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	4413      	add	r3, r2
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	b2db      	uxtb	r3, r3
 800045e:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	68da      	ldr	r2, [r3, #12]
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	fbb2 f2f3 	udiv	r2, r2, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	611a      	str	r2, [r3, #16]
}
 800046e:	bf00      	nop
 8000470:	371c      	adds	r7, #28
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	40021000 	.word	0x40021000
 800047c:	007a1200 	.word	0x007a1200
 8000480:	003d0900 	.word	0x003d0900
 8000484:	20000000 	.word	0x20000000
 8000488:	20000010 	.word	0x20000010

0800048c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	460b      	mov	r3, r1
 8000496:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000498:	78fb      	ldrb	r3, [r7, #3]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d006      	beq.n	80004ac <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800049e:	4909      	ldr	r1, [pc, #36]	; (80004c4 <RCC_APB2PeriphClockCmd+0x38>)
 80004a0:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <RCC_APB2PeriphClockCmd+0x38>)
 80004a2:	699a      	ldr	r2, [r3, #24]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4313      	orrs	r3, r2
 80004a8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80004aa:	e006      	b.n	80004ba <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80004ac:	4905      	ldr	r1, [pc, #20]	; (80004c4 <RCC_APB2PeriphClockCmd+0x38>)
 80004ae:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <RCC_APB2PeriphClockCmd+0x38>)
 80004b0:	699a      	ldr	r2, [r3, #24]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	43db      	mvns	r3, r3
 80004b6:	4013      	ands	r3, r2
 80004b8:	618b      	str	r3, [r1, #24]
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	40021000 	.word	0x40021000

080004c8 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08c      	sub	sp, #48	; 0x30
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80004d2:	2300      	movs	r3, #0
 80004d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004d6:	2300      	movs	r3, #0
 80004d8:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 80004da:	2300      	movs	r3, #0
 80004dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 80004de:	2300      	movs	r3, #0
 80004e0:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	8a1b      	ldrh	r3, [r3, #16]
 80004ee:	b29b      	uxth	r3, r3
 80004f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80004f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80004f4:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80004f8:	4013      	ands	r3, r2
 80004fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	88db      	ldrh	r3, [r3, #6]
 8000500:	461a      	mov	r2, r3
 8000502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000504:	4313      	orrs	r3, r2
 8000506:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800050a:	b29a      	uxth	r2, r3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	899b      	ldrh	r3, [r3, #12]
 8000514:	b29b      	uxth	r3, r3
 8000516:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800051a:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 800051e:	4013      	ands	r3, r2
 8000520:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	889a      	ldrh	r2, [r3, #4]
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	891b      	ldrh	r3, [r3, #8]
 800052a:	4313      	orrs	r3, r2
 800052c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000532:	4313      	orrs	r3, r2
 8000534:	b29b      	uxth	r3, r3
 8000536:	461a      	mov	r2, r3
 8000538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800053a:	4313      	orrs	r3, r2
 800053c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800053e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000540:	b29a      	uxth	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	8a9b      	ldrh	r3, [r3, #20]
 800054a:	b29b      	uxth	r3, r3
 800054c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 800054e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000550:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000554:	4013      	ands	r3, r2
 8000556:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	899b      	ldrh	r3, [r3, #12]
 800055c:	461a      	mov	r2, r3
 800055e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000560:	4313      	orrs	r3, r2
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000566:	b29a      	uxth	r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff fedb 	bl	800032c <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000576:	69fb      	ldr	r3, [r7, #28]
 8000578:	4a2e      	ldr	r2, [pc, #184]	; (8000634 <USART_Init+0x16c>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d102      	bne.n	8000584 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	62bb      	str	r3, [r7, #40]	; 0x28
 8000582:	e001      	b.n	8000588 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000584:	693b      	ldr	r3, [r7, #16]
 8000586:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	899b      	ldrh	r3, [r3, #12]
 800058c:	b29b      	uxth	r3, r3
 800058e:	b21b      	sxth	r3, r3
 8000590:	2b00      	cmp	r3, #0
 8000592:	da0c      	bge.n	80005ae <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000596:	4613      	mov	r3, r2
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	4413      	add	r3, r2
 800059c:	009a      	lsls	r2, r3, #2
 800059e:	441a      	add	r2, r3
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
 80005ac:	e00b      	b.n	80005c6 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80005ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005b0:	4613      	mov	r3, r2
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	4413      	add	r3, r2
 80005b6:	009a      	lsls	r2, r3, #2
 80005b8:	441a      	add	r2, r3
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 80005c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c8:	4a1b      	ldr	r2, [pc, #108]	; (8000638 <USART_Init+0x170>)
 80005ca:	fba2 2303 	umull	r2, r3, r2, r3
 80005ce:	095b      	lsrs	r3, r3, #5
 80005d0:	011b      	lsls	r3, r3, #4
 80005d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80005d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005d6:	091b      	lsrs	r3, r3, #4
 80005d8:	2264      	movs	r2, #100	; 0x64
 80005da:	fb02 f303 	mul.w	r3, r2, r3
 80005de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	899b      	ldrh	r3, [r3, #12]
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	b21b      	sxth	r3, r3
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	da0c      	bge.n	800060a <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80005f0:	6a3b      	ldr	r3, [r7, #32]
 80005f2:	00db      	lsls	r3, r3, #3
 80005f4:	3332      	adds	r3, #50	; 0x32
 80005f6:	4a10      	ldr	r2, [pc, #64]	; (8000638 <USART_Init+0x170>)
 80005f8:	fba2 2303 	umull	r2, r3, r2, r3
 80005fc:	095b      	lsrs	r3, r3, #5
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000604:	4313      	orrs	r3, r2
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000608:	e00b      	b.n	8000622 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800060a:	6a3b      	ldr	r3, [r7, #32]
 800060c:	011b      	lsls	r3, r3, #4
 800060e:	3332      	adds	r3, #50	; 0x32
 8000610:	4a09      	ldr	r2, [pc, #36]	; (8000638 <USART_Init+0x170>)
 8000612:	fba2 2303 	umull	r2, r3, r2, r3
 8000616:	095b      	lsrs	r3, r3, #5
 8000618:	f003 030f 	and.w	r3, r3, #15
 800061c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800061e:	4313      	orrs	r3, r2
 8000620:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000624:	b29a      	uxth	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	811a      	strh	r2, [r3, #8]
}
 800062a:	bf00      	nop
 800062c:	3730      	adds	r7, #48	; 0x30
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40013800 	.word	0x40013800
 8000638:	51eb851f 	.word	0x51eb851f

0800063c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	460b      	mov	r3, r1
 8000646:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d008      	beq.n	8000660 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	899b      	ldrh	r3, [r3, #12]
 8000652:	b29b      	uxth	r3, r3
 8000654:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000658:	b29a      	uxth	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 800065e:	e007      	b.n	8000670 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	899b      	ldrh	r3, [r3, #12]
 8000664:	b29b      	uxth	r3, r3
 8000666:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800066a:	b29a      	uxth	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	819a      	strh	r2, [r3, #12]
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr

0800067a <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800067a:	b480      	push	{r7}
 800067c:	b083      	sub	sp, #12
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
 8000682:	460b      	mov	r3, r1
 8000684:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000686:	887b      	ldrh	r3, [r7, #2]
 8000688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800068c:	b29a      	uxth	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	809a      	strh	r2, [r3, #4]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr

0800069c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80006a8:	2300      	movs	r3, #0
 80006aa:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	887b      	ldrh	r3, [r7, #2]
 80006b4:	4013      	ands	r3, r2
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d002      	beq.n	80006c2 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80006bc:	2301      	movs	r3, #1
 80006be:	73fb      	strb	r3, [r7, #15]
 80006c0:	e001      	b.n	80006c6 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80006c2:	2300      	movs	r3, #0
 80006c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr

080006d2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80006d2:	b480      	push	{r7}
 80006d4:	b083      	sub	sp, #12
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f103 0208 	add.w	r2, r3, #8
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f04f 32ff 	mov.w	r2, #4294967295
 80006ea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f103 0208 	add.w	r2, r3, #8
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f103 0208 	add.w	r2, r3, #8
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	689a      	ldr	r2, [r3, #8]
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	683a      	ldr	r2, [r7, #0]
 800074c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	683a      	ldr	r2, [r7, #0]
 8000752:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	1c5a      	adds	r2, r3, #1
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	601a      	str	r2, [r3, #0]
}
 8000764:	bf00      	nop
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr

0800076e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800076e:	b480      	push	{r7}
 8000770:	b085      	sub	sp, #20
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000784:	d103      	bne.n	800078e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	691b      	ldr	r3, [r3, #16]
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	e00c      	b.n	80007a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	3308      	adds	r3, #8
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	e002      	b.n	800079c <vListInsert+0x2e>
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d9f6      	bls.n	8000796 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	685a      	ldr	r2, [r3, #4]
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	683a      	ldr	r2, [r7, #0]
 80007b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	68fa      	ldr	r2, [r7, #12]
 80007bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	683a      	ldr	r2, [r7, #0]
 80007c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	1c5a      	adds	r2, r3, #1
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	601a      	str	r2, [r3, #0]
}
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80007de:	b480      	push	{r7}
 80007e0:	b085      	sub	sp, #20
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	691b      	ldr	r3, [r3, #16]
 80007ea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	6892      	ldr	r2, [r2, #8]
 80007f4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	689b      	ldr	r3, [r3, #8]
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	6852      	ldr	r2, [r2, #4]
 80007fe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	685a      	ldr	r2, [r3, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	429a      	cmp	r2, r3
 8000808:	d103      	bne.n	8000812 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	689a      	ldr	r2, [r3, #8]
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	681b      	ldr	r3, [r3, #0]
}
 8000826:	4618      	mov	r0, r3
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	3b04      	subs	r3, #4
 8000840:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000848:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	3b04      	subs	r3, #4
 800084e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	f023 0201 	bic.w	r2, r3, #1
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	3b04      	subs	r3, #4
 800085e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000860:	4a08      	ldr	r2, [pc, #32]	; (8000884 <pxPortInitialiseStack+0x54>)
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	3b14      	subs	r3, #20
 800086a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	3b20      	subs	r3, #32
 8000876:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000878:	68fb      	ldr	r3, [r7, #12]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	08000889 	.word	0x08000889

08000888 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000892:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000896:	f383 8811 	msr	BASEPRI, r3
 800089a:	f3bf 8f6f 	isb	sy
 800089e:	f3bf 8f4f 	dsb	sy
 80008a2:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80008a4:	bf00      	nop
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d0fc      	beq.n	80008a6 <prvTaskExitError+0x1e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
	...

080008c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <pxCurrentTCBConst2>)
 80008c2:	6819      	ldr	r1, [r3, #0]
 80008c4:	6808      	ldr	r0, [r1, #0]
 80008c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80008ca:	f380 8809 	msr	PSP, r0
 80008ce:	f3bf 8f6f 	isb	sy
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f380 8811 	msr	BASEPRI, r0
 80008da:	f04e 0e0d 	orr.w	lr, lr, #13
 80008de:	4770      	bx	lr

080008e0 <pxCurrentTCBConst2>:
 80008e0:	20003854 	.word	0x20003854
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80008e4:	bf00      	nop
 80008e6:	bf00      	nop

080008e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80008e8:	4806      	ldr	r0, [pc, #24]	; (8000904 <prvPortStartFirstTask+0x1c>)
 80008ea:	6800      	ldr	r0, [r0, #0]
 80008ec:	6800      	ldr	r0, [r0, #0]
 80008ee:	f380 8808 	msr	MSP, r0
 80008f2:	b662      	cpsie	i
 80008f4:	b661      	cpsie	f
 80008f6:	f3bf 8f4f 	dsb	sy
 80008fa:	f3bf 8f6f 	isb	sy
 80008fe:	df00      	svc	0
 8000900:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000902:	bf00      	nop
 8000904:	e000ed08 	.word	0xe000ed08

08000908 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800090c:	4a0c      	ldr	r2, [pc, #48]	; (8000940 <xPortStartScheduler+0x38>)
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <xPortStartScheduler+0x38>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000916:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000918:	4a09      	ldr	r2, [pc, #36]	; (8000940 <xPortStartScheduler+0x38>)
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <xPortStartScheduler+0x38>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000922:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000924:	f000 f888 	bl	8000a38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <xPortStartScheduler+0x3c>)
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800092e:	f7ff ffdb 	bl	80008e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000932:	f000 ff49 	bl	80017c8 <vTaskSwitchContext>
	prvTaskExitError();
 8000936:	f7ff ffa7 	bl	8000888 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800093a:	2300      	movs	r3, #0
}
 800093c:	4618      	mov	r0, r3
 800093e:	bd80      	pop	{r7, pc}
 8000940:	e000ed20 	.word	0xe000ed20
 8000944:	20000014 	.word	0x20000014

08000948 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000952:	f383 8811 	msr	BASEPRI, r3
 8000956:	f3bf 8f6f 	isb	sy
 800095a:	f3bf 8f4f 	dsb	sy
 800095e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000960:	4b04      	ldr	r3, [pc, #16]	; (8000974 <vPortEnterCritical+0x2c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	3301      	adds	r3, #1
 8000966:	4a03      	ldr	r2, [pc, #12]	; (8000974 <vPortEnterCritical+0x2c>)
 8000968:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	20000014 	.word	0x20000014

08000978 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <vPortExitCritical+0x2c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	3b01      	subs	r3, #1
 8000984:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <vPortExitCritical+0x2c>)
 8000986:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <vPortExitCritical+0x2c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d104      	bne.n	800099a <vPortExitCritical+0x22>
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	20000014 	.word	0x20000014
	...

080009b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80009b0:	f3ef 8009 	mrs	r0, PSP
 80009b4:	f3bf 8f6f 	isb	sy
 80009b8:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <pxCurrentTCBConst>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80009c0:	6010      	str	r0, [r2, #0]
 80009c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80009c6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80009ca:	f380 8811 	msr	BASEPRI, r0
 80009ce:	f000 fefb 	bl	80017c8 <vTaskSwitchContext>
 80009d2:	f04f 0000 	mov.w	r0, #0
 80009d6:	f380 8811 	msr	BASEPRI, r0
 80009da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80009de:	6819      	ldr	r1, [r3, #0]
 80009e0:	6808      	ldr	r0, [r1, #0]
 80009e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80009e6:	f380 8809 	msr	PSP, r0
 80009ea:	f3bf 8f6f 	isb	sy
 80009ee:	4770      	bx	lr

080009f0 <pxCurrentTCBConst>:
 80009f0:	20003854 	.word	0x20003854
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80009f4:	bf00      	nop
 80009f6:	bf00      	nop

080009f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
	__asm volatile
 80009fe:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000a02:	f383 8811 	msr	BASEPRI, r3
 8000a06:	f3bf 8f6f 	isb	sy
 8000a0a:	f3bf 8f4f 	dsb	sy
 8000a0e:	607b      	str	r3, [r7, #4]
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000a10:	f000 fe32 	bl	8001678 <xTaskIncrementTick>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d003      	beq.n	8000a22 <SysTick_Handler+0x2a>
		{
      traceISR_EXIT_TO_SCHEDULER();
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <SysTick_Handler+0x3c>)
 8000a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	f383 8811 	msr	BASEPRI, r3
		{
			traceISR_EXIT();
		}
	}
	portENABLE_INTERRUPTS();
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	e000ed04 	.word	0xe000ed04

08000a38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <vPortSetupTimerInterrupt+0x24>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <vPortSetupTimerInterrupt+0x28>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <vPortSetupTimerInterrupt+0x2c>)
 8000a4a:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <vPortSetupTimerInterrupt+0x30>)
 8000a4c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000a4e:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <vPortSetupTimerInterrupt+0x24>)
 8000a50:	2207      	movs	r2, #7
 8000a52:	601a      	str	r2, [r3, #0]
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	e000e010 	.word	0xe000e010
 8000a60:	e000e018 	.word	0xe000e018
 8000a64:	e000e014 	.word	0xe000e014
 8000a68:	0001193f 	.word	0x0001193f

08000a6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8000a78:	f000 fd62 	bl	8001540 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000a7c:	4b42      	ldr	r3, [pc, #264]	; (8000b88 <pvPortMalloc+0x11c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d101      	bne.n	8000a88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8000a84:	f000 f8cc 	bl	8000c20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000a88:	4b40      	ldr	r3, [pc, #256]	; (8000b8c <pvPortMalloc+0x120>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d172      	bne.n	8000b7a <pvPortMalloc+0x10e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d00d      	beq.n	8000ab6 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 8000a9a:	2208      	movs	r2, #8
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f003 0307 	and.w	r3, r3, #7
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d004      	beq.n	8000ab6 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f023 0307 	bic.w	r3, r3, #7
 8000ab2:	3308      	adds	r3, #8
 8000ab4:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d05e      	beq.n	8000b7a <pvPortMalloc+0x10e>
 8000abc:	4b34      	ldr	r3, [pc, #208]	; (8000b90 <pvPortMalloc+0x124>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d859      	bhi.n	8000b7a <pvPortMalloc+0x10e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000ac6:	4b33      	ldr	r3, [pc, #204]	; (8000b94 <pvPortMalloc+0x128>)
 8000ac8:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8000aca:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <pvPortMalloc+0x128>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000ad0:	e004      	b.n	8000adc <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	685a      	ldr	r2, [r3, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d203      	bcs.n	8000aee <pvPortMalloc+0x82>
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d1f1      	bne.n	8000ad2 <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000aee:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <pvPortMalloc+0x11c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	697a      	ldr	r2, [r7, #20]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d040      	beq.n	8000b7a <pvPortMalloc+0x10e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2208      	movs	r2, #8
 8000afe:	4413      	add	r3, r2
 8000b00:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	685a      	ldr	r2, [r3, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	1ad2      	subs	r2, r2, r3
 8000b12:	2308      	movs	r3, #8
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d90f      	bls.n	8000b3a <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000b1a:	697a      	ldr	r2, [r7, #20]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4413      	add	r3, r2
 8000b20:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	685a      	ldr	r2, [r3, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	1ad2      	subs	r2, r2, r3
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000b34:	68b8      	ldr	r0, [r7, #8]
 8000b36:	f000 f8d5 	bl	8000ce4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <pvPortMalloc+0x124>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	1ad3      	subs	r3, r2, r3
 8000b44:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <pvPortMalloc+0x124>)
 8000b46:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <pvPortMalloc+0x124>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <pvPortMalloc+0x12c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d203      	bcs.n	8000b5c <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <pvPortMalloc+0x124>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0f      	ldr	r2, [pc, #60]	; (8000b98 <pvPortMalloc+0x12c>)
 8000b5a:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <pvPortMalloc+0x120>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	431a      	orrs	r2, r3
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <pvPortMalloc+0x130>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	3301      	adds	r3, #1
 8000b76:	4a09      	ldr	r2, [pc, #36]	; (8000b9c <pvPortMalloc+0x130>)
 8000b78:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000b7a:	f000 fcef 	bl	800155c <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	2000383c 	.word	0x2000383c
 8000b8c:	20003850 	.word	0x20003850
 8000b90:	20003840 	.word	0x20003840
 8000b94:	20003834 	.word	0x20003834
 8000b98:	20003844 	.word	0x20003844
 8000b9c:	20003848 	.word	0x20003848

08000ba0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d02c      	beq.n	8000c0c <vPortFree+0x6c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000bb2:	2308      	movs	r3, #8
 8000bb4:	425b      	negs	r3, r3
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	4413      	add	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	685a      	ldr	r2, [r3, #4]
 8000bc4:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <vPortFree+0x74>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d01e      	beq.n	8000c0c <vPortFree+0x6c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d11a      	bne.n	8000c0c <vPortFree+0x6c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <vPortFree+0x74>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	43db      	mvns	r3, r3
 8000be0:	401a      	ands	r2, r3
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000be6:	f000 fcab 	bl	8001540 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	685a      	ldr	r2, [r3, #4]
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <vPortFree+0x78>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <vPortFree+0x78>)
 8000bf6:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000bf8:	68b8      	ldr	r0, [r7, #8]
 8000bfa:	f000 f873 	bl	8000ce4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8000bfe:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <vPortFree+0x7c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	3301      	adds	r3, #1
 8000c04:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <vPortFree+0x7c>)
 8000c06:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8000c08:	f000 fca8 	bl	800155c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20003850 	.word	0x20003850
 8000c18:	20003840 	.word	0x20003840
 8000c1c:	2000384c 	.word	0x2000384c

08000c20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000c26:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000c2c:	4b27      	ldr	r3, [pc, #156]	; (8000ccc <prvHeapInit+0xac>)
 8000c2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d00c      	beq.n	8000c54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	3307      	adds	r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f023 0307 	bic.w	r3, r3, #7
 8000c46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000c48:	68ba      	ldr	r2, [r7, #8]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	4a1f      	ldr	r2, [pc, #124]	; (8000ccc <prvHeapInit+0xac>)
 8000c50:	4413      	add	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000c58:	4a1d      	ldr	r2, [pc, #116]	; (8000cd0 <prvHeapInit+0xb0>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <prvHeapInit+0xb0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	4413      	add	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000c6c:	2208      	movs	r2, #8
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	1a9b      	subs	r3, r3, r2
 8000c72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f023 0307 	bic.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4a15      	ldr	r2, [pc, #84]	; (8000cd4 <prvHeapInit+0xb4>)
 8000c80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <prvHeapInit+0xb4>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2200      	movs	r2, #0
 8000c88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <prvHeapInit+0xb4>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	1ad2      	subs	r2, r2, r3
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <prvHeapInit+0xb4>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <prvHeapInit+0xb8>)
 8000cae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	4a09      	ldr	r2, [pc, #36]	; (8000cdc <prvHeapInit+0xbc>)
 8000cb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <prvHeapInit+0xc0>)
 8000cba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000cbe:	601a      	str	r2, [r3, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000034 	.word	0x20000034
 8000cd0:	20003834 	.word	0x20003834
 8000cd4:	2000383c 	.word	0x2000383c
 8000cd8:	20003844 	.word	0x20003844
 8000cdc:	20003840 	.word	0x20003840
 8000ce0:	20003850 	.word	0x20003850

08000ce4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000cec:	4b27      	ldr	r3, [pc, #156]	; (8000d8c <prvInsertBlockIntoFreeList+0xa8>)
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	e002      	b.n	8000cf8 <prvInsertBlockIntoFreeList+0x14>
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d3f7      	bcc.n	8000cf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	441a      	add	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d108      	bne.n	8000d26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	441a      	add	r2, r3
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	441a      	add	r2, r3
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d118      	bne.n	8000d6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <prvInsertBlockIntoFreeList+0xac>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d00d      	beq.n	8000d62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	441a      	add	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	e008      	b.n	8000d74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <prvInsertBlockIntoFreeList+0xac>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	e003      	b.n	8000d74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d002      	beq.n	8000d82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000d82:	bf00      	nop
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	20003834 	.word	0x20003834
 8000d90:	2000383c 	.word	0x2000383c

08000d94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8000da2:	f7ff fdd1 	bl	8000948 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dae:	68f9      	ldr	r1, [r7, #12]
 8000db0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000db2:	fb01 f303 	mul.w	r3, r1, r3
 8000db6:	441a      	add	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	68f9      	ldr	r1, [r7, #12]
 8000dd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000dd8:	fb01 f303 	mul.w	r3, r1, r3
 8000ddc:	441a      	add	r2, r3
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	22ff      	movs	r2, #255	; 0xff
 8000de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	22ff      	movs	r2, #255	; 0xff
 8000dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d114      	bne.n	8000e22 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d01a      	beq.n	8000e36 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	3310      	adds	r3, #16
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 fd3b 	bl	8001880 <xTaskRemoveFromEventList>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d012      	beq.n	8000e36 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <xQueueGenericReset+0xb0>)
 8000e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	f3bf 8f4f 	dsb	sy
 8000e1c:	f3bf 8f6f 	isb	sy
 8000e20:	e009      	b.n	8000e36 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	3310      	adds	r3, #16
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fc53 	bl	80006d2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	3324      	adds	r3, #36	; 0x24
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fc4e 	bl	80006d2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000e36:	f7ff fd9f 	bl	8000978 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	e000ed04 	.word	0xe000ed04

08000e48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af02      	add	r7, sp, #8
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	4613      	mov	r3, r2
 8000e54:	71fb      	strb	r3, [r7, #7]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	68ba      	ldr	r2, [r7, #8]
 8000e5a:	fb02 f303 	mul.w	r3, r2, r3
 8000e5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	3348      	adds	r3, #72	; 0x48
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fe01 	bl	8000a6c <pvPortMalloc>
 8000e6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d00d      	beq.n	8000e8e <xQueueGenericCreate+0x46>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3348      	adds	r3, #72	; 0x48
 8000e7a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000e7c:	79fa      	ldrb	r2, [r7, #7]
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	4613      	mov	r3, r2
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	68b9      	ldr	r1, [r7, #8]
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f000 f805 	bl	8000e98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000e8e:	69bb      	ldr	r3, [r7, #24]
	}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3720      	adds	r7, #32
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d103      	bne.n	8000eb4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	e002      	b.n	8000eba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	69b8      	ldr	r0, [r7, #24]
 8000eca:	f7ff ff63 	bl	8000d94 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b084      	sub	sp, #16
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ffaf 	bl	8000e48 <xQueueGenericCreate>
 8000eea:	60f8      	str	r0, [r7, #12]

		if( xHandle != NULL )
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d002      	beq.n	8000ef8 <xQueueCreateCountingSemaphore+0x22>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
	}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b08a      	sub	sp, #40	; 0x28
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	623b      	str	r3, [r7, #32]
	__asm volatile
 8000f10:	f3ef 8211 	mrs	r2, BASEPRI
 8000f14:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000f18:	f383 8811 	msr	BASEPRI, r3
 8000f1c:	f3bf 8f6f 	isb	sy
 8000f20:	f3bf 8f4f 	dsb	sy
 8000f24:	613a      	str	r2, [r7, #16]
 8000f26:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000f28:	693b      	ldr	r3, [r7, #16]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000f2a:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
 8000f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f30:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d929      	bls.n	8000f90 <xQueueGiveFromISR+0x8e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000f3c:	6a3b      	ldr	r3, [r7, #32]
 8000f3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f42:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	6a3b      	ldr	r3, [r7, #32]
 8000f4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000f4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f54:	d112      	bne.n	8000f7c <xQueueGiveFromISR+0x7a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f56:	6a3b      	ldr	r3, [r7, #32]
 8000f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d015      	beq.n	8000f8a <xQueueGiveFromISR+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
 8000f60:	3324      	adds	r3, #36	; 0x24
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 fc8c 	bl	8001880 <xTaskRemoveFromEventList>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00d      	beq.n	8000f8a <xQueueGiveFromISR+0x88>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d00a      	beq.n	8000f8a <xQueueGiveFromISR+0x88>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	2201      	movs	r2, #1
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	e006      	b.n	8000f8a <xQueueGiveFromISR+0x88>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000f7c:	7dfb      	ldrb	r3, [r7, #23]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	b25a      	sxtb	r2, r3
 8000f84:	6a3b      	ldr	r3, [r7, #32]
 8000f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f8e:	e001      	b.n	8000f94 <xQueueGiveFromISR+0x92>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3728      	adds	r7, #40	; 0x28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000fbe:	f7ff fcc3 	bl	8000948 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc6:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d024      	beq.n	8001018 <xQueueSemaphoreTake+0x70>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	1e5a      	subs	r2, r3, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d104      	bne.n	8000fe8 <xQueueSemaphoreTake+0x40>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000fde:	f000 fea3 	bl	8001d28 <pvTaskIncrementMutexHeldCount>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00f      	beq.n	8001010 <xQueueSemaphoreTake+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	3310      	adds	r3, #16
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 fc43 	bl	8001880 <xTaskRemoveFromEventList>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d007      	beq.n	8001010 <xQueueSemaphoreTake+0x68>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001000:	4b4c      	ldr	r3, [pc, #304]	; (8001134 <xQueueSemaphoreTake+0x18c>)
 8001002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	f3bf 8f4f 	dsb	sy
 800100c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001010:	f7ff fcb2 	bl	8000978 <vPortExitCritical>
				return pdPASS;
 8001014:	2301      	movs	r3, #1
 8001016:	e089      	b.n	800112c <xQueueSemaphoreTake+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d103      	bne.n	8001026 <xQueueSemaphoreTake+0x7e>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800101e:	f7ff fcab 	bl	8000978 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001022:	2300      	movs	r3, #0
 8001024:	e082      	b.n	800112c <xQueueSemaphoreTake+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	2b00      	cmp	r3, #0
 800102a:	d106      	bne.n	800103a <xQueueSemaphoreTake+0x92>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	4618      	mov	r0, r3
 8001032:	f000 fc79 	bl	8001928 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001036:	2301      	movs	r3, #1
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800103a:	f7ff fc9d 	bl	8000978 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800103e:	f000 fa7f 	bl	8001540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001042:	f7ff fc81 	bl	8000948 <vPortEnterCritical>
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800104c:	b25b      	sxtb	r3, r3
 800104e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001052:	d103      	bne.n	800105c <xQueueSemaphoreTake+0xb4>
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001062:	b25b      	sxtb	r3, r3
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d103      	bne.n	8001072 <xQueueSemaphoreTake+0xca>
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001072:	f7ff fc81 	bl	8000978 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001076:	463a      	mov	r2, r7
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	4611      	mov	r1, r2
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fc68 	bl	8001954 <xTaskCheckForTimeOut>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d132      	bne.n	80010f0 <xQueueSemaphoreTake+0x148>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800108a:	69f8      	ldr	r0, [r7, #28]
 800108c:	f000 f8bd 	bl	800120a <prvIsQueueEmpty>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d026      	beq.n	80010e4 <xQueueSemaphoreTake+0x13c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d109      	bne.n	80010b2 <xQueueSemaphoreTake+0x10a>
					{
						taskENTER_CRITICAL();
 800109e:	f7ff fc53 	bl	8000948 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 fd5a 	bl	8001b60 <xTaskPriorityInherit>
 80010ac:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 80010ae:	f7ff fc63 	bl	8000978 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3324      	adds	r3, #36	; 0x24
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	4611      	mov	r1, r2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fbca 	bl	8001854 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80010c0:	69f8      	ldr	r0, [r7, #28]
 80010c2:	f000 f850 	bl	8001166 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80010c6:	f000 fa49 	bl	800155c <xTaskResumeAll>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f47f af76 	bne.w	8000fbe <xQueueSemaphoreTake+0x16>
				{
					portYIELD_WITHIN_API();
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <xQueueSemaphoreTake+0x18c>)
 80010d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	f3bf 8f4f 	dsb	sy
 80010de:	f3bf 8f6f 	isb	sy
 80010e2:	e76c      	b.n	8000fbe <xQueueSemaphoreTake+0x16>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80010e4:	69f8      	ldr	r0, [r7, #28]
 80010e6:	f000 f83e 	bl	8001166 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80010ea:	f000 fa37 	bl	800155c <xTaskResumeAll>
 80010ee:	e766      	b.n	8000fbe <xQueueSemaphoreTake+0x16>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80010f0:	69f8      	ldr	r0, [r7, #28]
 80010f2:	f000 f838 	bl	8001166 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80010f6:	f000 fa31 	bl	800155c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80010fa:	69f8      	ldr	r0, [r7, #28]
 80010fc:	f000 f885 	bl	800120a <prvIsQueueEmpty>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	f43f af5b 	beq.w	8000fbe <xQueueSemaphoreTake+0x16>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8001108:	6a3b      	ldr	r3, [r7, #32]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d00d      	beq.n	800112a <xQueueSemaphoreTake+0x182>
					{
						taskENTER_CRITICAL();
 800110e:	f7ff fc1b 	bl	8000948 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001112:	69f8      	ldr	r0, [r7, #28]
 8001114:	f000 f810 	bl	8001138 <prvGetDisinheritPriorityAfterTimeout>
 8001118:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	6979      	ldr	r1, [r7, #20]
 8001120:	4618      	mov	r0, r3
 8001122:	f000 fd93 	bl	8001c4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8001126:	f7ff fc27 	bl	8000978 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800112a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800112c:	4618      	mov	r0, r3
 800112e:	3728      	adds	r7, #40	; 0x28
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	e000ed04 	.word	0xe000ed04

08001138 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001144:	2b00      	cmp	r3, #0
 8001146:	d006      	beq.n	8001156 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f1c3 0305 	rsb	r3, r3, #5
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	e001      	b.n	800115a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800115a:	68fb      	ldr	r3, [r7, #12]
	}
 800115c:	4618      	mov	r0, r3
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr

08001166 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b084      	sub	sp, #16
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800116e:	f7ff fbeb 	bl	8000948 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001178:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800117a:	e011      	b.n	80011a0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	2b00      	cmp	r3, #0
 8001182:	d012      	beq.n	80011aa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3324      	adds	r3, #36	; 0x24
 8001188:	4618      	mov	r0, r3
 800118a:	f000 fb79 	bl	8001880 <xTaskRemoveFromEventList>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001194:	f000 fc24 	bl	80019e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	3b01      	subs	r3, #1
 800119c:	b2db      	uxtb	r3, r3
 800119e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80011a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	dce9      	bgt.n	800117c <prvUnlockQueue+0x16>
 80011a8:	e000      	b.n	80011ac <prvUnlockQueue+0x46>
					break;
 80011aa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	22ff      	movs	r2, #255	; 0xff
 80011b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80011b4:	f7ff fbe0 	bl	8000978 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80011b8:	f7ff fbc6 	bl	8000948 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011c2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80011c4:	e011      	b.n	80011ea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d012      	beq.n	80011f4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3310      	adds	r3, #16
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 fb54 	bl	8001880 <xTaskRemoveFromEventList>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80011de:	f000 fbff 	bl	80019e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80011e2:	7bbb      	ldrb	r3, [r7, #14]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80011ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	dce9      	bgt.n	80011c6 <prvUnlockQueue+0x60>
 80011f2:	e000      	b.n	80011f6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80011f4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	22ff      	movs	r2, #255	; 0xff
 80011fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80011fe:	f7ff fbbb 	bl	8000978 <vPortExitCritical>
}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b084      	sub	sp, #16
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001212:	f7ff fb99 	bl	8000948 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121a:	2b00      	cmp	r3, #0
 800121c:	d102      	bne.n	8001224 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800121e:	2301      	movs	r3, #1
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	e001      	b.n	8001228 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001228:	f7ff fba6 	bl	8000978 <vPortExitCritical>

	return xReturn;
 800122c:	68fb      	ldr	r3, [r7, #12]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001236:	b580      	push	{r7, lr}
 8001238:	b08c      	sub	sp, #48	; 0x30
 800123a:	af04      	add	r7, sp, #16
 800123c:	60f8      	str	r0, [r7, #12]
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	4613      	mov	r3, r2
 8001244:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fc0e 	bl	8000a6c <pvPortMalloc>
 8001250:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00e      	beq.n	8001276 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001258:	2054      	movs	r0, #84	; 0x54
 800125a:	f7ff fc07 	bl	8000a6c <pvPortMalloc>
 800125e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	631a      	str	r2, [r3, #48]	; 0x30
 800126c:	e005      	b.n	800127a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800126e:	6978      	ldr	r0, [r7, #20]
 8001270:	f7ff fc96 	bl	8000ba0 <vPortFree>
 8001274:	e001      	b.n	800127a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d013      	beq.n	80012a8 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001280:	88fa      	ldrh	r2, [r7, #6]
 8001282:	2300      	movs	r3, #0
 8001284:	9303      	str	r3, [sp, #12]
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	9302      	str	r3, [sp, #8]
 800128a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800128c:	9301      	str	r3, [sp, #4]
 800128e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f000 f80e 	bl	80012b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800129c:	69f8      	ldr	r0, [r7, #28]
 800129e:	f000 f88b 	bl	80013b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80012a2:	2301      	movs	r3, #1
 80012a4:	61bb      	str	r3, [r7, #24]
 80012a6:	e002      	b.n	80012ae <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80012a8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80012ae:	69bb      	ldr	r3, [r7, #24]
	}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
 80012c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80012c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	461a      	mov	r2, r3
 80012d0:	21a5      	movs	r1, #165	; 0xa5
 80012d2:	f001 f8a5 	bl	8002420 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80012d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012e0:	3b01      	subs	r3, #1
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	f023 0307 	bic.w	r3, r3, #7
 80012ee:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d01f      	beq.n	8001336 <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	e012      	b.n	8001322 <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	4413      	add	r3, r2
 8001302:	7819      	ldrb	r1, [r3, #0]
 8001304:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	4413      	add	r3, r2
 800130a:	3334      	adds	r3, #52	; 0x34
 800130c:	460a      	mov	r2, r1
 800130e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001310:	68ba      	ldr	r2, [r7, #8]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	4413      	add	r3, r2
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d006      	beq.n	800132a <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	3301      	adds	r3, #1
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d9e9      	bls.n	80012fc <prvInitialiseNewTask+0x44>
 8001328:	e000      	b.n	800132c <prvInitialiseNewTask+0x74>
			{
				break;
 800132a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800132c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001334:	e003      	b.n	800133e <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800133e:	6a3b      	ldr	r3, [r7, #32]
 8001340:	2b04      	cmp	r3, #4
 8001342:	d901      	bls.n	8001348 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001344:	2304      	movs	r3, #4
 8001346:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134a:	6a3a      	ldr	r2, [r7, #32]
 800134c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800134e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001350:	6a3a      	ldr	r2, [r7, #32]
 8001352:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001356:	2200      	movs	r2, #0
 8001358:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800135a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135c:	3304      	adds	r3, #4
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f9d6 	bl	8000710 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001366:	3318      	adds	r3, #24
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f9d1 	bl	8000710 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001372:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001374:	6a3b      	ldr	r3, [r7, #32]
 8001376:	f1c3 0205 	rsb	r2, r3, #5
 800137a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800137e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001386:	2200      	movs	r2, #0
 8001388:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800138a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	68f9      	ldr	r1, [r7, #12]
 8001396:	6938      	ldr	r0, [r7, #16]
 8001398:	f7ff fa4a 	bl	8000830 <pxPortInitialiseStack>
 800139c:	4602      	mov	r2, r0
 800139e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d002      	beq.n	80013ae <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80013c0:	f7ff fac2 	bl	8000948 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80013c4:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <prvAddNewTaskToReadyList+0xb8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	3301      	adds	r3, #1
 80013ca:	4a29      	ldr	r2, [pc, #164]	; (8001470 <prvAddNewTaskToReadyList+0xb8>)
 80013cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80013ce:	4b29      	ldr	r3, [pc, #164]	; (8001474 <prvAddNewTaskToReadyList+0xbc>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d109      	bne.n	80013ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80013d6:	4a27      	ldr	r2, [pc, #156]	; (8001474 <prvAddNewTaskToReadyList+0xbc>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80013dc:	4b24      	ldr	r3, [pc, #144]	; (8001470 <prvAddNewTaskToReadyList+0xb8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d110      	bne.n	8001406 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80013e4:	f000 fb20 	bl	8001a28 <prvInitialiseTaskLists>
 80013e8:	e00d      	b.n	8001406 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80013ea:	4b23      	ldr	r3, [pc, #140]	; (8001478 <prvAddNewTaskToReadyList+0xc0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d109      	bne.n	8001406 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80013f2:	4b20      	ldr	r3, [pc, #128]	; (8001474 <prvAddNewTaskToReadyList+0xbc>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d802      	bhi.n	8001406 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001400:	4a1c      	ldr	r2, [pc, #112]	; (8001474 <prvAddNewTaskToReadyList+0xbc>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001406:	4b1d      	ldr	r3, [pc, #116]	; (800147c <prvAddNewTaskToReadyList+0xc4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	3301      	adds	r3, #1
 800140c:	4a1b      	ldr	r2, [pc, #108]	; (800147c <prvAddNewTaskToReadyList+0xc4>)
 800140e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001414:	2201      	movs	r2, #1
 8001416:	409a      	lsls	r2, r3
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <prvAddNewTaskToReadyList+0xc8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4313      	orrs	r3, r2
 800141e:	4a18      	ldr	r2, [pc, #96]	; (8001480 <prvAddNewTaskToReadyList+0xc8>)
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4a15      	ldr	r2, [pc, #84]	; (8001484 <prvAddNewTaskToReadyList+0xcc>)
 8001430:	441a      	add	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3304      	adds	r3, #4
 8001436:	4619      	mov	r1, r3
 8001438:	4610      	mov	r0, r2
 800143a:	f7ff f975 	bl	8000728 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800143e:	f7ff fa9b 	bl	8000978 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <prvAddNewTaskToReadyList+0xc0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00e      	beq.n	8001468 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <prvAddNewTaskToReadyList+0xbc>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001454:	429a      	cmp	r2, r3
 8001456:	d207      	bcs.n	8001468 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <prvAddNewTaskToReadyList+0xd0>)
 800145a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	f3bf 8f4f 	dsb	sy
 8001464:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	2000392c 	.word	0x2000392c
 8001474:	20003854 	.word	0x20003854
 8001478:	20003938 	.word	0x20003938
 800147c:	20003948 	.word	0x20003948
 8001480:	20003934 	.word	0x20003934
 8001484:	20003858 	.word	0x20003858
 8001488:	e000ed04 	.word	0xe000ed04

0800148c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d008      	beq.n	80014b0 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 800149e:	f000 f84f 	bl	8001540 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80014a2:	2100      	movs	r1, #0
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 fc53 	bl	8001d50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80014aa:	f000 f857 	bl	800155c <xTaskResumeAll>
 80014ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d107      	bne.n	80014c6 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <vTaskDelay+0x44>)
 80014b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	f3bf 8f4f 	dsb	sy
 80014c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	e000ed04 	.word	0xe000ed04

080014d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <vTaskStartScheduler+0x54>)
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	2300      	movs	r3, #0
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2300      	movs	r3, #0
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	4911      	ldr	r1, [pc, #68]	; (800152c <vTaskStartScheduler+0x58>)
 80014e8:	4811      	ldr	r0, [pc, #68]	; (8001530 <vTaskStartScheduler+0x5c>)
 80014ea:	f7ff fea4 	bl	8001236 <xTaskCreate>
 80014ee:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d114      	bne.n	8001520 <vTaskStartScheduler+0x4c>
	__asm volatile
 80014f6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80014fa:	f383 8811 	msr	BASEPRI, r3
 80014fe:	f3bf 8f6f 	isb	sy
 8001502:	f3bf 8f4f 	dsb	sy
 8001506:	603b      	str	r3, [r7, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <vTaskStartScheduler+0x60>)
 800150a:	f04f 32ff 	mov.w	r2, #4294967295
 800150e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <vTaskStartScheduler+0x64>)
 8001512:	2201      	movs	r2, #1
 8001514:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <vTaskStartScheduler+0x68>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800151c:	f7ff f9f4 	bl	8000908 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20003950 	.word	0x20003950
 800152c:	08002448 	.word	0x08002448
 8001530:	080019f9 	.word	0x080019f9
 8001534:	2000394c 	.word	0x2000394c
 8001538:	20003938 	.word	0x20003938
 800153c:	20003930 	.word	0x20003930

08001540 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001544:	4b04      	ldr	r3, [pc, #16]	; (8001558 <vTaskSuspendAll+0x18>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	3301      	adds	r3, #1
 800154a:	4a03      	ldr	r2, [pc, #12]	; (8001558 <vTaskSuspendAll+0x18>)
 800154c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20003954 	.word	0x20003954

0800155c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800156a:	f7ff f9ed 	bl	8000948 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800156e:	4b39      	ldr	r3, [pc, #228]	; (8001654 <xTaskResumeAll+0xf8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	3b01      	subs	r3, #1
 8001574:	4a37      	ldr	r2, [pc, #220]	; (8001654 <xTaskResumeAll+0xf8>)
 8001576:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001578:	4b36      	ldr	r3, [pc, #216]	; (8001654 <xTaskResumeAll+0xf8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d161      	bne.n	8001644 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001580:	4b35      	ldr	r3, [pc, #212]	; (8001658 <xTaskResumeAll+0xfc>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d05d      	beq.n	8001644 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001588:	e02e      	b.n	80015e8 <xTaskResumeAll+0x8c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800158a:	4b34      	ldr	r3, [pc, #208]	; (800165c <xTaskResumeAll+0x100>)
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3318      	adds	r3, #24
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff f921 	bl	80007de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	3304      	adds	r3, #4
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff f91c 	bl	80007de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015aa:	2201      	movs	r2, #1
 80015ac:	409a      	lsls	r2, r3
 80015ae:	4b2c      	ldr	r3, [pc, #176]	; (8001660 <xTaskResumeAll+0x104>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	4a2a      	ldr	r2, [pc, #168]	; (8001660 <xTaskResumeAll+0x104>)
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4a27      	ldr	r2, [pc, #156]	; (8001664 <xTaskResumeAll+0x108>)
 80015c6:	441a      	add	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	3304      	adds	r3, #4
 80015cc:	4619      	mov	r1, r3
 80015ce:	4610      	mov	r0, r2
 80015d0:	f7ff f8aa 	bl	8000728 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d8:	4b23      	ldr	r3, [pc, #140]	; (8001668 <xTaskResumeAll+0x10c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015de:	429a      	cmp	r2, r3
 80015e0:	d302      	bcc.n	80015e8 <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
 80015e2:	4b22      	ldr	r3, [pc, #136]	; (800166c <xTaskResumeAll+0x110>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <xTaskResumeAll+0x100>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1cc      	bne.n	800158a <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80015f6:	f000 fa93 	bl	8001b20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80015fa:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <xTaskResumeAll+0x114>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d010      	beq.n	8001628 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001606:	f000 f837 	bl	8001678 <xTaskIncrementTick>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d002      	beq.n	8001616 <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
 8001610:	4b16      	ldr	r3, [pc, #88]	; (800166c <xTaskResumeAll+0x110>)
 8001612:	2201      	movs	r2, #1
 8001614:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3b01      	subs	r3, #1
 800161a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f1      	bne.n	8001606 <xTaskResumeAll+0xaa>

						xPendedTicks = 0;
 8001622:	4b13      	ldr	r3, [pc, #76]	; (8001670 <xTaskResumeAll+0x114>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001628:	4b10      	ldr	r3, [pc, #64]	; (800166c <xTaskResumeAll+0x110>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d009      	beq.n	8001644 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001630:	2301      	movs	r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <xTaskResumeAll+0x118>)
 8001636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	f3bf 8f4f 	dsb	sy
 8001640:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001644:	f7ff f998 	bl	8000978 <vPortExitCritical>

	return xAlreadyYielded;
 8001648:	68bb      	ldr	r3, [r7, #8]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20003954 	.word	0x20003954
 8001658:	2000392c 	.word	0x2000392c
 800165c:	200038ec 	.word	0x200038ec
 8001660:	20003934 	.word	0x20003934
 8001664:	20003858 	.word	0x20003858
 8001668:	20003854 	.word	0x20003854
 800166c:	20003940 	.word	0x20003940
 8001670:	2000393c 	.word	0x2000393c
 8001674:	e000ed04 	.word	0xe000ed04

08001678 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001682:	4b46      	ldr	r3, [pc, #280]	; (800179c <xTaskIncrementTick+0x124>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d17d      	bne.n	8001786 <xTaskIncrementTick+0x10e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800168a:	4b45      	ldr	r3, [pc, #276]	; (80017a0 <xTaskIncrementTick+0x128>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	3301      	adds	r3, #1
 8001690:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001692:	4a43      	ldr	r2, [pc, #268]	; (80017a0 <xTaskIncrementTick+0x128>)
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d110      	bne.n	80016c0 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 800169e:	4b41      	ldr	r3, [pc, #260]	; (80017a4 <xTaskIncrementTick+0x12c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	4b40      	ldr	r3, [pc, #256]	; (80017a8 <xTaskIncrementTick+0x130>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a3e      	ldr	r2, [pc, #248]	; (80017a4 <xTaskIncrementTick+0x12c>)
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4a3e      	ldr	r2, [pc, #248]	; (80017a8 <xTaskIncrementTick+0x130>)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	4b3e      	ldr	r3, [pc, #248]	; (80017ac <xTaskIncrementTick+0x134>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	3301      	adds	r3, #1
 80016b8:	4a3c      	ldr	r2, [pc, #240]	; (80017ac <xTaskIncrementTick+0x134>)
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	f000 fa30 	bl	8001b20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80016c0:	4b3b      	ldr	r3, [pc, #236]	; (80017b0 <xTaskIncrementTick+0x138>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d348      	bcc.n	800175c <xTaskIncrementTick+0xe4>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016ca:	4b36      	ldr	r3, [pc, #216]	; (80017a4 <xTaskIncrementTick+0x12c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d104      	bne.n	80016de <xTaskIncrementTick+0x66>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016d4:	4b36      	ldr	r3, [pc, #216]	; (80017b0 <xTaskIncrementTick+0x138>)
 80016d6:	f04f 32ff 	mov.w	r2, #4294967295
 80016da:	601a      	str	r2, [r3, #0]
					break;
 80016dc:	e03e      	b.n	800175c <xTaskIncrementTick+0xe4>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016de:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <xTaskIncrementTick+0x12c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d203      	bcs.n	80016fe <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80016f6:	4a2e      	ldr	r2, [pc, #184]	; (80017b0 <xTaskIncrementTick+0x138>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80016fc:	e02e      	b.n	800175c <xTaskIncrementTick+0xe4>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	3304      	adds	r3, #4
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff f86b 	bl	80007de <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	2b00      	cmp	r3, #0
 800170e:	d004      	beq.n	800171a <xTaskIncrementTick+0xa2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	3318      	adds	r3, #24
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff f862 	bl	80007de <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171e:	2201      	movs	r2, #1
 8001720:	409a      	lsls	r2, r3
 8001722:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <xTaskIncrementTick+0x13c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4313      	orrs	r3, r2
 8001728:	4a22      	ldr	r2, [pc, #136]	; (80017b4 <xTaskIncrementTick+0x13c>)
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4a1f      	ldr	r2, [pc, #124]	; (80017b8 <xTaskIncrementTick+0x140>)
 800173a:	441a      	add	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	3304      	adds	r3, #4
 8001740:	4619      	mov	r1, r3
 8001742:	4610      	mov	r0, r2
 8001744:	f7fe fff0 	bl	8000728 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <xTaskIncrementTick+0x144>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001752:	429a      	cmp	r2, r3
 8001754:	d3b9      	bcc.n	80016ca <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 8001756:	2301      	movs	r3, #1
 8001758:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800175a:	e7b6      	b.n	80016ca <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800175c:	4b17      	ldr	r3, [pc, #92]	; (80017bc <xTaskIncrementTick+0x144>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001762:	4915      	ldr	r1, [pc, #84]	; (80017b8 <xTaskIncrementTick+0x140>)
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d901      	bls.n	8001778 <xTaskIncrementTick+0x100>
			{
				xSwitchRequired = pdTRUE;
 8001774:	2301      	movs	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <xTaskIncrementTick+0x148>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d007      	beq.n	8001790 <xTaskIncrementTick+0x118>
			{
				xSwitchRequired = pdTRUE;
 8001780:	2301      	movs	r3, #1
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	e004      	b.n	8001790 <xTaskIncrementTick+0x118>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <xTaskIncrementTick+0x14c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	3301      	adds	r3, #1
 800178c:	4a0d      	ldr	r2, [pc, #52]	; (80017c4 <xTaskIncrementTick+0x14c>)
 800178e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001790:	697b      	ldr	r3, [r7, #20]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20003954 	.word	0x20003954
 80017a0:	20003930 	.word	0x20003930
 80017a4:	200038e4 	.word	0x200038e4
 80017a8:	200038e8 	.word	0x200038e8
 80017ac:	20003944 	.word	0x20003944
 80017b0:	2000394c 	.word	0x2000394c
 80017b4:	20003934 	.word	0x20003934
 80017b8:	20003858 	.word	0x20003858
 80017bc:	20003854 	.word	0x20003854
 80017c0:	20003940 	.word	0x20003940
 80017c4:	2000393c 	.word	0x2000393c

080017c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80017ce:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <vTaskSwitchContext+0x78>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80017d6:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <vTaskSwitchContext+0x7c>)
 80017d8:	2201      	movs	r2, #1
 80017da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80017dc:	e02a      	b.n	8001834 <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 80017de:	4b19      	ldr	r3, [pc, #100]	; (8001844 <vTaskSwitchContext+0x7c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017e4:	4b18      	ldr	r3, [pc, #96]	; (8001848 <vTaskSwitchContext+0x80>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	fab3 f383 	clz	r3, r3
 80017f0:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	f1c3 031f 	rsb	r3, r3, #31
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4a11      	ldr	r2, [pc, #68]	; (800184c <vTaskSwitchContext+0x84>)
 8001806:	4413      	add	r3, r2
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	3308      	adds	r3, #8
 800181c:	429a      	cmp	r2, r3
 800181e:	d104      	bne.n	800182a <vTaskSwitchContext+0x62>
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	4a07      	ldr	r2, [pc, #28]	; (8001850 <vTaskSwitchContext+0x88>)
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20003954 	.word	0x20003954
 8001844:	20003940 	.word	0x20003940
 8001848:	20003934 	.word	0x20003934
 800184c:	20003858 	.word	0x20003858
 8001850:	20003854 	.word	0x20003854

08001854 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <vTaskPlaceOnEventList+0x28>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	3318      	adds	r3, #24
 8001864:	4619      	mov	r1, r3
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7fe ff81 	bl	800076e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800186c:	2101      	movs	r1, #1
 800186e:	6838      	ldr	r0, [r7, #0]
 8001870:	f000 fa6e 	bl	8001d50 <prvAddCurrentTaskToDelayedList>
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20003854 	.word	0x20003854

08001880 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	3318      	adds	r3, #24
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe ffa2 	bl	80007de <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800189a:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <xTaskRemoveFromEventList+0x90>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d11c      	bne.n	80018dc <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	3304      	adds	r3, #4
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe ff99 	bl	80007de <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	2201      	movs	r2, #1
 80018b2:	409a      	lsls	r2, r3
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <xTaskRemoveFromEventList+0x94>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	4a16      	ldr	r2, [pc, #88]	; (8001914 <xTaskRemoveFromEventList+0x94>)
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4a13      	ldr	r2, [pc, #76]	; (8001918 <xTaskRemoveFromEventList+0x98>)
 80018cc:	441a      	add	r2, r3
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	3304      	adds	r3, #4
 80018d2:	4619      	mov	r1, r3
 80018d4:	4610      	mov	r0, r2
 80018d6:	f7fe ff27 	bl	8000728 <vListInsertEnd>
 80018da:	e005      	b.n	80018e8 <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	3318      	adds	r3, #24
 80018e0:	4619      	mov	r1, r3
 80018e2:	480e      	ldr	r0, [pc, #56]	; (800191c <xTaskRemoveFromEventList+0x9c>)
 80018e4:	f7fe ff20 	bl	8000728 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <xTaskRemoveFromEventList+0xa0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d905      	bls.n	8001902 <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80018f6:	2301      	movs	r3, #1
 80018f8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <xTaskRemoveFromEventList+0xa4>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	e001      	b.n	8001906 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20003954 	.word	0x20003954
 8001914:	20003934 	.word	0x20003934
 8001918:	20003858 	.word	0x20003858
 800191c:	200038ec 	.word	0x200038ec
 8001920:	20003854 	.word	0x20003854
 8001924:	20003940 	.word	0x20003940

08001928 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <vTaskInternalSetTimeOutState+0x24>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <vTaskInternalSetTimeOutState+0x28>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	605a      	str	r2, [r3, #4]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20003944 	.word	0x20003944
 8001950:	20003930 	.word	0x20003930

08001954 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 800195e:	f7fe fff3 	bl	8000948 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001962:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <xTaskCheckForTimeOut+0x84>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800197a:	d102      	bne.n	8001982 <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	e023      	b.n	80019ca <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <xTaskCheckForTimeOut+0x88>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d007      	beq.n	800199e <xTaskCheckForTimeOut+0x4a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	429a      	cmp	r2, r3
 8001996:	d802      	bhi.n	800199e <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001998:	2301      	movs	r3, #1
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	e015      	b.n	80019ca <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d90b      	bls.n	80019c0 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	1ad2      	subs	r2, r2, r3
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ffb7 	bl	8001928 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	e004      	b.n	80019ca <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80019c6:	2301      	movs	r3, #1
 80019c8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80019ca:	f7fe ffd5 	bl	8000978 <vPortExitCritical>

	return xReturn;
 80019ce:	697b      	ldr	r3, [r7, #20]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20003930 	.word	0x20003930
 80019dc:	20003944 	.word	0x20003944

080019e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <vTaskMissedYield+0x14>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	601a      	str	r2, [r3, #0]
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20003940 	.word	0x20003940

080019f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001a00:	f000 f852 	bl	8001aa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <prvIdleTask+0x28>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d9f9      	bls.n	8001a00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <prvIdleTask+0x2c>)
 8001a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	f3bf 8f4f 	dsb	sy
 8001a18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001a1c:	e7f0      	b.n	8001a00 <prvIdleTask+0x8>
 8001a1e:	bf00      	nop
 8001a20:	20003858 	.word	0x20003858
 8001a24:	e000ed04 	.word	0xe000ed04

08001a28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	e00c      	b.n	8001a4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <prvInitialiseTaskLists+0x60>)
 8001a40:	4413      	add	r3, r2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fe45 	bl	80006d2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d9ef      	bls.n	8001a34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001a54:	480d      	ldr	r0, [pc, #52]	; (8001a8c <prvInitialiseTaskLists+0x64>)
 8001a56:	f7fe fe3c 	bl	80006d2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001a5a:	480d      	ldr	r0, [pc, #52]	; (8001a90 <prvInitialiseTaskLists+0x68>)
 8001a5c:	f7fe fe39 	bl	80006d2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001a60:	480c      	ldr	r0, [pc, #48]	; (8001a94 <prvInitialiseTaskLists+0x6c>)
 8001a62:	f7fe fe36 	bl	80006d2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001a66:	480c      	ldr	r0, [pc, #48]	; (8001a98 <prvInitialiseTaskLists+0x70>)
 8001a68:	f7fe fe33 	bl	80006d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001a6c:	480b      	ldr	r0, [pc, #44]	; (8001a9c <prvInitialiseTaskLists+0x74>)
 8001a6e:	f7fe fe30 	bl	80006d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <prvInitialiseTaskLists+0x78>)
 8001a74:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <prvInitialiseTaskLists+0x64>)
 8001a76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <prvInitialiseTaskLists+0x7c>)
 8001a7a:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <prvInitialiseTaskLists+0x68>)
 8001a7c:	601a      	str	r2, [r3, #0]
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20003858 	.word	0x20003858
 8001a8c:	200038bc 	.word	0x200038bc
 8001a90:	200038d0 	.word	0x200038d0
 8001a94:	200038ec 	.word	0x200038ec
 8001a98:	20003900 	.word	0x20003900
 8001a9c:	20003918 	.word	0x20003918
 8001aa0:	200038e4 	.word	0x200038e4
 8001aa4:	200038e8 	.word	0x200038e8

08001aa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001aae:	e019      	b.n	8001ae4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001ab0:	f7fe ff4a 	bl	8000948 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <prvCheckTasksWaitingTermination+0x4c>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3304      	adds	r3, #4
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fe8c 	bl	80007de <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <prvCheckTasksWaitingTermination+0x50>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <prvCheckTasksWaitingTermination+0x50>)
 8001ace:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <prvCheckTasksWaitingTermination+0x54>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	4a09      	ldr	r2, [pc, #36]	; (8001afc <prvCheckTasksWaitingTermination+0x54>)
 8001ad8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001ada:	f7fe ff4d 	bl	8000978 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f80e 	bl	8001b00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <prvCheckTasksWaitingTermination+0x54>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1e1      	bne.n	8001ab0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20003900 	.word	0x20003900
 8001af8:	2000392c 	.word	0x2000392c
 8001afc:	20003914 	.word	0x20003914

08001b00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff f847 	bl	8000ba0 <vPortFree>
			vPortFree( pxTCB );
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff f844 	bl	8000ba0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b26:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <prvResetNextTaskUnblockTime+0x38>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d104      	bne.n	8001b3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001b30:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <prvResetNextTaskUnblockTime+0x3c>)
 8001b32:	f04f 32ff 	mov.w	r2, #4294967295
 8001b36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001b38:	e008      	b.n	8001b4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b3a:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <prvResetNextTaskUnblockTime+0x38>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <prvResetNextTaskUnblockTime+0x3c>)
 8001b4a:	6013      	str	r3, [r2, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	200038e4 	.word	0x200038e4
 8001b5c:	2000394c 	.word	0x2000394c

08001b60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d05e      	beq.n	8001c34 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b7a:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <xTaskPriorityInherit+0xe0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d24e      	bcs.n	8001c22 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	db06      	blt.n	8001b9a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b8c:	4b2c      	ldr	r3, [pc, #176]	; (8001c40 <xTaskPriorityInherit+0xe0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b92:	f1c3 0205 	rsb	r2, r3, #5
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	6959      	ldr	r1, [r3, #20]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4a26      	ldr	r2, [pc, #152]	; (8001c44 <xTaskPriorityInherit+0xe4>)
 8001bac:	4413      	add	r3, r2
 8001bae:	4299      	cmp	r1, r3
 8001bb0:	d12f      	bne.n	8001c12 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fe11 	bl	80007de <uxListRemove>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10a      	bne.n	8001bd8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43da      	mvns	r2, r3
 8001bce:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <xTaskPriorityInherit+0xe8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	4a1c      	ldr	r2, [pc, #112]	; (8001c48 <xTaskPriorityInherit+0xe8>)
 8001bd6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <xTaskPriorityInherit+0xe0>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvReaddTaskToReadyList( pxMutexHolderTCB );
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be6:	2201      	movs	r2, #1
 8001be8:	409a      	lsls	r2, r3
 8001bea:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <xTaskPriorityInherit+0xe8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	4a15      	ldr	r2, [pc, #84]	; (8001c48 <xTaskPriorityInherit+0xe8>)
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4a10      	ldr	r2, [pc, #64]	; (8001c44 <xTaskPriorityInherit+0xe4>)
 8001c02:	441a      	add	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	3304      	adds	r3, #4
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	f7fe fd8c 	bl	8000728 <vListInsertEnd>
 8001c10:	e004      	b.n	8001c1c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <xTaskPriorityInherit+0xe0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	e008      	b.n	8001c34 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <xTaskPriorityInherit+0xe0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d201      	bcs.n	8001c34 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8001c30:	2301      	movs	r3, #1
 8001c32:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001c34:	68fb      	ldr	r3, [r7, #12]
	}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20003854 	.word	0x20003854
 8001c44:	20003858 	.word	0x20003858
 8001c48:	20003934 	.word	0x20003934

08001c4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d058      	beq.n	8001d16 <vTaskPriorityDisinheritAfterTimeout+0xca>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d202      	bcs.n	8001c74 <vTaskPriorityDisinheritAfterTimeout+0x28>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	e002      	b.n	8001c7a <vTaskPriorityDisinheritAfterTimeout+0x2e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c78:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d048      	beq.n	8001d16 <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d143      	bne.n	8001d16 <vTaskPriorityDisinheritAfterTimeout+0xca>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c92:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	db04      	blt.n	8001cac <vTaskPriorityDisinheritAfterTimeout+0x60>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f1c3 0205 	rsb	r2, r3, #5
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	6959      	ldr	r1, [r3, #20]
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4a19      	ldr	r2, [pc, #100]	; (8001d20 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8001cbc:	4413      	add	r3, r2
 8001cbe:	4299      	cmp	r1, r3
 8001cc0:	d129      	bne.n	8001d16 <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fd89 	bl	80007de <uxListRemove>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10a      	bne.n	8001ce8 <vTaskPriorityDisinheritAfterTimeout+0x9c>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43da      	mvns	r2, r3
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	4a0f      	ldr	r2, [pc, #60]	; (8001d24 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8001ce6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	2201      	movs	r2, #1
 8001cee:	409a      	lsls	r2, r3
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4a06      	ldr	r2, [pc, #24]	; (8001d20 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8001d08:	441a      	add	r2, r3
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4610      	mov	r0, r2
 8001d12:	f7fe fd09 	bl	8000728 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001d16:	bf00      	nop
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20003858 	.word	0x20003858
 8001d24:	20003934 	.word	0x20003934

08001d28 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8001d2c:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <pvTaskIncrementMutexHeldCount+0x24>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d004      	beq.n	8001d3e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <pvTaskIncrementMutexHeldCount+0x24>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d3a:	3201      	adds	r2, #1
 8001d3c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8001d3e:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <pvTaskIncrementMutexHeldCount+0x24>)
 8001d40:	681b      	ldr	r3, [r3, #0]
	}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	20003854 	.word	0x20003854

08001d50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001d5a:	4b29      	ldr	r3, [pc, #164]	; (8001e00 <prvAddCurrentTaskToDelayedList+0xb0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d60:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	3304      	adds	r3, #4
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fd39 	bl	80007de <uxListRemove>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10b      	bne.n	8001d8a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001d72:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d78:	2201      	movs	r2, #1
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	4b21      	ldr	r3, [pc, #132]	; (8001e08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4013      	ands	r3, r2
 8001d86:	4a20      	ldr	r2, [pc, #128]	; (8001e08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001d88:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d90:	d10a      	bne.n	8001da8 <prvAddCurrentTaskToDelayedList+0x58>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d007      	beq.n	8001da8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001d98:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	4619      	mov	r1, r3
 8001da0:	481a      	ldr	r0, [pc, #104]	; (8001e0c <prvAddCurrentTaskToDelayedList+0xbc>)
 8001da2:	f7fe fcc1 	bl	8000728 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001da6:	e026      	b.n	8001df6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001db0:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d209      	bcs.n	8001dd4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <prvAddCurrentTaskToDelayedList+0xc0>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4610      	mov	r0, r2
 8001dce:	f7fe fcce 	bl	800076e <vListInsert>
}
 8001dd2:	e010      	b.n	8001df6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <prvAddCurrentTaskToDelayedList+0xc4>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	4619      	mov	r1, r3
 8001de0:	4610      	mov	r0, r2
 8001de2:	f7fe fcc4 	bl	800076e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001de6:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d202      	bcs.n	8001df6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8001df0:	4a09      	ldr	r2, [pc, #36]	; (8001e18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	6013      	str	r3, [r2, #0]
}
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20003930 	.word	0x20003930
 8001e04:	20003854 	.word	0x20003854
 8001e08:	20003934 	.word	0x20003934
 8001e0c:	20003918 	.word	0x20003918
 8001e10:	200038e8 	.word	0x200038e8
 8001e14:	200038e4 	.word	0x200038e4
 8001e18:	2000394c 	.word	0x2000394c

08001e1c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8001e26:	4908      	ldr	r1, [pc, #32]	; (8001e48 <NVIC_EnableIRQ+0x2c>)
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	095b      	lsrs	r3, r3, #5
 8001e2e:	79fa      	ldrb	r2, [r7, #7]
 8001e30:	f002 021f 	and.w	r2, r2, #31
 8001e34:	2001      	movs	r0, #1
 8001e36:	fa00 f202 	lsl.w	r2, r0, r2
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	e000e100 	.word	0xe000e100

08001e4c <NVIC_SetPendingIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the interrupt for set pending
 */
static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 8001e56:	4909      	ldr	r1, [pc, #36]	; (8001e7c <NVIC_SetPendingIRQ+0x30>)
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	095b      	lsrs	r3, r3, #5
 8001e5e:	79fa      	ldrb	r2, [r7, #7]
 8001e60:	f002 021f 	and.w	r2, r2, #31
 8001e64:	2001      	movs	r0, #1
 8001e66:	fa00 f202 	lsl.w	r2, r0, r2
 8001e6a:	3340      	adds	r3, #64	; 0x40
 8001e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	e000e100 	.word	0xe000e100

08001e80 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	6039      	str	r1, [r7, #0]
 8001e8a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	da0b      	bge.n	8001eac <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001e94:	490d      	ldr	r1, [pc, #52]	; (8001ecc <NVIC_SetPriority+0x4c>)
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	f003 030f 	and.w	r3, r3, #15
 8001e9c:	3b04      	subs	r3, #4
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	0112      	lsls	r2, r2, #4
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001eaa:	e009      	b.n	8001ec0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001eac:	4908      	ldr	r1, [pc, #32]	; (8001ed0 <NVIC_SetPriority+0x50>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	0112      	lsls	r2, r2, #4
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	440b      	add	r3, r1
 8001ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000ed00 	.word	0xe000ed00
 8001ed0:	e000e100 	.word	0xe000e100

08001ed4 <main>:
/* this is the queue which manager uses to put the work ticket id */
xQueueHandle xWorkQueue;

/*****************************Main Function****************************/
int main(void)
{
 8001ed4:	b5b0      	push	{r4, r5, r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af02      	add	r7, sp, #8
	// Initializations
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8001eda:	f44f 7040 	mov.w	r0, #768	; 0x300
 8001ede:	f7fe f93f 	bl	8000160 <NVIC_PriorityGroupConfig>
	prvSetupHardware();
 8001ee2:	f000 f89f 	bl	8002024 <prvSetupHardware>


	printmsg("\r\nThis is Counting Semaphore Project\r\n");
 8001ee6:	481e      	ldr	r0, [pc, #120]	; (8001f60 <main+0x8c>)
 8001ee8:	f000 f8a4 	bl	8002034 <printmsg>

    /* Before a semaphore is used it must be explicitly created.
     * In this example a counting semaphore is created.
     * The semaphore is created to have a maximum count value of 10,
     * and an initial count value of 0. */
    xCountingSemaphore = xSemaphoreCreateCounting( 10, 0 );
 8001eec:	2100      	movs	r1, #0
 8001eee:	200a      	movs	r0, #10
 8001ef0:	f7fe fff1 	bl	8000ed6 <xQueueCreateCountingSemaphore>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <main+0x90>)
 8001ef8:	601a      	str	r2, [r3, #0]


    /* Check the semaphore and queue was created successfully. */
    if( (xCountingSemaphore != NULL) )
 8001efa:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <main+0x90>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d01a      	beq.n	8001f38 <main+0x64>
    {

    	/* Enable the button interrupt and set its priority. */
    	prvSetupSoftwareInterrupt();
 8001f02:	f000 f92f 	bl	8002164 <prvSetupSoftwareInterrupt>
		/* Create the 'handler' task.
		 * This is the task that will be synchronized with the interrupt.
		 * The handler task is created with a high priority
		 * to ensure it runs immediately after the interrupt exits.
		 * In this case a priority of 3 is chosen. */
		xTaskCreate( vHandlerTask, "Handler", 300, NULL, 3, NULL );
 8001f06:	2300      	movs	r3, #0
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f14:	4914      	ldr	r1, [pc, #80]	; (8001f68 <main+0x94>)
 8001f16:	4815      	ldr	r0, [pc, #84]	; (8001f6c <main+0x98>)
 8001f18:	f7ff f98d 	bl	8001236 <xTaskCreate>

		/* Create the task that will periodically generate a software interrupt.
		 * This is created with a priority below the handler task
		 * to ensure it will get preempted each time the handler task exist the Blocked state.
		 */
		xTaskCreate( vPeriodicTask, "Periodic", 300, NULL, 1, NULL );
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	9301      	str	r3, [sp, #4]
 8001f20:	2301      	movs	r3, #1
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	2300      	movs	r3, #0
 8001f26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f2a:	4911      	ldr	r1, [pc, #68]	; (8001f70 <main+0x9c>)
 8001f2c:	4811      	ldr	r0, [pc, #68]	; (8001f74 <main+0xa0>)
 8001f2e:	f7ff f982 	bl	8001236 <xTaskCreate>

        /* Start the scheduler so the created tasks start executing. */
        vTaskStartScheduler();
 8001f32:	f7ff facf 	bl	80014d4 <vTaskStartScheduler>
 8001f36:	e011      	b.n	8001f5c <main+0x88>
    }
	else
	{
	    sprintf(usr_msg,"Semaphore Count project create failed.. \r\n");
 8001f38:	4a0f      	ldr	r2, [pc, #60]	; (8001f78 <main+0xa4>)
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <main+0xa8>)
 8001f3c:	4614      	mov	r4, r2
 8001f3e:	461d      	mov	r5, r3
 8001f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f4c:	c403      	stmia	r4!, {r0, r1}
 8001f4e:	8022      	strh	r2, [r4, #0]
 8001f50:	3402      	adds	r4, #2
 8001f52:	0c13      	lsrs	r3, r2, #16
 8001f54:	7023      	strb	r3, [r4, #0]
	    printmsg(usr_msg);
 8001f56:	4808      	ldr	r0, [pc, #32]	; (8001f78 <main+0xa4>)
 8001f58:	f000 f86c 	bl	8002034 <printmsg>
	}
    /* If all is well we will never reach here as the scheduler will now be
    running the tasks.  If we do reach here then it is likely that there was
    insufficient heap memory available for a resource to be created. */

	while(1);
 8001f5c:	e7fe      	b.n	8001f5c <main+0x88>
 8001f5e:	bf00      	nop
 8001f60:	08002450 	.word	0x08002450
 8001f64:	20003a20 	.word	0x20003a20
 8001f68:	08002478 	.word	0x08002478
 8001f6c:	08001f81 	.word	0x08001f81
 8001f70:	08002480 	.word	0x08002480
 8001f74:	08001fc9 	.word	0x08001fc9
 8001f78:	20003958 	.word	0x20003958
 8001f7c:	0800248c 	.word	0x0800248c

08001f80 <vHandlerTask>:
}


/***************************** Task Handler Definition****************************/
static void vHandlerTask( void *pvParameters )
{
 8001f80:	b5b0      	push	{r4, r5, r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
		 * so before this task ran for the first time.
		 * The task blocks indefinitely meaning this function call ,
		 *  will only return once the semaphore has been successfully obtained -
		 *  so there is no need to check the returned value.
		 */
		xSemaphoreTake( xCountingSemaphore, portMAX_DELAY );
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <vHandlerTask+0x3c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff f809 	bl	8000fa8 <xQueueSemaphoreTake>

		/* To get here the event must have occurred.
		 * Process the event (in this case we just print out a message).
		 */
		sprintf(usr_msg, "Handler task - Processing event.\r\n");
 8001f96:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <vHandlerTask+0x40>)
 8001f98:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <vHandlerTask+0x44>)
 8001f9a:	4614      	mov	r4, r2
 8001f9c:	461d      	mov	r5, r3
 8001f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fa6:	682b      	ldr	r3, [r5, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	8022      	strh	r2, [r4, #0]
 8001fac:	3402      	adds	r4, #2
 8001fae:	0c1b      	lsrs	r3, r3, #16
 8001fb0:	7023      	strb	r3, [r4, #0]
		printmsg(usr_msg);
 8001fb2:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <vHandlerTask+0x40>)
 8001fb4:	f000 f83e 	bl	8002034 <printmsg>
		xSemaphoreTake( xCountingSemaphore, portMAX_DELAY );
 8001fb8:	e7e6      	b.n	8001f88 <vHandlerTask+0x8>
 8001fba:	bf00      	nop
 8001fbc:	20003a20 	.word	0x20003a20
 8001fc0:	20003958 	.word	0x20003958
 8001fc4:	080024b8 	.word	0x080024b8

08001fc8 <vPeriodicTask>:
	}
}

static void vPeriodicTask( void *pvParameters )
{
 8001fc8:	b5b0      	push	{r4, r5, r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	/* As per most tasks, this task is implemented within an infinite loop. */
	while(1)
	{
		/* This task is just used to 'simulate' an interrupt.  This is done by
		periodically generating a software interrupt. */
		vTaskDelay( pdMS_TO_TICKS(500) );
 8001fd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fd4:	f7ff fa5a 	bl	800148c <vTaskDelay>

		/* Generate the interrupt, printing a message both before hand and
		afterwards so the sequence of execution is evident from the output. */
        sprintf(usr_msg, "Periodic task - Pending the interrupt.\r\n" );
 8001fd8:	4a0f      	ldr	r2, [pc, #60]	; (8002018 <vPeriodicTask+0x50>)
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <vPeriodicTask+0x54>)
 8001fdc:	4614      	mov	r4, r2
 8001fde:	461d      	mov	r5, r3
 8001fe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fe8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fec:	c403      	stmia	r4!, {r0, r1}
 8001fee:	7022      	strb	r2, [r4, #0]
    	printmsg(usr_msg);
 8001ff0:	4809      	ldr	r0, [pc, #36]	; (8002018 <vPeriodicTask+0x50>)
 8001ff2:	f000 f81f 	bl	8002034 <printmsg>

        //pend the interrupt
        NVIC_SetPendingIRQ(EXTI9_5_IRQn);
 8001ff6:	2017      	movs	r0, #23
 8001ff8:	f7ff ff28 	bl	8001e4c <NVIC_SetPendingIRQ>

        sprintf(usr_msg, "Periodic task - Resuming.\r\n" );
 8001ffc:	4a06      	ldr	r2, [pc, #24]	; (8002018 <vPeriodicTask+0x50>)
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <vPeriodicTask+0x58>)
 8002000:	4614      	mov	r4, r2
 8002002:	461d      	mov	r5, r3
 8002004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002008:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800200c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        printmsg(usr_msg);
 8002010:	4801      	ldr	r0, [pc, #4]	; (8002018 <vPeriodicTask+0x50>)
 8002012:	f000 f80f 	bl	8002034 <printmsg>
		vTaskDelay( pdMS_TO_TICKS(500) );
 8002016:	e7db      	b.n	8001fd0 <vPeriodicTask+0x8>
 8002018:	20003958 	.word	0x20003958
 800201c:	080024dc 	.word	0x080024dc
 8002020:	08002508 	.word	0x08002508

08002024 <prvSetupHardware>:
	}
}
/*****************************FUNCTION Definition****************************/

static void prvSetupHardware(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
	//Setup GPIO
	prvGPIOSetup();
 8002028:	f000 f86c 	bl	8002104 <prvGPIOSetup>

	//setup UART_1
	prvUARTSetup();
 800202c:	f000 f82a 	bl	8002084 <prvUARTSetup>
}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}

08002034 <printmsg>:

void printmsg(char *msg)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i<strlen(msg) ; i++)
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	e013      	b.n	800206a <printmsg+0x36>
	{
		//polling to check that the Date Register is Empty
		while(USART_GetFlagStatus(USART1, USART_FLAG_TXE)!=SET);
 8002042:	bf00      	nop
 8002044:	2180      	movs	r1, #128	; 0x80
 8002046:	480e      	ldr	r0, [pc, #56]	; (8002080 <printmsg+0x4c>)
 8002048:	f7fe fb28 	bl	800069c <USART_GetFlagStatus>
 800204c:	4603      	mov	r3, r0
 800204e:	2b01      	cmp	r3, #1
 8002050:	d1f8      	bne.n	8002044 <printmsg+0x10>
		//put our mesg in the UART Data Register
		USART_SendData(USART1,msg[i]);
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	b29b      	uxth	r3, r3
 800205c:	4619      	mov	r1, r3
 800205e:	4808      	ldr	r0, [pc, #32]	; (8002080 <printmsg+0x4c>)
 8002060:	f7fe fb0b 	bl	800067a <USART_SendData>
	for(uint32_t i=0 ; i<strlen(msg) ; i++)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	3301      	adds	r3, #1
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7fe f870 	bl	8000150 <strlen>
 8002070:	4602      	mov	r2, r0
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	429a      	cmp	r2, r3
 8002076:	d8e4      	bhi.n	8002042 <printmsg+0xe>
	}

}
 8002078:	bf00      	nop
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40013800 	.word	0x40013800

08002084 <prvUARTSetup>:

void prvUARTSetup()
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
    USART_InitTypeDef usart1_init_struct;
    /* Bit configuration structure for GPIOA PIN9 and PIN10 */
    GPIO_InitTypeDef gpioa_init_struct;

    /* Enalbe clock for USART1, AFIO and GPIOA */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_AFIO |
 800208a:	2101      	movs	r1, #1
 800208c:	f244 0005 	movw	r0, #16389	; 0x4005
 8002090:	f7fe f9fc 	bl	800048c <RCC_APB2PeriphClockCmd>
                           RCC_APB2Periph_GPIOA, ENABLE);

    /* GPIOA PIN9 alternative function Tx */
    gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
 8002094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002098:	80bb      	strh	r3, [r7, #4]
    gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 800209a:	2303      	movs	r3, #3
 800209c:	71bb      	strb	r3, [r7, #6]
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
 800209e:	2318      	movs	r3, #24
 80020a0:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &gpioa_init_struct);
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	4619      	mov	r1, r3
 80020a6:	4815      	ldr	r0, [pc, #84]	; (80020fc <prvUARTSetup+0x78>)
 80020a8:	f7fe f86c 	bl	8000184 <GPIO_Init>

    /* GPIOA PIN9 alternative function Rx */
    gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
 80020ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020b0:	80bb      	strh	r3, [r7, #4]
    gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 80020b2:	2303      	movs	r3, #3
 80020b4:	71bb      	strb	r3, [r7, #6]
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80020b6:	2304      	movs	r3, #4
 80020b8:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &gpioa_init_struct);
 80020ba:	1d3b      	adds	r3, r7, #4
 80020bc:	4619      	mov	r1, r3
 80020be:	480f      	ldr	r0, [pc, #60]	; (80020fc <prvUARTSetup+0x78>)
 80020c0:	f7fe f860 	bl	8000184 <GPIO_Init>

    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);
 80020c4:	2101      	movs	r1, #1
 80020c6:	480e      	ldr	r0, [pc, #56]	; (8002100 <prvUARTSetup+0x7c>)
 80020c8:	f7fe fab8 	bl	800063c <USART_Cmd>
    /* Baud rate 9600, 8-bit data, One stop bit
     * No parity, Do both Rx and Tx, No HW flow control
     */
    usart1_init_struct.USART_BaudRate = 9600;
 80020cc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80020d0:	60bb      	str	r3, [r7, #8]
    usart1_init_struct.USART_WordLength = USART_WordLength_8b;
 80020d2:	2300      	movs	r3, #0
 80020d4:	81bb      	strh	r3, [r7, #12]
    usart1_init_struct.USART_StopBits = USART_StopBits_1;
 80020d6:	2300      	movs	r3, #0
 80020d8:	81fb      	strh	r3, [r7, #14]
    usart1_init_struct.USART_Parity = USART_Parity_No ;
 80020da:	2300      	movs	r3, #0
 80020dc:	823b      	strh	r3, [r7, #16]
    usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80020de:	230c      	movs	r3, #12
 80020e0:	827b      	strh	r3, [r7, #18]
    usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80020e2:	2300      	movs	r3, #0
 80020e4:	82bb      	strh	r3, [r7, #20]
    USART_Init(USART1,&usart1_init_struct);
 80020e6:	f107 0308 	add.w	r3, r7, #8
 80020ea:	4619      	mov	r1, r3
 80020ec:	4804      	ldr	r0, [pc, #16]	; (8002100 <prvUARTSetup+0x7c>)
 80020ee:	f7fe f9eb 	bl	80004c8 <USART_Init>
}
 80020f2:	bf00      	nop
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40010800 	.word	0x40010800
 8002100:	40013800 	.word	0x40013800

08002104 <prvGPIOSetup>:

void prvGPIOSetup(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
	//Enable The clok for GPIOA , GPIOC
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
 800210a:	2101      	movs	r1, #1
 800210c:	2004      	movs	r0, #4
 800210e:	f7fe f9bd 	bl	800048c <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC,ENABLE);
 8002112:	2101      	movs	r1, #1
 8002114:	2010      	movs	r0, #16
 8002116:	f7fe f9b9 	bl	800048c <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef led_init , Button_init ;

	//initialize the LED PC13
	led_init.GPIO_Mode = GPIO_Mode_Out_PP ;
 800211a:	2310      	movs	r3, #16
 800211c:	71fb      	strb	r3, [r7, #7]
	led_init.GPIO_Pin = GPIO_Pin_13 ;
 800211e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002122:	80bb      	strh	r3, [r7, #4]
	led_init.GPIO_Speed = GPIO_Speed_2MHz ;
 8002124:	2302      	movs	r3, #2
 8002126:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC,&led_init);
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	4619      	mov	r1, r3
 800212c:	480b      	ldr	r0, [pc, #44]	; (800215c <prvGPIOSetup+0x58>)
 800212e:	f7fe f829 	bl	8000184 <GPIO_Init>

	// turn OFF The LED at the First ** LED is Active LOW **
	GPIO_WriteBit(GPIOC,GPIO_Pin_13,Bit_SET);
 8002132:	2201      	movs	r2, #1
 8002134:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002138:	4808      	ldr	r0, [pc, #32]	; (800215c <prvGPIOSetup+0x58>)
 800213a:	f7fe f8df 	bl	80002fc <GPIO_WriteBit>

	//initialize the Button PA5
	Button_init.GPIO_Mode = GPIO_Mode_IPD ; // input pull down
 800213e:	2328      	movs	r3, #40	; 0x28
 8002140:	70fb      	strb	r3, [r7, #3]
	Button_init.GPIO_Pin = GPIO_Pin_5 ;
 8002142:	2320      	movs	r3, #32
 8002144:	803b      	strh	r3, [r7, #0]
	Button_init.GPIO_Speed = GPIO_Speed_2MHz ;
 8002146:	2302      	movs	r3, #2
 8002148:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOA,&Button_init);
 800214a:	463b      	mov	r3, r7
 800214c:	4619      	mov	r1, r3
 800214e:	4804      	ldr	r0, [pc, #16]	; (8002160 <prvGPIOSetup+0x5c>)
 8002150:	f7fe f818 	bl	8000184 <GPIO_Init>
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40011000 	.word	0x40011000
 8002160:	40010800 	.word	0x40010800

08002164 <prvSetupSoftwareInterrupt>:
	uint32_t delay_in_ticks = (delay_in_ms * configTICK_RATE_HZ)/1000 ;
	while(xTaskGetTickCount() < (current_tick_count + delay_in_ticks)) ;
}

static void prvSetupSoftwareInterrupt()
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0

	/* The interrupt service routine uses an (interrupt safe) FreeRTOS API
	function so the interrupt priority must be at or below the priority defined
	by configSYSCALL_INTERRUPT_PRIORITY. */

	NVIC_SetPriority( EXTI9_5_IRQn, 12 );
 8002168:	210c      	movs	r1, #12
 800216a:	2017      	movs	r0, #23
 800216c:	f7ff fe88 	bl	8001e80 <NVIC_SetPriority>

	/* Enable the interrupt. */
	NVIC_EnableIRQ( EXTI9_5_IRQn );
 8002170:	2017      	movs	r0, #23
 8002172:	f7ff fe53 	bl	8001e1c <NVIC_EnableIRQ>
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <EXTI9_5_IRQHandler>:
	// send the cpu to the Normal Sleep
	__WFI();
}

void EXTI9_5_IRQHandler( void )
{
 800217c:	b5b0      	push	{r4, r5, r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
	 * the following 'gives' are to demonstrate that the semaphore latches the events
	 * to allow the handler task to process them without any events getting lost.
	 * This simulates multiple interrupts being taken by the processor,
	 * even though in this case the events are simulated within a single interrupt occurrence.
	 */
	sprintf(usr_msg,"==>Button_Handler\r\n");
 8002186:	4a1e      	ldr	r2, [pc, #120]	; (8002200 <EXTI9_5_IRQHandler+0x84>)
 8002188:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <EXTI9_5_IRQHandler+0x88>)
 800218a:	4614      	mov	r4, r2
 800218c:	461d      	mov	r5, r3
 800218e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002190:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002192:	682b      	ldr	r3, [r5, #0]
 8002194:	6023      	str	r3, [r4, #0]
	printmsg(usr_msg);
 8002196:	481a      	ldr	r0, [pc, #104]	; (8002200 <EXTI9_5_IRQHandler+0x84>)
 8002198:	f7ff ff4c 	bl	8002034 <printmsg>

	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 800219c:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <EXTI9_5_IRQHandler+0x8c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	1d3a      	adds	r2, r7, #4
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe feac 	bl	8000f02 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 80021aa:	4b17      	ldr	r3, [pc, #92]	; (8002208 <EXTI9_5_IRQHandler+0x8c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	1d3a      	adds	r2, r7, #4
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe fea5 	bl	8000f02 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <EXTI9_5_IRQHandler+0x8c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	1d3a      	adds	r2, r7, #4
 80021be:	4611      	mov	r1, r2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe fe9e 	bl	8000f02 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <EXTI9_5_IRQHandler+0x8c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	1d3a      	adds	r2, r7, #4
 80021cc:	4611      	mov	r1, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe fe97 	bl	8000f02 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <EXTI9_5_IRQHandler+0x8c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	1d3a      	adds	r2, r7, #4
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe fe90 	bl	8000f02 <xQueueGiveFromISR>
    higher priority task.
    NOTE: The syntax for forcing a context switch within an ISR varies between
    FreeRTOS ports.  The portEND_SWITCHING_ISR() macro is provided as part of
    the Cortex M3 port layer for this purpose.  taskYIELD() must never be called
    from an ISR! */
    portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d007      	beq.n	80021f8 <EXTI9_5_IRQHandler+0x7c>
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <EXTI9_5_IRQHandler+0x90>)
 80021ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	f3bf 8f4f 	dsb	sy
 80021f4:	f3bf 8f6f 	isb	sy
}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002200:	20003958 	.word	0x20003958
 8002204:	08002524 	.word	0x08002524
 8002208:	20003a20 	.word	0x20003a20
 800220c:	e000ed04 	.word	0xe000ed04

08002210 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002248 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002214:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002216:	e003      	b.n	8002220 <LoopCopyDataInit>

08002218 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 800221a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800221c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800221e:	3104      	adds	r1, #4

08002220 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002220:	480b      	ldr	r0, [pc, #44]	; (8002250 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8002222:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8002224:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002226:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002228:	d3f6      	bcc.n	8002218 <CopyDataInit>
	ldr	r2, =_sbss
 800222a:	4a0b      	ldr	r2, [pc, #44]	; (8002258 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 800222c:	e002      	b.n	8002234 <LoopFillZerobss>

0800222e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800222e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002230:	f842 3b04 	str.w	r3, [r2], #4

08002234 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002234:	4b09      	ldr	r3, [pc, #36]	; (800225c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8002236:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002238:	d3f9      	bcc.n	800222e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800223a:	f000 f813 	bl	8002264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800223e:	f000 f8cb 	bl	80023d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002242:	f7ff fe47 	bl	8001ed4 <main>
	bx	lr
 8002246:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002248:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 800224c:	08002540 	.word	0x08002540
	ldr	r0, =_sdata
 8002250:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002254:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8002258:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 800225c:	20003a28 	.word	0x20003a28

08002260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002260:	e7fe      	b.n	8002260 <ADC1_2_IRQHandler>
	...

08002264 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002268:	4a15      	ldr	r2, [pc, #84]	; (80022c0 <SystemInit+0x5c>)
 800226a:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <SystemInit+0x5c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8002274:	4912      	ldr	r1, [pc, #72]	; (80022c0 <SystemInit+0x5c>)
 8002276:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <SystemInit+0x5c>)
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <SystemInit+0x60>)
 800227c:	4013      	ands	r3, r2
 800227e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002280:	4a0f      	ldr	r2, [pc, #60]	; (80022c0 <SystemInit+0x5c>)
 8002282:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <SystemInit+0x5c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800228a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002290:	4a0b      	ldr	r2, [pc, #44]	; (80022c0 <SystemInit+0x5c>)
 8002292:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <SystemInit+0x5c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800229c:	4a08      	ldr	r2, [pc, #32]	; (80022c0 <SystemInit+0x5c>)
 800229e:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <SystemInit+0x5c>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80022a6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <SystemInit+0x5c>)
 80022aa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80022ae:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80022b0:	f000 f80c 	bl	80022cc <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <SystemInit+0x64>)
 80022b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022ba:	609a      	str	r2, [r3, #8]
#endif 
}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40021000 	.word	0x40021000
 80022c4:	f8ff0000 	.word	0xf8ff0000
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80022d0:	f000 f802 	bl	80022d8 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80022d4:	bf00      	nop
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	2300      	movs	r3, #0
 80022e4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80022e6:	4a3a      	ldr	r2, [pc, #232]	; (80023d0 <SetSysClockTo72+0xf8>)
 80022e8:	4b39      	ldr	r3, [pc, #228]	; (80023d0 <SetSysClockTo72+0xf8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80022f2:	4b37      	ldr	r3, [pc, #220]	; (80023d0 <SetSysClockTo72+0xf8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3301      	adds	r3, #1
 8002300:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d103      	bne.n	8002310 <SetSysClockTo72+0x38>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800230e:	d1f0      	bne.n	80022f2 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002310:	4b2f      	ldr	r3, [pc, #188]	; (80023d0 <SetSysClockTo72+0xf8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800231c:	2301      	movs	r3, #1
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	e001      	b.n	8002326 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002322:	2300      	movs	r3, #0
 8002324:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d14b      	bne.n	80023c4 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800232c:	4a29      	ldr	r2, [pc, #164]	; (80023d4 <SetSysClockTo72+0xfc>)
 800232e:	4b29      	ldr	r3, [pc, #164]	; (80023d4 <SetSysClockTo72+0xfc>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f043 0310 	orr.w	r3, r3, #16
 8002336:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8002338:	4a26      	ldr	r2, [pc, #152]	; (80023d4 <SetSysClockTo72+0xfc>)
 800233a:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <SetSysClockTo72+0xfc>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 0303 	bic.w	r3, r3, #3
 8002342:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8002344:	4a23      	ldr	r2, [pc, #140]	; (80023d4 <SetSysClockTo72+0xfc>)
 8002346:	4b23      	ldr	r3, [pc, #140]	; (80023d4 <SetSysClockTo72+0xfc>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f043 0302 	orr.w	r3, r3, #2
 800234e:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002350:	4a1f      	ldr	r2, [pc, #124]	; (80023d0 <SetSysClockTo72+0xf8>)
 8002352:	4b1f      	ldr	r3, [pc, #124]	; (80023d0 <SetSysClockTo72+0xf8>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002358:	4a1d      	ldr	r2, [pc, #116]	; (80023d0 <SetSysClockTo72+0xf8>)
 800235a:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <SetSysClockTo72+0xf8>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002360:	4a1b      	ldr	r2, [pc, #108]	; (80023d0 <SetSysClockTo72+0xf8>)
 8002362:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <SetSysClockTo72+0xf8>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800236a:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800236c:	4a18      	ldr	r2, [pc, #96]	; (80023d0 <SetSysClockTo72+0xf8>)
 800236e:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <SetSysClockTo72+0xf8>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002376:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8002378:	4a15      	ldr	r2, [pc, #84]	; (80023d0 <SetSysClockTo72+0xf8>)
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <SetSysClockTo72+0xf8>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8002382:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002384:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <SetSysClockTo72+0xf8>)
 8002386:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <SetSysClockTo72+0xf8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800238e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002390:	bf00      	nop
 8002392:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <SetSysClockTo72+0xf8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f9      	beq.n	8002392 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800239e:	4a0c      	ldr	r2, [pc, #48]	; (80023d0 <SetSysClockTo72+0xf8>)
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <SetSysClockTo72+0xf8>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f023 0303 	bic.w	r3, r3, #3
 80023a8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80023aa:	4a09      	ldr	r2, [pc, #36]	; (80023d0 <SetSysClockTo72+0xf8>)
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <SetSysClockTo72+0xf8>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80023b6:	bf00      	nop
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <SetSysClockTo72+0xf8>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 030c 	and.w	r3, r3, #12
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d1f9      	bne.n	80023b8 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40022000 	.word	0x40022000

080023d8 <__libc_init_array>:
 80023d8:	b570      	push	{r4, r5, r6, lr}
 80023da:	2500      	movs	r5, #0
 80023dc:	4e0c      	ldr	r6, [pc, #48]	; (8002410 <__libc_init_array+0x38>)
 80023de:	4c0d      	ldr	r4, [pc, #52]	; (8002414 <__libc_init_array+0x3c>)
 80023e0:	1ba4      	subs	r4, r4, r6
 80023e2:	10a4      	asrs	r4, r4, #2
 80023e4:	42a5      	cmp	r5, r4
 80023e6:	d109      	bne.n	80023fc <__libc_init_array+0x24>
 80023e8:	f000 f822 	bl	8002430 <_init>
 80023ec:	2500      	movs	r5, #0
 80023ee:	4e0a      	ldr	r6, [pc, #40]	; (8002418 <__libc_init_array+0x40>)
 80023f0:	4c0a      	ldr	r4, [pc, #40]	; (800241c <__libc_init_array+0x44>)
 80023f2:	1ba4      	subs	r4, r4, r6
 80023f4:	10a4      	asrs	r4, r4, #2
 80023f6:	42a5      	cmp	r5, r4
 80023f8:	d105      	bne.n	8002406 <__libc_init_array+0x2e>
 80023fa:	bd70      	pop	{r4, r5, r6, pc}
 80023fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002400:	4798      	blx	r3
 8002402:	3501      	adds	r5, #1
 8002404:	e7ee      	b.n	80023e4 <__libc_init_array+0xc>
 8002406:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800240a:	4798      	blx	r3
 800240c:	3501      	adds	r5, #1
 800240e:	e7f2      	b.n	80023f6 <__libc_init_array+0x1e>
 8002410:	08002538 	.word	0x08002538
 8002414:	08002538 	.word	0x08002538
 8002418:	08002538 	.word	0x08002538
 800241c:	0800253c 	.word	0x0800253c

08002420 <memset>:
 8002420:	4603      	mov	r3, r0
 8002422:	4402      	add	r2, r0
 8002424:	4293      	cmp	r3, r2
 8002426:	d100      	bne.n	800242a <memset+0xa>
 8002428:	4770      	bx	lr
 800242a:	f803 1b01 	strb.w	r1, [r3], #1
 800242e:	e7f9      	b.n	8002424 <memset+0x4>

08002430 <_init>:
 8002430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002432:	bf00      	nop
 8002434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002436:	bc08      	pop	{r3}
 8002438:	469e      	mov	lr, r3
 800243a:	4770      	bx	lr

0800243c <_fini>:
 800243c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800243e:	bf00      	nop
 8002440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002442:	bc08      	pop	{r3}
 8002444:	469e      	mov	lr, r3
 8002446:	4770      	bx	lr
