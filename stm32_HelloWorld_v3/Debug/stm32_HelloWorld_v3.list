
stm32_HelloWorld_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000303c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800314c  0800314c  0001314c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003268  08003268  00013268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800326c  0800326c  0001326c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  08003270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000043c0  20000024  08003294  00020024  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  200043e4  08003294  000243e4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c921  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001c0c  00000000  00000000  0002c96e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a68  00000000  00000000  0002e580  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000980  00000000  00000000  0002efe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000052f6  00000000  00000000  0002f968  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000038d1  00000000  00000000  00034c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003852f  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002bb8  00000000  00000000  000385ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000024 	.word	0x20000024
 800012c:	00000000 	.word	0x00000000
 8000130:	08003134 	.word	0x08003134

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000028 	.word	0x20000028
 800014c:	08003134 	.word	0x08003134

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000160:	b480      	push	{r7}
 8000162:	b083      	sub	sp, #12
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000168:	4a05      	ldr	r2, [pc, #20]	; (8000180 <NVIC_PriorityGroupConfig+0x20>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000174:	60d3      	str	r3, [r2, #12]
}
 8000176:	bf00      	nop
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	e000ed00 	.word	0xe000ed00

08000184 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000184:	b480      	push	{r7}
 8000186:	b089      	sub	sp, #36	; 0x24
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800018e:	2300      	movs	r3, #0
 8000190:	61fb      	str	r3, [r7, #28]
 8000192:	2300      	movs	r3, #0
 8000194:	613b      	str	r3, [r7, #16]
 8000196:	2300      	movs	r3, #0
 8000198:	61bb      	str	r3, [r7, #24]
 800019a:	2300      	movs	r3, #0
 800019c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800019e:	2300      	movs	r3, #0
 80001a0:	617b      	str	r3, [r7, #20]
 80001a2:	2300      	movs	r3, #0
 80001a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80001a6:	683b      	ldr	r3, [r7, #0]
 80001a8:	78db      	ldrb	r3, [r3, #3]
 80001aa:	f003 030f 	and.w	r3, r3, #15
 80001ae:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	78db      	ldrb	r3, [r3, #3]
 80001b4:	f003 0310 	and.w	r3, r3, #16
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d005      	beq.n	80001c8 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80001bc:	683b      	ldr	r3, [r7, #0]
 80001be:	789b      	ldrb	r3, [r3, #2]
 80001c0:	461a      	mov	r2, r3
 80001c2:	69fb      	ldr	r3, [r7, #28]
 80001c4:	4313      	orrs	r3, r2
 80001c6:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80001c8:	683b      	ldr	r3, [r7, #0]
 80001ca:	881b      	ldrh	r3, [r3, #0]
 80001cc:	b2db      	uxtb	r3, r3
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d044      	beq.n	800025c <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80001d8:	2300      	movs	r3, #0
 80001da:	61bb      	str	r3, [r7, #24]
 80001dc:	e038      	b.n	8000250 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80001de:	2201      	movs	r2, #1
 80001e0:	69bb      	ldr	r3, [r7, #24]
 80001e2:	fa02 f303 	lsl.w	r3, r2, r3
 80001e6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	881b      	ldrh	r3, [r3, #0]
 80001ec:	461a      	mov	r2, r3
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	4013      	ands	r3, r2
 80001f2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80001f4:	693a      	ldr	r2, [r7, #16]
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	429a      	cmp	r2, r3
 80001fa:	d126      	bne.n	800024a <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80001fc:	69bb      	ldr	r3, [r7, #24]
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000202:	220f      	movs	r2, #15
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	fa02 f303 	lsl.w	r3, r2, r3
 800020a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800020c:	68bb      	ldr	r3, [r7, #8]
 800020e:	43db      	mvns	r3, r3
 8000210:	697a      	ldr	r2, [r7, #20]
 8000212:	4013      	ands	r3, r2
 8000214:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000216:	69fa      	ldr	r2, [r7, #28]
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	fa02 f303 	lsl.w	r3, r2, r3
 800021e:	697a      	ldr	r2, [r7, #20]
 8000220:	4313      	orrs	r3, r2
 8000222:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	78db      	ldrb	r3, [r3, #3]
 8000228:	2b28      	cmp	r3, #40	; 0x28
 800022a:	d105      	bne.n	8000238 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800022c:	2201      	movs	r2, #1
 800022e:	69bb      	ldr	r3, [r7, #24]
 8000230:	409a      	lsls	r2, r3
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	615a      	str	r2, [r3, #20]
 8000236:	e008      	b.n	800024a <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	78db      	ldrb	r3, [r3, #3]
 800023c:	2b48      	cmp	r3, #72	; 0x48
 800023e:	d104      	bne.n	800024a <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000240:	2201      	movs	r2, #1
 8000242:	69bb      	ldr	r3, [r7, #24]
 8000244:	409a      	lsls	r2, r3
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800024a:	69bb      	ldr	r3, [r7, #24]
 800024c:	3301      	adds	r3, #1
 800024e:	61bb      	str	r3, [r7, #24]
 8000250:	69bb      	ldr	r3, [r7, #24]
 8000252:	2b07      	cmp	r3, #7
 8000254:	d9c3      	bls.n	80001de <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	697a      	ldr	r2, [r7, #20]
 800025a:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	2bff      	cmp	r3, #255	; 0xff
 8000262:	d946      	bls.n	80002f2 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800026a:	2300      	movs	r3, #0
 800026c:	61bb      	str	r3, [r7, #24]
 800026e:	e03a      	b.n	80002e6 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000270:	69bb      	ldr	r3, [r7, #24]
 8000272:	3308      	adds	r3, #8
 8000274:	2201      	movs	r2, #1
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	881b      	ldrh	r3, [r3, #0]
 8000280:	461a      	mov	r2, r3
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	4013      	ands	r3, r2
 8000286:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000288:	693a      	ldr	r2, [r7, #16]
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	429a      	cmp	r2, r3
 800028e:	d127      	bne.n	80002e0 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000290:	69bb      	ldr	r3, [r7, #24]
 8000292:	009b      	lsls	r3, r3, #2
 8000294:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000296:	220f      	movs	r2, #15
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	fa02 f303 	lsl.w	r3, r2, r3
 800029e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	43db      	mvns	r3, r3
 80002a4:	697a      	ldr	r2, [r7, #20]
 80002a6:	4013      	ands	r3, r2
 80002a8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80002aa:	69fa      	ldr	r2, [r7, #28]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	697a      	ldr	r2, [r7, #20]
 80002b4:	4313      	orrs	r3, r2
 80002b6:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	78db      	ldrb	r3, [r3, #3]
 80002bc:	2b28      	cmp	r3, #40	; 0x28
 80002be:	d105      	bne.n	80002cc <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80002c0:	69bb      	ldr	r3, [r7, #24]
 80002c2:	3308      	adds	r3, #8
 80002c4:	2201      	movs	r2, #1
 80002c6:	409a      	lsls	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	78db      	ldrb	r3, [r3, #3]
 80002d0:	2b48      	cmp	r3, #72	; 0x48
 80002d2:	d105      	bne.n	80002e0 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80002d4:	69bb      	ldr	r3, [r7, #24]
 80002d6:	3308      	adds	r3, #8
 80002d8:	2201      	movs	r2, #1
 80002da:	409a      	lsls	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002e0:	69bb      	ldr	r3, [r7, #24]
 80002e2:	3301      	adds	r3, #1
 80002e4:	61bb      	str	r3, [r7, #24]
 80002e6:	69bb      	ldr	r3, [r7, #24]
 80002e8:	2b07      	cmp	r3, #7
 80002ea:	d9c1      	bls.n	8000270 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	697a      	ldr	r2, [r7, #20]
 80002f0:	605a      	str	r2, [r3, #4]
  }
}
 80002f2:	bf00      	nop
 80002f4:	3724      	adds	r7, #36	; 0x24
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr

080002fc <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b087      	sub	sp, #28
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000304:	2300      	movs	r3, #0
 8000306:	617b      	str	r3, [r7, #20]
 8000308:	2300      	movs	r3, #0
 800030a:	613b      	str	r3, [r7, #16]
 800030c:	2300      	movs	r3, #0
 800030e:	60fb      	str	r3, [r7, #12]
 8000310:	2300      	movs	r3, #0
 8000312:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000314:	4b4c      	ldr	r3, [pc, #304]	; (8000448 <RCC_GetClocksFreq+0x14c>)
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	f003 030c 	and.w	r3, r3, #12
 800031c:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	2b04      	cmp	r3, #4
 8000322:	d007      	beq.n	8000334 <RCC_GetClocksFreq+0x38>
 8000324:	2b08      	cmp	r3, #8
 8000326:	d009      	beq.n	800033c <RCC_GetClocksFreq+0x40>
 8000328:	2b00      	cmp	r3, #0
 800032a:	d133      	bne.n	8000394 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4a47      	ldr	r2, [pc, #284]	; (800044c <RCC_GetClocksFreq+0x150>)
 8000330:	601a      	str	r2, [r3, #0]
      break;
 8000332:	e033      	b.n	800039c <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a45      	ldr	r2, [pc, #276]	; (800044c <RCC_GetClocksFreq+0x150>)
 8000338:	601a      	str	r2, [r3, #0]
      break;
 800033a:	e02f      	b.n	800039c <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800033c:	4b42      	ldr	r3, [pc, #264]	; (8000448 <RCC_GetClocksFreq+0x14c>)
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000344:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000346:	4b40      	ldr	r3, [pc, #256]	; (8000448 <RCC_GetClocksFreq+0x14c>)
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800034e:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000350:	693b      	ldr	r3, [r7, #16]
 8000352:	0c9b      	lsrs	r3, r3, #18
 8000354:	3302      	adds	r3, #2
 8000356:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d106      	bne.n	800036c <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800035e:	693b      	ldr	r3, [r7, #16]
 8000360:	4a3b      	ldr	r2, [pc, #236]	; (8000450 <RCC_GetClocksFreq+0x154>)
 8000362:	fb02 f203 	mul.w	r2, r2, r3
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 800036a:	e017      	b.n	800039c <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 800036c:	4b36      	ldr	r3, [pc, #216]	; (8000448 <RCC_GetClocksFreq+0x14c>)
 800036e:	685b      	ldr	r3, [r3, #4]
 8000370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000374:	2b00      	cmp	r3, #0
 8000376:	d006      	beq.n	8000386 <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8000378:	693b      	ldr	r3, [r7, #16]
 800037a:	4a35      	ldr	r2, [pc, #212]	; (8000450 <RCC_GetClocksFreq+0x154>)
 800037c:	fb02 f203 	mul.w	r2, r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	601a      	str	r2, [r3, #0]
      break;
 8000384:	e00a      	b.n	800039c <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8000386:	693b      	ldr	r3, [r7, #16]
 8000388:	4a30      	ldr	r2, [pc, #192]	; (800044c <RCC_GetClocksFreq+0x150>)
 800038a:	fb02 f203 	mul.w	r2, r2, r3
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	601a      	str	r2, [r3, #0]
      break;
 8000392:	e003      	b.n	800039c <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a2d      	ldr	r2, [pc, #180]	; (800044c <RCC_GetClocksFreq+0x150>)
 8000398:	601a      	str	r2, [r3, #0]
      break;
 800039a:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 800039c:	4b2a      	ldr	r3, [pc, #168]	; (8000448 <RCC_GetClocksFreq+0x14c>)
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80003a4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80003a6:	697b      	ldr	r3, [r7, #20]
 80003a8:	091b      	lsrs	r3, r3, #4
 80003aa:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80003ac:	4a29      	ldr	r2, [pc, #164]	; (8000454 <RCC_GetClocksFreq+0x158>)
 80003ae:	697b      	ldr	r3, [r7, #20]
 80003b0:	4413      	add	r3, r2
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681a      	ldr	r2, [r3, #0]
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	40da      	lsrs	r2, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80003c4:	4b20      	ldr	r3, [pc, #128]	; (8000448 <RCC_GetClocksFreq+0x14c>)
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80003cc:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	0a1b      	lsrs	r3, r3, #8
 80003d2:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80003d4:	4a1f      	ldr	r2, [pc, #124]	; (8000454 <RCC_GetClocksFreq+0x158>)
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	4413      	add	r3, r2
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	685a      	ldr	r2, [r3, #4]
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	40da      	lsrs	r2, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80003ec:	4b16      	ldr	r3, [pc, #88]	; (8000448 <RCC_GetClocksFreq+0x14c>)
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80003f4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	0adb      	lsrs	r3, r3, #11
 80003fa:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80003fc:	4a15      	ldr	r2, [pc, #84]	; (8000454 <RCC_GetClocksFreq+0x158>)
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	4413      	add	r3, r2
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	b2db      	uxtb	r3, r3
 8000406:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	685a      	ldr	r2, [r3, #4]
 800040c:	68bb      	ldr	r3, [r7, #8]
 800040e:	40da      	lsrs	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000414:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <RCC_GetClocksFreq+0x14c>)
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800041c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	0b9b      	lsrs	r3, r3, #14
 8000422:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000424:	4a0c      	ldr	r2, [pc, #48]	; (8000458 <RCC_GetClocksFreq+0x15c>)
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	4413      	add	r3, r2
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	b2db      	uxtb	r3, r3
 800042e:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	68da      	ldr	r2, [r3, #12]
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	fbb2 f2f3 	udiv	r2, r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	611a      	str	r2, [r3, #16]
}
 800043e:	bf00      	nop
 8000440:	371c      	adds	r7, #28
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	40021000 	.word	0x40021000
 800044c:	007a1200 	.word	0x007a1200
 8000450:	003d0900 	.word	0x003d0900
 8000454:	20000000 	.word	0x20000000
 8000458:	20000010 	.word	0x20000010

0800045c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	460b      	mov	r3, r1
 8000466:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000468:	78fb      	ldrb	r3, [r7, #3]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d006      	beq.n	800047c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800046e:	4909      	ldr	r1, [pc, #36]	; (8000494 <RCC_APB2PeriphClockCmd+0x38>)
 8000470:	4b08      	ldr	r3, [pc, #32]	; (8000494 <RCC_APB2PeriphClockCmd+0x38>)
 8000472:	699a      	ldr	r2, [r3, #24]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4313      	orrs	r3, r2
 8000478:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800047a:	e006      	b.n	800048a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800047c:	4905      	ldr	r1, [pc, #20]	; (8000494 <RCC_APB2PeriphClockCmd+0x38>)
 800047e:	4b05      	ldr	r3, [pc, #20]	; (8000494 <RCC_APB2PeriphClockCmd+0x38>)
 8000480:	699a      	ldr	r2, [r3, #24]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	43db      	mvns	r3, r3
 8000486:	4013      	ands	r3, r2
 8000488:	618b      	str	r3, [r1, #24]
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	40021000 	.word	0x40021000

08000498 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b08c      	sub	sp, #48	; 0x30
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80004a2:	2300      	movs	r3, #0
 80004a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004a6:	2300      	movs	r3, #0
 80004a8:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 80004aa:	2300      	movs	r3, #0
 80004ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 80004ae:	2300      	movs	r3, #0
 80004b0:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	8a1b      	ldrh	r3, [r3, #16]
 80004be:	b29b      	uxth	r3, r3
 80004c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80004c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80004c4:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80004c8:	4013      	ands	r3, r2
 80004ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	88db      	ldrh	r3, [r3, #6]
 80004d0:	461a      	mov	r2, r3
 80004d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004d4:	4313      	orrs	r3, r2
 80004d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80004d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004da:	b29a      	uxth	r2, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	899b      	ldrh	r3, [r3, #12]
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80004e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80004ea:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 80004ee:	4013      	ands	r3, r2
 80004f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	889a      	ldrh	r2, [r3, #4]
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	891b      	ldrh	r3, [r3, #8]
 80004fa:	4313      	orrs	r3, r2
 80004fc:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000502:	4313      	orrs	r3, r2
 8000504:	b29b      	uxth	r3, r3
 8000506:	461a      	mov	r2, r3
 8000508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800050a:	4313      	orrs	r3, r2
 800050c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800050e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000510:	b29a      	uxth	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	8a9b      	ldrh	r3, [r3, #20]
 800051a:	b29b      	uxth	r3, r3
 800051c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 800051e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000520:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000524:	4013      	ands	r3, r2
 8000526:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	899b      	ldrh	r3, [r3, #12]
 800052c:	461a      	mov	r2, r3
 800052e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000530:	4313      	orrs	r3, r2
 8000532:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000536:	b29a      	uxth	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800053c:	f107 0308 	add.w	r3, r7, #8
 8000540:	4618      	mov	r0, r3
 8000542:	f7ff fedb 	bl	80002fc <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000546:	69fb      	ldr	r3, [r7, #28]
 8000548:	4a2e      	ldr	r2, [pc, #184]	; (8000604 <USART_Init+0x16c>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d102      	bne.n	8000554 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	62bb      	str	r3, [r7, #40]	; 0x28
 8000552:	e001      	b.n	8000558 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000554:	693b      	ldr	r3, [r7, #16]
 8000556:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	899b      	ldrh	r3, [r3, #12]
 800055c:	b29b      	uxth	r3, r3
 800055e:	b21b      	sxth	r3, r3
 8000560:	2b00      	cmp	r3, #0
 8000562:	da0c      	bge.n	800057e <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000566:	4613      	mov	r3, r2
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	4413      	add	r3, r2
 800056c:	009a      	lsls	r2, r3, #2
 800056e:	441a      	add	r2, r3
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	fbb2 f3f3 	udiv	r3, r2, r3
 800057a:	627b      	str	r3, [r7, #36]	; 0x24
 800057c:	e00b      	b.n	8000596 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800057e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000580:	4613      	mov	r3, r2
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	4413      	add	r3, r2
 8000586:	009a      	lsls	r2, r3, #2
 8000588:	441a      	add	r2, r3
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	fbb2 f3f3 	udiv	r3, r2, r3
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8000596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000598:	4a1b      	ldr	r2, [pc, #108]	; (8000608 <USART_Init+0x170>)
 800059a:	fba2 2303 	umull	r2, r3, r2, r3
 800059e:	095b      	lsrs	r3, r3, #5
 80005a0:	011b      	lsls	r3, r3, #4
 80005a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80005a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005a6:	091b      	lsrs	r3, r3, #4
 80005a8:	2264      	movs	r2, #100	; 0x64
 80005aa:	fb02 f303 	mul.w	r3, r2, r3
 80005ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	899b      	ldrh	r3, [r3, #12]
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	b21b      	sxth	r3, r3
 80005bc:	2b00      	cmp	r3, #0
 80005be:	da0c      	bge.n	80005da <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80005c0:	6a3b      	ldr	r3, [r7, #32]
 80005c2:	00db      	lsls	r3, r3, #3
 80005c4:	3332      	adds	r3, #50	; 0x32
 80005c6:	4a10      	ldr	r2, [pc, #64]	; (8000608 <USART_Init+0x170>)
 80005c8:	fba2 2303 	umull	r2, r3, r2, r3
 80005cc:	095b      	lsrs	r3, r3, #5
 80005ce:	f003 0307 	and.w	r3, r3, #7
 80005d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005d4:	4313      	orrs	r3, r2
 80005d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005d8:	e00b      	b.n	80005f2 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80005da:	6a3b      	ldr	r3, [r7, #32]
 80005dc:	011b      	lsls	r3, r3, #4
 80005de:	3332      	adds	r3, #50	; 0x32
 80005e0:	4a09      	ldr	r2, [pc, #36]	; (8000608 <USART_Init+0x170>)
 80005e2:	fba2 2303 	umull	r2, r3, r2, r3
 80005e6:	095b      	lsrs	r3, r3, #5
 80005e8:	f003 030f 	and.w	r3, r3, #15
 80005ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005ee:	4313      	orrs	r3, r2
 80005f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80005f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	811a      	strh	r2, [r3, #8]
}
 80005fa:	bf00      	nop
 80005fc:	3730      	adds	r7, #48	; 0x30
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40013800 	.word	0x40013800
 8000608:	51eb851f 	.word	0x51eb851f

0800060c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	460b      	mov	r3, r1
 8000616:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000618:	78fb      	ldrb	r3, [r7, #3]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d008      	beq.n	8000630 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	899b      	ldrh	r3, [r3, #12]
 8000622:	b29b      	uxth	r3, r3
 8000624:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000628:	b29a      	uxth	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 800062e:	e007      	b.n	8000640 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	899b      	ldrh	r3, [r3, #12]
 8000634:	b29b      	uxth	r3, r3
 8000636:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800063a:	b29a      	uxth	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	819a      	strh	r2, [r3, #12]
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr

0800064a <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800064a:	b480      	push	{r7}
 800064c:	b083      	sub	sp, #12
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
 8000652:	460b      	mov	r3, r1
 8000654:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
   USARTx->DR = (Data & (uint16_t)0x01FF);
 8000656:	887b      	ldrh	r3, [r7, #2]
 8000658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800065c:	b29a      	uxth	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	809a      	strh	r2, [r3, #4]
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr

0800066c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000678:	2300      	movs	r3, #0
 800067a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	b29a      	uxth	r2, r3
 8000682:	887b      	ldrh	r3, [r7, #2]
 8000684:	4013      	ands	r3, r2
 8000686:	b29b      	uxth	r3, r3
 8000688:	2b00      	cmp	r3, #0
 800068a:	d002      	beq.n	8000692 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 800068c:	2301      	movs	r3, #1
 800068e:	73fb      	strb	r3, [r7, #15]
 8000690:	e001      	b.n	8000696 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
}
 8000698:	4618      	mov	r0, r3
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr

080006a2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80006a2:	b480      	push	{r7}
 80006a4:	b083      	sub	sp, #12
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f103 0208 	add.w	r2, r3, #8
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f04f 32ff 	mov.w	r2, #4294967295
 80006ba:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f103 0208 	add.w	r2, r3, #8
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f103 0208 	add.w	r2, r3, #8
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr

080006e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	68fa      	ldr	r2, [r7, #12]
 800070c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	689a      	ldr	r2, [r3, #8]
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	683a      	ldr	r2, [r7, #0]
 800071c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	683a      	ldr	r2, [r7, #0]
 8000722:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	1c5a      	adds	r2, r3, #1
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	601a      	str	r2, [r3, #0]
}
 8000734:	bf00      	nop
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr

0800073e <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800073e:	b480      	push	{r7}
 8000740:	b085      	sub	sp, #20
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	691b      	ldr	r3, [r3, #16]
 800074a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	6892      	ldr	r2, [r2, #8]
 8000754:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	6852      	ldr	r2, [r2, #4]
 800075e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	685a      	ldr	r2, [r3, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	429a      	cmp	r2, r3
 8000768:	d103      	bne.n	8000772 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	689a      	ldr	r2, [r3, #8]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	1e5a      	subs	r2, r3, #1
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	681b      	ldr	r3, [r3, #0]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3714      	adds	r7, #20
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	3b04      	subs	r3, #4
 80007a0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	3b04      	subs	r3, #4
 80007ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	f023 0201 	bic.w	r2, r3, #1
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	3b04      	subs	r3, #4
 80007be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80007c0:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <pxPortInitialiseStack+0x54>)
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	3b14      	subs	r3, #20
 80007ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	3b20      	subs	r3, #32
 80007d6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80007d8:	68fb      	ldr	r3, [r7, #12]
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr
 80007e4:	080007e9 	.word	0x080007e9

080007e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80007f2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80007f6:	f383 8811 	msr	BASEPRI, r3
 80007fa:	f3bf 8f6f 	isb	sy
 80007fe:	f3bf 8f4f 	dsb	sy
 8000802:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000804:	bf00      	nop
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d0fc      	beq.n	8000806 <prvTaskExitError+0x1e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
	...

08000820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000820:	4b07      	ldr	r3, [pc, #28]	; (8000840 <pxCurrentTCBConst2>)
 8000822:	6819      	ldr	r1, [r3, #0]
 8000824:	6808      	ldr	r0, [r1, #0]
 8000826:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800082a:	f380 8809 	msr	PSP, r0
 800082e:	f3bf 8f6f 	isb	sy
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f380 8811 	msr	BASEPRI, r0
 800083a:	f04e 0e0d 	orr.w	lr, lr, #13
 800083e:	4770      	bx	lr

08000840 <pxCurrentTCBConst2>:
 8000840:	20003860 	.word	0x20003860
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000844:	bf00      	nop
 8000846:	bf00      	nop

08000848 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000848:	4806      	ldr	r0, [pc, #24]	; (8000864 <prvPortStartFirstTask+0x1c>)
 800084a:	6800      	ldr	r0, [r0, #0]
 800084c:	6800      	ldr	r0, [r0, #0]
 800084e:	f380 8808 	msr	MSP, r0
 8000852:	b662      	cpsie	i
 8000854:	b661      	cpsie	f
 8000856:	f3bf 8f4f 	dsb	sy
 800085a:	f3bf 8f6f 	isb	sy
 800085e:	df00      	svc	0
 8000860:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000862:	bf00      	nop
 8000864:	e000ed08 	.word	0xe000ed08

08000868 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800086c:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <xPortStartScheduler+0x38>)
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <xPortStartScheduler+0x38>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000876:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000878:	4a09      	ldr	r2, [pc, #36]	; (80008a0 <xPortStartScheduler+0x38>)
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <xPortStartScheduler+0x38>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000882:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000884:	f000 f890 	bl	80009a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <xPortStartScheduler+0x3c>)
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800088e:	f7ff ffdb 	bl	8000848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000892:	f000 fd21 	bl	80012d8 <vTaskSwitchContext>
	prvTaskExitError();
 8000896:	f7ff ffa7 	bl	80007e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800089a:	2300      	movs	r3, #0
}
 800089c:	4618      	mov	r0, r3
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	e000ed20 	.word	0xe000ed20
 80008a4:	20000014 	.word	0x20000014

080008a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80008b2:	f383 8811 	msr	BASEPRI, r3
 80008b6:	f3bf 8f6f 	isb	sy
 80008ba:	f3bf 8f4f 	dsb	sy
 80008be:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80008c0:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <vPortEnterCritical+0x2c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	3301      	adds	r3, #1
 80008c6:	4a03      	ldr	r2, [pc, #12]	; (80008d4 <vPortEnterCritical+0x2c>)
 80008c8:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	20000014 	.word	0x20000014

080008d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <vPortExitCritical+0x2c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	4a07      	ldr	r2, [pc, #28]	; (8000904 <vPortExitCritical+0x2c>)
 80008e6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <vPortExitCritical+0x2c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d104      	bne.n	80008fa <vPortExitCritical+0x22>
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr
 8000904:	20000014 	.word	0x20000014
	...

08000910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000910:	f3ef 8009 	mrs	r0, PSP
 8000914:	f3bf 8f6f 	isb	sy
 8000918:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <pxCurrentTCBConst>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000920:	6010      	str	r0, [r2, #0]
 8000922:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000926:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800092a:	f380 8811 	msr	BASEPRI, r0
 800092e:	f000 fcd3 	bl	80012d8 <vTaskSwitchContext>
 8000932:	f04f 0000 	mov.w	r0, #0
 8000936:	f380 8811 	msr	BASEPRI, r0
 800093a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800093e:	6819      	ldr	r1, [r3, #0]
 8000940:	6808      	ldr	r0, [r1, #0]
 8000942:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000946:	f380 8809 	msr	PSP, r0
 800094a:	f3bf 8f6f 	isb	sy
 800094e:	4770      	bx	lr

08000950 <pxCurrentTCBConst>:
 8000950:	20003860 	.word	0x20003860
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000954:	bf00      	nop
 8000956:	bf00      	nop

08000958 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
	__asm volatile
 800095e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000962:	f383 8811 	msr	BASEPRI, r3
 8000966:	f3bf 8f6f 	isb	sy
 800096a:	f3bf 8f4f 	dsb	sy
 800096e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8000970:	f001 ff22 	bl	80027b8 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000974:	f000 fc04 	bl	8001180 <xTaskIncrementTick>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d006      	beq.n	800098c <SysTick_Handler+0x34>
		{
      traceISR_EXIT_TO_SCHEDULER();
 800097e:	f001 ff79 	bl	8002874 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <SysTick_Handler+0x4c>)
 8000984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	e001      	b.n	8000990 <SysTick_Handler+0x38>
		}
		else
		{
			traceISR_EXIT();
 800098c:	f001 ff56 	bl	800283c <SEGGER_SYSVIEW_RecordExitISR>
 8000990:	2300      	movs	r3, #0
 8000992:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	e000ed04 	.word	0xe000ed04

080009a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <vPortSetupTimerInterrupt+0x24>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <vPortSetupTimerInterrupt+0x28>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <vPortSetupTimerInterrupt+0x2c>)
 80009ba:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <vPortSetupTimerInterrupt+0x30>)
 80009bc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80009be:	4b03      	ldr	r3, [pc, #12]	; (80009cc <vPortSetupTimerInterrupt+0x24>)
 80009c0:	2207      	movs	r2, #7
 80009c2:	601a      	str	r2, [r3, #0]
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	e000e010 	.word	0xe000e010
 80009d0:	e000e018 	.word	0xe000e018
 80009d4:	e000e014 	.word	0xe000e014
 80009d8:	0001193f 	.word	0x0001193f

080009dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80009e8:	f000 fb1a 	bl	8001020 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80009ec:	4b42      	ldr	r3, [pc, #264]	; (8000af8 <pvPortMalloc+0x11c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d101      	bne.n	80009f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80009f4:	f000 f8cc 	bl	8000b90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80009f8:	4b40      	ldr	r3, [pc, #256]	; (8000afc <pvPortMalloc+0x120>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4013      	ands	r3, r2
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d172      	bne.n	8000aea <pvPortMalloc+0x10e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d00d      	beq.n	8000a26 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 8000a0a:	2208      	movs	r2, #8
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4413      	add	r3, r2
 8000a10:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	f003 0307 	and.w	r3, r3, #7
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d004      	beq.n	8000a26 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f023 0307 	bic.w	r3, r3, #7
 8000a22:	3308      	adds	r3, #8
 8000a24:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d05e      	beq.n	8000aea <pvPortMalloc+0x10e>
 8000a2c:	4b34      	ldr	r3, [pc, #208]	; (8000b00 <pvPortMalloc+0x124>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d859      	bhi.n	8000aea <pvPortMalloc+0x10e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000a36:	4b33      	ldr	r3, [pc, #204]	; (8000b04 <pvPortMalloc+0x128>)
 8000a38:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8000a3a:	4b32      	ldr	r3, [pc, #200]	; (8000b04 <pvPortMalloc+0x128>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a40:	e004      	b.n	8000a4c <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	685a      	ldr	r2, [r3, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d203      	bcs.n	8000a5e <pvPortMalloc+0x82>
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1f1      	bne.n	8000a42 <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000a5e:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <pvPortMalloc+0x11c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	697a      	ldr	r2, [r7, #20]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d040      	beq.n	8000aea <pvPortMalloc+0x10e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2208      	movs	r2, #8
 8000a6e:	4413      	add	r3, r2
 8000a70:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	1ad2      	subs	r2, r2, r3
 8000a82:	2308      	movs	r3, #8
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d90f      	bls.n	8000aaa <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4413      	add	r3, r2
 8000a90:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	685a      	ldr	r2, [r3, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	1ad2      	subs	r2, r2, r3
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000aa4:	68b8      	ldr	r0, [r7, #8]
 8000aa6:	f000 f8d5 	bl	8000c54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <pvPortMalloc+0x124>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <pvPortMalloc+0x124>)
 8000ab6:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <pvPortMalloc+0x124>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <pvPortMalloc+0x12c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d203      	bcs.n	8000acc <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <pvPortMalloc+0x124>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <pvPortMalloc+0x12c>)
 8000aca:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	685a      	ldr	r2, [r3, #4]
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <pvPortMalloc+0x120>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	431a      	orrs	r2, r3
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <pvPortMalloc+0x130>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <pvPortMalloc+0x130>)
 8000ae8:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000aea:	f000 faa7 	bl	800103c <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20003848 	.word	0x20003848
 8000afc:	2000385c 	.word	0x2000385c
 8000b00:	2000384c 	.word	0x2000384c
 8000b04:	20003840 	.word	0x20003840
 8000b08:	20003850 	.word	0x20003850
 8000b0c:	20003854 	.word	0x20003854

08000b10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d02c      	beq.n	8000b7c <vPortFree+0x6c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000b22:	2308      	movs	r3, #8
 8000b24:	425b      	negs	r3, r3
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	4413      	add	r3, r2
 8000b2a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	685a      	ldr	r2, [r3, #4]
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <vPortFree+0x74>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d01e      	beq.n	8000b7c <vPortFree+0x6c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d11a      	bne.n	8000b7c <vPortFree+0x6c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <vPortFree+0x74>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	401a      	ands	r2, r3
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000b56:	f000 fa63 	bl	8001020 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	685a      	ldr	r2, [r3, #4]
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <vPortFree+0x78>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <vPortFree+0x78>)
 8000b66:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000b68:	68b8      	ldr	r0, [r7, #8]
 8000b6a:	f000 f873 	bl	8000c54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8000b6e:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <vPortFree+0x7c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	3301      	adds	r3, #1
 8000b74:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <vPortFree+0x7c>)
 8000b76:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8000b78:	f000 fa60 	bl	800103c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000b7c:	bf00      	nop
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	2000385c 	.word	0x2000385c
 8000b88:	2000384c 	.word	0x2000384c
 8000b8c:	20003858 	.word	0x20003858

08000b90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000b96:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000b9c:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <prvHeapInit+0xac>)
 8000b9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d00c      	beq.n	8000bc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	3307      	adds	r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f023 0307 	bic.w	r3, r3, #7
 8000bb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000bb8:	68ba      	ldr	r2, [r7, #8]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	4a1f      	ldr	r2, [pc, #124]	; (8000c3c <prvHeapInit+0xac>)
 8000bc0:	4413      	add	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000bc8:	4a1d      	ldr	r2, [pc, #116]	; (8000c40 <prvHeapInit+0xb0>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000bce:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <prvHeapInit+0xb0>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	4413      	add	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000bdc:	2208      	movs	r2, #8
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	1a9b      	subs	r3, r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f023 0307 	bic.w	r3, r3, #7
 8000bea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4a15      	ldr	r2, [pc, #84]	; (8000c44 <prvHeapInit+0xb4>)
 8000bf0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <prvHeapInit+0xb4>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000bfa:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <prvHeapInit+0xb4>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	1ad2      	subs	r2, r2, r3
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <prvHeapInit+0xb4>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <prvHeapInit+0xb8>)
 8000c1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	4a09      	ldr	r2, [pc, #36]	; (8000c4c <prvHeapInit+0xbc>)
 8000c26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <prvHeapInit+0xc0>)
 8000c2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000c2e:	601a      	str	r2, [r3, #0]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000040 	.word	0x20000040
 8000c40:	20003840 	.word	0x20003840
 8000c44:	20003848 	.word	0x20003848
 8000c48:	20003850 	.word	0x20003850
 8000c4c:	2000384c 	.word	0x2000384c
 8000c50:	2000385c 	.word	0x2000385c

08000c54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000c5c:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <prvInsertBlockIntoFreeList+0xa8>)
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	e002      	b.n	8000c68 <prvInsertBlockIntoFreeList+0x14>
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d3f7      	bcc.n	8000c62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	441a      	add	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d108      	bne.n	8000c96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	685a      	ldr	r2, [r3, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	441a      	add	r2, r3
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	441a      	add	r2, r3
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d118      	bne.n	8000cdc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <prvInsertBlockIntoFreeList+0xac>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d00d      	beq.n	8000cd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685a      	ldr	r2, [r3, #4]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	441a      	add	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	e008      	b.n	8000ce4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <prvInsertBlockIntoFreeList+0xac>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	e003      	b.n	8000ce4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d002      	beq.n	8000cf2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000cf2:	bf00      	nop
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	20003840 	.word	0x20003840
 8000d00:	20003848 	.word	0x20003848

08000d04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08c      	sub	sp, #48	; 0x30
 8000d08:	af04      	add	r7, sp, #16
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	4613      	mov	r3, r2
 8000d12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000d14:	88fb      	ldrh	r3, [r7, #6]
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fe5f 	bl	80009dc <pvPortMalloc>
 8000d1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d00e      	beq.n	8000d44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000d26:	2054      	movs	r0, #84	; 0x54
 8000d28:	f7ff fe58 	bl	80009dc <pvPortMalloc>
 8000d2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d003      	beq.n	8000d3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	697a      	ldr	r2, [r7, #20]
 8000d38:	631a      	str	r2, [r3, #48]	; 0x30
 8000d3a:	e005      	b.n	8000d48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000d3c:	6978      	ldr	r0, [r7, #20]
 8000d3e:	f7ff fee7 	bl	8000b10 <vPortFree>
 8000d42:	e001      	b.n	8000d48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d013      	beq.n	8000d76 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000d4e:	88fa      	ldrh	r2, [r7, #6]
 8000d50:	2300      	movs	r3, #0
 8000d52:	9303      	str	r3, [sp, #12]
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	9302      	str	r3, [sp, #8]
 8000d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d5a:	9301      	str	r3, [sp, #4]
 8000d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	68b9      	ldr	r1, [r7, #8]
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	f000 f80e 	bl	8000d86 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000d6a:	69f8      	ldr	r0, [r7, #28]
 8000d6c:	f000 f88a 	bl	8000e84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000d70:	2301      	movs	r3, #1
 8000d72:	61bb      	str	r3, [r7, #24]
 8000d74:	e002      	b.n	8000d7c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000d7c:	69bb      	ldr	r3, [r7, #24]
	}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3720      	adds	r7, #32
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	60f8      	str	r0, [r7, #12]
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d96:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	21a5      	movs	r1, #165	; 0xa5
 8000da0:	f002 f9c0 	bl	8003124 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000dae:	3b01      	subs	r3, #1
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	f023 0307 	bic.w	r3, r3, #7
 8000dbc:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d01f      	beq.n	8000e04 <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	e012      	b.n	8000df0 <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	4413      	add	r3, r2
 8000dd0:	7819      	ldrb	r1, [r3, #0]
 8000dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3334      	adds	r3, #52	; 0x34
 8000dda:	460a      	mov	r2, r1
 8000ddc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	4413      	add	r3, r2
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d006      	beq.n	8000df8 <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	3301      	adds	r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	2b0f      	cmp	r3, #15
 8000df4:	d9e9      	bls.n	8000dca <prvInitialiseNewTask+0x44>
 8000df6:	e000      	b.n	8000dfa <prvInitialiseNewTask+0x74>
			{
				break;
 8000df8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000e02:	e003      	b.n	8000e0c <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000e0c:	6a3b      	ldr	r3, [r7, #32]
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	d901      	bls.n	8000e16 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000e12:	2304      	movs	r3, #4
 8000e14:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e18:	6a3a      	ldr	r2, [r7, #32]
 8000e1a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e1e:	6a3a      	ldr	r2, [r7, #32]
 8000e20:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8000e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e24:	2200      	movs	r2, #0
 8000e26:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e2a:	3304      	adds	r3, #4
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fc57 	bl	80006e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e34:	3318      	adds	r3, #24
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fc52 	bl	80006e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e40:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e42:	6a3b      	ldr	r3, [r7, #32]
 8000e44:	f1c3 0205 	rsb	r2, r3, #5
 8000e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e4a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e50:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e54:	2200      	movs	r2, #0
 8000e56:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000e60:	683a      	ldr	r2, [r7, #0]
 8000e62:	68f9      	ldr	r1, [r7, #12]
 8000e64:	6938      	ldr	r0, [r7, #16]
 8000e66:	f7ff fc93 	bl	8000790 <pxPortInitialiseStack>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8000e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d002      	beq.n	8000e7c <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e7a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e7c:	bf00      	nop
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000e84:	b5b0      	push	{r4, r5, r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af02      	add	r7, sp, #8
 8000e8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000e8c:	f7ff fd0c 	bl	80008a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000e90:	4b39      	ldr	r3, [pc, #228]	; (8000f78 <prvAddNewTaskToReadyList+0xf4>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	3301      	adds	r3, #1
 8000e96:	4a38      	ldr	r2, [pc, #224]	; (8000f78 <prvAddNewTaskToReadyList+0xf4>)
 8000e98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000e9a:	4b38      	ldr	r3, [pc, #224]	; (8000f7c <prvAddNewTaskToReadyList+0xf8>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d109      	bne.n	8000eb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000ea2:	4a36      	ldr	r2, [pc, #216]	; (8000f7c <prvAddNewTaskToReadyList+0xf8>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000ea8:	4b33      	ldr	r3, [pc, #204]	; (8000f78 <prvAddNewTaskToReadyList+0xf4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d110      	bne.n	8000ed2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000eb0:	f000 fa7e 	bl	80013b0 <prvInitialiseTaskLists>
 8000eb4:	e00d      	b.n	8000ed2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000eb6:	4b32      	ldr	r3, [pc, #200]	; (8000f80 <prvAddNewTaskToReadyList+0xfc>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d109      	bne.n	8000ed2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000ebe:	4b2f      	ldr	r3, [pc, #188]	; (8000f7c <prvAddNewTaskToReadyList+0xf8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d802      	bhi.n	8000ed2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000ecc:	4a2b      	ldr	r2, [pc, #172]	; (8000f7c <prvAddNewTaskToReadyList+0xf8>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000ed2:	4b2c      	ldr	r3, [pc, #176]	; (8000f84 <prvAddNewTaskToReadyList+0x100>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	4a2a      	ldr	r2, [pc, #168]	; (8000f84 <prvAddNewTaskToReadyList+0x100>)
 8000eda:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d016      	beq.n	8000f10 <prvAddNewTaskToReadyList+0x8c>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f001 fcfd 	bl	80028e4 <SEGGER_SYSVIEW_OnTaskCreate>
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	461d      	mov	r5, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	461c      	mov	r4, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	1ae3      	subs	r3, r4, r3
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	462b      	mov	r3, r5
 8000f0c:	f000 fbd8 	bl	80016c0 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 fd6e 	bl	80029f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <prvAddNewTaskToReadyList+0x104>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	4a18      	ldr	r2, [pc, #96]	; (8000f88 <prvAddNewTaskToReadyList+0x104>)
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4a15      	ldr	r2, [pc, #84]	; (8000f8c <prvAddNewTaskToReadyList+0x108>)
 8000f38:	441a      	add	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4610      	mov	r0, r2
 8000f42:	f7ff fbd9 	bl	80006f8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000f46:	f7ff fcc7 	bl	80008d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <prvAddNewTaskToReadyList+0xfc>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d00e      	beq.n	8000f70 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <prvAddNewTaskToReadyList+0xf8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d207      	bcs.n	8000f70 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <prvAddNewTaskToReadyList+0x10c>)
 8000f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	f3bf 8f4f 	dsb	sy
 8000f6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bdb0      	pop	{r4, r5, r7, pc}
 8000f78:	20003938 	.word	0x20003938
 8000f7c:	20003860 	.word	0x20003860
 8000f80:	20003944 	.word	0x20003944
 8000f84:	20003954 	.word	0x20003954
 8000f88:	20003940 	.word	0x20003940
 8000f8c:	20003864 	.word	0x20003864
 8000f90:	e000ed04 	.word	0xe000ed04

08000f94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <vTaskStartScheduler+0x70>)
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	2280      	movs	r2, #128	; 0x80
 8000fa6:	4918      	ldr	r1, [pc, #96]	; (8001008 <vTaskStartScheduler+0x74>)
 8000fa8:	4818      	ldr	r0, [pc, #96]	; (800100c <vTaskStartScheduler+0x78>)
 8000faa:	f7ff feab 	bl	8000d04 <xTaskCreate>
 8000fae:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d122      	bne.n	8000ffc <vTaskStartScheduler+0x68>
	__asm volatile
 8000fb6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000fba:	f383 8811 	msr	BASEPRI, r3
 8000fbe:	f3bf 8f6f 	isb	sy
 8000fc2:	f3bf 8f4f 	dsb	sy
 8000fc6:	603b      	str	r3, [r7, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <vTaskStartScheduler+0x7c>)
 8000fca:	f04f 32ff 	mov.w	r2, #4294967295
 8000fce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000fd0:	4b10      	ldr	r3, [pc, #64]	; (8001014 <vTaskStartScheduler+0x80>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <vTaskStartScheduler+0x84>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <vTaskStartScheduler+0x88>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <vTaskStartScheduler+0x70>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d102      	bne.n	8000fee <vTaskStartScheduler+0x5a>
 8000fe8:	f001 fc60 	bl	80028ac <SEGGER_SYSVIEW_OnIdle>
 8000fec:	e004      	b.n	8000ff8 <vTaskStartScheduler+0x64>
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <vTaskStartScheduler+0x88>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 fcba 	bl	800296c <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000ff8:	f7ff fc36 	bl	8000868 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2000395c 	.word	0x2000395c
 8001008:	0800314c 	.word	0x0800314c
 800100c:	08001381 	.word	0x08001381
 8001010:	20003958 	.word	0x20003958
 8001014:	20003944 	.word	0x20003944
 8001018:	2000393c 	.word	0x2000393c
 800101c:	20003860 	.word	0x20003860

08001020 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <vTaskSuspendAll+0x18>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	3301      	adds	r3, #1
 800102a:	4a03      	ldr	r2, [pc, #12]	; (8001038 <vTaskSuspendAll+0x18>)
 800102c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20003960 	.word	0x20003960

0800103c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800104a:	f7ff fc2d 	bl	80008a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800104e:	4b3b      	ldr	r3, [pc, #236]	; (800113c <xTaskResumeAll+0x100>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	3b01      	subs	r3, #1
 8001054:	4a39      	ldr	r2, [pc, #228]	; (800113c <xTaskResumeAll+0x100>)
 8001056:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001058:	4b38      	ldr	r3, [pc, #224]	; (800113c <xTaskResumeAll+0x100>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d165      	bne.n	800112c <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001060:	4b37      	ldr	r3, [pc, #220]	; (8001140 <xTaskResumeAll+0x104>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d061      	beq.n	800112c <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001068:	e032      	b.n	80010d0 <xTaskResumeAll+0x94>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800106a:	4b36      	ldr	r3, [pc, #216]	; (8001144 <xTaskResumeAll+0x108>)
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	3318      	adds	r3, #24
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fb61 	bl	800073e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	3304      	adds	r3, #4
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fb5c 	bl	800073e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4618      	mov	r0, r3
 800108a:	f001 fcb3 	bl	80029f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001092:	2201      	movs	r2, #1
 8001094:	409a      	lsls	r2, r3
 8001096:	4b2c      	ldr	r3, [pc, #176]	; (8001148 <xTaskResumeAll+0x10c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4313      	orrs	r3, r2
 800109c:	4a2a      	ldr	r2, [pc, #168]	; (8001148 <xTaskResumeAll+0x10c>)
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4a27      	ldr	r2, [pc, #156]	; (800114c <xTaskResumeAll+0x110>)
 80010ae:	441a      	add	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	3304      	adds	r3, #4
 80010b4:	4619      	mov	r1, r3
 80010b6:	4610      	mov	r0, r2
 80010b8:	f7ff fb1e 	bl	80006f8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010c0:	4b23      	ldr	r3, [pc, #140]	; (8001150 <xTaskResumeAll+0x114>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d302      	bcc.n	80010d0 <xTaskResumeAll+0x94>
					{
						xYieldPending = pdTRUE;
 80010ca:	4b22      	ldr	r3, [pc, #136]	; (8001154 <xTaskResumeAll+0x118>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80010d0:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <xTaskResumeAll+0x108>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1c8      	bne.n	800106a <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <xTaskResumeAll+0xa6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80010de:	f000 fa1b 	bl	8001518 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80010e2:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <xTaskResumeAll+0x11c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d010      	beq.n	8001110 <xTaskResumeAll+0xd4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80010ee:	f000 f847 	bl	8001180 <xTaskIncrementTick>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d002      	beq.n	80010fe <xTaskResumeAll+0xc2>
							{
								xYieldPending = pdTRUE;
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <xTaskResumeAll+0x118>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3b01      	subs	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f1      	bne.n	80010ee <xTaskResumeAll+0xb2>

						xPendedTicks = 0;
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <xTaskResumeAll+0x11c>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001110:	4b10      	ldr	r3, [pc, #64]	; (8001154 <xTaskResumeAll+0x118>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d009      	beq.n	800112c <xTaskResumeAll+0xf0>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001118:	2301      	movs	r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800111c:	4b0f      	ldr	r3, [pc, #60]	; (800115c <xTaskResumeAll+0x120>)
 800111e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	f3bf 8f4f 	dsb	sy
 8001128:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800112c:	f7ff fbd4 	bl	80008d8 <vPortExitCritical>

	return xAlreadyYielded;
 8001130:	68bb      	ldr	r3, [r7, #8]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20003960 	.word	0x20003960
 8001140:	20003938 	.word	0x20003938
 8001144:	200038f8 	.word	0x200038f8
 8001148:	20003940 	.word	0x20003940
 800114c:	20003864 	.word	0x20003864
 8001150:	20003860 	.word	0x20003860
 8001154:	2000394c 	.word	0x2000394c
 8001158:	20003948 	.word	0x20003948
 800115c:	e000ed04 	.word	0xe000ed04

08001160 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <xTaskGetTickCountFromISR+0x1c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001170:	683b      	ldr	r3, [r7, #0]
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	2000393c 	.word	0x2000393c

08001180 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800118a:	4b48      	ldr	r3, [pc, #288]	; (80012ac <xTaskIncrementTick+0x12c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	f040 8082 	bne.w	8001298 <xTaskIncrementTick+0x118>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001194:	4b46      	ldr	r3, [pc, #280]	; (80012b0 <xTaskIncrementTick+0x130>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800119c:	4a44      	ldr	r2, [pc, #272]	; (80012b0 <xTaskIncrementTick+0x130>)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d110      	bne.n	80011ca <xTaskIncrementTick+0x4a>
		{
			taskSWITCH_DELAYED_LISTS();
 80011a8:	4b42      	ldr	r3, [pc, #264]	; (80012b4 <xTaskIncrementTick+0x134>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b42      	ldr	r3, [pc, #264]	; (80012b8 <xTaskIncrementTick+0x138>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a40      	ldr	r2, [pc, #256]	; (80012b4 <xTaskIncrementTick+0x134>)
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	4a40      	ldr	r2, [pc, #256]	; (80012b8 <xTaskIncrementTick+0x138>)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	4b3f      	ldr	r3, [pc, #252]	; (80012bc <xTaskIncrementTick+0x13c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	3301      	adds	r3, #1
 80011c2:	4a3e      	ldr	r2, [pc, #248]	; (80012bc <xTaskIncrementTick+0x13c>)
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	f000 f9a7 	bl	8001518 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80011ca:	4b3d      	ldr	r3, [pc, #244]	; (80012c0 <xTaskIncrementTick+0x140>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d34c      	bcc.n	800126e <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80011d4:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <xTaskIncrementTick+0x134>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d104      	bne.n	80011e8 <xTaskIncrementTick+0x68>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80011de:	4b38      	ldr	r3, [pc, #224]	; (80012c0 <xTaskIncrementTick+0x140>)
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295
 80011e4:	601a      	str	r2, [r3, #0]
					break;
 80011e6:	e042      	b.n	800126e <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80011e8:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <xTaskIncrementTick+0x134>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d203      	bcs.n	8001208 <xTaskIncrementTick+0x88>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001200:	4a2f      	ldr	r2, [pc, #188]	; (80012c0 <xTaskIncrementTick+0x140>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001206:	e032      	b.n	800126e <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	3304      	adds	r3, #4
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fa96 	bl	800073e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001216:	2b00      	cmp	r3, #0
 8001218:	d004      	beq.n	8001224 <xTaskIncrementTick+0xa4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	3318      	adds	r3, #24
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fa8d 	bl	800073e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4618      	mov	r0, r3
 8001228:	f001 fbe4 	bl	80029f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001230:	2201      	movs	r2, #1
 8001232:	409a      	lsls	r2, r3
 8001234:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <xTaskIncrementTick+0x144>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4313      	orrs	r3, r2
 800123a:	4a22      	ldr	r2, [pc, #136]	; (80012c4 <xTaskIncrementTick+0x144>)
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4a1f      	ldr	r2, [pc, #124]	; (80012c8 <xTaskIncrementTick+0x148>)
 800124c:	441a      	add	r2, r3
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	3304      	adds	r3, #4
 8001252:	4619      	mov	r1, r3
 8001254:	4610      	mov	r0, r2
 8001256:	f7ff fa4f 	bl	80006f8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800125e:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <xTaskIncrementTick+0x14c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001264:	429a      	cmp	r2, r3
 8001266:	d3b5      	bcc.n	80011d4 <xTaskIncrementTick+0x54>
						{
							xSwitchRequired = pdTRUE;
 8001268:	2301      	movs	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800126c:	e7b2      	b.n	80011d4 <xTaskIncrementTick+0x54>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <xTaskIncrementTick+0x14c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001274:	4914      	ldr	r1, [pc, #80]	; (80012c8 <xTaskIncrementTick+0x148>)
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	440b      	add	r3, r1
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d901      	bls.n	800128a <xTaskIncrementTick+0x10a>
			{
				xSwitchRequired = pdTRUE;
 8001286:	2301      	movs	r3, #1
 8001288:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <xTaskIncrementTick+0x150>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d007      	beq.n	80012a2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8001292:	2301      	movs	r3, #1
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	e004      	b.n	80012a2 <xTaskIncrementTick+0x122>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001298:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <xTaskIncrementTick+0x154>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <xTaskIncrementTick+0x154>)
 80012a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80012a2:	697b      	ldr	r3, [r7, #20]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20003960 	.word	0x20003960
 80012b0:	2000393c 	.word	0x2000393c
 80012b4:	200038f0 	.word	0x200038f0
 80012b8:	200038f4 	.word	0x200038f4
 80012bc:	20003950 	.word	0x20003950
 80012c0:	20003958 	.word	0x20003958
 80012c4:	20003940 	.word	0x20003940
 80012c8:	20003864 	.word	0x20003864
 80012cc:	20003860 	.word	0x20003860
 80012d0:	2000394c 	.word	0x2000394c
 80012d4:	20003948 	.word	0x20003948

080012d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80012de:	4b22      	ldr	r3, [pc, #136]	; (8001368 <vTaskSwitchContext+0x90>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80012e6:	4b21      	ldr	r3, [pc, #132]	; (800136c <vTaskSwitchContext+0x94>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80012ec:	e038      	b.n	8001360 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 80012ee:	4b1f      	ldr	r3, [pc, #124]	; (800136c <vTaskSwitchContext+0x94>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80012f4:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <vTaskSwitchContext+0x98>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	fab3 f383 	clz	r3, r3
 8001300:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8001302:	78fb      	ldrb	r3, [r7, #3]
 8001304:	f1c3 031f 	rsb	r3, r3, #31
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4a17      	ldr	r2, [pc, #92]	; (8001374 <vTaskSwitchContext+0x9c>)
 8001316:	4413      	add	r3, r2
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	3308      	adds	r3, #8
 800132c:	429a      	cmp	r2, r3
 800132e:	d104      	bne.n	800133a <vTaskSwitchContext+0x62>
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <vTaskSwitchContext+0xa0>)
 8001342:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <vTaskSwitchContext+0xa0>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <vTaskSwitchContext+0xa4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d102      	bne.n	8001356 <vTaskSwitchContext+0x7e>
 8001350:	f001 faac 	bl	80028ac <SEGGER_SYSVIEW_OnIdle>
}
 8001354:	e004      	b.n	8001360 <vTaskSwitchContext+0x88>
		traceTASK_SWITCHED_IN();
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <vTaskSwitchContext+0xa0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f001 fb06 	bl	800296c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001360:	bf00      	nop
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20003960 	.word	0x20003960
 800136c:	2000394c 	.word	0x2000394c
 8001370:	20003940 	.word	0x20003940
 8001374:	20003864 	.word	0x20003864
 8001378:	20003860 	.word	0x20003860
 800137c:	2000395c 	.word	0x2000395c

08001380 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001388:	f000 f852 	bl	8001430 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <prvIdleTask+0x28>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d9f9      	bls.n	8001388 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <prvIdleTask+0x2c>)
 8001396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	f3bf 8f4f 	dsb	sy
 80013a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80013a4:	e7f0      	b.n	8001388 <prvIdleTask+0x8>
 80013a6:	bf00      	nop
 80013a8:	20003864 	.word	0x20003864
 80013ac:	e000ed04 	.word	0xe000ed04

080013b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	e00c      	b.n	80013d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4a12      	ldr	r2, [pc, #72]	; (8001410 <prvInitialiseTaskLists+0x60>)
 80013c8:	4413      	add	r3, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f969 	bl	80006a2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3301      	adds	r3, #1
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b04      	cmp	r3, #4
 80013da:	d9ef      	bls.n	80013bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80013dc:	480d      	ldr	r0, [pc, #52]	; (8001414 <prvInitialiseTaskLists+0x64>)
 80013de:	f7ff f960 	bl	80006a2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80013e2:	480d      	ldr	r0, [pc, #52]	; (8001418 <prvInitialiseTaskLists+0x68>)
 80013e4:	f7ff f95d 	bl	80006a2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80013e8:	480c      	ldr	r0, [pc, #48]	; (800141c <prvInitialiseTaskLists+0x6c>)
 80013ea:	f7ff f95a 	bl	80006a2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80013ee:	480c      	ldr	r0, [pc, #48]	; (8001420 <prvInitialiseTaskLists+0x70>)
 80013f0:	f7ff f957 	bl	80006a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80013f4:	480b      	ldr	r0, [pc, #44]	; (8001424 <prvInitialiseTaskLists+0x74>)
 80013f6:	f7ff f954 	bl	80006a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <prvInitialiseTaskLists+0x78>)
 80013fc:	4a05      	ldr	r2, [pc, #20]	; (8001414 <prvInitialiseTaskLists+0x64>)
 80013fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001400:	4b0a      	ldr	r3, [pc, #40]	; (800142c <prvInitialiseTaskLists+0x7c>)
 8001402:	4a05      	ldr	r2, [pc, #20]	; (8001418 <prvInitialiseTaskLists+0x68>)
 8001404:	601a      	str	r2, [r3, #0]
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20003864 	.word	0x20003864
 8001414:	200038c8 	.word	0x200038c8
 8001418:	200038dc 	.word	0x200038dc
 800141c:	200038f8 	.word	0x200038f8
 8001420:	2000390c 	.word	0x2000390c
 8001424:	20003924 	.word	0x20003924
 8001428:	200038f0 	.word	0x200038f0
 800142c:	200038f4 	.word	0x200038f4

08001430 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001436:	e019      	b.n	800146c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001438:	f7ff fa36 	bl	80008a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <prvCheckTasksWaitingTermination+0x4c>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3304      	adds	r3, #4
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f978 	bl	800073e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <prvCheckTasksWaitingTermination+0x50>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	3b01      	subs	r3, #1
 8001454:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <prvCheckTasksWaitingTermination+0x50>)
 8001456:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <prvCheckTasksWaitingTermination+0x54>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3b01      	subs	r3, #1
 800145e:	4a09      	ldr	r2, [pc, #36]	; (8001484 <prvCheckTasksWaitingTermination+0x54>)
 8001460:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001462:	f7ff fa39 	bl	80008d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f846 	bl	80014f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <prvCheckTasksWaitingTermination+0x54>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1e1      	bne.n	8001438 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	2000390c 	.word	0x2000390c
 8001480:	20003938 	.word	0x20003938
 8001484:	20003920 	.word	0x20003920

08001488 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8001494:	e005      	b.n	80014a2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3301      	adds	r3, #1
 800149a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	3301      	adds	r3, #1
 80014a0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2ba5      	cmp	r3, #165	; 0xa5
 80014a8:	d0f5      	beq.n	8001496 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	089b      	lsrs	r3, r3, #2
 80014ae:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	b29b      	uxth	r3, r3
	}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
	...

080014c0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d102      	bne.n	80014d4 <uxTaskGetStackHighWaterMark+0x14>
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <uxTaskGetStackHighWaterMark+0x34>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	e000      	b.n	80014d6 <uxTaskGetStackHighWaterMark+0x16>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80014de:	6938      	ldr	r0, [r7, #16]
 80014e0:	f7ff ffd2 	bl	8001488 <prvTaskCheckFreeStackSpace>
 80014e4:	4603      	mov	r3, r0
 80014e6:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80014e8:	68fb      	ldr	r3, [r7, #12]
	}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20003860 	.word	0x20003860

080014f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fb03 	bl	8000b10 <vPortFree>
			vPortFree( pxTCB );
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff fb00 	bl	8000b10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <prvResetNextTaskUnblockTime+0x38>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d104      	bne.n	8001532 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <prvResetNextTaskUnblockTime+0x3c>)
 800152a:	f04f 32ff 	mov.w	r2, #4294967295
 800152e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001530:	e008      	b.n	8001544 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001532:	4b07      	ldr	r3, [pc, #28]	; (8001550 <prvResetNextTaskUnblockTime+0x38>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4a04      	ldr	r2, [pc, #16]	; (8001554 <prvResetNextTaskUnblockTime+0x3c>)
 8001542:	6013      	str	r3, [r2, #0]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	200038f0 	.word	0x200038f0
 8001554:	20003958 	.word	0x20003958

08001558 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800155c:	4803      	ldr	r0, [pc, #12]	; (800156c <_cbSendSystemDesc+0x14>)
 800155e:	f001 f8db 	bl	8002718 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001562:	4803      	ldr	r0, [pc, #12]	; (8001570 <_cbSendSystemDesc+0x18>)
 8001564:	f001 f8d8 	bl	8002718 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	08003154 	.word	0x08003154
 8001570:	08003194 	.word	0x08003194

08001574 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <SEGGER_SYSVIEW_Conf+0x1c>)
 800157a:	4a06      	ldr	r2, [pc, #24]	; (8001594 <SEGGER_SYSVIEW_Conf+0x20>)
 800157c:	4906      	ldr	r1, [pc, #24]	; (8001598 <SEGGER_SYSVIEW_Conf+0x24>)
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <SEGGER_SYSVIEW_Conf+0x24>)
 8001580:	f000 fd54 	bl	800202c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001584:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001588:	f000 fd8e 	bl	80020a8 <SEGGER_SYSVIEW_SetRAMBase>
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	08001559 	.word	0x08001559
 8001594:	08003254 	.word	0x08003254
 8001598:	044aa200 	.word	0x044aa200

0800159c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800159c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800159e:	b085      	sub	sp, #20
 80015a0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	e048      	b.n	800163a <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 80015a8:	4928      	ldr	r1, [pc, #160]	; (800164c <_cbSendTaskList+0xb0>)
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff81 	bl	80014c0 <uxTaskGetStackHighWaterMark>
 80015be:	4923      	ldr	r1, [pc, #140]	; (800164c <_cbSendTaskList+0xb0>)
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	3310      	adds	r3, #16
 80015ce:	6018      	str	r0, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80015d0:	491e      	ldr	r1, [pc, #120]	; (800164c <_cbSendTaskList+0xb0>)
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	6818      	ldr	r0, [r3, #0]
 80015e0:	491a      	ldr	r1, [pc, #104]	; (800164c <_cbSendTaskList+0xb0>)
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	3304      	adds	r3, #4
 80015f0:	681c      	ldr	r4, [r3, #0]
 80015f2:	4916      	ldr	r1, [pc, #88]	; (800164c <_cbSendTaskList+0xb0>)
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	3308      	adds	r3, #8
 8001602:	681d      	ldr	r5, [r3, #0]
 8001604:	4911      	ldr	r1, [pc, #68]	; (800164c <_cbSendTaskList+0xb0>)
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	330c      	adds	r3, #12
 8001614:	681e      	ldr	r6, [r3, #0]
 8001616:	490d      	ldr	r1, [pc, #52]	; (800164c <_cbSendTaskList+0xb0>)
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	3310      	adds	r3, #16
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	4633      	mov	r3, r6
 800162c:	462a      	mov	r2, r5
 800162e:	4621      	mov	r1, r4
 8001630:	f000 f8ae 	bl	8001790 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3301      	adds	r3, #1
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	4b05      	ldr	r3, [pc, #20]	; (8001650 <_cbSendTaskList+0xb4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	429a      	cmp	r2, r3
 8001642:	d3b1      	bcc.n	80015a8 <_cbSendTaskList+0xc>
  }
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800164c:	20003964 	.word	0x20003964
 8001650:	20003a04 	.word	0x20003a04

08001654 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800165c:	f7ff fd80 	bl	8001160 <xTaskGetTickCountFromISR>
 8001660:	4603      	mov	r3, r0
 8001662:	f04f 0400 	mov.w	r4, #0
 8001666:	e887 0018 	stmia.w	r7, {r3, r4}
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800166a:	e897 0006 	ldmia.w	r7, {r1, r2}
 800166e:	460b      	mov	r3, r1
 8001670:	4614      	mov	r4, r2
 8001672:	ea4f 1b44 	mov.w	fp, r4, lsl #5
 8001676:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
 800167a:	ea4f 1a43 	mov.w	sl, r3, lsl #5
 800167e:	4653      	mov	r3, sl
 8001680:	465c      	mov	r4, fp
 8001682:	1a5b      	subs	r3, r3, r1
 8001684:	eb64 0402 	sbc.w	r4, r4, r2
 8001688:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800168c:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
 8001690:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001694:	4643      	mov	r3, r8
 8001696:	464c      	mov	r4, r9
 8001698:	185b      	adds	r3, r3, r1
 800169a:	eb44 0402 	adc.w	r4, r4, r2
 800169e:	00e6      	lsls	r6, r4, #3
 80016a0:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 80016a4:	00dd      	lsls	r5, r3, #3
 80016a6:	462b      	mov	r3, r5
 80016a8:	4634      	mov	r4, r6
 80016aa:	e887 0018 	stmia.w	r7, {r3, r4}
  return Time;
 80016ae:	e897 0018 	ldmia.w	r7, {r3, r4}
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	4621      	mov	r1, r4
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080016c0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80016ce:	2205      	movs	r2, #5
 80016d0:	492b      	ldr	r1, [pc, #172]	; (8001780 <SYSVIEW_AddTask+0xc0>)
 80016d2:	68b8      	ldr	r0, [r7, #8]
 80016d4:	f001 fd0c 	bl	80030f0 <memcmp>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d04b      	beq.n	8001776 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80016de:	4b29      	ldr	r3, [pc, #164]	; (8001784 <SYSVIEW_AddTask+0xc4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b07      	cmp	r3, #7
 80016e4:	d903      	bls.n	80016ee <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80016e6:	4828      	ldr	r0, [pc, #160]	; (8001788 <SYSVIEW_AddTask+0xc8>)
 80016e8:	f001 faa4 	bl	8002c34 <SEGGER_SYSVIEW_Warn>
    return;
 80016ec:	e044      	b.n	8001778 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80016ee:	4b25      	ldr	r3, [pc, #148]	; (8001784 <SYSVIEW_AddTask+0xc4>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4926      	ldr	r1, [pc, #152]	; (800178c <SYSVIEW_AddTask+0xcc>)
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <SYSVIEW_AddTask+0xc4>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4921      	ldr	r1, [pc, #132]	; (800178c <SYSVIEW_AddTask+0xcc>)
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	3304      	adds	r3, #4
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001718:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <SYSVIEW_AddTask+0xc4>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	491b      	ldr	r1, [pc, #108]	; (800178c <SYSVIEW_AddTask+0xcc>)
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	3308      	adds	r3, #8
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <SYSVIEW_AddTask+0xc4>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	4916      	ldr	r1, [pc, #88]	; (800178c <SYSVIEW_AddTask+0xcc>)
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	440b      	add	r3, r1
 800173e:	330c      	adds	r3, #12
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <SYSVIEW_AddTask+0xc4>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4910      	ldr	r1, [pc, #64]	; (800178c <SYSVIEW_AddTask+0xcc>)
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	440b      	add	r3, r1
 8001754:	3310      	adds	r3, #16
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <SYSVIEW_AddTask+0xc4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	3301      	adds	r3, #1
 8001760:	4a08      	ldr	r2, [pc, #32]	; (8001784 <SYSVIEW_AddTask+0xc4>)
 8001762:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 f80e 	bl	8001790 <SYSVIEW_SendTaskInfo>
 8001774:	e000      	b.n	8001778 <SYSVIEW_AddTask+0xb8>
    return;
 8001776:	bf00      	nop

}
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	080031a4 	.word	0x080031a4
 8001784:	20003a04 	.word	0x20003a04
 8001788:	080031ac 	.word	0x080031ac
 800178c:	20003964 	.word	0x20003964

08001790 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	; 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
 800179c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	2214      	movs	r2, #20
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f001 fcbc 	bl	8003124 <memset>
  TaskInfo.TaskID     = TaskID;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80017bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 fead 	bl	8002524 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80017ca:	bf00      	nop
 80017cc:	3728      	adds	r7, #40	; 0x28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 80017da:	4b21      	ldr	r3, [pc, #132]	; (8001860 <_DoInit+0x8c>)
 80017dc:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2203      	movs	r2, #3
 80017e2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2203      	movs	r2, #3
 80017e8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a1d      	ldr	r2, [pc, #116]	; (8001864 <_DoInit+0x90>)
 80017ee:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a1d      	ldr	r2, [pc, #116]	; (8001868 <_DoInit+0x94>)
 80017f4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017fc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a14      	ldr	r2, [pc, #80]	; (8001864 <_DoInit+0x90>)
 8001814:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a14      	ldr	r2, [pc, #80]	; (800186c <_DoInit+0x98>)
 800181a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2210      	movs	r2, #16
 8001820:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3307      	adds	r3, #7
 8001838:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <_DoInit+0x9c>)
 800183a:	6810      	ldr	r0, [r2, #0]
 800183c:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a0c      	ldr	r2, [pc, #48]	; (8001874 <_DoInit+0xa0>)
 8001842:	6810      	ldr	r0, [r2, #0]
 8001844:	6018      	str	r0, [r3, #0]
 8001846:	8891      	ldrh	r1, [r2, #4]
 8001848:	7992      	ldrb	r2, [r2, #6]
 800184a:	8099      	strh	r1, [r3, #4]
 800184c:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2220      	movs	r2, #32
 8001852:	719a      	strb	r2, [r3, #6]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	2000433c 	.word	0x2000433c
 8001864:	080031fc 	.word	0x080031fc
 8001868:	20003a08 	.word	0x20003a08
 800186c:	20003e08 	.word	0x20003e08
 8001870:	08003208 	.word	0x08003208
 8001874:	0800320c 	.word	0x0800320c

08001878 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8001884:	4b3c      	ldr	r3, [pc, #240]	; (8001978 <SEGGER_RTT_ReadNoLock+0x100>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <SEGGER_RTT_ReadNoLock+0x18>
 800188c:	f7ff ffa2 	bl	80017d4 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4613      	mov	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	3360      	adds	r3, #96	; 0x60
 800189c:	4a36      	ldr	r2, [pc, #216]	; (8001978 <SEGGER_RTT_ReadNoLock+0x100>)
 800189e:	4413      	add	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80018b6:	6a3a      	ldr	r2, [r7, #32]
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d92a      	bls.n	8001914 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4293      	cmp	r3, r2
 80018ce:	bf28      	it	cs
 80018d0:	4613      	movcs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	4413      	add	r3, r2
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4619      	mov	r1, r3
 80018e0:	69f8      	ldr	r0, [r7, #28]
 80018e2:	f001 fc14 	bl	800310e <memcpy>
    NumBytesRead += NumBytesRem;
 80018e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4413      	add	r3, r2
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	4413      	add	r3, r2
 80018f4:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80018fe:	6a3a      	ldr	r2, [r7, #32]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4413      	add	r3, r2
 8001904:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	6a3b      	ldr	r3, [r7, #32]
 800190c:	429a      	cmp	r2, r3
 800190e:	d101      	bne.n	8001914 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4293      	cmp	r3, r2
 8001922:	bf28      	it	cs
 8001924:	4613      	movcs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d018      	beq.n	8001960 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	6a3b      	ldr	r3, [r7, #32]
 8001934:	4413      	add	r3, r2
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4619      	mov	r1, r3
 800193a:	69f8      	ldr	r0, [r7, #28]
 800193c:	f001 fbe7 	bl	800310e <memcpy>
    NumBytesRead += NumBytesRem;
 8001940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4413      	add	r3, r2
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4413      	add	r3, r2
 800194e:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001958:	6a3a      	ldr	r2, [r7, #32]
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	4413      	add	r3, r2
 800195e:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	6a3a      	ldr	r2, [r7, #32]
 800196a:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800196e:	4618      	mov	r0, r3
 8001970:	3728      	adds	r7, #40	; 0x28
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	2000433c 	.word	0x2000433c

0800197c <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	; 0x28
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	4a3f      	ldr	r2, [pc, #252]	; (8001a98 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 800199a:	4413      	add	r3, r2
 800199c:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d854      	bhi.n	8001a5c <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	3b01      	subs	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d30f      	bcc.n	80019e6 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80019c6:	6a3b      	ldr	r3, [r7, #32]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	4413      	add	r3, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019d2:	4618      	mov	r0, r3
 80019d4:	f001 fb9b 	bl	800310e <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	441a      	add	r2, r3
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e054      	b.n	8001a90 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	4413      	add	r3, r2
 80019ec:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d34b      	bcc.n	8001a8e <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d90e      	bls.n	8001a26 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	4413      	add	r3, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a14:	4618      	mov	r0, r3
 8001a16:	f001 fb7a 	bl	800310e <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	441a      	add	r2, r3
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	60da      	str	r2, [r3, #12]
 8001a24:	e018      	b.n	8001a58 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a32:	4618      	mov	r0, r3
 8001a34:	f001 fb6b 	bl	800310e <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	6858      	ldr	r0, [r3, #4]
 8001a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	18d1      	adds	r1, r2, r3
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	f001 fb60 	bl	800310e <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad2      	subs	r2, r2, r3
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e019      	b.n	8001a90 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	3b01      	subs	r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d30f      	bcc.n	8001a8e <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	4413      	add	r3, r2
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f001 fb47 	bl	800310e <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	441a      	add	r2, r3
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3728      	adds	r7, #40	; 0x28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	2000433c 	.word	0x2000433c

08001a9c <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8001aaa:	4b30      	ldr	r3, [pc, #192]	; (8001b6c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8001ab2:	f7ff fe8f 	bl	80017d4 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8001ab6:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d94c      	bls.n	8001b5c <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8001ac2:	f3ef 8311 	mrs	r3, BASEPRI
 8001ac6:	f04f 0120 	mov.w	r1, #32
 8001aca:	f381 8811 	msr	BASEPRI, r1
 8001ace:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d032      	beq.n	8001b3c <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8001ad6:	4925      	ldr	r1, [pc, #148]	; (8001b6c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	4613      	mov	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	4413      	add	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	440b      	add	r3, r1
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8001aea:	4920      	ldr	r1, [pc, #128]	; (8001b6c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	440b      	add	r3, r1
 8001afa:	3304      	adds	r3, #4
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8001b00:	491a      	ldr	r1, [pc, #104]	; (8001b6c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	4613      	mov	r3, r2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4413      	add	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	440b      	add	r3, r1
 8001b0e:	3320      	adds	r3, #32
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8001b14:	4915      	ldr	r1, [pc, #84]	; (8001b6c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	440b      	add	r3, r1
 8001b22:	3328      	adds	r3, #40	; 0x28
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8001b28:	4910      	ldr	r1, [pc, #64]	; (8001b6c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	440b      	add	r3, r1
 8001b36:	3324      	adds	r3, #36	; 0x24
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8001b3c:	490b      	ldr	r1, [pc, #44]	; (8001b6c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	440b      	add	r3, r1
 8001b4a:	332c      	adds	r3, #44	; 0x2c
 8001b4c:	6a3a      	ldr	r2, [r7, #32]
 8001b4e:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	e002      	b.n	8001b62 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8001b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b60:	617b      	str	r3, [r7, #20]
  }
  return r;
 8001b62:	697b      	ldr	r3, [r7, #20]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	2000433c 	.word	0x2000433c

08001b70 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8001b7e:	4b30      	ldr	r3, [pc, #192]	; (8001c40 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8001b86:	f7ff fe25 	bl	80017d4 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8001b8a:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d94b      	bls.n	8001c2e <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8001b96:	f3ef 8311 	mrs	r3, BASEPRI
 8001b9a:	f04f 0120 	mov.w	r1, #32
 8001b9e:	f381 8811 	msr	BASEPRI, r1
 8001ba2:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d031      	beq.n	8001c0e <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8001baa:	4925      	ldr	r1, [pc, #148]	; (8001c40 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	440b      	add	r3, r1
 8001bb8:	3360      	adds	r3, #96	; 0x60
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8001bbe:	4920      	ldr	r1, [pc, #128]	; (8001c40 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	3364      	adds	r3, #100	; 0x64
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8001bd2:	491b      	ldr	r1, [pc, #108]	; (8001c40 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4413      	add	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	440b      	add	r3, r1
 8001be0:	3368      	adds	r3, #104	; 0x68
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8001be6:	4916      	ldr	r1, [pc, #88]	; (8001c40 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	4613      	mov	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	440b      	add	r3, r1
 8001bf4:	3370      	adds	r3, #112	; 0x70
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8001bfa:	4911      	ldr	r1, [pc, #68]	; (8001c40 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	336c      	adds	r3, #108	; 0x6c
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8001c0e:	490c      	ldr	r1, [pc, #48]	; (8001c40 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	440b      	add	r3, r1
 8001c1c:	3374      	adds	r3, #116	; 0x74
 8001c1e:	6a3a      	ldr	r2, [r7, #32]
 8001c20:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	e002      	b.n	8001c34 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c32:	617b      	str	r3, [r7, #20]
  }
  return r;
 8001c34:	697b      	ldr	r3, [r7, #20]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	2000433c 	.word	0x2000433c

08001c44 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8001c44:	b480      	push	{r7}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8001c54:	e002      	b.n	8001c5c <_EncodeStr+0x18>
    Len++;
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4413      	add	r3, r2
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f6      	bne.n	8001c56 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d901      	bls.n	8001c74 <_EncodeStr+0x30>
    Len = Limit;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	2bfe      	cmp	r3, #254	; 0xfe
 8001c78:	d806      	bhi.n	8001c88 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	60fa      	str	r2, [r7, #12]
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	701a      	strb	r2, [r3, #0]
 8001c86:	e011      	b.n	8001cac <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	60fa      	str	r2, [r7, #12]
 8001c8e:	22ff      	movs	r2, #255	; 0xff
 8001c90:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	60fa      	str	r2, [r7, #12]
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	60fa      	str	r2, [r7, #12]
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	0a12      	lsrs	r2, r2, #8
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8001cb0:	e00a      	b.n	8001cc8 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1c5a      	adds	r2, r3, #1
 8001cb6:	60fa      	str	r2, [r7, #12]
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	1c51      	adds	r1, r2, #1
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	7812      	ldrb	r2, [r2, #0]
 8001cc0:	701a      	strb	r2, [r3, #0]
    n++;
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d3f0      	bcc.n	8001cb2 <_EncodeStr+0x6e>
  }
  return pPayload;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	371c      	adds	r7, #28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3304      	adds	r3, #4
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001cf8:	1cfb      	adds	r3, r7, #3
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f7ff fdba 	bl	8001878 <SEGGER_RTT_ReadNoLock>
 8001d04:	4603      	mov	r3, r0
 8001d06:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	dd47      	ble.n	8001d9e <_HandleIncomingPacket+0xac>
    switch (Cmd) {
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d01a      	beq.n	8001d4a <_HandleIncomingPacket+0x58>
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	dc06      	bgt.n	8001d26 <_HandleIncomingPacket+0x34>
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d010      	beq.n	8001d3e <_HandleIncomingPacket+0x4c>
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	dc11      	bgt.n	8001d44 <_HandleIncomingPacket+0x52>
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d009      	beq.n	8001d38 <_HandleIncomingPacket+0x46>
 8001d24:	e02d      	b.n	8001d82 <_HandleIncomingPacket+0x90>
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d015      	beq.n	8001d56 <_HandleIncomingPacket+0x64>
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	db10      	blt.n	8001d50 <_HandleIncomingPacket+0x5e>
 8001d2e:	2b07      	cmp	r3, #7
 8001d30:	d014      	beq.n	8001d5c <_HandleIncomingPacket+0x6a>
 8001d32:	2b80      	cmp	r3, #128	; 0x80
 8001d34:	d015      	beq.n	8001d62 <_HandleIncomingPacket+0x70>
 8001d36:	e024      	b.n	8001d82 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8001d38:	f000 fa78 	bl	800222c <SEGGER_SYSVIEW_Start>
      break;
 8001d3c:	e02f      	b.n	8001d9e <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8001d3e:	f000 fb31 	bl	80023a4 <SEGGER_SYSVIEW_Stop>
      break;
 8001d42:	e02c      	b.n	8001d9e <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8001d44:	f000 fd0c 	bl	8002760 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8001d48:	e029      	b.n	8001d9e <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8001d4a:	f000 fcd1 	bl	80026f0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8001d4e:	e026      	b.n	8001d9e <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8001d50:	f000 fb4e 	bl	80023f0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8001d54:	e023      	b.n	8001d9e <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8001d56:	f000 ff2f 	bl	8002bb8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8001d5a:	e020      	b.n	8001d9e <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8001d5c:	f000 ff0e 	bl	8002b7c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8001d60:	e01d      	b.n	8001d9e <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001d62:	1cfb      	adds	r3, r7, #3
 8001d64:	2201      	movs	r2, #1
 8001d66:	4619      	mov	r1, r3
 8001d68:	2001      	movs	r0, #1
 8001d6a:	f7ff fd85 	bl	8001878 <SEGGER_RTT_ReadNoLock>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	dd0f      	ble.n	8001d98 <_HandleIncomingPacket+0xa6>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 fe7e 	bl	8002a7c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8001d80:	e00a      	b.n	8001d98 <_HandleIncomingPacket+0xa6>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8001d82:	78fb      	ldrb	r3, [r7, #3]
 8001d84:	b25b      	sxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	da08      	bge.n	8001d9c <_HandleIncomingPacket+0xaa>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001d8a:	1cfb      	adds	r3, r7, #3
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	4619      	mov	r1, r3
 8001d90:	2001      	movs	r0, #1
 8001d92:	f7ff fd71 	bl	8001878 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8001d96:	e001      	b.n	8001d9c <_HandleIncomingPacket+0xaa>
      break;
 8001d98:	bf00      	nop
 8001d9a:	e000      	b.n	8001d9e <_HandleIncomingPacket+0xac>
      break;
 8001d9c:	bf00      	nop
    }
  }
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08c      	sub	sp, #48	; 0x30
 8001dac:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8001dae:	2301      	movs	r3, #1
 8001db0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	3301      	adds	r3, #1
 8001db6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dbc:	4b30      	ldr	r3, [pc, #192]	; (8001e80 <_TrySendOverflowPacket+0xd8>)
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dc2:	e00b      	b.n	8001ddc <_TrySendOverflowPacket+0x34>
 8001dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	701a      	strb	r2, [r3, #0]
 8001dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd8:	09db      	lsrs	r3, r3, #7
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dde:	2b7f      	cmp	r3, #127	; 0x7f
 8001de0:	d8f0      	bhi.n	8001dc4 <_TrySendOverflowPacket+0x1c>
 8001de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	701a      	strb	r2, [r3, #0]
 8001dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001df2:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <_TrySendOverflowPacket+0xdc>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001df8:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <_TrySendOverflowPacket+0xd8>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	623b      	str	r3, [r7, #32]
 8001e0a:	e00b      	b.n	8001e24 <_TrySendOverflowPacket+0x7c>
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	627a      	str	r2, [r7, #36]	; 0x24
 8001e12:	6a3a      	ldr	r2, [r7, #32]
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	701a      	strb	r2, [r3, #0]
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	09db      	lsrs	r3, r3, #7
 8001e22:	623b      	str	r3, [r7, #32]
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	2b7f      	cmp	r3, #127	; 0x7f
 8001e28:	d8f0      	bhi.n	8001e0c <_TrySendOverflowPacket+0x64>
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	627a      	str	r2, [r7, #36]	; 0x24
 8001e30:	6a3a      	ldr	r2, [r7, #32]
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	701a      	strb	r2, [r3, #0]
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	1d3b      	adds	r3, r7, #4
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	4619      	mov	r1, r3
 8001e46:	2001      	movs	r0, #1
 8001e48:	f7ff fd98 	bl	800197c <SEGGER_RTT_WriteSkipNoLock>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	613b      	str	r3, [r7, #16]
  if (Status) {
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d009      	beq.n	8001e6a <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001e56:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <_TrySendOverflowPacket+0xd8>)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <_TrySendOverflowPacket+0xd8>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <_TrySendOverflowPacket+0xd8>)
 8001e66:	701a      	strb	r2, [r3, #0]
 8001e68:	e004      	b.n	8001e74 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8001e6a:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <_TrySendOverflowPacket+0xd8>)
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	4a03      	ldr	r2, [pc, #12]	; (8001e80 <_TrySendOverflowPacket+0xd8>)
 8001e72:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8001e74:	693b      	ldr	r3, [r7, #16]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3730      	adds	r7, #48	; 0x30
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20004220 	.word	0x20004220
 8001e84:	e0001004 	.word	0xe0001004

08001e88 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8001e94:	4b62      	ldr	r3, [pc, #392]	; (8002020 <_SendPacket+0x198>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d010      	beq.n	8001ebe <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8001e9c:	4b60      	ldr	r3, [pc, #384]	; (8002020 <_SendPacket+0x198>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 809f 	beq.w	8001fe4 <_SendPacket+0x15c>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8001ea6:	4b5e      	ldr	r3, [pc, #376]	; (8002020 <_SendPacket+0x198>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d108      	bne.n	8001ec0 <_SendPacket+0x38>
    _TrySendOverflowPacket();
 8001eae:	f7ff ff7b 	bl	8001da8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8001eb2:	4b5b      	ldr	r3, [pc, #364]	; (8002020 <_SendPacket+0x198>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	f040 8096 	bne.w	8001fe8 <_SendPacket+0x160>
 8001ebc:	e000      	b.n	8001ec0 <_SendPacket+0x38>
    goto Send;
 8001ebe:	bf00      	nop
Send:
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b1f      	cmp	r3, #31
 8001ec4:	d809      	bhi.n	8001eda <_SendPacket+0x52>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8001ec6:	4b56      	ldr	r3, [pc, #344]	; (8002020 <_SendPacket+0x198>)
 8001ec8:	69da      	ldr	r2, [r3, #28]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f040 8089 	bne.w	8001fec <_SendPacket+0x164>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b17      	cmp	r3, #23
 8001ede:	d807      	bhi.n	8001ef0 <_SendPacket+0x68>
    *--pStartPacket = EventId;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	701a      	strb	r2, [r3, #0]
 8001eee:	e03d      	b.n	8001f6c <_SendPacket+0xe4>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	2b7f      	cmp	r3, #127	; 0x7f
 8001efc:	d912      	bls.n	8001f24 <_SendPacket+0x9c>
      *--pStartPacket = (NumBytes >> 7);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	09db      	lsrs	r3, r3, #7
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	701a      	strb	r2, [r3, #0]
 8001f22:	e006      	b.n	8001f32 <_SendPacket+0xaa>
    } else {
      *--pStartPacket = NumBytes;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b7f      	cmp	r3, #127	; 0x7f
 8001f36:	d912      	bls.n	8001f5e <_SendPacket+0xd6>
      *--pStartPacket = (EventId >> 7);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	09db      	lsrs	r3, r3, #7
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	701a      	strb	r2, [r3, #0]
 8001f5c:	e006      	b.n	8001f6c <_SendPacket+0xe4>
    } else {
      *--pStartPacket = EventId;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001f6c:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <_SendPacket+0x19c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001f72:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <_SendPacket+0x198>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	623b      	str	r3, [r7, #32]
 8001f84:	e00b      	b.n	8001f9e <_SendPacket+0x116>
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	627a      	str	r2, [r7, #36]	; 0x24
 8001f8c:	6a3a      	ldr	r2, [r7, #32]
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	701a      	strb	r2, [r3, #0]
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	09db      	lsrs	r3, r3, #7
 8001f9c:	623b      	str	r3, [r7, #32]
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	2b7f      	cmp	r3, #127	; 0x7f
 8001fa2:	d8f0      	bhi.n	8001f86 <_SendPacket+0xfe>
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	627a      	str	r2, [r7, #36]	; 0x24
 8001faa:	6a3a      	ldr	r2, [r7, #32]
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	701a      	strb	r2, [r3, #0]
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68f9      	ldr	r1, [r7, #12]
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	f7ff fcdc 	bl	800197c <SEGGER_RTT_WriteSkipNoLock>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	613b      	str	r3, [r7, #16]
  if (Status) {
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <_SendPacket+0x14e>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001fce:	4a14      	ldr	r2, [pc, #80]	; (8002020 <_SendPacket+0x198>)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	60d3      	str	r3, [r2, #12]
 8001fd4:	e00b      	b.n	8001fee <_SendPacket+0x166>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <_SendPacket+0x198>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <_SendPacket+0x198>)
 8001fe0:	701a      	strb	r2, [r3, #0]
 8001fe2:	e004      	b.n	8001fee <_SendPacket+0x166>
    goto SendDone;
 8001fe4:	bf00      	nop
 8001fe6:	e002      	b.n	8001fee <_SendPacket+0x166>
      goto SendDone;
 8001fe8:	bf00      	nop
 8001fea:	e000      	b.n	8001fee <_SendPacket+0x166>
      goto SendDone;
 8001fec:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <_SendPacket+0x1a0>)
 8001ff0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <_SendPacket+0x1a0>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d00b      	beq.n	8002016 <_SendPacket+0x18e>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <_SendPacket+0x198>)
 8002000:	789b      	ldrb	r3, [r3, #2]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d107      	bne.n	8002016 <_SendPacket+0x18e>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <_SendPacket+0x198>)
 8002008:	2201      	movs	r2, #1
 800200a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800200c:	f7ff fe71 	bl	8001cf2 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <_SendPacket+0x198>)
 8002012:	2200      	movs	r2, #0
 8002014:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002016:	bf00      	nop
 8002018:	3728      	adds	r7, #40	; 0x28
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20004220 	.word	0x20004220
 8002024:	e0001004 	.word	0xe0001004
 8002028:	2000433c 	.word	0x2000433c

0800202c <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af02      	add	r7, sp, #8
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800203a:	2300      	movs	r3, #0
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002042:	4a14      	ldr	r2, [pc, #80]	; (8002094 <SEGGER_SYSVIEW_Init+0x68>)
 8002044:	4914      	ldr	r1, [pc, #80]	; (8002098 <SEGGER_SYSVIEW_Init+0x6c>)
 8002046:	2001      	movs	r0, #1
 8002048:	f7ff fd28 	bl	8001a9c <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800204c:	2300      	movs	r3, #0
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	2308      	movs	r3, #8
 8002052:	4a12      	ldr	r2, [pc, #72]	; (800209c <SEGGER_SYSVIEW_Init+0x70>)
 8002054:	4910      	ldr	r1, [pc, #64]	; (8002098 <SEGGER_SYSVIEW_Init+0x6c>)
 8002056:	2001      	movs	r0, #1
 8002058:	f7ff fd8a 	bl	8001b70 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800205c:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <SEGGER_SYSVIEW_Init+0x74>)
 800205e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002062:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <SEGGER_SYSVIEW_Init+0x78>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0d      	ldr	r2, [pc, #52]	; (80020a0 <SEGGER_SYSVIEW_Init+0x74>)
 800206a:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800206c:	4a0c      	ldr	r2, [pc, #48]	; (80020a0 <SEGGER_SYSVIEW_Init+0x74>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8002072:	4a0b      	ldr	r2, [pc, #44]	; (80020a0 <SEGGER_SYSVIEW_Init+0x74>)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8002078:	4a09      	ldr	r2, [pc, #36]	; (80020a0 <SEGGER_SYSVIEW_Init+0x74>)
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800207e:	4a08      	ldr	r2, [pc, #32]	; (80020a0 <SEGGER_SYSVIEW_Init+0x74>)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <SEGGER_SYSVIEW_Init+0x74>)
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20003e18 	.word	0x20003e18
 8002098:	08003214 	.word	0x08003214
 800209c:	20004218 	.word	0x20004218
 80020a0:	20004220 	.word	0x20004220
 80020a4:	e0001004 	.word	0xe0001004

080020a8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80020b0:	4a03      	ldr	r2, [pc, #12]	; (80020c0 <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6113      	str	r3, [r2, #16]
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	20004220 	.word	0x20004220

080020c4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80020cc:	f3ef 8311 	mrs	r3, BASEPRI
 80020d0:	f04f 0120 	mov.w	r1, #32
 80020d4:	f381 8811 	msr	BASEPRI, r1
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	4808      	ldr	r0, [pc, #32]	; (80020fc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80020dc:	f7ff fdfe 	bl	8001cdc <_PreparePacket>
 80020e0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	68b8      	ldr	r0, [r7, #8]
 80020e8:	f7ff fece 	bl	8001e88 <_SendPacket>
  RECORD_END();
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f383 8811 	msr	BASEPRI, r3
}
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20004250 	.word	0x20004250

08002100 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800210a:	f3ef 8311 	mrs	r3, BASEPRI
 800210e:	f04f 0120 	mov.w	r1, #32
 8002112:	f381 8811 	msr	BASEPRI, r1
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	4816      	ldr	r0, [pc, #88]	; (8002174 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800211a:	f7ff fddf 	bl	8001cdc <_PreparePacket>
 800211e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	61bb      	str	r3, [r7, #24]
 800212c:	e00b      	b.n	8002146 <SEGGER_SYSVIEW_RecordU32+0x46>
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	61fa      	str	r2, [r7, #28]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	701a      	strb	r2, [r3, #0]
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	09db      	lsrs	r3, r3, #7
 8002144:	61bb      	str	r3, [r7, #24]
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2b7f      	cmp	r3, #127	; 0x7f
 800214a:	d8f0      	bhi.n	800212e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	61fa      	str	r2, [r7, #28]
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	701a      	strb	r2, [r3, #0]
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	68f9      	ldr	r1, [r7, #12]
 8002160:	6938      	ldr	r0, [r7, #16]
 8002162:	f7ff fe91 	bl	8001e88 <_SendPacket>
  RECORD_END();
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f383 8811 	msr	BASEPRI, r3
}
 800216c:	bf00      	nop
 800216e:	3720      	adds	r7, #32
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20004250 	.word	0x20004250

08002178 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b08c      	sub	sp, #48	; 0x30
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002184:	f3ef 8311 	mrs	r3, BASEPRI
 8002188:	f04f 0120 	mov.w	r1, #32
 800218c:	f381 8811 	msr	BASEPRI, r1
 8002190:	61fb      	str	r3, [r7, #28]
 8002192:	4825      	ldr	r0, [pc, #148]	; (8002228 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002194:	f7ff fda2 	bl	8001cdc <_PreparePacket>
 8002198:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80021a6:	e00b      	b.n	80021c0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80021a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	701a      	strb	r2, [r3, #0]
 80021ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021bc:	09db      	lsrs	r3, r3, #7
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
 80021c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c2:	2b7f      	cmp	r3, #127	; 0x7f
 80021c4:	d8f0      	bhi.n	80021a8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80021c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	701a      	strb	r2, [r3, #0]
 80021d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	623b      	str	r3, [r7, #32]
 80021de:	e00b      	b.n	80021f8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	627a      	str	r2, [r7, #36]	; 0x24
 80021e6:	6a3a      	ldr	r2, [r7, #32]
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	09db      	lsrs	r3, r3, #7
 80021f6:	623b      	str	r3, [r7, #32]
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	2b7f      	cmp	r3, #127	; 0x7f
 80021fc:	d8f0      	bhi.n	80021e0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	627a      	str	r2, [r7, #36]	; 0x24
 8002204:	6a3a      	ldr	r2, [r7, #32]
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	6979      	ldr	r1, [r7, #20]
 8002212:	69b8      	ldr	r0, [r7, #24]
 8002214:	f7ff fe38 	bl	8001e88 <_SendPacket>
  RECORD_END();
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f383 8811 	msr	BASEPRI, r3
}
 800221e:	bf00      	nop
 8002220:	3730      	adds	r7, #48	; 0x30
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20004250 	.word	0x20004250

0800222c <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b08c      	sub	sp, #48	; 0x30
 8002230:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002232:	4b59      	ldr	r3, [pc, #356]	; (8002398 <SEGGER_SYSVIEW_Start+0x16c>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	f040 80aa 	bne.w	8002390 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 800223c:	4b56      	ldr	r3, [pc, #344]	; (8002398 <SEGGER_SYSVIEW_Start+0x16c>)
 800223e:	2201      	movs	r2, #1
 8002240:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8002242:	f3ef 8311 	mrs	r3, BASEPRI
 8002246:	f04f 0120 	mov.w	r1, #32
 800224a:	f381 8811 	msr	BASEPRI, r1
 800224e:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8002250:	220a      	movs	r2, #10
 8002252:	4952      	ldr	r1, [pc, #328]	; (800239c <SEGGER_SYSVIEW_Start+0x170>)
 8002254:	2001      	movs	r0, #1
 8002256:	f7ff fb91 	bl	800197c <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002260:	200a      	movs	r0, #10
 8002262:	f7ff ff2f 	bl	80020c4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002266:	f3ef 8311 	mrs	r3, BASEPRI
 800226a:	f04f 0120 	mov.w	r1, #32
 800226e:	f381 8811 	msr	BASEPRI, r1
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	484a      	ldr	r0, [pc, #296]	; (80023a0 <SEGGER_SYSVIEW_Start+0x174>)
 8002276:	f7ff fd31 	bl	8001cdc <_PreparePacket>
 800227a:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002284:	4b44      	ldr	r3, [pc, #272]	; (8002398 <SEGGER_SYSVIEW_Start+0x16c>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
 800228a:	e00b      	b.n	80022a4 <SEGGER_SYSVIEW_Start+0x78>
 800228c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]
 800229e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a0:	09db      	lsrs	r3, r3, #7
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80022a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a6:	2b7f      	cmp	r3, #127	; 0x7f
 80022a8:	d8f0      	bhi.n	800228c <SEGGER_SYSVIEW_Start+0x60>
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ac:	1c5a      	adds	r2, r3, #1
 80022ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	701a      	strb	r2, [r3, #0]
 80022b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
 80022be:	4b36      	ldr	r3, [pc, #216]	; (8002398 <SEGGER_SYSVIEW_Start+0x16c>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	623b      	str	r3, [r7, #32]
 80022c4:	e00b      	b.n	80022de <SEGGER_SYSVIEW_Start+0xb2>
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	627a      	str	r2, [r7, #36]	; 0x24
 80022cc:	6a3a      	ldr	r2, [r7, #32]
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	701a      	strb	r2, [r3, #0]
 80022d8:	6a3b      	ldr	r3, [r7, #32]
 80022da:	09db      	lsrs	r3, r3, #7
 80022dc:	623b      	str	r3, [r7, #32]
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	2b7f      	cmp	r3, #127	; 0x7f
 80022e2:	d8f0      	bhi.n	80022c6 <SEGGER_SYSVIEW_Start+0x9a>
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	627a      	str	r2, [r7, #36]	; 0x24
 80022ea:	6a3a      	ldr	r2, [r7, #32]
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	701a      	strb	r2, [r3, #0]
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	61fb      	str	r3, [r7, #28]
 80022f8:	4b27      	ldr	r3, [pc, #156]	; (8002398 <SEGGER_SYSVIEW_Start+0x16c>)
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	e00b      	b.n	8002318 <SEGGER_SYSVIEW_Start+0xec>
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	61fa      	str	r2, [r7, #28]
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	701a      	strb	r2, [r3, #0]
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	09db      	lsrs	r3, r3, #7
 8002316:	61bb      	str	r3, [r7, #24]
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	2b7f      	cmp	r3, #127	; 0x7f
 800231c:	d8f0      	bhi.n	8002300 <SEGGER_SYSVIEW_Start+0xd4>
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	61fa      	str	r2, [r7, #28]
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	2302      	movs	r3, #2
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	e00b      	b.n	8002350 <SEGGER_SYSVIEW_Start+0x124>
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	617a      	str	r2, [r7, #20]
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	701a      	strb	r2, [r3, #0]
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	09db      	lsrs	r3, r3, #7
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	2b7f      	cmp	r3, #127	; 0x7f
 8002354:	d8f0      	bhi.n	8002338 <SEGGER_SYSVIEW_Start+0x10c>
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	617a      	str	r2, [r7, #20]
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	701a      	strb	r2, [r3, #0]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002366:	2218      	movs	r2, #24
 8002368:	6839      	ldr	r1, [r7, #0]
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff fd8c 	bl	8001e88 <_SendPacket>
      RECORD_END();
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <SEGGER_SYSVIEW_Start+0x16c>)
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 800237e:	4b06      	ldr	r3, [pc, #24]	; (8002398 <SEGGER_SYSVIEW_Start+0x16c>)
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002384:	f000 f9ec 	bl	8002760 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002388:	f000 f9b2 	bl	80026f0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800238c:	f000 fc14 	bl	8002bb8 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8002390:	bf00      	nop
 8002392:	3730      	adds	r7, #48	; 0x30
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20004220 	.word	0x20004220
 800239c:	0800325c 	.word	0x0800325c
 80023a0:	20004250 	.word	0x20004250

080023a4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80023aa:	f3ef 8311 	mrs	r3, BASEPRI
 80023ae:	f04f 0120 	mov.w	r1, #32
 80023b2:	f381 8811 	msr	BASEPRI, r1
 80023b6:	607b      	str	r3, [r7, #4]
 80023b8:	480b      	ldr	r0, [pc, #44]	; (80023e8 <SEGGER_SYSVIEW_Stop+0x44>)
 80023ba:	f7ff fc8f 	bl	8001cdc <_PreparePacket>
 80023be:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80023c0:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <SEGGER_SYSVIEW_Stop+0x48>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d007      	beq.n	80023d8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80023c8:	220b      	movs	r2, #11
 80023ca:	6839      	ldr	r1, [r7, #0]
 80023cc:	6838      	ldr	r0, [r7, #0]
 80023ce:	f7ff fd5b 	bl	8001e88 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <SEGGER_SYSVIEW_Stop+0x48>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f383 8811 	msr	BASEPRI, r3
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20004250 	.word	0x20004250
 80023ec:	20004220 	.word	0x20004220

080023f0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08c      	sub	sp, #48	; 0x30
 80023f4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80023f6:	f3ef 8311 	mrs	r3, BASEPRI
 80023fa:	f04f 0120 	mov.w	r1, #32
 80023fe:	f381 8811 	msr	BASEPRI, r1
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	4845      	ldr	r0, [pc, #276]	; (800251c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8002406:	f7ff fc69 	bl	8001cdc <_PreparePacket>
 800240a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002414:	4b42      	ldr	r3, [pc, #264]	; (8002520 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	62bb      	str	r3, [r7, #40]	; 0x28
 800241a:	e00b      	b.n	8002434 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800241c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	701a      	strb	r2, [r3, #0]
 800242e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002430:	09db      	lsrs	r3, r3, #7
 8002432:	62bb      	str	r3, [r7, #40]	; 0x28
 8002434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002436:	2b7f      	cmp	r3, #127	; 0x7f
 8002438:	d8f0      	bhi.n	800241c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]
 8002446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002448:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
 800244e:	4b34      	ldr	r3, [pc, #208]	; (8002520 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	623b      	str	r3, [r7, #32]
 8002454:	e00b      	b.n	800246e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	627a      	str	r2, [r7, #36]	; 0x24
 800245c:	6a3a      	ldr	r2, [r7, #32]
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	701a      	strb	r2, [r3, #0]
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	09db      	lsrs	r3, r3, #7
 800246c:	623b      	str	r3, [r7, #32]
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	2b7f      	cmp	r3, #127	; 0x7f
 8002472:	d8f0      	bhi.n	8002456 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	1c5a      	adds	r2, r3, #1
 8002478:	627a      	str	r2, [r7, #36]	; 0x24
 800247a:	6a3a      	ldr	r2, [r7, #32]
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	701a      	strb	r2, [r3, #0]
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	61fb      	str	r3, [r7, #28]
 8002488:	4b25      	ldr	r3, [pc, #148]	; (8002520 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	e00b      	b.n	80024a8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	61fa      	str	r2, [r7, #28]
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	09db      	lsrs	r3, r3, #7
 80024a6:	61bb      	str	r3, [r7, #24]
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	2b7f      	cmp	r3, #127	; 0x7f
 80024ac:	d8f0      	bhi.n	8002490 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	61fa      	str	r2, [r7, #28]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	2302      	movs	r3, #2
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	e00b      	b.n	80024e0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	617a      	str	r2, [r7, #20]
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	09db      	lsrs	r3, r3, #7
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	2b7f      	cmp	r3, #127	; 0x7f
 80024e4:	d8f0      	bhi.n	80024c8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	617a      	str	r2, [r7, #20]
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	701a      	strb	r2, [r3, #0]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80024f6:	2218      	movs	r2, #24
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	68b8      	ldr	r0, [r7, #8]
 80024fc:	f7ff fcc4 	bl	8001e88 <_SendPacket>
  RECORD_END();
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800250e:	4b04      	ldr	r3, [pc, #16]	; (8002520 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	4798      	blx	r3
  }
}
 8002514:	bf00      	nop
 8002516:	3730      	adds	r7, #48	; 0x30
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20004250 	.word	0x20004250
 8002520:	20004220 	.word	0x20004220

08002524 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b092      	sub	sp, #72	; 0x48
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800252c:	f3ef 8311 	mrs	r3, BASEPRI
 8002530:	f04f 0120 	mov.w	r1, #32
 8002534:	f381 8811 	msr	BASEPRI, r1
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	486b      	ldr	r0, [pc, #428]	; (80026e8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800253c:	f7ff fbce 	bl	8001cdc <_PreparePacket>
 8002540:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	647b      	str	r3, [r7, #68]	; 0x44
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4b67      	ldr	r3, [pc, #412]	; (80026ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	089b      	lsrs	r3, r3, #2
 8002556:	643b      	str	r3, [r7, #64]	; 0x40
 8002558:	e00b      	b.n	8002572 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 800255a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	647a      	str	r2, [r7, #68]	; 0x44
 8002560:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	701a      	strb	r2, [r3, #0]
 800256c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800256e:	09db      	lsrs	r3, r3, #7
 8002570:	643b      	str	r3, [r7, #64]	; 0x40
 8002572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002574:	2b7f      	cmp	r3, #127	; 0x7f
 8002576:	d8f0      	bhi.n	800255a <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8002578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	647a      	str	r2, [r7, #68]	; 0x44
 800257e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	701a      	strb	r2, [r3, #0]
 8002584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002586:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	63bb      	str	r3, [r7, #56]	; 0x38
 8002592:	e00b      	b.n	80025ac <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8002594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	63fa      	str	r2, [r7, #60]	; 0x3c
 800259a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]
 80025a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a8:	09db      	lsrs	r3, r3, #7
 80025aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80025ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ae:	2b7f      	cmp	r3, #127	; 0x7f
 80025b0:	d8f0      	bhi.n	8002594 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 80025b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	701a      	strb	r2, [r3, #0]
 80025be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c0:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2220      	movs	r2, #32
 80025c8:	4619      	mov	r1, r3
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f7ff fb3a 	bl	8001c44 <_EncodeStr>
 80025d0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80025d2:	2209      	movs	r2, #9
 80025d4:	68f9      	ldr	r1, [r7, #12]
 80025d6:	6938      	ldr	r0, [r7, #16]
 80025d8:	f7ff fc56 	bl	8001e88 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	637b      	str	r3, [r7, #52]	; 0x34
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b40      	ldr	r3, [pc, #256]	; (80026ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	089b      	lsrs	r3, r3, #2
 80025f0:	633b      	str	r3, [r7, #48]	; 0x30
 80025f2:	e00b      	b.n	800260c <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 80025f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	637a      	str	r2, [r7, #52]	; 0x34
 80025fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	701a      	strb	r2, [r3, #0]
 8002606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002608:	09db      	lsrs	r3, r3, #7
 800260a:	633b      	str	r3, [r7, #48]	; 0x30
 800260c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260e:	2b7f      	cmp	r3, #127	; 0x7f
 8002610:	d8f0      	bhi.n	80025f4 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8002612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	637a      	str	r2, [r7, #52]	; 0x34
 8002618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]
 800261e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002620:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
 800262c:	e00b      	b.n	8002646 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 800262e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	701a      	strb	r2, [r3, #0]
 8002640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002642:	09db      	lsrs	r3, r3, #7
 8002644:	62bb      	str	r3, [r7, #40]	; 0x28
 8002646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002648:	2b7f      	cmp	r3, #127	; 0x7f
 800264a:	d8f0      	bhi.n	800262e <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 800264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	623b      	str	r3, [r7, #32]
 8002666:	e00b      	b.n	8002680 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	627a      	str	r2, [r7, #36]	; 0x24
 800266e:	6a3a      	ldr	r2, [r7, #32]
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	09db      	lsrs	r3, r3, #7
 800267e:	623b      	str	r3, [r7, #32]
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	2b7f      	cmp	r3, #127	; 0x7f
 8002684:	d8f0      	bhi.n	8002668 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	627a      	str	r2, [r7, #36]	; 0x24
 800268c:	6a3a      	ldr	r2, [r7, #32]
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	61fb      	str	r3, [r7, #28]
 800269a:	2300      	movs	r3, #0
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	e00b      	b.n	80026b8 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	1c5a      	adds	r2, r3, #1
 80026a4:	61fa      	str	r2, [r7, #28]
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	09db      	lsrs	r3, r3, #7
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	2b7f      	cmp	r3, #127	; 0x7f
 80026bc:	d8f0      	bhi.n	80026a0 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	61fa      	str	r2, [r7, #28]
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	701a      	strb	r2, [r3, #0]
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80026ce:	2215      	movs	r2, #21
 80026d0:	68f9      	ldr	r1, [r7, #12]
 80026d2:	6938      	ldr	r0, [r7, #16]
 80026d4:	f7ff fbd8 	bl	8001e88 <_SendPacket>
  RECORD_END();
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f383 8811 	msr	BASEPRI, r3
}
 80026de:	bf00      	nop
 80026e0:	3748      	adds	r7, #72	; 0x48
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20004250 	.word	0x20004250
 80026ec:	20004220 	.word	0x20004220

080026f0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8002706:	4b03      	ldr	r3, [pc, #12]	; (8002714 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	4798      	blx	r3
  }
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20004220 	.word	0x20004220

08002718 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002720:	f3ef 8311 	mrs	r3, BASEPRI
 8002724:	f04f 0120 	mov.w	r1, #32
 8002728:	f381 8811 	msr	BASEPRI, r1
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	480b      	ldr	r0, [pc, #44]	; (800275c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8002730:	f7ff fad4 	bl	8001cdc <_PreparePacket>
 8002734:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002736:	2280      	movs	r2, #128	; 0x80
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	6938      	ldr	r0, [r7, #16]
 800273c:	f7ff fa82 	bl	8001c44 <_EncodeStr>
 8002740:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8002742:	220e      	movs	r2, #14
 8002744:	68f9      	ldr	r1, [r7, #12]
 8002746:	6938      	ldr	r0, [r7, #16]
 8002748:	f7ff fb9e 	bl	8001e88 <_SendPacket>
  RECORD_END();
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f383 8811 	msr	BASEPRI, r3
}
 8002752:	bf00      	nop
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20004250 	.word	0x20004250

08002760 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8002760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d015      	beq.n	800279a <SEGGER_SYSVIEW_RecordSystime+0x3a>
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d010      	beq.n	800279a <SEGGER_SYSVIEW_RecordSystime+0x3a>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8002778:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4798      	blx	r3
 8002780:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002784:	6839      	ldr	r1, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8002786:	e897 0018 	ldmia.w	r7, {r3, r4}
 800278a:	0025      	movs	r5, r4
 800278c:	2600      	movs	r6, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800278e:	462b      	mov	r3, r5
 8002790:	461a      	mov	r2, r3
 8002792:	200d      	movs	r0, #13
 8002794:	f7ff fcf0 	bl	8002178 <SEGGER_SYSVIEW_RecordU32x2>
 8002798:	e005      	b.n	80027a6 <SEGGER_SYSVIEW_RecordSystime+0x46>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800279a:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <SEGGER_SYSVIEW_RecordSystime+0x54>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4619      	mov	r1, r3
 80027a0:	200c      	movs	r0, #12
 80027a2:	f7ff fcad 	bl	8002100 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20004220 	.word	0x20004220
 80027b4:	e0001004 	.word	0xe0001004

080027b8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80027be:	f3ef 8311 	mrs	r3, BASEPRI
 80027c2:	f04f 0120 	mov.w	r1, #32
 80027c6:	f381 8811 	msr	BASEPRI, r1
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	4819      	ldr	r0, [pc, #100]	; (8002834 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80027ce:	f7ff fa85 	bl	8001cdc <_PreparePacket>
 80027d2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80027d8:	4b17      	ldr	r3, [pc, #92]	; (8002838 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	e00b      	b.n	8002804 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	617a      	str	r2, [r7, #20]
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	09db      	lsrs	r3, r3, #7
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	2b7f      	cmp	r3, #127	; 0x7f
 8002808:	d8f0      	bhi.n	80027ec <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	617a      	str	r2, [r7, #20]
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800281a:	2202      	movs	r2, #2
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	68b8      	ldr	r0, [r7, #8]
 8002820:	f7ff fb32 	bl	8001e88 <_SendPacket>
  RECORD_END();
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f383 8811 	msr	BASEPRI, r3
}
 800282a:	bf00      	nop
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20004250 	.word	0x20004250
 8002838:	e000ed04 	.word	0xe000ed04

0800283c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002842:	f3ef 8311 	mrs	r3, BASEPRI
 8002846:	f04f 0120 	mov.w	r1, #32
 800284a:	f381 8811 	msr	BASEPRI, r1
 800284e:	607b      	str	r3, [r7, #4]
 8002850:	4807      	ldr	r0, [pc, #28]	; (8002870 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8002852:	f7ff fa43 	bl	8001cdc <_PreparePacket>
 8002856:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8002858:	2203      	movs	r2, #3
 800285a:	6839      	ldr	r1, [r7, #0]
 800285c:	6838      	ldr	r0, [r7, #0]
 800285e:	f7ff fb13 	bl	8001e88 <_SendPacket>
  RECORD_END();
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f383 8811 	msr	BASEPRI, r3
}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20004250 	.word	0x20004250

08002874 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800287a:	f3ef 8311 	mrs	r3, BASEPRI
 800287e:	f04f 0120 	mov.w	r1, #32
 8002882:	f381 8811 	msr	BASEPRI, r1
 8002886:	607b      	str	r3, [r7, #4]
 8002888:	4807      	ldr	r0, [pc, #28]	; (80028a8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800288a:	f7ff fa27 	bl	8001cdc <_PreparePacket>
 800288e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8002890:	2212      	movs	r2, #18
 8002892:	6839      	ldr	r1, [r7, #0]
 8002894:	6838      	ldr	r0, [r7, #0]
 8002896:	f7ff faf7 	bl	8001e88 <_SendPacket>
  RECORD_END();
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f383 8811 	msr	BASEPRI, r3
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20004250 	.word	0x20004250

080028ac <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80028b2:	f3ef 8311 	mrs	r3, BASEPRI
 80028b6:	f04f 0120 	mov.w	r1, #32
 80028ba:	f381 8811 	msr	BASEPRI, r1
 80028be:	607b      	str	r3, [r7, #4]
 80028c0:	4807      	ldr	r0, [pc, #28]	; (80028e0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80028c2:	f7ff fa0b 	bl	8001cdc <_PreparePacket>
 80028c6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80028c8:	2211      	movs	r2, #17
 80028ca:	6839      	ldr	r1, [r7, #0]
 80028cc:	6838      	ldr	r0, [r7, #0]
 80028ce:	f7ff fadb 	bl	8001e88 <_SendPacket>
  RECORD_END();
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f383 8811 	msr	BASEPRI, r3
}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20004250 	.word	0x20004250

080028e4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80028ec:	f3ef 8311 	mrs	r3, BASEPRI
 80028f0:	f04f 0120 	mov.w	r1, #32
 80028f4:	f381 8811 	msr	BASEPRI, r1
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	481a      	ldr	r0, [pc, #104]	; (8002964 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80028fc:	f7ff f9ee 	bl	8001cdc <_PreparePacket>
 8002900:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002906:	4b18      	ldr	r3, [pc, #96]	; (8002968 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	089b      	lsrs	r3, r3, #2
 8002910:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	61bb      	str	r3, [r7, #24]
 800291a:	e00b      	b.n	8002934 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	61fa      	str	r2, [r7, #28]
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	09db      	lsrs	r3, r3, #7
 8002932:	61bb      	str	r3, [r7, #24]
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2b7f      	cmp	r3, #127	; 0x7f
 8002938:	d8f0      	bhi.n	800291c <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	61fa      	str	r2, [r7, #28]
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	701a      	strb	r2, [r3, #0]
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800294a:	2208      	movs	r2, #8
 800294c:	68f9      	ldr	r1, [r7, #12]
 800294e:	6938      	ldr	r0, [r7, #16]
 8002950:	f7ff fa9a 	bl	8001e88 <_SendPacket>
  RECORD_END();
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f383 8811 	msr	BASEPRI, r3
}
 800295a:	bf00      	nop
 800295c:	3720      	adds	r7, #32
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20004250 	.word	0x20004250
 8002968:	20004220 	.word	0x20004220

0800296c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002974:	f3ef 8311 	mrs	r3, BASEPRI
 8002978:	f04f 0120 	mov.w	r1, #32
 800297c:	f381 8811 	msr	BASEPRI, r1
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	481a      	ldr	r0, [pc, #104]	; (80029ec <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8002984:	f7ff f9aa 	bl	8001cdc <_PreparePacket>
 8002988:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800298e:	4b18      	ldr	r3, [pc, #96]	; (80029f0 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	089b      	lsrs	r3, r3, #2
 8002998:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	61fb      	str	r3, [r7, #28]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	e00b      	b.n	80029bc <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	61fa      	str	r2, [r7, #28]
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	701a      	strb	r2, [r3, #0]
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	09db      	lsrs	r3, r3, #7
 80029ba:	61bb      	str	r3, [r7, #24]
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2b7f      	cmp	r3, #127	; 0x7f
 80029c0:	d8f0      	bhi.n	80029a4 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	61fa      	str	r2, [r7, #28]
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	701a      	strb	r2, [r3, #0]
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80029d2:	2204      	movs	r2, #4
 80029d4:	68f9      	ldr	r1, [r7, #12]
 80029d6:	6938      	ldr	r0, [r7, #16]
 80029d8:	f7ff fa56 	bl	8001e88 <_SendPacket>
  RECORD_END();
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f383 8811 	msr	BASEPRI, r3
}
 80029e2:	bf00      	nop
 80029e4:	3720      	adds	r7, #32
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20004250 	.word	0x20004250
 80029f0:	20004220 	.word	0x20004220

080029f4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80029fc:	f3ef 8311 	mrs	r3, BASEPRI
 8002a00:	f04f 0120 	mov.w	r1, #32
 8002a04:	f381 8811 	msr	BASEPRI, r1
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	481a      	ldr	r0, [pc, #104]	; (8002a74 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8002a0c:	f7ff f966 	bl	8001cdc <_PreparePacket>
 8002a10:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002a16:	4b18      	ldr	r3, [pc, #96]	; (8002a78 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	089b      	lsrs	r3, r3, #2
 8002a20:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	61fb      	str	r3, [r7, #28]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	61bb      	str	r3, [r7, #24]
 8002a2a:	e00b      	b.n	8002a44 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	61fa      	str	r2, [r7, #28]
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	09db      	lsrs	r3, r3, #7
 8002a42:	61bb      	str	r3, [r7, #24]
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2b7f      	cmp	r3, #127	; 0x7f
 8002a48:	d8f0      	bhi.n	8002a2c <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	61fa      	str	r2, [r7, #28]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8002a5a:	2206      	movs	r2, #6
 8002a5c:	68f9      	ldr	r1, [r7, #12]
 8002a5e:	6938      	ldr	r0, [r7, #16]
 8002a60:	f7ff fa12 	bl	8001e88 <_SendPacket>
  RECORD_END();
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f383 8811 	msr	BASEPRI, r3
}
 8002a6a:	bf00      	nop
 8002a6c:	3720      	adds	r7, #32
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20004250 	.word	0x20004250
 8002a78:	20004220 	.word	0x20004220

08002a7c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08c      	sub	sp, #48	; 0x30
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8002a86:	4b3b      	ldr	r3, [pc, #236]	; (8002b74 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d06d      	beq.n	8002b6a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8002a8e:	4b39      	ldr	r3, [pc, #228]	; (8002b74 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8002a94:	2300      	movs	r3, #0
 8002a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a98:	e008      	b.n	8002aac <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8002a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8002aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8002aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aac:	79fa      	ldrb	r2, [r7, #7]
 8002aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d8f2      	bhi.n	8002a9a <SEGGER_SYSVIEW_SendModule+0x1e>
 8002ab4:	e000      	b.n	8002ab8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8002ab6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8002ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d055      	beq.n	8002b6a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002abe:	f3ef 8311 	mrs	r3, BASEPRI
 8002ac2:	f04f 0120 	mov.w	r1, #32
 8002ac6:	f381 8811 	msr	BASEPRI, r1
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	482a      	ldr	r0, [pc, #168]	; (8002b78 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8002ace:	f7ff f905 	bl	8001cdc <_PreparePacket>
 8002ad2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	623b      	str	r3, [r7, #32]
 8002ae0:	e00b      	b.n	8002afa <SEGGER_SYSVIEW_SendModule+0x7e>
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	627a      	str	r2, [r7, #36]	; 0x24
 8002ae8:	6a3a      	ldr	r2, [r7, #32]
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	701a      	strb	r2, [r3, #0]
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	09db      	lsrs	r3, r3, #7
 8002af8:	623b      	str	r3, [r7, #32]
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	2b7f      	cmp	r3, #127	; 0x7f
 8002afe:	d8f0      	bhi.n	8002ae2 <SEGGER_SYSVIEW_SendModule+0x66>
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	627a      	str	r2, [r7, #36]	; 0x24
 8002b06:	6a3a      	ldr	r2, [r7, #32]
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	701a      	strb	r2, [r3, #0]
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	61fb      	str	r3, [r7, #28]
 8002b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	e00b      	b.n	8002b34 <SEGGER_SYSVIEW_SendModule+0xb8>
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	61fa      	str	r2, [r7, #28]
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	09db      	lsrs	r3, r3, #7
 8002b32:	61bb      	str	r3, [r7, #24]
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	2b7f      	cmp	r3, #127	; 0x7f
 8002b38:	d8f0      	bhi.n	8002b1c <SEGGER_SYSVIEW_SendModule+0xa0>
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	61fa      	str	r2, [r7, #28]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2280      	movs	r2, #128	; 0x80
 8002b50:	4619      	mov	r1, r3
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f7ff f876 	bl	8001c44 <_EncodeStr>
 8002b58:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8002b5a:	2216      	movs	r2, #22
 8002b5c:	68f9      	ldr	r1, [r7, #12]
 8002b5e:	6938      	ldr	r0, [r7, #16]
 8002b60:	f7ff f992 	bl	8001e88 <_SendPacket>
      RECORD_END();
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	3730      	adds	r7, #48	; 0x30
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20004248 	.word	0x20004248
 8002b78:	20004250 	.word	0x20004250

08002b7c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8002b82:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00f      	beq.n	8002baa <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f2      	bne.n	8002b90 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20004248 	.word	0x20004248

08002bb8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8002bbe:	f3ef 8311 	mrs	r3, BASEPRI
 8002bc2:	f04f 0120 	mov.w	r1, #32
 8002bc6:	f381 8811 	msr	BASEPRI, r1
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	4817      	ldr	r0, [pc, #92]	; (8002c2c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8002bce:	f7ff f885 	bl	8001cdc <_PreparePacket>
 8002bd2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	4b14      	ldr	r3, [pc, #80]	; (8002c30 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	e00b      	b.n	8002bfc <SEGGER_SYSVIEW_SendNumModules+0x44>
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	617a      	str	r2, [r7, #20]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	09db      	lsrs	r3, r3, #7
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8002c00:	d8f0      	bhi.n	8002be4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	617a      	str	r2, [r7, #20]
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	701a      	strb	r2, [r3, #0]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8002c12:	221b      	movs	r2, #27
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	68b8      	ldr	r0, [r7, #8]
 8002c18:	f7ff f936 	bl	8001e88 <_SendPacket>
  RECORD_END();
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f383 8811 	msr	BASEPRI, r3
}
 8002c22:	bf00      	nop
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20004250 	.word	0x20004250
 8002c30:	2000424c 	.word	0x2000424c

08002c34 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002c3c:	f3ef 8311 	mrs	r3, BASEPRI
 8002c40:	f04f 0120 	mov.w	r1, #32
 8002c44:	f381 8811 	msr	BASEPRI, r1
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	4827      	ldr	r0, [pc, #156]	; (8002ce8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8002c4c:	f7ff f846 	bl	8001cdc <_PreparePacket>
 8002c50:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002c52:	2280      	movs	r2, #128	; 0x80
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	6938      	ldr	r0, [r7, #16]
 8002c58:	f7fe fff4 	bl	8001c44 <_EncodeStr>
 8002c5c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
 8002c62:	2301      	movs	r3, #1
 8002c64:	623b      	str	r3, [r7, #32]
 8002c66:	e00b      	b.n	8002c80 <SEGGER_SYSVIEW_Warn+0x4c>
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	627a      	str	r2, [r7, #36]	; 0x24
 8002c6e:	6a3a      	ldr	r2, [r7, #32]
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	09db      	lsrs	r3, r3, #7
 8002c7e:	623b      	str	r3, [r7, #32]
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	2b7f      	cmp	r3, #127	; 0x7f
 8002c84:	d8f0      	bhi.n	8002c68 <SEGGER_SYSVIEW_Warn+0x34>
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	627a      	str	r2, [r7, #36]	; 0x24
 8002c8c:	6a3a      	ldr	r2, [r7, #32]
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	701a      	strb	r2, [r3, #0]
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	e00b      	b.n	8002cb8 <SEGGER_SYSVIEW_Warn+0x84>
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	61fa      	str	r2, [r7, #28]
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	09db      	lsrs	r3, r3, #7
 8002cb6:	61bb      	str	r3, [r7, #24]
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	2b7f      	cmp	r3, #127	; 0x7f
 8002cbc:	d8f0      	bhi.n	8002ca0 <SEGGER_SYSVIEW_Warn+0x6c>
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	61fa      	str	r2, [r7, #28]
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	701a      	strb	r2, [r3, #0]
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8002cce:	221a      	movs	r2, #26
 8002cd0:	68f9      	ldr	r1, [r7, #12]
 8002cd2:	6938      	ldr	r0, [r7, #16]
 8002cd4:	f7ff f8d8 	bl	8001e88 <_SendPacket>
  RECORD_END();
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f383 8811 	msr	BASEPRI, r3
}
 8002cde:	bf00      	nop
 8002ce0:	3728      	adds	r7, #40	; 0x28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20004250 	.word	0x20004250

08002cec <main>:




int main(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af02      	add	r7, sp, #8
//
//	//2. Update SystemCoreClock variable
//	SystemCoreClockUpdate();

	// Enable clok counting Register(DWT section) to make time stamp in system Viewer
	*DWT_CYCCNT = 0; // reset the counter
 8002cf2:	4b16      	ldr	r3, [pc, #88]	; (8002d4c <main+0x60>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
	*DWT_CONTROL |= 1 ; // enable the counte
 8002cfa:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <main+0x64>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a14      	ldr	r2, [pc, #80]	; (8002d50 <main+0x64>)
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	f042 0201 	orr.w	r2, r2, #1
 8002d08:	601a      	str	r2, [r3, #0]
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8002d0a:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002d0e:	f7fd fa27 	bl	8000160 <NVIC_PriorityGroupConfig>
	prvSetupHardware();
 8002d12:	f000 f86b 	bl	8002dec <prvSetupHardware>

	// Start Recording Tasks in System Viewer
	SEGGER_SYSVIEW_Conf();
 8002d16:	f7fe fc2d 	bl	8001574 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 8002d1a:	f7ff fa87 	bl	800222c <SEGGER_SYSVIEW_Start>
	//3. lets Create 2 tasks , task-1 , task-2
	xTaskCreate( vTask1_handler,"Task-1",configMINIMAL_STACK_SIZE,NULL,( tskIDLE_PRIORITY + 1 ),&xTaskHandle1 );
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <main+0x68>)
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	2301      	movs	r3, #1
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	2300      	movs	r3, #0
 8002d28:	2280      	movs	r2, #128	; 0x80
 8002d2a:	490b      	ldr	r1, [pc, #44]	; (8002d58 <main+0x6c>)
 8002d2c:	480b      	ldr	r0, [pc, #44]	; (8002d5c <main+0x70>)
 8002d2e:	f7fd ffe9 	bl	8000d04 <xTaskCreate>
	xTaskCreate( vTask2_handler,"Task-2",configMINIMAL_STACK_SIZE,NULL,( tskIDLE_PRIORITY + 1 ),&xTaskHandle2 );
 8002d32:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <main+0x74>)
 8002d34:	9301      	str	r3, [sp, #4]
 8002d36:	2301      	movs	r3, #1
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	2280      	movs	r2, #128	; 0x80
 8002d3e:	4909      	ldr	r1, [pc, #36]	; (8002d64 <main+0x78>)
 8002d40:	4809      	ldr	r0, [pc, #36]	; (8002d68 <main+0x7c>)
 8002d42:	f7fd ffdf 	bl	8000d04 <xTaskCreate>

	/* Start the Schedular */
	vTaskStartScheduler();
 8002d46:	f7fe f925 	bl	8000f94 <vTaskStartScheduler>

  /* Infinite loop */
  while (1);
 8002d4a:	e7fe      	b.n	8002d4a <main+0x5e>
 8002d4c:	20000018 	.word	0x20000018
 8002d50:	2000001c 	.word	0x2000001c
 8002d54:	20004334 	.word	0x20004334
 8002d58:	0800321c 	.word	0x0800321c
 8002d5c:	08002d6d 	.word	0x08002d6d
 8002d60:	20004338 	.word	0x20004338
 8002d64:	08003224 	.word	0x08003224
 8002d68:	08002dad 	.word	0x08002dad

08002d6c <vTask1_handler>:
}


/***************************** Task Handler Definition****************************/
void vTask1_handler(void *params)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(ACCESS_KEY==AVAILABLE)
 8002d74:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <vTask1_handler+0x34>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d1fb      	bne.n	8002d74 <vTask1_handler+0x8>
		{
			ACCESS_KEY=NOT_AVAILABLE;
 8002d7c:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <vTask1_handler+0x34>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]
			printmsg("Hello form Task1\r\n");
 8002d82:	4808      	ldr	r0, [pc, #32]	; (8002da4 <vTask1_handler+0x38>)
 8002d84:	f000 f838 	bl	8002df8 <printmsg>
			ACCESS_KEY=AVAILABLE;
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <vTask1_handler+0x34>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	701a      	strb	r2, [r3, #0]
			taskYIELD();
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <vTask1_handler+0x3c>)
 8002d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	f3bf 8f6f 	isb	sy
		if(ACCESS_KEY==AVAILABLE)
 8002d9e:	e7e9      	b.n	8002d74 <vTask1_handler+0x8>
 8002da0:	20000020 	.word	0x20000020
 8002da4:	0800322c 	.word	0x0800322c
 8002da8:	e000ed04 	.word	0xe000ed04

08002dac <vTask2_handler>:
		}
	}
}

void vTask2_handler(void *params)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(ACCESS_KEY==AVAILABLE)
 8002db4:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <vTask2_handler+0x34>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d1fb      	bne.n	8002db4 <vTask2_handler+0x8>
		{
			ACCESS_KEY=NOT_AVAILABLE;
 8002dbc:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <vTask2_handler+0x34>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	701a      	strb	r2, [r3, #0]
			printmsg("Hello form Task2\r\n");
 8002dc2:	4808      	ldr	r0, [pc, #32]	; (8002de4 <vTask2_handler+0x38>)
 8002dc4:	f000 f818 	bl	8002df8 <printmsg>
			ACCESS_KEY=AVAILABLE;
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <vTask2_handler+0x34>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	701a      	strb	r2, [r3, #0]
			taskYIELD();
 8002dce:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <vTask2_handler+0x3c>)
 8002dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	f3bf 8f6f 	isb	sy
		if(ACCESS_KEY==AVAILABLE)
 8002dde:	e7e9      	b.n	8002db4 <vTask2_handler+0x8>
 8002de0:	20000020 	.word	0x20000020
 8002de4:	08003240 	.word	0x08003240
 8002de8:	e000ed04 	.word	0xe000ed04

08002dec <prvSetupHardware>:
}

/*****************************FUNCTION Definition****************************/

static void prvSetupHardware(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
	//setup UART_1
	UART1_init();
 8002df0:	f000 f82a 	bl	8002e48 <UART1_init>
}
 8002df4:	bf00      	nop
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <printmsg>:

void printmsg(char *msg)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i<strlen(msg) ; i++)
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	e013      	b.n	8002e2e <printmsg+0x36>
	{
		//polling to check that the Date Register is Empty
		while(USART_GetFlagStatus(USART1, USART_FLAG_TXE)!=SET);
 8002e06:	bf00      	nop
 8002e08:	2180      	movs	r1, #128	; 0x80
 8002e0a:	480e      	ldr	r0, [pc, #56]	; (8002e44 <printmsg+0x4c>)
 8002e0c:	f7fd fc2e 	bl	800066c <USART_GetFlagStatus>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d1f8      	bne.n	8002e08 <printmsg+0x10>
		//put our mesg in the UART Data Register
		USART_SendData(USART1,msg[i]);
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	4619      	mov	r1, r3
 8002e22:	4808      	ldr	r0, [pc, #32]	; (8002e44 <printmsg+0x4c>)
 8002e24:	f7fd fc11 	bl	800064a <USART_SendData>
	for(uint32_t i=0 ; i<strlen(msg) ; i++)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7fd f98e 	bl	8000150 <strlen>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d8e4      	bhi.n	8002e06 <printmsg+0xe>
	}

}
 8002e3c:	bf00      	nop
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40013800 	.word	0x40013800

08002e48 <UART1_init>:


void UART1_init()
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
    USART_InitTypeDef usart1_init_struct;
    /* Bit configuration structure for GPIOA PIN9 and PIN10 */
    GPIO_InitTypeDef gpioa_init_struct;

    /* Enalbe clock for USART1, AFIO and GPIOA */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_AFIO |
 8002e4e:	2101      	movs	r1, #1
 8002e50:	f244 0005 	movw	r0, #16389	; 0x4005
 8002e54:	f7fd fb02 	bl	800045c <RCC_APB2PeriphClockCmd>
                           RCC_APB2Periph_GPIOA, ENABLE);

    /* GPIOA PIN9 alternative function Tx */
    gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
 8002e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e5c:	80bb      	strh	r3, [r7, #4]
    gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	71bb      	strb	r3, [r7, #6]
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
 8002e62:	2318      	movs	r3, #24
 8002e64:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &gpioa_init_struct);
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4815      	ldr	r0, [pc, #84]	; (8002ec0 <UART1_init+0x78>)
 8002e6c:	f7fd f98a 	bl	8000184 <GPIO_Init>
    /* GPIOA PIN9 alternative function Rx */
    gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
 8002e70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e74:	80bb      	strh	r3, [r7, #4]
    gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 8002e76:	2303      	movs	r3, #3
 8002e78:	71bb      	strb	r3, [r7, #6]
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8002e7a:	2304      	movs	r3, #4
 8002e7c:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &gpioa_init_struct);
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	4619      	mov	r1, r3
 8002e82:	480f      	ldr	r0, [pc, #60]	; (8002ec0 <UART1_init+0x78>)
 8002e84:	f7fd f97e 	bl	8000184 <GPIO_Init>

    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);
 8002e88:	2101      	movs	r1, #1
 8002e8a:	480e      	ldr	r0, [pc, #56]	; (8002ec4 <UART1_init+0x7c>)
 8002e8c:	f7fd fbbe 	bl	800060c <USART_Cmd>
    /* Baud rate 9600, 8-bit data, One stop bit
     * No parity, Do both Rx and Tx, No HW flow control
     */
    usart1_init_struct.USART_BaudRate = 9600;
 8002e90:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002e94:	60bb      	str	r3, [r7, #8]
    usart1_init_struct.USART_WordLength = USART_WordLength_8b;
 8002e96:	2300      	movs	r3, #0
 8002e98:	81bb      	strh	r3, [r7, #12]
    usart1_init_struct.USART_StopBits = USART_StopBits_1;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	81fb      	strh	r3, [r7, #14]
    usart1_init_struct.USART_Parity = USART_Parity_No ;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	823b      	strh	r3, [r7, #16]
    usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002ea2:	230c      	movs	r3, #12
 8002ea4:	827b      	strh	r3, [r7, #18]
    usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	82bb      	strh	r3, [r7, #20]
    USART_Init(USART1,&usart1_init_struct);
 8002eaa:	f107 0308 	add.w	r3, r7, #8
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4804      	ldr	r0, [pc, #16]	; (8002ec4 <UART1_init+0x7c>)
 8002eb2:	f7fd faf1 	bl	8000498 <USART_Init>
}
 8002eb6:	bf00      	nop
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40010800 	.word	0x40010800
 8002ec4:	40013800 	.word	0x40013800

08002ec8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002ecc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002ece:	e003      	b.n	8002ed8 <LoopCopyDataInit>

08002ed0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8002ed2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002ed4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002ed6:	3104      	adds	r1, #4

08002ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002ed8:	480b      	ldr	r0, [pc, #44]	; (8002f08 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8002eda:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8002edc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002ede:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002ee0:	d3f6      	bcc.n	8002ed0 <CopyDataInit>
	ldr	r2, =_sbss
 8002ee2:	4a0b      	ldr	r2, [pc, #44]	; (8002f10 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8002ee4:	e002      	b.n	8002eec <LoopFillZerobss>

08002ee6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002ee6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002ee8:	f842 3b04 	str.w	r3, [r2], #4

08002eec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002eec:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8002eee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002ef0:	d3f9      	bcc.n	8002ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ef2:	f000 f81f 	bl	8002f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ef6:	f000 f8d7 	bl	80030a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002efa:	f7ff fef7 	bl	8002cec <main>
	bx	lr
 8002efe:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f00:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8002f04:	08003270 	.word	0x08003270
	ldr	r0, =_sdata
 8002f08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002f0c:	20000024 	.word	0x20000024
	ldr	r2, =_sbss
 8002f10:	20000024 	.word	0x20000024
	ldr	r3, = _ebss
 8002f14:	200043e4 	.word	0x200043e4
	...

08002f20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
  /* Load the address of the interrupt control register into r3. */
  ldr r3, NVIC_INT_CTRL_CONST
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <NVIC_INT_CTRL_CONST>)
  /* Load the value of the interrupt control register into r2 from the
  address held in r3. */
  ldr r2, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
  /* The interrupt number is in the least significant byte - clear all
  other bits. */
  uxtb r2, r2
 8002f24:	b2d2      	uxtb	r2, r2

08002f26 <Infinite_Loop>:
Infinite_Loop:
  /* Now sit in an infinite loop - the number of the executing interrupt
  is held in r2. */
  b  Infinite_Loop
 8002f26:	e7fe      	b.n	8002f26 <Infinite_Loop>
 8002f28:	f3af 8000 	nop.w
 8002f2c:	f3af 8000 	nop.w

08002f30 <NVIC_INT_CTRL_CONST>:
 8002f30:	e000ed04 	.word	0xe000ed04

08002f34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002f38:	4a15      	ldr	r2, [pc, #84]	; (8002f90 <SystemInit+0x5c>)
 8002f3a:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <SystemInit+0x5c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f043 0301 	orr.w	r3, r3, #1
 8002f42:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8002f44:	4912      	ldr	r1, [pc, #72]	; (8002f90 <SystemInit+0x5c>)
 8002f46:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <SystemInit+0x5c>)
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <SystemInit+0x60>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002f50:	4a0f      	ldr	r2, [pc, #60]	; (8002f90 <SystemInit+0x5c>)
 8002f52:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <SystemInit+0x5c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002f60:	4a0b      	ldr	r2, [pc, #44]	; (8002f90 <SystemInit+0x5c>)
 8002f62:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <SystemInit+0x5c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f6a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002f6c:	4a08      	ldr	r2, [pc, #32]	; (8002f90 <SystemInit+0x5c>)
 8002f6e:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <SystemInit+0x5c>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002f76:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8002f78:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <SystemInit+0x5c>)
 8002f7a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002f7e:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8002f80:	f000 f80c 	bl	8002f9c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002f84:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <SystemInit+0x64>)
 8002f86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f8a:	609a      	str	r2, [r3, #8]
#endif 
}
 8002f8c:	bf00      	nop
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40021000 	.word	0x40021000
 8002f94:	f8ff0000 	.word	0xf8ff0000
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8002fa0:	f000 f802 	bl	8002fa8 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8002fa4:	bf00      	nop
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	607b      	str	r3, [r7, #4]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002fb6:	4a3a      	ldr	r2, [pc, #232]	; (80030a0 <SetSysClockTo72+0xf8>)
 8002fb8:	4b39      	ldr	r3, [pc, #228]	; (80030a0 <SetSysClockTo72+0xf8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002fc2:	4b37      	ldr	r3, [pc, #220]	; (80030a0 <SetSysClockTo72+0xf8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d103      	bne.n	8002fe0 <SetSysClockTo72+0x38>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002fde:	d1f0      	bne.n	8002fc2 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002fe0:	4b2f      	ldr	r3, [pc, #188]	; (80030a0 <SetSysClockTo72+0xf8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002fec:	2301      	movs	r3, #1
 8002fee:	603b      	str	r3, [r7, #0]
 8002ff0:	e001      	b.n	8002ff6 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d14b      	bne.n	8003094 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002ffc:	4a29      	ldr	r2, [pc, #164]	; (80030a4 <SetSysClockTo72+0xfc>)
 8002ffe:	4b29      	ldr	r3, [pc, #164]	; (80030a4 <SetSysClockTo72+0xfc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f043 0310 	orr.w	r3, r3, #16
 8003006:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8003008:	4a26      	ldr	r2, [pc, #152]	; (80030a4 <SetSysClockTo72+0xfc>)
 800300a:	4b26      	ldr	r3, [pc, #152]	; (80030a4 <SetSysClockTo72+0xfc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 0303 	bic.w	r3, r3, #3
 8003012:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8003014:	4a23      	ldr	r2, [pc, #140]	; (80030a4 <SetSysClockTo72+0xfc>)
 8003016:	4b23      	ldr	r3, [pc, #140]	; (80030a4 <SetSysClockTo72+0xfc>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f043 0302 	orr.w	r3, r3, #2
 800301e:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8003020:	4a1f      	ldr	r2, [pc, #124]	; (80030a0 <SetSysClockTo72+0xf8>)
 8003022:	4b1f      	ldr	r3, [pc, #124]	; (80030a0 <SetSysClockTo72+0xf8>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8003028:	4a1d      	ldr	r2, [pc, #116]	; (80030a0 <SetSysClockTo72+0xf8>)
 800302a:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <SetSysClockTo72+0xf8>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8003030:	4a1b      	ldr	r2, [pc, #108]	; (80030a0 <SetSysClockTo72+0xf8>)
 8003032:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <SetSysClockTo72+0xf8>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800303a:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800303c:	4a18      	ldr	r2, [pc, #96]	; (80030a0 <SetSysClockTo72+0xf8>)
 800303e:	4b18      	ldr	r3, [pc, #96]	; (80030a0 <SetSysClockTo72+0xf8>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003046:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8003048:	4a15      	ldr	r2, [pc, #84]	; (80030a0 <SetSysClockTo72+0xf8>)
 800304a:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <SetSysClockTo72+0xf8>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8003052:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003054:	4a12      	ldr	r2, [pc, #72]	; (80030a0 <SetSysClockTo72+0xf8>)
 8003056:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <SetSysClockTo72+0xf8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003060:	bf00      	nop
 8003062:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <SetSysClockTo72+0xf8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0f9      	beq.n	8003062 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800306e:	4a0c      	ldr	r2, [pc, #48]	; (80030a0 <SetSysClockTo72+0xf8>)
 8003070:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <SetSysClockTo72+0xf8>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f023 0303 	bic.w	r3, r3, #3
 8003078:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800307a:	4a09      	ldr	r2, [pc, #36]	; (80030a0 <SetSysClockTo72+0xf8>)
 800307c:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <SetSysClockTo72+0xf8>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f043 0302 	orr.w	r3, r3, #2
 8003084:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8003086:	bf00      	nop
 8003088:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <SetSysClockTo72+0xf8>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 030c 	and.w	r3, r3, #12
 8003090:	2b08      	cmp	r3, #8
 8003092:	d1f9      	bne.n	8003088 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40022000 	.word	0x40022000

080030a8 <__libc_init_array>:
 80030a8:	b570      	push	{r4, r5, r6, lr}
 80030aa:	2500      	movs	r5, #0
 80030ac:	4e0c      	ldr	r6, [pc, #48]	; (80030e0 <__libc_init_array+0x38>)
 80030ae:	4c0d      	ldr	r4, [pc, #52]	; (80030e4 <__libc_init_array+0x3c>)
 80030b0:	1ba4      	subs	r4, r4, r6
 80030b2:	10a4      	asrs	r4, r4, #2
 80030b4:	42a5      	cmp	r5, r4
 80030b6:	d109      	bne.n	80030cc <__libc_init_array+0x24>
 80030b8:	f000 f83c 	bl	8003134 <_init>
 80030bc:	2500      	movs	r5, #0
 80030be:	4e0a      	ldr	r6, [pc, #40]	; (80030e8 <__libc_init_array+0x40>)
 80030c0:	4c0a      	ldr	r4, [pc, #40]	; (80030ec <__libc_init_array+0x44>)
 80030c2:	1ba4      	subs	r4, r4, r6
 80030c4:	10a4      	asrs	r4, r4, #2
 80030c6:	42a5      	cmp	r5, r4
 80030c8:	d105      	bne.n	80030d6 <__libc_init_array+0x2e>
 80030ca:	bd70      	pop	{r4, r5, r6, pc}
 80030cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030d0:	4798      	blx	r3
 80030d2:	3501      	adds	r5, #1
 80030d4:	e7ee      	b.n	80030b4 <__libc_init_array+0xc>
 80030d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030da:	4798      	blx	r3
 80030dc:	3501      	adds	r5, #1
 80030de:	e7f2      	b.n	80030c6 <__libc_init_array+0x1e>
 80030e0:	08003268 	.word	0x08003268
 80030e4:	08003268 	.word	0x08003268
 80030e8:	08003268 	.word	0x08003268
 80030ec:	0800326c 	.word	0x0800326c

080030f0 <memcmp>:
 80030f0:	b510      	push	{r4, lr}
 80030f2:	3901      	subs	r1, #1
 80030f4:	4402      	add	r2, r0
 80030f6:	4290      	cmp	r0, r2
 80030f8:	d101      	bne.n	80030fe <memcmp+0xe>
 80030fa:	2000      	movs	r0, #0
 80030fc:	bd10      	pop	{r4, pc}
 80030fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003102:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003106:	42a3      	cmp	r3, r4
 8003108:	d0f5      	beq.n	80030f6 <memcmp+0x6>
 800310a:	1b18      	subs	r0, r3, r4
 800310c:	bd10      	pop	{r4, pc}

0800310e <memcpy>:
 800310e:	b510      	push	{r4, lr}
 8003110:	1e43      	subs	r3, r0, #1
 8003112:	440a      	add	r2, r1
 8003114:	4291      	cmp	r1, r2
 8003116:	d100      	bne.n	800311a <memcpy+0xc>
 8003118:	bd10      	pop	{r4, pc}
 800311a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800311e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003122:	e7f7      	b.n	8003114 <memcpy+0x6>

08003124 <memset>:
 8003124:	4603      	mov	r3, r0
 8003126:	4402      	add	r2, r0
 8003128:	4293      	cmp	r3, r2
 800312a:	d100      	bne.n	800312e <memset+0xa>
 800312c:	4770      	bx	lr
 800312e:	f803 1b01 	strb.w	r1, [r3], #1
 8003132:	e7f9      	b.n	8003128 <memset+0x4>

08003134 <_init>:
 8003134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003136:	bf00      	nop
 8003138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313a:	bc08      	pop	{r3}
 800313c:	469e      	mov	lr, r3
 800313e:	4770      	bx	lr

08003140 <_fini>:
 8003140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003142:	bf00      	nop
 8003144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003146:	bc08      	pop	{r3}
 8003148:	469e      	mov	lr, r3
 800314a:	4770      	bx	lr
