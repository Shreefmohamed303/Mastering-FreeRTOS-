
STM32_freeRTOS_LED_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b50  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002c60  08002c60  00012c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002cfc  08002cfc  00012cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002d00  08002d00  00012d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08002d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003fb0  20000018  08002d1c  00020018  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20003fc8  08002d1c  00023fc8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c7ac  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001b42  00000000  00000000  0002c7ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a48  00000000  00000000  0002e330  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000970  00000000  00000000  0002ed78  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004f7d  00000000  00000000  0002f6e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003874  00000000  00000000  00034665  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00037ed9  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002b94  00000000  00000000  00037f58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08002c48 	.word	0x08002c48

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08002c48 	.word	0x08002c48

08000150 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000158:	4a05      	ldr	r2, [pc, #20]	; (8000170 <NVIC_PriorityGroupConfig+0x20>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000164:	60d3      	str	r3, [r2, #12]
}
 8000166:	bf00      	nop
 8000168:	370c      	adds	r7, #12
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr
 8000170:	e000ed00 	.word	0xe000ed00

08000174 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000174:	b480      	push	{r7}
 8000176:	b089      	sub	sp, #36	; 0x24
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
 800017c:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800017e:	2300      	movs	r3, #0
 8000180:	61fb      	str	r3, [r7, #28]
 8000182:	2300      	movs	r3, #0
 8000184:	613b      	str	r3, [r7, #16]
 8000186:	2300      	movs	r3, #0
 8000188:	61bb      	str	r3, [r7, #24]
 800018a:	2300      	movs	r3, #0
 800018c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800018e:	2300      	movs	r3, #0
 8000190:	617b      	str	r3, [r7, #20]
 8000192:	2300      	movs	r3, #0
 8000194:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000196:	683b      	ldr	r3, [r7, #0]
 8000198:	78db      	ldrb	r3, [r3, #3]
 800019a:	f003 030f 	and.w	r3, r3, #15
 800019e:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80001a0:	683b      	ldr	r3, [r7, #0]
 80001a2:	78db      	ldrb	r3, [r3, #3]
 80001a4:	f003 0310 	and.w	r3, r3, #16
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d005      	beq.n	80001b8 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80001ac:	683b      	ldr	r3, [r7, #0]
 80001ae:	789b      	ldrb	r3, [r3, #2]
 80001b0:	461a      	mov	r2, r3
 80001b2:	69fb      	ldr	r3, [r7, #28]
 80001b4:	4313      	orrs	r3, r2
 80001b6:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80001b8:	683b      	ldr	r3, [r7, #0]
 80001ba:	881b      	ldrh	r3, [r3, #0]
 80001bc:	b2db      	uxtb	r3, r3
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d044      	beq.n	800024c <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80001c8:	2300      	movs	r3, #0
 80001ca:	61bb      	str	r3, [r7, #24]
 80001cc:	e038      	b.n	8000240 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80001ce:	2201      	movs	r2, #1
 80001d0:	69bb      	ldr	r3, [r7, #24]
 80001d2:	fa02 f303 	lsl.w	r3, r2, r3
 80001d6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001d8:	683b      	ldr	r3, [r7, #0]
 80001da:	881b      	ldrh	r3, [r3, #0]
 80001dc:	461a      	mov	r2, r3
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	4013      	ands	r3, r2
 80001e2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80001e4:	693a      	ldr	r2, [r7, #16]
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	429a      	cmp	r2, r3
 80001ea:	d126      	bne.n	800023a <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80001ec:	69bb      	ldr	r3, [r7, #24]
 80001ee:	009b      	lsls	r3, r3, #2
 80001f0:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80001f2:	220f      	movs	r2, #15
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	fa02 f303 	lsl.w	r3, r2, r3
 80001fa:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	43db      	mvns	r3, r3
 8000200:	697a      	ldr	r2, [r7, #20]
 8000202:	4013      	ands	r3, r2
 8000204:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000206:	69fa      	ldr	r2, [r7, #28]
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	fa02 f303 	lsl.w	r3, r2, r3
 800020e:	697a      	ldr	r2, [r7, #20]
 8000210:	4313      	orrs	r3, r2
 8000212:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000214:	683b      	ldr	r3, [r7, #0]
 8000216:	78db      	ldrb	r3, [r3, #3]
 8000218:	2b28      	cmp	r3, #40	; 0x28
 800021a:	d105      	bne.n	8000228 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800021c:	2201      	movs	r2, #1
 800021e:	69bb      	ldr	r3, [r7, #24]
 8000220:	409a      	lsls	r2, r3
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	615a      	str	r2, [r3, #20]
 8000226:	e008      	b.n	800023a <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	78db      	ldrb	r3, [r3, #3]
 800022c:	2b48      	cmp	r3, #72	; 0x48
 800022e:	d104      	bne.n	800023a <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000230:	2201      	movs	r2, #1
 8000232:	69bb      	ldr	r3, [r7, #24]
 8000234:	409a      	lsls	r2, r3
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800023a:	69bb      	ldr	r3, [r7, #24]
 800023c:	3301      	adds	r3, #1
 800023e:	61bb      	str	r3, [r7, #24]
 8000240:	69bb      	ldr	r3, [r7, #24]
 8000242:	2b07      	cmp	r3, #7
 8000244:	d9c3      	bls.n	80001ce <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	697a      	ldr	r2, [r7, #20]
 800024a:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	881b      	ldrh	r3, [r3, #0]
 8000250:	2bff      	cmp	r3, #255	; 0xff
 8000252:	d946      	bls.n	80002e2 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800025a:	2300      	movs	r3, #0
 800025c:	61bb      	str	r3, [r7, #24]
 800025e:	e03a      	b.n	80002d6 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000260:	69bb      	ldr	r3, [r7, #24]
 8000262:	3308      	adds	r3, #8
 8000264:	2201      	movs	r2, #1
 8000266:	fa02 f303 	lsl.w	r3, r2, r3
 800026a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	881b      	ldrh	r3, [r3, #0]
 8000270:	461a      	mov	r2, r3
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	4013      	ands	r3, r2
 8000276:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000278:	693a      	ldr	r2, [r7, #16]
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	429a      	cmp	r2, r3
 800027e:	d127      	bne.n	80002d0 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000280:	69bb      	ldr	r3, [r7, #24]
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000286:	220f      	movs	r2, #15
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	fa02 f303 	lsl.w	r3, r2, r3
 800028e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	43db      	mvns	r3, r3
 8000294:	697a      	ldr	r2, [r7, #20]
 8000296:	4013      	ands	r3, r2
 8000298:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800029a:	69fa      	ldr	r2, [r7, #28]
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	fa02 f303 	lsl.w	r3, r2, r3
 80002a2:	697a      	ldr	r2, [r7, #20]
 80002a4:	4313      	orrs	r3, r2
 80002a6:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	78db      	ldrb	r3, [r3, #3]
 80002ac:	2b28      	cmp	r3, #40	; 0x28
 80002ae:	d105      	bne.n	80002bc <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80002b0:	69bb      	ldr	r3, [r7, #24]
 80002b2:	3308      	adds	r3, #8
 80002b4:	2201      	movs	r2, #1
 80002b6:	409a      	lsls	r2, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	78db      	ldrb	r3, [r3, #3]
 80002c0:	2b48      	cmp	r3, #72	; 0x48
 80002c2:	d105      	bne.n	80002d0 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80002c4:	69bb      	ldr	r3, [r7, #24]
 80002c6:	3308      	adds	r3, #8
 80002c8:	2201      	movs	r2, #1
 80002ca:	409a      	lsls	r2, r3
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002d0:	69bb      	ldr	r3, [r7, #24]
 80002d2:	3301      	adds	r3, #1
 80002d4:	61bb      	str	r3, [r7, #24]
 80002d6:	69bb      	ldr	r3, [r7, #24]
 80002d8:	2b07      	cmp	r3, #7
 80002da:	d9c1      	bls.n	8000260 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	697a      	ldr	r2, [r7, #20]
 80002e0:	605a      	str	r2, [r3, #4]
  }
}
 80002e2:	bf00      	nop
 80002e4:	3724      	adds	r7, #36	; 0x24
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr

080002ec <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	460b      	mov	r3, r1
 80002f6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80002f8:	2300      	movs	r3, #0
 80002fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	689a      	ldr	r2, [r3, #8]
 8000300:	887b      	ldrh	r3, [r7, #2]
 8000302:	4013      	ands	r3, r2
 8000304:	2b00      	cmp	r3, #0
 8000306:	d002      	beq.n	800030e <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000308:	2301      	movs	r3, #1
 800030a:	73fb      	strb	r3, [r7, #15]
 800030c:	e001      	b.n	8000312 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800030e:	2300      	movs	r3, #0
 8000310:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000312:	7bfb      	ldrb	r3, [r7, #15]
}
 8000314:	4618      	mov	r0, r3
 8000316:	3714      	adds	r7, #20
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr

0800031e <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800031e:	b480      	push	{r7}
 8000320:	b083      	sub	sp, #12
 8000322:	af00      	add	r7, sp, #0
 8000324:	6078      	str	r0, [r7, #4]
 8000326:	460b      	mov	r3, r1
 8000328:	807b      	strh	r3, [r7, #2]
 800032a:	4613      	mov	r3, r2
 800032c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 800032e:	787b      	ldrb	r3, [r7, #1]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d003      	beq.n	800033c <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000334:	887a      	ldrh	r2, [r7, #2]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 800033a:	e002      	b.n	8000342 <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 800033c:	887a      	ldrh	r2, [r7, #2]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	615a      	str	r2, [r3, #20]
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr

0800034c <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800034c:	b480      	push	{r7}
 800034e:	b087      	sub	sp, #28
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000354:	2300      	movs	r3, #0
 8000356:	617b      	str	r3, [r7, #20]
 8000358:	2300      	movs	r3, #0
 800035a:	613b      	str	r3, [r7, #16]
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
 8000360:	2300      	movs	r3, #0
 8000362:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000364:	4b4c      	ldr	r3, [pc, #304]	; (8000498 <RCC_GetClocksFreq+0x14c>)
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	f003 030c 	and.w	r3, r3, #12
 800036c:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	2b04      	cmp	r3, #4
 8000372:	d007      	beq.n	8000384 <RCC_GetClocksFreq+0x38>
 8000374:	2b08      	cmp	r3, #8
 8000376:	d009      	beq.n	800038c <RCC_GetClocksFreq+0x40>
 8000378:	2b00      	cmp	r3, #0
 800037a:	d133      	bne.n	80003e4 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a47      	ldr	r2, [pc, #284]	; (800049c <RCC_GetClocksFreq+0x150>)
 8000380:	601a      	str	r2, [r3, #0]
      break;
 8000382:	e033      	b.n	80003ec <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a45      	ldr	r2, [pc, #276]	; (800049c <RCC_GetClocksFreq+0x150>)
 8000388:	601a      	str	r2, [r3, #0]
      break;
 800038a:	e02f      	b.n	80003ec <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800038c:	4b42      	ldr	r3, [pc, #264]	; (8000498 <RCC_GetClocksFreq+0x14c>)
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000394:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000396:	4b40      	ldr	r3, [pc, #256]	; (8000498 <RCC_GetClocksFreq+0x14c>)
 8000398:	685b      	ldr	r3, [r3, #4]
 800039a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800039e:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80003a0:	693b      	ldr	r3, [r7, #16]
 80003a2:	0c9b      	lsrs	r3, r3, #18
 80003a4:	3302      	adds	r3, #2
 80003a6:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d106      	bne.n	80003bc <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80003ae:	693b      	ldr	r3, [r7, #16]
 80003b0:	4a3b      	ldr	r2, [pc, #236]	; (80004a0 <RCC_GetClocksFreq+0x154>)
 80003b2:	fb02 f203 	mul.w	r2, r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80003ba:	e017      	b.n	80003ec <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80003bc:	4b36      	ldr	r3, [pc, #216]	; (8000498 <RCC_GetClocksFreq+0x14c>)
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d006      	beq.n	80003d6 <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80003c8:	693b      	ldr	r3, [r7, #16]
 80003ca:	4a35      	ldr	r2, [pc, #212]	; (80004a0 <RCC_GetClocksFreq+0x154>)
 80003cc:	fb02 f203 	mul.w	r2, r2, r3
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	601a      	str	r2, [r3, #0]
      break;
 80003d4:	e00a      	b.n	80003ec <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	4a30      	ldr	r2, [pc, #192]	; (800049c <RCC_GetClocksFreq+0x150>)
 80003da:	fb02 f203 	mul.w	r2, r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	601a      	str	r2, [r3, #0]
      break;
 80003e2:	e003      	b.n	80003ec <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a2d      	ldr	r2, [pc, #180]	; (800049c <RCC_GetClocksFreq+0x150>)
 80003e8:	601a      	str	r2, [r3, #0]
      break;
 80003ea:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80003ec:	4b2a      	ldr	r3, [pc, #168]	; (8000498 <RCC_GetClocksFreq+0x14c>)
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80003f4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	091b      	lsrs	r3, r3, #4
 80003fa:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80003fc:	4a29      	ldr	r2, [pc, #164]	; (80004a4 <RCC_GetClocksFreq+0x158>)
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	4413      	add	r3, r2
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	b2db      	uxtb	r3, r3
 8000406:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681a      	ldr	r2, [r3, #0]
 800040c:	68bb      	ldr	r3, [r7, #8]
 800040e:	40da      	lsrs	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000414:	4b20      	ldr	r3, [pc, #128]	; (8000498 <RCC_GetClocksFreq+0x14c>)
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800041c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	0a1b      	lsrs	r3, r3, #8
 8000422:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000424:	4a1f      	ldr	r2, [pc, #124]	; (80004a4 <RCC_GetClocksFreq+0x158>)
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	4413      	add	r3, r2
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	b2db      	uxtb	r3, r3
 800042e:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	685a      	ldr	r2, [r3, #4]
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	40da      	lsrs	r2, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800043c:	4b16      	ldr	r3, [pc, #88]	; (8000498 <RCC_GetClocksFreq+0x14c>)
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000444:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	0adb      	lsrs	r3, r3, #11
 800044a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800044c:	4a15      	ldr	r2, [pc, #84]	; (80004a4 <RCC_GetClocksFreq+0x158>)
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	4413      	add	r3, r2
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	b2db      	uxtb	r3, r3
 8000456:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	685a      	ldr	r2, [r3, #4]
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	40da      	lsrs	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000464:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <RCC_GetClocksFreq+0x14c>)
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800046c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	0b9b      	lsrs	r3, r3, #14
 8000472:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000474:	4a0c      	ldr	r2, [pc, #48]	; (80004a8 <RCC_GetClocksFreq+0x15c>)
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	4413      	add	r3, r2
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	b2db      	uxtb	r3, r3
 800047e:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	68da      	ldr	r2, [r3, #12]
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	fbb2 f2f3 	udiv	r2, r2, r3
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	611a      	str	r2, [r3, #16]
}
 800048e:	bf00      	nop
 8000490:	371c      	adds	r7, #28
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	40021000 	.word	0x40021000
 800049c:	007a1200 	.word	0x007a1200
 80004a0:	003d0900 	.word	0x003d0900
 80004a4:	20000000 	.word	0x20000000
 80004a8:	20000010 	.word	0x20000010

080004ac <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	460b      	mov	r3, r1
 80004b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80004b8:	78fb      	ldrb	r3, [r7, #3]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d006      	beq.n	80004cc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80004be:	4909      	ldr	r1, [pc, #36]	; (80004e4 <RCC_APB2PeriphClockCmd+0x38>)
 80004c0:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <RCC_APB2PeriphClockCmd+0x38>)
 80004c2:	699a      	ldr	r2, [r3, #24]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4313      	orrs	r3, r2
 80004c8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80004ca:	e006      	b.n	80004da <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80004cc:	4905      	ldr	r1, [pc, #20]	; (80004e4 <RCC_APB2PeriphClockCmd+0x38>)
 80004ce:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <RCC_APB2PeriphClockCmd+0x38>)
 80004d0:	699a      	ldr	r2, [r3, #24]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	43db      	mvns	r3, r3
 80004d6:	4013      	ands	r3, r2
 80004d8:	618b      	str	r3, [r1, #24]
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr
 80004e4:	40021000 	.word	0x40021000

080004e8 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08c      	sub	sp, #48	; 0x30
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80004f2:	2300      	movs	r3, #0
 80004f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004f6:	2300      	movs	r3, #0
 80004f8:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 80004fa:	2300      	movs	r3, #0
 80004fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 80004fe:	2300      	movs	r3, #0
 8000500:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	8a1b      	ldrh	r3, [r3, #16]
 800050e:	b29b      	uxth	r3, r3
 8000510:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8000512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000514:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8000518:	4013      	ands	r3, r2
 800051a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	88db      	ldrh	r3, [r3, #6]
 8000520:	461a      	mov	r2, r3
 8000522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000524:	4313      	orrs	r3, r2
 8000526:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800052a:	b29a      	uxth	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	899b      	ldrh	r3, [r3, #12]
 8000534:	b29b      	uxth	r3, r3
 8000536:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800053a:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 800053e:	4013      	ands	r3, r2
 8000540:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	889a      	ldrh	r2, [r3, #4]
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	891b      	ldrh	r3, [r3, #8]
 800054a:	4313      	orrs	r3, r2
 800054c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000552:	4313      	orrs	r3, r2
 8000554:	b29b      	uxth	r3, r3
 8000556:	461a      	mov	r2, r3
 8000558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800055a:	4313      	orrs	r3, r2
 800055c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800055e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000560:	b29a      	uxth	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	8a9b      	ldrh	r3, [r3, #20]
 800056a:	b29b      	uxth	r3, r3
 800056c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 800056e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000570:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000574:	4013      	ands	r3, r2
 8000576:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	899b      	ldrh	r3, [r3, #12]
 800057c:	461a      	mov	r2, r3
 800057e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000580:	4313      	orrs	r3, r2
 8000582:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000586:	b29a      	uxth	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800058c:	f107 0308 	add.w	r3, r7, #8
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff fedb 	bl	800034c <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000596:	69fb      	ldr	r3, [r7, #28]
 8000598:	4a2e      	ldr	r2, [pc, #184]	; (8000654 <USART_Init+0x16c>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d102      	bne.n	80005a4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80005a2:	e001      	b.n	80005a8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80005a4:	693b      	ldr	r3, [r7, #16]
 80005a6:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	899b      	ldrh	r3, [r3, #12]
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	b21b      	sxth	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	da0c      	bge.n	80005ce <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80005b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005b6:	4613      	mov	r3, r2
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	4413      	add	r3, r2
 80005bc:	009a      	lsls	r2, r3, #2
 80005be:	441a      	add	r2, r3
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
 80005cc:	e00b      	b.n	80005e6 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80005ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005d0:	4613      	mov	r3, r2
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	4413      	add	r3, r2
 80005d6:	009a      	lsls	r2, r3, #2
 80005d8:	441a      	add	r2, r3
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 80005e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e8:	4a1b      	ldr	r2, [pc, #108]	; (8000658 <USART_Init+0x170>)
 80005ea:	fba2 2303 	umull	r2, r3, r2, r3
 80005ee:	095b      	lsrs	r3, r3, #5
 80005f0:	011b      	lsls	r3, r3, #4
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80005f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005f6:	091b      	lsrs	r3, r3, #4
 80005f8:	2264      	movs	r2, #100	; 0x64
 80005fa:	fb02 f303 	mul.w	r3, r2, r3
 80005fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	899b      	ldrh	r3, [r3, #12]
 8000608:	b29b      	uxth	r3, r3
 800060a:	b21b      	sxth	r3, r3
 800060c:	2b00      	cmp	r3, #0
 800060e:	da0c      	bge.n	800062a <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000610:	6a3b      	ldr	r3, [r7, #32]
 8000612:	00db      	lsls	r3, r3, #3
 8000614:	3332      	adds	r3, #50	; 0x32
 8000616:	4a10      	ldr	r2, [pc, #64]	; (8000658 <USART_Init+0x170>)
 8000618:	fba2 2303 	umull	r2, r3, r2, r3
 800061c:	095b      	lsrs	r3, r3, #5
 800061e:	f003 0307 	and.w	r3, r3, #7
 8000622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000624:	4313      	orrs	r3, r2
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000628:	e00b      	b.n	8000642 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800062a:	6a3b      	ldr	r3, [r7, #32]
 800062c:	011b      	lsls	r3, r3, #4
 800062e:	3332      	adds	r3, #50	; 0x32
 8000630:	4a09      	ldr	r2, [pc, #36]	; (8000658 <USART_Init+0x170>)
 8000632:	fba2 2303 	umull	r2, r3, r2, r3
 8000636:	095b      	lsrs	r3, r3, #5
 8000638:	f003 030f 	and.w	r3, r3, #15
 800063c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800063e:	4313      	orrs	r3, r2
 8000640:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000644:	b29a      	uxth	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	811a      	strh	r2, [r3, #8]
}
 800064a:	bf00      	nop
 800064c:	3730      	adds	r7, #48	; 0x30
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40013800 	.word	0x40013800
 8000658:	51eb851f 	.word	0x51eb851f

0800065c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	460b      	mov	r3, r1
 8000666:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000668:	78fb      	ldrb	r3, [r7, #3]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d008      	beq.n	8000680 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	899b      	ldrh	r3, [r3, #12]
 8000672:	b29b      	uxth	r3, r3
 8000674:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000678:	b29a      	uxth	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 800067e:	e007      	b.n	8000690 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	899b      	ldrh	r3, [r3, #12]
 8000684:	b29b      	uxth	r3, r3
 8000686:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800068a:	b29a      	uxth	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	819a      	strh	r2, [r3, #12]
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr

0800069a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800069a:	b480      	push	{r7}
 800069c:	b083      	sub	sp, #12
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f103 0208 	add.w	r2, r3, #8
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f04f 32ff 	mov.w	r2, #4294967295
 80006b2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f103 0208 	add.w	r2, r3, #8
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f103 0208 	add.w	r2, r3, #8
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr

080006d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	689a      	ldr	r2, [r3, #8]
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	683a      	ldr	r2, [r7, #0]
 8000714:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	683a      	ldr	r2, [r7, #0]
 800071a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	1c5a      	adds	r2, r3, #1
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	601a      	str	r2, [r3, #0]
}
 800072c:	bf00      	nop
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000736:	b480      	push	{r7}
 8000738:	b085      	sub	sp, #20
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	691b      	ldr	r3, [r3, #16]
 8000742:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	6892      	ldr	r2, [r2, #8]
 800074c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	6852      	ldr	r2, [r2, #4]
 8000756:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	685a      	ldr	r2, [r3, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	429a      	cmp	r2, r3
 8000760:	d103      	bne.n	800076a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	689a      	ldr	r2, [r3, #8]
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	1e5a      	subs	r2, r3, #1
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	681b      	ldr	r3, [r3, #0]
}
 800077e:	4618      	mov	r0, r3
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr

08000788 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	3b04      	subs	r3, #4
 8000798:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	3b04      	subs	r3, #4
 80007a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	f023 0201 	bic.w	r2, r3, #1
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	3b04      	subs	r3, #4
 80007b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80007b8:	4a08      	ldr	r2, [pc, #32]	; (80007dc <pxPortInitialiseStack+0x54>)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	3b14      	subs	r3, #20
 80007c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	3b20      	subs	r3, #32
 80007ce:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80007d0:	68fb      	ldr	r3, [r7, #12]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	080007e1 	.word	0x080007e1

080007e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80007ea:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80007ee:	f383 8811 	msr	BASEPRI, r3
 80007f2:	f3bf 8f6f 	isb	sy
 80007f6:	f3bf 8f4f 	dsb	sy
 80007fa:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80007fc:	bf00      	nop
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d0fc      	beq.n	80007fe <prvTaskExitError+0x1e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
	...

08000810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <pxCurrentTCBConst2>)
 8000812:	6819      	ldr	r1, [r3, #0]
 8000814:	6808      	ldr	r0, [r1, #0]
 8000816:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800081a:	f380 8809 	msr	PSP, r0
 800081e:	f3bf 8f6f 	isb	sy
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f380 8811 	msr	BASEPRI, r0
 800082a:	f04e 0e0d 	orr.w	lr, lr, #13
 800082e:	4770      	bx	lr

08000830 <pxCurrentTCBConst2>:
 8000830:	20003854 	.word	0x20003854
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000834:	bf00      	nop
 8000836:	bf00      	nop

08000838 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000838:	4806      	ldr	r0, [pc, #24]	; (8000854 <prvPortStartFirstTask+0x1c>)
 800083a:	6800      	ldr	r0, [r0, #0]
 800083c:	6800      	ldr	r0, [r0, #0]
 800083e:	f380 8808 	msr	MSP, r0
 8000842:	b662      	cpsie	i
 8000844:	b661      	cpsie	f
 8000846:	f3bf 8f4f 	dsb	sy
 800084a:	f3bf 8f6f 	isb	sy
 800084e:	df00      	svc	0
 8000850:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000852:	bf00      	nop
 8000854:	e000ed08 	.word	0xe000ed08

08000858 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800085c:	4a0c      	ldr	r2, [pc, #48]	; (8000890 <xPortStartScheduler+0x38>)
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <xPortStartScheduler+0x38>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000866:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000868:	4a09      	ldr	r2, [pc, #36]	; (8000890 <xPortStartScheduler+0x38>)
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <xPortStartScheduler+0x38>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000872:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000874:	f000 f890 	bl	8000998 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <xPortStartScheduler+0x3c>)
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800087e:	f7ff ffdb 	bl	8000838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000882:	f000 fd11 	bl	80012a8 <vTaskSwitchContext>
	prvTaskExitError();
 8000886:	f7ff ffab 	bl	80007e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800088a:	2300      	movs	r3, #0
}
 800088c:	4618      	mov	r0, r3
 800088e:	bd80      	pop	{r7, pc}
 8000890:	e000ed20 	.word	0xe000ed20
 8000894:	20000014 	.word	0x20000014

08000898 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80008a2:	f383 8811 	msr	BASEPRI, r3
 80008a6:	f3bf 8f6f 	isb	sy
 80008aa:	f3bf 8f4f 	dsb	sy
 80008ae:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80008b0:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <vPortEnterCritical+0x2c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	3301      	adds	r3, #1
 80008b6:	4a03      	ldr	r2, [pc, #12]	; (80008c4 <vPortEnterCritical+0x2c>)
 80008b8:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	20000014 	.word	0x20000014

080008c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <vPortExitCritical+0x2c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <vPortExitCritical+0x2c>)
 80008d6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <vPortExitCritical+0x2c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d104      	bne.n	80008ea <vPortExitCritical+0x22>
 80008e0:	2300      	movs	r3, #0
 80008e2:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	20000014 	.word	0x20000014
	...

08000900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000900:	f3ef 8009 	mrs	r0, PSP
 8000904:	f3bf 8f6f 	isb	sy
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <pxCurrentTCBConst>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000910:	6010      	str	r0, [r2, #0]
 8000912:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000916:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800091a:	f380 8811 	msr	BASEPRI, r0
 800091e:	f000 fcc3 	bl	80012a8 <vTaskSwitchContext>
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	f380 8811 	msr	BASEPRI, r0
 800092a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800092e:	6819      	ldr	r1, [r3, #0]
 8000930:	6808      	ldr	r0, [r1, #0]
 8000932:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000936:	f380 8809 	msr	PSP, r0
 800093a:	f3bf 8f6f 	isb	sy
 800093e:	4770      	bx	lr

08000940 <pxCurrentTCBConst>:
 8000940:	20003854 	.word	0x20003854
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000944:	bf00      	nop
 8000946:	bf00      	nop

08000948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
	__asm volatile
 800094e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000952:	f383 8811 	msr	BASEPRI, r3
 8000956:	f3bf 8f6f 	isb	sy
 800095a:	f3bf 8f4f 	dsb	sy
 800095e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8000960:	f001 fce2 	bl	8002328 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000964:	f000 fbf4 	bl	8001150 <xTaskIncrementTick>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d006      	beq.n	800097c <SysTick_Handler+0x34>
		{
      traceISR_EXIT_TO_SCHEDULER();
 800096e:	f001 fd39 	bl	80023e4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <SysTick_Handler+0x4c>)
 8000974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	e001      	b.n	8000980 <SysTick_Handler+0x38>
		}
		else
		{
			traceISR_EXIT();
 800097c:	f001 fd16 	bl	80023ac <SEGGER_SYSVIEW_RecordExitISR>
 8000980:	2300      	movs	r3, #0
 8000982:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	e000ed04 	.word	0xe000ed04

08000998 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <vPortSetupTimerInterrupt+0x24>)
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <vPortSetupTimerInterrupt+0x28>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <vPortSetupTimerInterrupt+0x2c>)
 80009aa:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <vPortSetupTimerInterrupt+0x30>)
 80009ac:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80009ae:	4b03      	ldr	r3, [pc, #12]	; (80009bc <vPortSetupTimerInterrupt+0x24>)
 80009b0:	2207      	movs	r2, #7
 80009b2:	601a      	str	r2, [r3, #0]
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	e000e010 	.word	0xe000e010
 80009c0:	e000e018 	.word	0xe000e018
 80009c4:	e000e014 	.word	0xe000e014
 80009c8:	0001193f 	.word	0x0001193f

080009cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80009d8:	f000 fb1a 	bl	8001010 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80009dc:	4b42      	ldr	r3, [pc, #264]	; (8000ae8 <pvPortMalloc+0x11c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d101      	bne.n	80009e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80009e4:	f000 f8cc 	bl	8000b80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80009e8:	4b40      	ldr	r3, [pc, #256]	; (8000aec <pvPortMalloc+0x120>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4013      	ands	r3, r2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d172      	bne.n	8000ada <pvPortMalloc+0x10e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d00d      	beq.n	8000a16 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 80009fa:	2208      	movs	r2, #8
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4413      	add	r3, r2
 8000a00:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	f003 0307 	and.w	r3, r3, #7
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d004      	beq.n	8000a16 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f023 0307 	bic.w	r3, r3, #7
 8000a12:	3308      	adds	r3, #8
 8000a14:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d05e      	beq.n	8000ada <pvPortMalloc+0x10e>
 8000a1c:	4b34      	ldr	r3, [pc, #208]	; (8000af0 <pvPortMalloc+0x124>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d859      	bhi.n	8000ada <pvPortMalloc+0x10e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000a26:	4b33      	ldr	r3, [pc, #204]	; (8000af4 <pvPortMalloc+0x128>)
 8000a28:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8000a2a:	4b32      	ldr	r3, [pc, #200]	; (8000af4 <pvPortMalloc+0x128>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a30:	e004      	b.n	8000a3c <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	685a      	ldr	r2, [r3, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d203      	bcs.n	8000a4e <pvPortMalloc+0x82>
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d1f1      	bne.n	8000a32 <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000a4e:	4b26      	ldr	r3, [pc, #152]	; (8000ae8 <pvPortMalloc+0x11c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	697a      	ldr	r2, [r7, #20]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d040      	beq.n	8000ada <pvPortMalloc+0x10e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	4413      	add	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	1ad2      	subs	r2, r2, r3
 8000a72:	2308      	movs	r3, #8
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d90f      	bls.n	8000a9a <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000a7a:	697a      	ldr	r2, [r7, #20]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	685a      	ldr	r2, [r3, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	1ad2      	subs	r2, r2, r3
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000a94:	68b8      	ldr	r0, [r7, #8]
 8000a96:	f000 f8d5 	bl	8000c44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <pvPortMalloc+0x124>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <pvPortMalloc+0x124>)
 8000aa6:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <pvPortMalloc+0x124>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <pvPortMalloc+0x12c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d203      	bcs.n	8000abc <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <pvPortMalloc+0x124>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0f      	ldr	r2, [pc, #60]	; (8000af8 <pvPortMalloc+0x12c>)
 8000aba:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	685a      	ldr	r2, [r3, #4]
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <pvPortMalloc+0x120>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <pvPortMalloc+0x130>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	4a09      	ldr	r2, [pc, #36]	; (8000afc <pvPortMalloc+0x130>)
 8000ad8:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000ada:	f000 faa7 	bl	800102c <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8000ade:	68fb      	ldr	r3, [r7, #12]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	2000383c 	.word	0x2000383c
 8000aec:	20003850 	.word	0x20003850
 8000af0:	20003840 	.word	0x20003840
 8000af4:	20003834 	.word	0x20003834
 8000af8:	20003844 	.word	0x20003844
 8000afc:	20003848 	.word	0x20003848

08000b00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d02c      	beq.n	8000b6c <vPortFree+0x6c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000b12:	2308      	movs	r3, #8
 8000b14:	425b      	negs	r3, r3
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	4413      	add	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	685a      	ldr	r2, [r3, #4]
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <vPortFree+0x74>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d01e      	beq.n	8000b6c <vPortFree+0x6c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d11a      	bne.n	8000b6c <vPortFree+0x6c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <vPortFree+0x74>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	401a      	ands	r2, r3
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000b46:	f000 fa63 	bl	8001010 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	685a      	ldr	r2, [r3, #4]
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <vPortFree+0x78>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <vPortFree+0x78>)
 8000b56:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000b58:	68b8      	ldr	r0, [r7, #8]
 8000b5a:	f000 f873 	bl	8000c44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <vPortFree+0x7c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	3301      	adds	r3, #1
 8000b64:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <vPortFree+0x7c>)
 8000b66:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8000b68:	f000 fa60 	bl	800102c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000b6c:	bf00      	nop
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20003850 	.word	0x20003850
 8000b78:	20003840 	.word	0x20003840
 8000b7c:	2000384c 	.word	0x2000384c

08000b80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000b86:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000b8c:	4b27      	ldr	r3, [pc, #156]	; (8000c2c <prvHeapInit+0xac>)
 8000b8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d00c      	beq.n	8000bb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3307      	adds	r3, #7
 8000b9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f023 0307 	bic.w	r3, r3, #7
 8000ba6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000ba8:	68ba      	ldr	r2, [r7, #8]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <prvHeapInit+0xac>)
 8000bb0:	4413      	add	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000bb8:	4a1d      	ldr	r2, [pc, #116]	; (8000c30 <prvHeapInit+0xb0>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <prvHeapInit+0xb0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	4413      	add	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000bcc:	2208      	movs	r2, #8
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	1a9b      	subs	r3, r3, r2
 8000bd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f023 0307 	bic.w	r3, r3, #7
 8000bda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4a15      	ldr	r2, [pc, #84]	; (8000c34 <prvHeapInit+0xb4>)
 8000be0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <prvHeapInit+0xb4>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2200      	movs	r2, #0
 8000be8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000bea:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <prvHeapInit+0xb4>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	68fa      	ldr	r2, [r7, #12]
 8000bfa:	1ad2      	subs	r2, r2, r3
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <prvHeapInit+0xb4>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <prvHeapInit+0xb8>)
 8000c0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	4a09      	ldr	r2, [pc, #36]	; (8000c3c <prvHeapInit+0xbc>)
 8000c16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <prvHeapInit+0xc0>)
 8000c1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000c1e:	601a      	str	r2, [r3, #0]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000034 	.word	0x20000034
 8000c30:	20003834 	.word	0x20003834
 8000c34:	2000383c 	.word	0x2000383c
 8000c38:	20003844 	.word	0x20003844
 8000c3c:	20003840 	.word	0x20003840
 8000c40:	20003850 	.word	0x20003850

08000c44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000c4c:	4b27      	ldr	r3, [pc, #156]	; (8000cec <prvInsertBlockIntoFreeList+0xa8>)
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	e002      	b.n	8000c58 <prvInsertBlockIntoFreeList+0x14>
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d3f7      	bcc.n	8000c52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	441a      	add	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d108      	bne.n	8000c86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	685a      	ldr	r2, [r3, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	441a      	add	r2, r3
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	441a      	add	r2, r3
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d118      	bne.n	8000ccc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <prvInsertBlockIntoFreeList+0xac>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d00d      	beq.n	8000cc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	685a      	ldr	r2, [r3, #4]
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	441a      	add	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	e008      	b.n	8000cd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <prvInsertBlockIntoFreeList+0xac>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	e003      	b.n	8000cd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d002      	beq.n	8000ce2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000ce2:	bf00      	nop
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	20003834 	.word	0x20003834
 8000cf0:	2000383c 	.word	0x2000383c

08000cf4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08c      	sub	sp, #48	; 0x30
 8000cf8:	af04      	add	r7, sp, #16
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	4613      	mov	r3, r2
 8000d02:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000d04:	88fb      	ldrh	r3, [r7, #6]
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fe5f 	bl	80009cc <pvPortMalloc>
 8000d0e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d00e      	beq.n	8000d34 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000d16:	2054      	movs	r0, #84	; 0x54
 8000d18:	f7ff fe58 	bl	80009cc <pvPortMalloc>
 8000d1c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d003      	beq.n	8000d2c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	631a      	str	r2, [r3, #48]	; 0x30
 8000d2a:	e005      	b.n	8000d38 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000d2c:	6978      	ldr	r0, [r7, #20]
 8000d2e:	f7ff fee7 	bl	8000b00 <vPortFree>
 8000d32:	e001      	b.n	8000d38 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d013      	beq.n	8000d66 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000d3e:	88fa      	ldrh	r2, [r7, #6]
 8000d40:	2300      	movs	r3, #0
 8000d42:	9303      	str	r3, [sp, #12]
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	9302      	str	r3, [sp, #8]
 8000d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d4a:	9301      	str	r3, [sp, #4]
 8000d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	68b9      	ldr	r1, [r7, #8]
 8000d54:	68f8      	ldr	r0, [r7, #12]
 8000d56:	f000 f80e 	bl	8000d76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000d5a:	69f8      	ldr	r0, [r7, #28]
 8000d5c:	f000 f88a 	bl	8000e74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000d60:	2301      	movs	r3, #1
 8000d62:	61bb      	str	r3, [r7, #24]
 8000d64:	e002      	b.n	8000d6c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000d6c:	69bb      	ldr	r3, [r7, #24]
	}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3720      	adds	r7, #32
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b086      	sub	sp, #24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	60f8      	str	r0, [r7, #12]
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
 8000d82:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d86:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	21a5      	movs	r1, #165	; 0xa5
 8000d90:	f001 ff52 	bl	8002c38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	f023 0307 	bic.w	r3, r3, #7
 8000dac:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d01f      	beq.n	8000df4 <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	e012      	b.n	8000de0 <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	7819      	ldrb	r1, [r3, #0]
 8000dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	3334      	adds	r3, #52	; 0x34
 8000dca:	460a      	mov	r2, r1
 8000dcc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d006      	beq.n	8000de8 <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	2b0f      	cmp	r3, #15
 8000de4:	d9e9      	bls.n	8000dba <prvInitialiseNewTask+0x44>
 8000de6:	e000      	b.n	8000dea <prvInitialiseNewTask+0x74>
			{
				break;
 8000de8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000df2:	e003      	b.n	8000dfc <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000dfc:	6a3b      	ldr	r3, [r7, #32]
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	d901      	bls.n	8000e06 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000e02:	2304      	movs	r3, #4
 8000e04:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e08:	6a3a      	ldr	r2, [r7, #32]
 8000e0a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e0e:	6a3a      	ldr	r2, [r7, #32]
 8000e10:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8000e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e14:	2200      	movs	r2, #0
 8000e16:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e1a:	3304      	adds	r3, #4
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fc5b 	bl	80006d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e24:	3318      	adds	r3, #24
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fc56 	bl	80006d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e30:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e32:	6a3b      	ldr	r3, [r7, #32]
 8000e34:	f1c3 0205 	rsb	r2, r3, #5
 8000e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e3a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e44:	2200      	movs	r2, #0
 8000e46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000e50:	683a      	ldr	r2, [r7, #0]
 8000e52:	68f9      	ldr	r1, [r7, #12]
 8000e54:	6938      	ldr	r0, [r7, #16]
 8000e56:	f7ff fc97 	bl	8000788 <pxPortInitialiseStack>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8000e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d002      	beq.n	8000e6c <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e6c:	bf00      	nop
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000e74:	b5b0      	push	{r4, r5, r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af02      	add	r7, sp, #8
 8000e7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000e7c:	f7ff fd0c 	bl	8000898 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000e80:	4b39      	ldr	r3, [pc, #228]	; (8000f68 <prvAddNewTaskToReadyList+0xf4>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	3301      	adds	r3, #1
 8000e86:	4a38      	ldr	r2, [pc, #224]	; (8000f68 <prvAddNewTaskToReadyList+0xf4>)
 8000e88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000e8a:	4b38      	ldr	r3, [pc, #224]	; (8000f6c <prvAddNewTaskToReadyList+0xf8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d109      	bne.n	8000ea6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000e92:	4a36      	ldr	r2, [pc, #216]	; (8000f6c <prvAddNewTaskToReadyList+0xf8>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000e98:	4b33      	ldr	r3, [pc, #204]	; (8000f68 <prvAddNewTaskToReadyList+0xf4>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d110      	bne.n	8000ec2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000ea0:	f000 fa6e 	bl	8001380 <prvInitialiseTaskLists>
 8000ea4:	e00d      	b.n	8000ec2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000ea6:	4b32      	ldr	r3, [pc, #200]	; (8000f70 <prvAddNewTaskToReadyList+0xfc>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d109      	bne.n	8000ec2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000eae:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <prvAddNewTaskToReadyList+0xf8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d802      	bhi.n	8000ec2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000ebc:	4a2b      	ldr	r2, [pc, #172]	; (8000f6c <prvAddNewTaskToReadyList+0xf8>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000ec2:	4b2c      	ldr	r3, [pc, #176]	; (8000f74 <prvAddNewTaskToReadyList+0x100>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	4a2a      	ldr	r2, [pc, #168]	; (8000f74 <prvAddNewTaskToReadyList+0x100>)
 8000eca:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d016      	beq.n	8000f00 <prvAddNewTaskToReadyList+0x8c>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f001 fabd 	bl	8002454 <SEGGER_SYSVIEW_OnTaskCreate>
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	461d      	mov	r5, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	461c      	mov	r4, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	1ae3      	subs	r3, r4, r3
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	462b      	mov	r3, r5
 8000efc:	f000 fadc 	bl	80014b8 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f001 fb2e 	bl	8002564 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <prvAddNewTaskToReadyList+0x104>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	4a18      	ldr	r2, [pc, #96]	; (8000f78 <prvAddNewTaskToReadyList+0x104>)
 8000f18:	6013      	str	r3, [r2, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f1e:	4613      	mov	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4a15      	ldr	r2, [pc, #84]	; (8000f7c <prvAddNewTaskToReadyList+0x108>)
 8000f28:	441a      	add	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4610      	mov	r0, r2
 8000f32:	f7ff fbdd 	bl	80006f0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000f36:	f7ff fcc7 	bl	80008c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <prvAddNewTaskToReadyList+0xfc>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d00e      	beq.n	8000f60 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <prvAddNewTaskToReadyList+0xf8>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d207      	bcs.n	8000f60 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <prvAddNewTaskToReadyList+0x10c>)
 8000f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	f3bf 8f4f 	dsb	sy
 8000f5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bdb0      	pop	{r4, r5, r7, pc}
 8000f68:	2000392c 	.word	0x2000392c
 8000f6c:	20003854 	.word	0x20003854
 8000f70:	20003938 	.word	0x20003938
 8000f74:	20003948 	.word	0x20003948
 8000f78:	20003934 	.word	0x20003934
 8000f7c:	20003858 	.word	0x20003858
 8000f80:	e000ed04 	.word	0xe000ed04

08000f84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <vTaskStartScheduler+0x70>)
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2300      	movs	r3, #0
 8000f94:	2280      	movs	r2, #128	; 0x80
 8000f96:	4918      	ldr	r1, [pc, #96]	; (8000ff8 <vTaskStartScheduler+0x74>)
 8000f98:	4818      	ldr	r0, [pc, #96]	; (8000ffc <vTaskStartScheduler+0x78>)
 8000f9a:	f7ff feab 	bl	8000cf4 <xTaskCreate>
 8000f9e:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d122      	bne.n	8000fec <vTaskStartScheduler+0x68>
	__asm volatile
 8000fa6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000faa:	f383 8811 	msr	BASEPRI, r3
 8000fae:	f3bf 8f6f 	isb	sy
 8000fb2:	f3bf 8f4f 	dsb	sy
 8000fb6:	603b      	str	r3, [r7, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <vTaskStartScheduler+0x7c>)
 8000fba:	f04f 32ff 	mov.w	r2, #4294967295
 8000fbe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000fc0:	4b10      	ldr	r3, [pc, #64]	; (8001004 <vTaskStartScheduler+0x80>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <vTaskStartScheduler+0x84>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <vTaskStartScheduler+0x88>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <vTaskStartScheduler+0x70>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d102      	bne.n	8000fde <vTaskStartScheduler+0x5a>
 8000fd8:	f001 fa20 	bl	800241c <SEGGER_SYSVIEW_OnIdle>
 8000fdc:	e004      	b.n	8000fe8 <vTaskStartScheduler+0x64>
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <vTaskStartScheduler+0x88>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f001 fa7a 	bl	80024dc <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000fe8:	f7ff fc36 	bl	8000858 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20003950 	.word	0x20003950
 8000ff8:	08002c60 	.word	0x08002c60
 8000ffc:	08001351 	.word	0x08001351
 8001000:	2000394c 	.word	0x2000394c
 8001004:	20003938 	.word	0x20003938
 8001008:	20003930 	.word	0x20003930
 800100c:	20003854 	.word	0x20003854

08001010 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <vTaskSuspendAll+0x18>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	4a03      	ldr	r2, [pc, #12]	; (8001028 <vTaskSuspendAll+0x18>)
 800101c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20003954 	.word	0x20003954

0800102c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800103a:	f7ff fc2d 	bl	8000898 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800103e:	4b3b      	ldr	r3, [pc, #236]	; (800112c <xTaskResumeAll+0x100>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3b01      	subs	r3, #1
 8001044:	4a39      	ldr	r2, [pc, #228]	; (800112c <xTaskResumeAll+0x100>)
 8001046:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001048:	4b38      	ldr	r3, [pc, #224]	; (800112c <xTaskResumeAll+0x100>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d165      	bne.n	800111c <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001050:	4b37      	ldr	r3, [pc, #220]	; (8001130 <xTaskResumeAll+0x104>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d061      	beq.n	800111c <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001058:	e032      	b.n	80010c0 <xTaskResumeAll+0x94>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800105a:	4b36      	ldr	r3, [pc, #216]	; (8001134 <xTaskResumeAll+0x108>)
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3318      	adds	r3, #24
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fb65 	bl	8000736 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	3304      	adds	r3, #4
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fb60 	bl	8000736 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4618      	mov	r0, r3
 800107a:	f001 fa73 	bl	8002564 <SEGGER_SYSVIEW_OnTaskStartReady>
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001082:	2201      	movs	r2, #1
 8001084:	409a      	lsls	r2, r3
 8001086:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <xTaskResumeAll+0x10c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4313      	orrs	r3, r2
 800108c:	4a2a      	ldr	r2, [pc, #168]	; (8001138 <xTaskResumeAll+0x10c>)
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001094:	4613      	mov	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4a27      	ldr	r2, [pc, #156]	; (800113c <xTaskResumeAll+0x110>)
 800109e:	441a      	add	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	3304      	adds	r3, #4
 80010a4:	4619      	mov	r1, r3
 80010a6:	4610      	mov	r0, r2
 80010a8:	f7ff fb22 	bl	80006f0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010b0:	4b23      	ldr	r3, [pc, #140]	; (8001140 <xTaskResumeAll+0x114>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d302      	bcc.n	80010c0 <xTaskResumeAll+0x94>
					{
						xYieldPending = pdTRUE;
 80010ba:	4b22      	ldr	r3, [pc, #136]	; (8001144 <xTaskResumeAll+0x118>)
 80010bc:	2201      	movs	r2, #1
 80010be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80010c0:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <xTaskResumeAll+0x108>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1c8      	bne.n	800105a <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <xTaskResumeAll+0xa6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80010ce:	f000 f9d3 	bl	8001478 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <xTaskResumeAll+0x11c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d010      	beq.n	8001100 <xTaskResumeAll+0xd4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80010de:	f000 f837 	bl	8001150 <xTaskIncrementTick>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <xTaskResumeAll+0xc2>
							{
								xYieldPending = pdTRUE;
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <xTaskResumeAll+0x118>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f1      	bne.n	80010de <xTaskResumeAll+0xb2>

						xPendedTicks = 0;
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <xTaskResumeAll+0x11c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001100:	4b10      	ldr	r3, [pc, #64]	; (8001144 <xTaskResumeAll+0x118>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d009      	beq.n	800111c <xTaskResumeAll+0xf0>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001108:	2301      	movs	r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <xTaskResumeAll+0x120>)
 800110e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	f3bf 8f4f 	dsb	sy
 8001118:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800111c:	f7ff fbd4 	bl	80008c8 <vPortExitCritical>

	return xAlreadyYielded;
 8001120:	68bb      	ldr	r3, [r7, #8]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20003954 	.word	0x20003954
 8001130:	2000392c 	.word	0x2000392c
 8001134:	200038ec 	.word	0x200038ec
 8001138:	20003934 	.word	0x20003934
 800113c:	20003858 	.word	0x20003858
 8001140:	20003854 	.word	0x20003854
 8001144:	20003940 	.word	0x20003940
 8001148:	2000393c 	.word	0x2000393c
 800114c:	e000ed04 	.word	0xe000ed04

08001150 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800115a:	4b48      	ldr	r3, [pc, #288]	; (800127c <xTaskIncrementTick+0x12c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	f040 8082 	bne.w	8001268 <xTaskIncrementTick+0x118>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001164:	4b46      	ldr	r3, [pc, #280]	; (8001280 <xTaskIncrementTick+0x130>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800116c:	4a44      	ldr	r2, [pc, #272]	; (8001280 <xTaskIncrementTick+0x130>)
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d110      	bne.n	800119a <xTaskIncrementTick+0x4a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001178:	4b42      	ldr	r3, [pc, #264]	; (8001284 <xTaskIncrementTick+0x134>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	4b42      	ldr	r3, [pc, #264]	; (8001288 <xTaskIncrementTick+0x138>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a40      	ldr	r2, [pc, #256]	; (8001284 <xTaskIncrementTick+0x134>)
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	4a40      	ldr	r2, [pc, #256]	; (8001288 <xTaskIncrementTick+0x138>)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b3f      	ldr	r3, [pc, #252]	; (800128c <xTaskIncrementTick+0x13c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	4a3e      	ldr	r2, [pc, #248]	; (800128c <xTaskIncrementTick+0x13c>)
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	f000 f96f 	bl	8001478 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800119a:	4b3d      	ldr	r3, [pc, #244]	; (8001290 <xTaskIncrementTick+0x140>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d34c      	bcc.n	800123e <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80011a4:	4b37      	ldr	r3, [pc, #220]	; (8001284 <xTaskIncrementTick+0x134>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d104      	bne.n	80011b8 <xTaskIncrementTick+0x68>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80011ae:	4b38      	ldr	r3, [pc, #224]	; (8001290 <xTaskIncrementTick+0x140>)
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295
 80011b4:	601a      	str	r2, [r3, #0]
					break;
 80011b6:	e042      	b.n	800123e <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80011b8:	4b32      	ldr	r3, [pc, #200]	; (8001284 <xTaskIncrementTick+0x134>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d203      	bcs.n	80011d8 <xTaskIncrementTick+0x88>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80011d0:	4a2f      	ldr	r2, [pc, #188]	; (8001290 <xTaskIncrementTick+0x140>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80011d6:	e032      	b.n	800123e <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	3304      	adds	r3, #4
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff faaa 	bl	8000736 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d004      	beq.n	80011f4 <xTaskIncrementTick+0xa4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	3318      	adds	r3, #24
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff faa1 	bl	8000736 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 f9b4 	bl	8002564 <SEGGER_SYSVIEW_OnTaskStartReady>
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001200:	2201      	movs	r2, #1
 8001202:	409a      	lsls	r2, r3
 8001204:	4b23      	ldr	r3, [pc, #140]	; (8001294 <xTaskIncrementTick+0x144>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4313      	orrs	r3, r2
 800120a:	4a22      	ldr	r2, [pc, #136]	; (8001294 <xTaskIncrementTick+0x144>)
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4a1f      	ldr	r2, [pc, #124]	; (8001298 <xTaskIncrementTick+0x148>)
 800121c:	441a      	add	r2, r3
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	3304      	adds	r3, #4
 8001222:	4619      	mov	r1, r3
 8001224:	4610      	mov	r0, r2
 8001226:	f7ff fa63 	bl	80006f0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <xTaskIncrementTick+0x14c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001234:	429a      	cmp	r2, r3
 8001236:	d3b5      	bcc.n	80011a4 <xTaskIncrementTick+0x54>
						{
							xSwitchRequired = pdTRUE;
 8001238:	2301      	movs	r3, #1
 800123a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800123c:	e7b2      	b.n	80011a4 <xTaskIncrementTick+0x54>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <xTaskIncrementTick+0x14c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001244:	4914      	ldr	r1, [pc, #80]	; (8001298 <xTaskIncrementTick+0x148>)
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	440b      	add	r3, r1
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d901      	bls.n	800125a <xTaskIncrementTick+0x10a>
			{
				xSwitchRequired = pdTRUE;
 8001256:	2301      	movs	r3, #1
 8001258:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <xTaskIncrementTick+0x150>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d007      	beq.n	8001272 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8001262:	2301      	movs	r3, #1
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	e004      	b.n	8001272 <xTaskIncrementTick+0x122>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001268:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <xTaskIncrementTick+0x154>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	3301      	adds	r3, #1
 800126e:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <xTaskIncrementTick+0x154>)
 8001270:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001272:	697b      	ldr	r3, [r7, #20]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20003954 	.word	0x20003954
 8001280:	20003930 	.word	0x20003930
 8001284:	200038e4 	.word	0x200038e4
 8001288:	200038e8 	.word	0x200038e8
 800128c:	20003944 	.word	0x20003944
 8001290:	2000394c 	.word	0x2000394c
 8001294:	20003934 	.word	0x20003934
 8001298:	20003858 	.word	0x20003858
 800129c:	20003854 	.word	0x20003854
 80012a0:	20003940 	.word	0x20003940
 80012a4:	2000393c 	.word	0x2000393c

080012a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80012ae:	4b22      	ldr	r3, [pc, #136]	; (8001338 <vTaskSwitchContext+0x90>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80012b6:	4b21      	ldr	r3, [pc, #132]	; (800133c <vTaskSwitchContext+0x94>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80012bc:	e038      	b.n	8001330 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 80012be:	4b1f      	ldr	r3, [pc, #124]	; (800133c <vTaskSwitchContext+0x94>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <vTaskSwitchContext+0x98>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	fab3 f383 	clz	r3, r3
 80012d0:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 80012d2:	78fb      	ldrb	r3, [r7, #3]
 80012d4:	f1c3 031f 	rsb	r3, r3, #31
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	4613      	mov	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4a17      	ldr	r2, [pc, #92]	; (8001344 <vTaskSwitchContext+0x9c>)
 80012e6:	4413      	add	r3, r2
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	3308      	adds	r3, #8
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d104      	bne.n	800130a <vTaskSwitchContext+0x62>
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <vTaskSwitchContext+0xa0>)
 8001312:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <vTaskSwitchContext+0xa0>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <vTaskSwitchContext+0xa4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	429a      	cmp	r2, r3
 800131e:	d102      	bne.n	8001326 <vTaskSwitchContext+0x7e>
 8001320:	f001 f87c 	bl	800241c <SEGGER_SYSVIEW_OnIdle>
}
 8001324:	e004      	b.n	8001330 <vTaskSwitchContext+0x88>
		traceTASK_SWITCHED_IN();
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <vTaskSwitchContext+0xa0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f001 f8d6 	bl	80024dc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001330:	bf00      	nop
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20003954 	.word	0x20003954
 800133c:	20003940 	.word	0x20003940
 8001340:	20003934 	.word	0x20003934
 8001344:	20003858 	.word	0x20003858
 8001348:	20003854 	.word	0x20003854
 800134c:	20003950 	.word	0x20003950

08001350 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001358:	f000 f852 	bl	8001400 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <prvIdleTask+0x28>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d9f9      	bls.n	8001358 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <prvIdleTask+0x2c>)
 8001366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	f3bf 8f4f 	dsb	sy
 8001370:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001374:	e7f0      	b.n	8001358 <prvIdleTask+0x8>
 8001376:	bf00      	nop
 8001378:	20003858 	.word	0x20003858
 800137c:	e000ed04 	.word	0xe000ed04

08001380 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	e00c      	b.n	80013a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <prvInitialiseTaskLists+0x60>)
 8001398:	4413      	add	r3, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f97d 	bl	800069a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3301      	adds	r3, #1
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d9ef      	bls.n	800138c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80013ac:	480d      	ldr	r0, [pc, #52]	; (80013e4 <prvInitialiseTaskLists+0x64>)
 80013ae:	f7ff f974 	bl	800069a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80013b2:	480d      	ldr	r0, [pc, #52]	; (80013e8 <prvInitialiseTaskLists+0x68>)
 80013b4:	f7ff f971 	bl	800069a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <prvInitialiseTaskLists+0x6c>)
 80013ba:	f7ff f96e 	bl	800069a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80013be:	480c      	ldr	r0, [pc, #48]	; (80013f0 <prvInitialiseTaskLists+0x70>)
 80013c0:	f7ff f96b 	bl	800069a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80013c4:	480b      	ldr	r0, [pc, #44]	; (80013f4 <prvInitialiseTaskLists+0x74>)
 80013c6:	f7ff f968 	bl	800069a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <prvInitialiseTaskLists+0x78>)
 80013cc:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <prvInitialiseTaskLists+0x64>)
 80013ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <prvInitialiseTaskLists+0x7c>)
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <prvInitialiseTaskLists+0x68>)
 80013d4:	601a      	str	r2, [r3, #0]
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20003858 	.word	0x20003858
 80013e4:	200038bc 	.word	0x200038bc
 80013e8:	200038d0 	.word	0x200038d0
 80013ec:	200038ec 	.word	0x200038ec
 80013f0:	20003900 	.word	0x20003900
 80013f4:	20003918 	.word	0x20003918
 80013f8:	200038e4 	.word	0x200038e4
 80013fc:	200038e8 	.word	0x200038e8

08001400 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001406:	e019      	b.n	800143c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001408:	f7ff fa46 	bl	8000898 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <prvCheckTasksWaitingTermination+0x4c>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3304      	adds	r3, #4
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f98c 	bl	8000736 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <prvCheckTasksWaitingTermination+0x50>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	3b01      	subs	r3, #1
 8001424:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <prvCheckTasksWaitingTermination+0x50>)
 8001426:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <prvCheckTasksWaitingTermination+0x54>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3b01      	subs	r3, #1
 800142e:	4a09      	ldr	r2, [pc, #36]	; (8001454 <prvCheckTasksWaitingTermination+0x54>)
 8001430:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001432:	f7ff fa49 	bl	80008c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 f80e 	bl	8001458 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <prvCheckTasksWaitingTermination+0x54>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1e1      	bne.n	8001408 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20003900 	.word	0x20003900
 8001450:	2000392c 	.word	0x2000392c
 8001454:	20003914 	.word	0x20003914

08001458 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fb4b 	bl	8000b00 <vPortFree>
			vPortFree( pxTCB );
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff fb48 	bl	8000b00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <prvResetNextTaskUnblockTime+0x38>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d104      	bne.n	8001492 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <prvResetNextTaskUnblockTime+0x3c>)
 800148a:	f04f 32ff 	mov.w	r2, #4294967295
 800148e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001490:	e008      	b.n	80014a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <prvResetNextTaskUnblockTime+0x38>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <prvResetNextTaskUnblockTime+0x3c>)
 80014a2:	6013      	str	r3, [r2, #0]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	200038e4 	.word	0x200038e4
 80014b4:	2000394c 	.word	0x2000394c

080014b8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af02      	add	r7, sp, #8
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80014c6:	2205      	movs	r2, #5
 80014c8:	492b      	ldr	r1, [pc, #172]	; (8001578 <SYSVIEW_AddTask+0xc0>)
 80014ca:	68b8      	ldr	r0, [r7, #8]
 80014cc:	f001 fb9a 	bl	8002c04 <memcmp>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d04b      	beq.n	800156e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80014d6:	4b29      	ldr	r3, [pc, #164]	; (800157c <SYSVIEW_AddTask+0xc4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b07      	cmp	r3, #7
 80014dc:	d903      	bls.n	80014e6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80014de:	4828      	ldr	r0, [pc, #160]	; (8001580 <SYSVIEW_AddTask+0xc8>)
 80014e0:	f001 f960 	bl	80027a4 <SEGGER_SYSVIEW_Warn>
    return;
 80014e4:	e044      	b.n	8001570 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80014e6:	4b25      	ldr	r3, [pc, #148]	; (800157c <SYSVIEW_AddTask+0xc4>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4926      	ldr	r1, [pc, #152]	; (8001584 <SYSVIEW_AddTask+0xcc>)
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80014fa:	4b20      	ldr	r3, [pc, #128]	; (800157c <SYSVIEW_AddTask+0xc4>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4921      	ldr	r1, [pc, #132]	; (8001584 <SYSVIEW_AddTask+0xcc>)
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	3304      	adds	r3, #4
 800150c:	68ba      	ldr	r2, [r7, #8]
 800150e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001510:	4b1a      	ldr	r3, [pc, #104]	; (800157c <SYSVIEW_AddTask+0xc4>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	491b      	ldr	r1, [pc, #108]	; (8001584 <SYSVIEW_AddTask+0xcc>)
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	3308      	adds	r3, #8
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <SYSVIEW_AddTask+0xc4>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4916      	ldr	r1, [pc, #88]	; (8001584 <SYSVIEW_AddTask+0xcc>)
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	330c      	adds	r3, #12
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800153c:	4b0f      	ldr	r3, [pc, #60]	; (800157c <SYSVIEW_AddTask+0xc4>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4910      	ldr	r1, [pc, #64]	; (8001584 <SYSVIEW_AddTask+0xcc>)
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	3310      	adds	r3, #16
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <SYSVIEW_AddTask+0xc4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	3301      	adds	r3, #1
 8001558:	4a08      	ldr	r2, [pc, #32]	; (800157c <SYSVIEW_AddTask+0xc4>)
 800155a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f000 f80e 	bl	8001588 <SYSVIEW_SendTaskInfo>
 800156c:	e000      	b.n	8001570 <SYSVIEW_AddTask+0xb8>
    return;
 800156e:	bf00      	nop

}
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	08002c68 	.word	0x08002c68
 800157c:	200039f8 	.word	0x200039f8
 8001580:	08002c70 	.word	0x08002c70
 8001584:	20003958 	.word	0x20003958

08001588 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	2214      	movs	r2, #20
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f001 fb4a 	bl	8002c38 <memset>
  TaskInfo.TaskID     = TaskID;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80015b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 fd8d 	bl	80020dc <SEGGER_SYSVIEW_SendTaskInfo>
}
 80015c2:	bf00      	nop
 80015c4:	3728      	adds	r7, #40	; 0x28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 80015d2:	4b21      	ldr	r3, [pc, #132]	; (8001658 <_DoInit+0x8c>)
 80015d4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2203      	movs	r2, #3
 80015da:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2203      	movs	r2, #3
 80015e0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a1d      	ldr	r2, [pc, #116]	; (800165c <_DoInit+0x90>)
 80015e6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a1d      	ldr	r2, [pc, #116]	; (8001660 <_DoInit+0x94>)
 80015ec:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015f4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a14      	ldr	r2, [pc, #80]	; (800165c <_DoInit+0x90>)
 800160c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a14      	ldr	r2, [pc, #80]	; (8001664 <_DoInit+0x98>)
 8001612:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2210      	movs	r2, #16
 8001618:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3307      	adds	r3, #7
 8001630:	4a0d      	ldr	r2, [pc, #52]	; (8001668 <_DoInit+0x9c>)
 8001632:	6810      	ldr	r0, [r2, #0]
 8001634:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a0c      	ldr	r2, [pc, #48]	; (800166c <_DoInit+0xa0>)
 800163a:	6810      	ldr	r0, [r2, #0]
 800163c:	6018      	str	r0, [r3, #0]
 800163e:	8891      	ldrh	r1, [r2, #4]
 8001640:	7992      	ldrb	r2, [r2, #6]
 8001642:	8099      	strh	r1, [r3, #4]
 8001644:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2220      	movs	r2, #32
 800164a:	719a      	strb	r2, [r3, #6]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20003f20 	.word	0x20003f20
 800165c:	08002cc0 	.word	0x08002cc0
 8001660:	200039fc 	.word	0x200039fc
 8001664:	20003dfc 	.word	0x20003dfc
 8001668:	08002ccc 	.word	0x08002ccc
 800166c:	08002cd0 	.word	0x08002cd0

08001670 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 800167c:	4b3c      	ldr	r3, [pc, #240]	; (8001770 <SEGGER_RTT_ReadNoLock+0x100>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <SEGGER_RTT_ReadNoLock+0x18>
 8001684:	f7ff ffa2 	bl	80015cc <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	4613      	mov	r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4413      	add	r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	3360      	adds	r3, #96	; 0x60
 8001694:	4a36      	ldr	r2, [pc, #216]	; (8001770 <SEGGER_RTT_ReadNoLock+0x100>)
 8001696:	4413      	add	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80016ae:	6a3a      	ldr	r2, [r7, #32]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d92a      	bls.n	800170c <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	6a3b      	ldr	r3, [r7, #32]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4293      	cmp	r3, r2
 80016c6:	bf28      	it	cs
 80016c8:	4613      	movcs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	4413      	add	r3, r2
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4619      	mov	r1, r3
 80016d8:	69f8      	ldr	r0, [r7, #28]
 80016da:	f001 faa2 	bl	8002c22 <memcpy>
    NumBytesRead += NumBytesRem;
 80016de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	4413      	add	r3, r2
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80016e6:	69fa      	ldr	r2, [r7, #28]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4413      	add	r3, r2
 80016ec:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80016f6:	6a3a      	ldr	r2, [r7, #32]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4413      	add	r3, r2
 80016fc:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	429a      	cmp	r2, r3
 8001706:	d101      	bne.n	800170c <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8001708:	2300      	movs	r3, #0
 800170a:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	6a3b      	ldr	r3, [r7, #32]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4293      	cmp	r3, r2
 800171a:	bf28      	it	cs
 800171c:	4613      	movcs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d018      	beq.n	8001758 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	4413      	add	r3, r2
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4619      	mov	r1, r3
 8001732:	69f8      	ldr	r0, [r7, #28]
 8001734:	f001 fa75 	bl	8002c22 <memcpy>
    NumBytesRead += NumBytesRem;
 8001738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4413      	add	r3, r2
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8001740:	69fa      	ldr	r2, [r7, #28]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4413      	add	r3, r2
 8001746:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001750:	6a3a      	ldr	r2, [r7, #32]
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	4413      	add	r3, r2
 8001756:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	2b00      	cmp	r3, #0
 800175c:	d002      	beq.n	8001764 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	6a3a      	ldr	r2, [r7, #32]
 8001762:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001766:	4618      	mov	r0, r3
 8001768:	3728      	adds	r7, #40	; 0x28
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20003f20 	.word	0x20003f20

08001774 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	; 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	4613      	mov	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	4a3f      	ldr	r2, [pc, #252]	; (8001890 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8001792:	4413      	add	r3, r2
 8001794:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 800179c:	6a3b      	ldr	r3, [r7, #32]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 80017a2:	69fa      	ldr	r2, [r7, #28]
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d854      	bhi.n	8001854 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 80017aa:	6a3b      	ldr	r3, [r7, #32]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	3b01      	subs	r3, #1
 80017b4:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d30f      	bcc.n	80017de <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	4413      	add	r3, r2
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017ca:	4618      	mov	r0, r3
 80017cc:	f001 fa29 	bl	8002c22 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	441a      	add	r2, r3
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 80017da:	2301      	movs	r3, #1
 80017dc:	e054      	b.n	8001888 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	4413      	add	r3, r2
 80017e4:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d34b      	bcc.n	8001886 <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d90e      	bls.n	800181e <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	4413      	add	r3, r2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800180c:	4618      	mov	r0, r3
 800180e:	f001 fa08 	bl	8002c22 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	441a      	add	r2, r3
 8001818:	6a3b      	ldr	r3, [r7, #32]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	e018      	b.n	8001850 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	4413      	add	r3, r2
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800182a:	4618      	mov	r0, r3
 800182c:	f001 f9f9 	bl	8002c22 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	6858      	ldr	r0, [r3, #4]
 8001834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	18d1      	adds	r1, r2, r3
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	461a      	mov	r2, r3
 8001842:	f001 f9ee 	bl	8002c22 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad2      	subs	r2, r2, r3
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8001850:	2301      	movs	r3, #1
 8001852:	e019      	b.n	8001888 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8001854:	69fa      	ldr	r2, [r7, #28]
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	3b01      	subs	r3, #1
 800185c:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	429a      	cmp	r2, r3
 8001864:	d30f      	bcc.n	8001886 <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	4413      	add	r3, r2
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001872:	4618      	mov	r0, r3
 8001874:	f001 f9d5 	bl	8002c22 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	441a      	add	r2, r3
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3728      	adds	r7, #40	; 0x28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20003f20 	.word	0x20003f20

08001894 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80018a4:	e002      	b.n	80018ac <_EncodeStr+0x18>
    Len++;
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	3301      	adds	r3, #1
 80018aa:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	4413      	add	r3, r2
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f6      	bne.n	80018a6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d901      	bls.n	80018c4 <_EncodeStr+0x30>
    Len = Limit;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	2bfe      	cmp	r3, #254	; 0xfe
 80018c8:	d806      	bhi.n	80018d8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	60fa      	str	r2, [r7, #12]
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	e011      	b.n	80018fc <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	60fa      	str	r2, [r7, #12]
 80018de:	22ff      	movs	r2, #255	; 0xff
 80018e0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	1c5a      	adds	r2, r3, #1
 80018e6:	60fa      	str	r2, [r7, #12]
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	60fa      	str	r2, [r7, #12]
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	0a12      	lsrs	r2, r2, #8
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8001900:	e00a      	b.n	8001918 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	60fa      	str	r2, [r7, #12]
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	1c51      	adds	r1, r2, #1
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	7812      	ldrb	r2, [r2, #0]
 8001910:	701a      	strb	r2, [r3, #0]
    n++;
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	429a      	cmp	r2, r3
 800191e:	d3f0      	bcc.n	8001902 <_EncodeStr+0x6e>
  }
  return pPayload;
 8001920:	68fb      	ldr	r3, [r7, #12]
}
 8001922:	4618      	mov	r0, r3
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3304      	adds	r3, #4
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr

08001942 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001948:	1cfb      	adds	r3, r7, #3
 800194a:	2201      	movs	r2, #1
 800194c:	4619      	mov	r1, r3
 800194e:	2001      	movs	r0, #1
 8001950:	f7ff fe8e 	bl	8001670 <SEGGER_RTT_ReadNoLock>
 8001954:	4603      	mov	r3, r0
 8001956:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	dd47      	ble.n	80019ee <_HandleIncomingPacket+0xac>
    switch (Cmd) {
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	2b04      	cmp	r3, #4
 8001962:	d01a      	beq.n	800199a <_HandleIncomingPacket+0x58>
 8001964:	2b04      	cmp	r3, #4
 8001966:	dc06      	bgt.n	8001976 <_HandleIncomingPacket+0x34>
 8001968:	2b02      	cmp	r3, #2
 800196a:	d010      	beq.n	800198e <_HandleIncomingPacket+0x4c>
 800196c:	2b02      	cmp	r3, #2
 800196e:	dc11      	bgt.n	8001994 <_HandleIncomingPacket+0x52>
 8001970:	2b01      	cmp	r3, #1
 8001972:	d009      	beq.n	8001988 <_HandleIncomingPacket+0x46>
 8001974:	e02d      	b.n	80019d2 <_HandleIncomingPacket+0x90>
 8001976:	2b06      	cmp	r3, #6
 8001978:	d015      	beq.n	80019a6 <_HandleIncomingPacket+0x64>
 800197a:	2b06      	cmp	r3, #6
 800197c:	db10      	blt.n	80019a0 <_HandleIncomingPacket+0x5e>
 800197e:	2b07      	cmp	r3, #7
 8001980:	d014      	beq.n	80019ac <_HandleIncomingPacket+0x6a>
 8001982:	2b80      	cmp	r3, #128	; 0x80
 8001984:	d015      	beq.n	80019b2 <_HandleIncomingPacket+0x70>
 8001986:	e024      	b.n	80019d2 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8001988:	f000 fa2c 	bl	8001de4 <SEGGER_SYSVIEW_Start>
      break;
 800198c:	e02f      	b.n	80019ee <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800198e:	f000 fae5 	bl	8001f5c <SEGGER_SYSVIEW_Stop>
      break;
 8001992:	e02c      	b.n	80019ee <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8001994:	f000 fc9c 	bl	80022d0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8001998:	e029      	b.n	80019ee <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800199a:	f000 fc85 	bl	80022a8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800199e:	e026      	b.n	80019ee <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80019a0:	f000 fb02 	bl	8001fa8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80019a4:	e023      	b.n	80019ee <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80019a6:	f000 febf 	bl	8002728 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80019aa:	e020      	b.n	80019ee <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80019ac:	f000 fe9e 	bl	80026ec <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80019b0:	e01d      	b.n	80019ee <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80019b2:	1cfb      	adds	r3, r7, #3
 80019b4:	2201      	movs	r2, #1
 80019b6:	4619      	mov	r1, r3
 80019b8:	2001      	movs	r0, #1
 80019ba:	f7ff fe59 	bl	8001670 <SEGGER_RTT_ReadNoLock>
 80019be:	4603      	mov	r3, r0
 80019c0:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	dd0f      	ble.n	80019e8 <_HandleIncomingPacket+0xa6>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 fe0e 	bl	80025ec <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80019d0:	e00a      	b.n	80019e8 <_HandleIncomingPacket+0xa6>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	b25b      	sxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	da08      	bge.n	80019ec <_HandleIncomingPacket+0xaa>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80019da:	1cfb      	adds	r3, r7, #3
 80019dc:	2201      	movs	r2, #1
 80019de:	4619      	mov	r1, r3
 80019e0:	2001      	movs	r0, #1
 80019e2:	f7ff fe45 	bl	8001670 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80019e6:	e001      	b.n	80019ec <_HandleIncomingPacket+0xaa>
      break;
 80019e8:	bf00      	nop
 80019ea:	e000      	b.n	80019ee <_HandleIncomingPacket+0xac>
      break;
 80019ec:	bf00      	nop
    }
  }
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08c      	sub	sp, #48	; 0x30
 80019fc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80019fe:	2301      	movs	r3, #1
 8001a00:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	3301      	adds	r3, #1
 8001a06:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a0c:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <_TrySendOverflowPacket+0xd8>)
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a12:	e00b      	b.n	8001a2c <_TrySendOverflowPacket+0x34>
 8001a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	701a      	strb	r2, [r3, #0]
 8001a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a28:	09db      	lsrs	r3, r3, #7
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2e:	2b7f      	cmp	r3, #127	; 0x7f
 8001a30:	d8f0      	bhi.n	8001a14 <_TrySendOverflowPacket+0x1c>
 8001a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a34:	1c5a      	adds	r2, r3, #1
 8001a36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]
 8001a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a40:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001a42:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <_TrySendOverflowPacket+0xdc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001a48:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <_TrySendOverflowPacket+0xd8>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	623b      	str	r3, [r7, #32]
 8001a5a:	e00b      	b.n	8001a74 <_TrySendOverflowPacket+0x7c>
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	627a      	str	r2, [r7, #36]	; 0x24
 8001a62:	6a3a      	ldr	r2, [r7, #32]
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	09db      	lsrs	r3, r3, #7
 8001a72:	623b      	str	r3, [r7, #32]
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	2b7f      	cmp	r3, #127	; 0x7f
 8001a78:	d8f0      	bhi.n	8001a5c <_TrySendOverflowPacket+0x64>
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	1c5a      	adds	r2, r3, #1
 8001a7e:	627a      	str	r2, [r7, #36]	; 0x24
 8001a80:	6a3a      	ldr	r2, [r7, #32]
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	701a      	strb	r2, [r3, #0]
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	4619      	mov	r1, r3
 8001a96:	2001      	movs	r0, #1
 8001a98:	f7ff fe6c 	bl	8001774 <SEGGER_RTT_WriteSkipNoLock>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	613b      	str	r3, [r7, #16]
  if (Status) {
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d009      	beq.n	8001aba <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <_TrySendOverflowPacket+0xd8>)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <_TrySendOverflowPacket+0xd8>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <_TrySendOverflowPacket+0xd8>)
 8001ab6:	701a      	strb	r2, [r3, #0]
 8001ab8:	e004      	b.n	8001ac4 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8001aba:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <_TrySendOverflowPacket+0xd8>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	4a03      	ldr	r2, [pc, #12]	; (8001ad0 <_TrySendOverflowPacket+0xd8>)
 8001ac2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8001ac4:	693b      	ldr	r3, [r7, #16]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3730      	adds	r7, #48	; 0x30
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20003e0c 	.word	0x20003e0c
 8001ad4:	e0001004 	.word	0xe0001004

08001ad8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8001ae4:	4b62      	ldr	r3, [pc, #392]	; (8001c70 <_SendPacket+0x198>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d010      	beq.n	8001b0e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8001aec:	4b60      	ldr	r3, [pc, #384]	; (8001c70 <_SendPacket+0x198>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 809f 	beq.w	8001c34 <_SendPacket+0x15c>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8001af6:	4b5e      	ldr	r3, [pc, #376]	; (8001c70 <_SendPacket+0x198>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d108      	bne.n	8001b10 <_SendPacket+0x38>
    _TrySendOverflowPacket();
 8001afe:	f7ff ff7b 	bl	80019f8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8001b02:	4b5b      	ldr	r3, [pc, #364]	; (8001c70 <_SendPacket+0x198>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	f040 8096 	bne.w	8001c38 <_SendPacket+0x160>
 8001b0c:	e000      	b.n	8001b10 <_SendPacket+0x38>
    goto Send;
 8001b0e:	bf00      	nop
Send:
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b1f      	cmp	r3, #31
 8001b14:	d809      	bhi.n	8001b2a <_SendPacket+0x52>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8001b16:	4b56      	ldr	r3, [pc, #344]	; (8001c70 <_SendPacket+0x198>)
 8001b18:	69da      	ldr	r2, [r3, #28]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f040 8089 	bne.w	8001c3c <_SendPacket+0x164>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b17      	cmp	r3, #23
 8001b2e:	d807      	bhi.n	8001b40 <_SendPacket+0x68>
    *--pStartPacket = EventId;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	701a      	strb	r2, [r3, #0]
 8001b3e:	e03d      	b.n	8001bbc <_SendPacket+0xe4>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	2b7f      	cmp	r3, #127	; 0x7f
 8001b4c:	d912      	bls.n	8001b74 <_SendPacket+0x9c>
      *--pStartPacket = (NumBytes >> 7);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	09db      	lsrs	r3, r3, #7
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	3b01      	subs	r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	701a      	strb	r2, [r3, #0]
 8001b72:	e006      	b.n	8001b82 <_SendPacket+0xaa>
    } else {
      *--pStartPacket = NumBytes;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b7f      	cmp	r3, #127	; 0x7f
 8001b86:	d912      	bls.n	8001bae <_SendPacket+0xd6>
      *--pStartPacket = (EventId >> 7);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	09db      	lsrs	r3, r3, #7
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	701a      	strb	r2, [r3, #0]
 8001bac:	e006      	b.n	8001bbc <_SendPacket+0xe4>
    } else {
      *--pStartPacket = EventId;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <_SendPacket+0x19c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001bc2:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <_SendPacket+0x198>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	623b      	str	r3, [r7, #32]
 8001bd4:	e00b      	b.n	8001bee <_SendPacket+0x116>
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	627a      	str	r2, [r7, #36]	; 0x24
 8001bdc:	6a3a      	ldr	r2, [r7, #32]
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	701a      	strb	r2, [r3, #0]
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	09db      	lsrs	r3, r3, #7
 8001bec:	623b      	str	r3, [r7, #32]
 8001bee:	6a3b      	ldr	r3, [r7, #32]
 8001bf0:	2b7f      	cmp	r3, #127	; 0x7f
 8001bf2:	d8f0      	bhi.n	8001bd6 <_SendPacket+0xfe>
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	627a      	str	r2, [r7, #36]	; 0x24
 8001bfa:	6a3a      	ldr	r2, [r7, #32]
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	701a      	strb	r2, [r3, #0]
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8001c04:	68ba      	ldr	r2, [r7, #8]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	68f9      	ldr	r1, [r7, #12]
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f7ff fdb0 	bl	8001774 <SEGGER_RTT_WriteSkipNoLock>
 8001c14:	4603      	mov	r3, r0
 8001c16:	613b      	str	r3, [r7, #16]
  if (Status) {
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <_SendPacket+0x14e>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001c1e:	4a14      	ldr	r2, [pc, #80]	; (8001c70 <_SendPacket+0x198>)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	60d3      	str	r3, [r2, #12]
 8001c24:	e00b      	b.n	8001c3e <_SendPacket+0x166>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8001c26:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <_SendPacket+0x198>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <_SendPacket+0x198>)
 8001c30:	701a      	strb	r2, [r3, #0]
 8001c32:	e004      	b.n	8001c3e <_SendPacket+0x166>
    goto SendDone;
 8001c34:	bf00      	nop
 8001c36:	e002      	b.n	8001c3e <_SendPacket+0x166>
      goto SendDone;
 8001c38:	bf00      	nop
 8001c3a:	e000      	b.n	8001c3e <_SendPacket+0x166>
      goto SendDone;
 8001c3c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <_SendPacket+0x1a0>)
 8001c40:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <_SendPacket+0x1a0>)
 8001c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d00b      	beq.n	8001c66 <_SendPacket+0x18e>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <_SendPacket+0x198>)
 8001c50:	789b      	ldrb	r3, [r3, #2]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d107      	bne.n	8001c66 <_SendPacket+0x18e>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <_SendPacket+0x198>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8001c5c:	f7ff fe71 	bl	8001942 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <_SendPacket+0x198>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8001c66:	bf00      	nop
 8001c68:	3728      	adds	r7, #40	; 0x28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20003e0c 	.word	0x20003e0c
 8001c74:	e0001004 	.word	0xe0001004
 8001c78:	20003f20 	.word	0x20003f20

08001c7c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001c84:	f3ef 8311 	mrs	r3, BASEPRI
 8001c88:	f04f 0120 	mov.w	r1, #32
 8001c8c:	f381 8811 	msr	BASEPRI, r1
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	4808      	ldr	r0, [pc, #32]	; (8001cb4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8001c94:	f7ff fe4a 	bl	800192c <_PreparePacket>
 8001c98:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	68b8      	ldr	r0, [r7, #8]
 8001ca0:	f7ff ff1a 	bl	8001ad8 <_SendPacket>
  RECORD_END();
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f383 8811 	msr	BASEPRI, r3
}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20003e3c 	.word	0x20003e3c

08001cb8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8001cc2:	f3ef 8311 	mrs	r3, BASEPRI
 8001cc6:	f04f 0120 	mov.w	r1, #32
 8001cca:	f381 8811 	msr	BASEPRI, r1
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	4816      	ldr	r0, [pc, #88]	; (8001d2c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8001cd2:	f7ff fe2b 	bl	800192c <_PreparePacket>
 8001cd6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	61fb      	str	r3, [r7, #28]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	61bb      	str	r3, [r7, #24]
 8001ce4:	e00b      	b.n	8001cfe <SEGGER_SYSVIEW_RecordU32+0x46>
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	61fa      	str	r2, [r7, #28]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	701a      	strb	r2, [r3, #0]
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	09db      	lsrs	r3, r3, #7
 8001cfc:	61bb      	str	r3, [r7, #24]
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	2b7f      	cmp	r3, #127	; 0x7f
 8001d02:	d8f0      	bhi.n	8001ce6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	61fa      	str	r2, [r7, #28]
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	701a      	strb	r2, [r3, #0]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	68f9      	ldr	r1, [r7, #12]
 8001d18:	6938      	ldr	r0, [r7, #16]
 8001d1a:	f7ff fedd 	bl	8001ad8 <_SendPacket>
  RECORD_END();
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f383 8811 	msr	BASEPRI, r3
}
 8001d24:	bf00      	nop
 8001d26:	3720      	adds	r7, #32
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20003e3c 	.word	0x20003e3c

08001d30 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08c      	sub	sp, #48	; 0x30
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001d3c:	f3ef 8311 	mrs	r3, BASEPRI
 8001d40:	f04f 0120 	mov.w	r1, #32
 8001d44:	f381 8811 	msr	BASEPRI, r1
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	4825      	ldr	r0, [pc, #148]	; (8001de0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8001d4c:	f7ff fdee 	bl	800192c <_PreparePacket>
 8001d50:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d5e:	e00b      	b.n	8001d78 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8001d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	701a      	strb	r2, [r3, #0]
 8001d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d74:	09db      	lsrs	r3, r3, #7
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7a:	2b7f      	cmp	r3, #127	; 0x7f
 8001d7c:	d8f0      	bhi.n	8001d60 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8001d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d80:	1c5a      	adds	r2, r3, #1
 8001d82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]
 8001d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	623b      	str	r3, [r7, #32]
 8001d96:	e00b      	b.n	8001db0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	627a      	str	r2, [r7, #36]	; 0x24
 8001d9e:	6a3a      	ldr	r2, [r7, #32]
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	701a      	strb	r2, [r3, #0]
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	09db      	lsrs	r3, r3, #7
 8001dae:	623b      	str	r3, [r7, #32]
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	2b7f      	cmp	r3, #127	; 0x7f
 8001db4:	d8f0      	bhi.n	8001d98 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	627a      	str	r2, [r7, #36]	; 0x24
 8001dbc:	6a3a      	ldr	r2, [r7, #32]
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	701a      	strb	r2, [r3, #0]
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	6979      	ldr	r1, [r7, #20]
 8001dca:	69b8      	ldr	r0, [r7, #24]
 8001dcc:	f7ff fe84 	bl	8001ad8 <_SendPacket>
  RECORD_END();
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f383 8811 	msr	BASEPRI, r3
}
 8001dd6:	bf00      	nop
 8001dd8:	3730      	adds	r7, #48	; 0x30
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20003e3c 	.word	0x20003e3c

08001de4 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08c      	sub	sp, #48	; 0x30
 8001de8:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8001dea:	4b59      	ldr	r3, [pc, #356]	; (8001f50 <SEGGER_SYSVIEW_Start+0x16c>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f040 80aa 	bne.w	8001f48 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8001df4:	4b56      	ldr	r3, [pc, #344]	; (8001f50 <SEGGER_SYSVIEW_Start+0x16c>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8001dfa:	f3ef 8311 	mrs	r3, BASEPRI
 8001dfe:	f04f 0120 	mov.w	r1, #32
 8001e02:	f381 8811 	msr	BASEPRI, r1
 8001e06:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8001e08:	220a      	movs	r2, #10
 8001e0a:	4952      	ldr	r1, [pc, #328]	; (8001f54 <SEGGER_SYSVIEW_Start+0x170>)
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	f7ff fcb1 	bl	8001774 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8001e18:	200a      	movs	r0, #10
 8001e1a:	f7ff ff2f 	bl	8001c7c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001e1e:	f3ef 8311 	mrs	r3, BASEPRI
 8001e22:	f04f 0120 	mov.w	r1, #32
 8001e26:	f381 8811 	msr	BASEPRI, r1
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	484a      	ldr	r0, [pc, #296]	; (8001f58 <SEGGER_SYSVIEW_Start+0x174>)
 8001e2e:	f7ff fd7d 	bl	800192c <_PreparePacket>
 8001e32:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e3c:	4b44      	ldr	r3, [pc, #272]	; (8001f50 <SEGGER_SYSVIEW_Start+0x16c>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e42:	e00b      	b.n	8001e5c <SEGGER_SYSVIEW_Start+0x78>
 8001e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	701a      	strb	r2, [r3, #0]
 8001e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e58:	09db      	lsrs	r3, r3, #7
 8001e5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8001e60:	d8f0      	bhi.n	8001e44 <SEGGER_SYSVIEW_Start+0x60>
 8001e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	701a      	strb	r2, [r3, #0]
 8001e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e70:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
 8001e76:	4b36      	ldr	r3, [pc, #216]	; (8001f50 <SEGGER_SYSVIEW_Start+0x16c>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	623b      	str	r3, [r7, #32]
 8001e7c:	e00b      	b.n	8001e96 <SEGGER_SYSVIEW_Start+0xb2>
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	627a      	str	r2, [r7, #36]	; 0x24
 8001e84:	6a3a      	ldr	r2, [r7, #32]
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	701a      	strb	r2, [r3, #0]
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	09db      	lsrs	r3, r3, #7
 8001e94:	623b      	str	r3, [r7, #32]
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	2b7f      	cmp	r3, #127	; 0x7f
 8001e9a:	d8f0      	bhi.n	8001e7e <SEGGER_SYSVIEW_Start+0x9a>
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	627a      	str	r2, [r7, #36]	; 0x24
 8001ea2:	6a3a      	ldr	r2, [r7, #32]
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	701a      	strb	r2, [r3, #0]
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	61fb      	str	r3, [r7, #28]
 8001eb0:	4b27      	ldr	r3, [pc, #156]	; (8001f50 <SEGGER_SYSVIEW_Start+0x16c>)
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	61bb      	str	r3, [r7, #24]
 8001eb6:	e00b      	b.n	8001ed0 <SEGGER_SYSVIEW_Start+0xec>
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	61fa      	str	r2, [r7, #28]
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	701a      	strb	r2, [r3, #0]
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	09db      	lsrs	r3, r3, #7
 8001ece:	61bb      	str	r3, [r7, #24]
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	2b7f      	cmp	r3, #127	; 0x7f
 8001ed4:	d8f0      	bhi.n	8001eb8 <SEGGER_SYSVIEW_Start+0xd4>
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	61fa      	str	r2, [r7, #28]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	701a      	strb	r2, [r3, #0]
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	2302      	movs	r3, #2
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	e00b      	b.n	8001f08 <SEGGER_SYSVIEW_Start+0x124>
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	617a      	str	r2, [r7, #20]
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	701a      	strb	r2, [r3, #0]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	09db      	lsrs	r3, r3, #7
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	2b7f      	cmp	r3, #127	; 0x7f
 8001f0c:	d8f0      	bhi.n	8001ef0 <SEGGER_SYSVIEW_Start+0x10c>
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	1c5a      	adds	r2, r3, #1
 8001f12:	617a      	str	r2, [r7, #20]
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	701a      	strb	r2, [r3, #0]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001f1e:	2218      	movs	r2, #24
 8001f20:	6839      	ldr	r1, [r7, #0]
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff fdd8 	bl	8001ad8 <_SendPacket>
      RECORD_END();
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001f2e:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <SEGGER_SYSVIEW_Start+0x16c>)
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d002      	beq.n	8001f3c <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <SEGGER_SYSVIEW_Start+0x16c>)
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8001f3c:	f000 f9c8 	bl	80022d0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8001f40:	f000 f9b2 	bl	80022a8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8001f44:	f000 fbf0 	bl	8002728 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8001f48:	bf00      	nop
 8001f4a:	3730      	adds	r7, #48	; 0x30
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20003e0c 	.word	0x20003e0c
 8001f54:	08002cf0 	.word	0x08002cf0
 8001f58:	20003e3c 	.word	0x20003e3c

08001f5c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001f62:	f3ef 8311 	mrs	r3, BASEPRI
 8001f66:	f04f 0120 	mov.w	r1, #32
 8001f6a:	f381 8811 	msr	BASEPRI, r1
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	480b      	ldr	r0, [pc, #44]	; (8001fa0 <SEGGER_SYSVIEW_Stop+0x44>)
 8001f72:	f7ff fcdb 	bl	800192c <_PreparePacket>
 8001f76:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8001f78:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <SEGGER_SYSVIEW_Stop+0x48>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d007      	beq.n	8001f90 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001f80:	220b      	movs	r2, #11
 8001f82:	6839      	ldr	r1, [r7, #0]
 8001f84:	6838      	ldr	r0, [r7, #0]
 8001f86:	f7ff fda7 	bl	8001ad8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <SEGGER_SYSVIEW_Stop+0x48>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f383 8811 	msr	BASEPRI, r3
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20003e3c 	.word	0x20003e3c
 8001fa4:	20003e0c 	.word	0x20003e0c

08001fa8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08c      	sub	sp, #48	; 0x30
 8001fac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001fae:	f3ef 8311 	mrs	r3, BASEPRI
 8001fb2:	f04f 0120 	mov.w	r1, #32
 8001fb6:	f381 8811 	msr	BASEPRI, r1
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	4845      	ldr	r0, [pc, #276]	; (80020d4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8001fbe:	f7ff fcb5 	bl	800192c <_PreparePacket>
 8001fc2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fcc:	4b42      	ldr	r3, [pc, #264]	; (80020d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fd2:	e00b      	b.n	8001fec <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8001fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	701a      	strb	r2, [r3, #0]
 8001fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe8:	09db      	lsrs	r3, r3, #7
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fee:	2b7f      	cmp	r3, #127	; 0x7f
 8001ff0:	d8f0      	bhi.n	8001fd4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8001ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ff8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	701a      	strb	r2, [r3, #0]
 8001ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002000:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
 8002006:	4b34      	ldr	r3, [pc, #208]	; (80020d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	623b      	str	r3, [r7, #32]
 800200c:	e00b      	b.n	8002026 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	627a      	str	r2, [r7, #36]	; 0x24
 8002014:	6a3a      	ldr	r2, [r7, #32]
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	701a      	strb	r2, [r3, #0]
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	09db      	lsrs	r3, r3, #7
 8002024:	623b      	str	r3, [r7, #32]
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	2b7f      	cmp	r3, #127	; 0x7f
 800202a:	d8f0      	bhi.n	800200e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	627a      	str	r2, [r7, #36]	; 0x24
 8002032:	6a3a      	ldr	r2, [r7, #32]
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	701a      	strb	r2, [r3, #0]
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	61fb      	str	r3, [r7, #28]
 8002040:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	61bb      	str	r3, [r7, #24]
 8002046:	e00b      	b.n	8002060 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	61fa      	str	r2, [r7, #28]
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	701a      	strb	r2, [r3, #0]
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	09db      	lsrs	r3, r3, #7
 800205e:	61bb      	str	r3, [r7, #24]
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	2b7f      	cmp	r3, #127	; 0x7f
 8002064:	d8f0      	bhi.n	8002048 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	1c5a      	adds	r2, r3, #1
 800206a:	61fa      	str	r2, [r7, #28]
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	2302      	movs	r3, #2
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	e00b      	b.n	8002098 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	617a      	str	r2, [r7, #20]
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	701a      	strb	r2, [r3, #0]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	09db      	lsrs	r3, r3, #7
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	2b7f      	cmp	r3, #127	; 0x7f
 800209c:	d8f0      	bhi.n	8002080 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	617a      	str	r2, [r7, #20]
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	701a      	strb	r2, [r3, #0]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80020ae:	2218      	movs	r2, #24
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	68b8      	ldr	r0, [r7, #8]
 80020b4:	f7ff fd10 	bl	8001ad8 <_SendPacket>
  RECORD_END();
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80020c6:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	4798      	blx	r3
  }
}
 80020cc:	bf00      	nop
 80020ce:	3730      	adds	r7, #48	; 0x30
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20003e3c 	.word	0x20003e3c
 80020d8:	20003e0c 	.word	0x20003e0c

080020dc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b092      	sub	sp, #72	; 0x48
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80020e4:	f3ef 8311 	mrs	r3, BASEPRI
 80020e8:	f04f 0120 	mov.w	r1, #32
 80020ec:	f381 8811 	msr	BASEPRI, r1
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	486b      	ldr	r0, [pc, #428]	; (80022a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80020f4:	f7ff fc1a 	bl	800192c <_PreparePacket>
 80020f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	647b      	str	r3, [r7, #68]	; 0x44
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4b67      	ldr	r3, [pc, #412]	; (80022a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	089b      	lsrs	r3, r3, #2
 800210e:	643b      	str	r3, [r7, #64]	; 0x40
 8002110:	e00b      	b.n	800212a <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8002112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	647a      	str	r2, [r7, #68]	; 0x44
 8002118:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	701a      	strb	r2, [r3, #0]
 8002124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002126:	09db      	lsrs	r3, r3, #7
 8002128:	643b      	str	r3, [r7, #64]	; 0x40
 800212a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800212c:	2b7f      	cmp	r3, #127	; 0x7f
 800212e:	d8f0      	bhi.n	8002112 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8002130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	647a      	str	r2, [r7, #68]	; 0x44
 8002136:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	701a      	strb	r2, [r3, #0]
 800213c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800213e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	63bb      	str	r3, [r7, #56]	; 0x38
 800214a:	e00b      	b.n	8002164 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 800214c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002152:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	701a      	strb	r2, [r3, #0]
 800215e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002160:	09db      	lsrs	r3, r3, #7
 8002162:	63bb      	str	r3, [r7, #56]	; 0x38
 8002164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002166:	2b7f      	cmp	r3, #127	; 0x7f
 8002168:	d8f0      	bhi.n	800214c <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 800216a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	701a      	strb	r2, [r3, #0]
 8002176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002178:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2220      	movs	r2, #32
 8002180:	4619      	mov	r1, r3
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f7ff fb86 	bl	8001894 <_EncodeStr>
 8002188:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800218a:	2209      	movs	r2, #9
 800218c:	68f9      	ldr	r1, [r7, #12]
 800218e:	6938      	ldr	r0, [r7, #16]
 8002190:	f7ff fca2 	bl	8001ad8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	637b      	str	r3, [r7, #52]	; 0x34
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b40      	ldr	r3, [pc, #256]	; (80022a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	633b      	str	r3, [r7, #48]	; 0x30
 80021aa:	e00b      	b.n	80021c4 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 80021ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	637a      	str	r2, [r7, #52]	; 0x34
 80021b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	701a      	strb	r2, [r3, #0]
 80021be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c0:	09db      	lsrs	r3, r3, #7
 80021c2:	633b      	str	r3, [r7, #48]	; 0x30
 80021c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c6:	2b7f      	cmp	r3, #127	; 0x7f
 80021c8:	d8f0      	bhi.n	80021ac <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 80021ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	637a      	str	r2, [r7, #52]	; 0x34
 80021d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	701a      	strb	r2, [r3, #0]
 80021d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80021e4:	e00b      	b.n	80021fe <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 80021e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	701a      	strb	r2, [r3, #0]
 80021f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fa:	09db      	lsrs	r3, r3, #7
 80021fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80021fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002200:	2b7f      	cmp	r3, #127	; 0x7f
 8002202:	d8f0      	bhi.n	80021e6 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8002204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	62fa      	str	r2, [r7, #44]	; 0x2c
 800220a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	701a      	strb	r2, [r3, #0]
 8002210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002212:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	623b      	str	r3, [r7, #32]
 800221e:	e00b      	b.n	8002238 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	627a      	str	r2, [r7, #36]	; 0x24
 8002226:	6a3a      	ldr	r2, [r7, #32]
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	701a      	strb	r2, [r3, #0]
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	09db      	lsrs	r3, r3, #7
 8002236:	623b      	str	r3, [r7, #32]
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	2b7f      	cmp	r3, #127	; 0x7f
 800223c:	d8f0      	bhi.n	8002220 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	627a      	str	r2, [r7, #36]	; 0x24
 8002244:	6a3a      	ldr	r2, [r7, #32]
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	701a      	strb	r2, [r3, #0]
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	2300      	movs	r3, #0
 8002254:	61bb      	str	r3, [r7, #24]
 8002256:	e00b      	b.n	8002270 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	61fa      	str	r2, [r7, #28]
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	701a      	strb	r2, [r3, #0]
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	09db      	lsrs	r3, r3, #7
 800226e:	61bb      	str	r3, [r7, #24]
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	2b7f      	cmp	r3, #127	; 0x7f
 8002274:	d8f0      	bhi.n	8002258 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	61fa      	str	r2, [r7, #28]
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	701a      	strb	r2, [r3, #0]
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8002286:	2215      	movs	r2, #21
 8002288:	68f9      	ldr	r1, [r7, #12]
 800228a:	6938      	ldr	r0, [r7, #16]
 800228c:	f7ff fc24 	bl	8001ad8 <_SendPacket>
  RECORD_END();
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f383 8811 	msr	BASEPRI, r3
}
 8002296:	bf00      	nop
 8002298:	3748      	adds	r7, #72	; 0x48
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20003e3c 	.word	0x20003e3c
 80022a4:	20003e0c 	.word	0x20003e0c

080022a8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80022ac:	4b07      	ldr	r3, [pc, #28]	; (80022cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d008      	beq.n	80022c6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80022be:	4b03      	ldr	r3, [pc, #12]	; (80022cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4798      	blx	r3
  }
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20003e0c 	.word	0x20003e0c

080022d0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80022d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d015      	beq.n	800230a <SEGGER_SYSVIEW_RecordSystime+0x3a>
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d010      	beq.n	800230a <SEGGER_SYSVIEW_RecordSystime+0x3a>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80022e8:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4798      	blx	r3
 80022f0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80022f4:	6839      	ldr	r1, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80022f6:	e897 0018 	ldmia.w	r7, {r3, r4}
 80022fa:	0025      	movs	r5, r4
 80022fc:	2600      	movs	r6, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80022fe:	462b      	mov	r3, r5
 8002300:	461a      	mov	r2, r3
 8002302:	200d      	movs	r0, #13
 8002304:	f7ff fd14 	bl	8001d30 <SEGGER_SYSVIEW_RecordU32x2>
 8002308:	e005      	b.n	8002316 <SEGGER_SYSVIEW_RecordSystime+0x46>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <SEGGER_SYSVIEW_RecordSystime+0x54>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4619      	mov	r1, r3
 8002310:	200c      	movs	r0, #12
 8002312:	f7ff fcd1 	bl	8001cb8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800231e:	bf00      	nop
 8002320:	20003e0c 	.word	0x20003e0c
 8002324:	e0001004 	.word	0xe0001004

08002328 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800232e:	f3ef 8311 	mrs	r3, BASEPRI
 8002332:	f04f 0120 	mov.w	r1, #32
 8002336:	f381 8811 	msr	BASEPRI, r1
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	4819      	ldr	r0, [pc, #100]	; (80023a4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800233e:	f7ff faf5 	bl	800192c <_PreparePacket>
 8002342:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8002348:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002350:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	e00b      	b.n	8002374 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	617a      	str	r2, [r7, #20]
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	09db      	lsrs	r3, r3, #7
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	2b7f      	cmp	r3, #127	; 0x7f
 8002378:	d8f0      	bhi.n	800235c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	617a      	str	r2, [r7, #20]
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	701a      	strb	r2, [r3, #0]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800238a:	2202      	movs	r2, #2
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	68b8      	ldr	r0, [r7, #8]
 8002390:	f7ff fba2 	bl	8001ad8 <_SendPacket>
  RECORD_END();
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f383 8811 	msr	BASEPRI, r3
}
 800239a:	bf00      	nop
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20003e3c 	.word	0x20003e3c
 80023a8:	e000ed04 	.word	0xe000ed04

080023ac <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80023b2:	f3ef 8311 	mrs	r3, BASEPRI
 80023b6:	f04f 0120 	mov.w	r1, #32
 80023ba:	f381 8811 	msr	BASEPRI, r1
 80023be:	607b      	str	r3, [r7, #4]
 80023c0:	4807      	ldr	r0, [pc, #28]	; (80023e0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80023c2:	f7ff fab3 	bl	800192c <_PreparePacket>
 80023c6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80023c8:	2203      	movs	r2, #3
 80023ca:	6839      	ldr	r1, [r7, #0]
 80023cc:	6838      	ldr	r0, [r7, #0]
 80023ce:	f7ff fb83 	bl	8001ad8 <_SendPacket>
  RECORD_END();
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f383 8811 	msr	BASEPRI, r3
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20003e3c 	.word	0x20003e3c

080023e4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80023ea:	f3ef 8311 	mrs	r3, BASEPRI
 80023ee:	f04f 0120 	mov.w	r1, #32
 80023f2:	f381 8811 	msr	BASEPRI, r1
 80023f6:	607b      	str	r3, [r7, #4]
 80023f8:	4807      	ldr	r0, [pc, #28]	; (8002418 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80023fa:	f7ff fa97 	bl	800192c <_PreparePacket>
 80023fe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8002400:	2212      	movs	r2, #18
 8002402:	6839      	ldr	r1, [r7, #0]
 8002404:	6838      	ldr	r0, [r7, #0]
 8002406:	f7ff fb67 	bl	8001ad8 <_SendPacket>
  RECORD_END();
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f383 8811 	msr	BASEPRI, r3
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20003e3c 	.word	0x20003e3c

0800241c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002422:	f3ef 8311 	mrs	r3, BASEPRI
 8002426:	f04f 0120 	mov.w	r1, #32
 800242a:	f381 8811 	msr	BASEPRI, r1
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	4807      	ldr	r0, [pc, #28]	; (8002450 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8002432:	f7ff fa7b 	bl	800192c <_PreparePacket>
 8002436:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8002438:	2211      	movs	r2, #17
 800243a:	6839      	ldr	r1, [r7, #0]
 800243c:	6838      	ldr	r0, [r7, #0]
 800243e:	f7ff fb4b 	bl	8001ad8 <_SendPacket>
  RECORD_END();
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f383 8811 	msr	BASEPRI, r3
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20003e3c 	.word	0x20003e3c

08002454 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800245c:	f3ef 8311 	mrs	r3, BASEPRI
 8002460:	f04f 0120 	mov.w	r1, #32
 8002464:	f381 8811 	msr	BASEPRI, r1
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	481a      	ldr	r0, [pc, #104]	; (80024d4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800246c:	f7ff fa5e 	bl	800192c <_PreparePacket>
 8002470:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002476:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	089b      	lsrs	r3, r3, #2
 8002480:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	61fb      	str	r3, [r7, #28]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	61bb      	str	r3, [r7, #24]
 800248a:	e00b      	b.n	80024a4 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	61fa      	str	r2, [r7, #28]
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	09db      	lsrs	r3, r3, #7
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	2b7f      	cmp	r3, #127	; 0x7f
 80024a8:	d8f0      	bhi.n	800248c <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	61fa      	str	r2, [r7, #28]
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	701a      	strb	r2, [r3, #0]
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80024ba:	2208      	movs	r2, #8
 80024bc:	68f9      	ldr	r1, [r7, #12]
 80024be:	6938      	ldr	r0, [r7, #16]
 80024c0:	f7ff fb0a 	bl	8001ad8 <_SendPacket>
  RECORD_END();
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f383 8811 	msr	BASEPRI, r3
}
 80024ca:	bf00      	nop
 80024cc:	3720      	adds	r7, #32
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20003e3c 	.word	0x20003e3c
 80024d8:	20003e0c 	.word	0x20003e0c

080024dc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80024e4:	f3ef 8311 	mrs	r3, BASEPRI
 80024e8:	f04f 0120 	mov.w	r1, #32
 80024ec:	f381 8811 	msr	BASEPRI, r1
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	481a      	ldr	r0, [pc, #104]	; (800255c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80024f4:	f7ff fa1a 	bl	800192c <_PreparePacket>
 80024f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	089b      	lsrs	r3, r3, #2
 8002508:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	61fb      	str	r3, [r7, #28]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	61bb      	str	r3, [r7, #24]
 8002512:	e00b      	b.n	800252c <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	61fa      	str	r2, [r7, #28]
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	701a      	strb	r2, [r3, #0]
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	09db      	lsrs	r3, r3, #7
 800252a:	61bb      	str	r3, [r7, #24]
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	2b7f      	cmp	r3, #127	; 0x7f
 8002530:	d8f0      	bhi.n	8002514 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	61fa      	str	r2, [r7, #28]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	701a      	strb	r2, [r3, #0]
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8002542:	2204      	movs	r2, #4
 8002544:	68f9      	ldr	r1, [r7, #12]
 8002546:	6938      	ldr	r0, [r7, #16]
 8002548:	f7ff fac6 	bl	8001ad8 <_SendPacket>
  RECORD_END();
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f383 8811 	msr	BASEPRI, r3
}
 8002552:	bf00      	nop
 8002554:	3720      	adds	r7, #32
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20003e3c 	.word	0x20003e3c
 8002560:	20003e0c 	.word	0x20003e0c

08002564 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800256c:	f3ef 8311 	mrs	r3, BASEPRI
 8002570:	f04f 0120 	mov.w	r1, #32
 8002574:	f381 8811 	msr	BASEPRI, r1
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	481a      	ldr	r0, [pc, #104]	; (80025e4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800257c:	f7ff f9d6 	bl	800192c <_PreparePacket>
 8002580:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002586:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	089b      	lsrs	r3, r3, #2
 8002590:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	e00b      	b.n	80025b4 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	61fa      	str	r2, [r7, #28]
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	701a      	strb	r2, [r3, #0]
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	09db      	lsrs	r3, r3, #7
 80025b2:	61bb      	str	r3, [r7, #24]
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	2b7f      	cmp	r3, #127	; 0x7f
 80025b8:	d8f0      	bhi.n	800259c <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	61fa      	str	r2, [r7, #28]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80025ca:	2206      	movs	r2, #6
 80025cc:	68f9      	ldr	r1, [r7, #12]
 80025ce:	6938      	ldr	r0, [r7, #16]
 80025d0:	f7ff fa82 	bl	8001ad8 <_SendPacket>
  RECORD_END();
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f383 8811 	msr	BASEPRI, r3
}
 80025da:	bf00      	nop
 80025dc:	3720      	adds	r7, #32
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20003e3c 	.word	0x20003e3c
 80025e8:	20003e0c 	.word	0x20003e0c

080025ec <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08c      	sub	sp, #48	; 0x30
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80025f6:	4b3b      	ldr	r3, [pc, #236]	; (80026e4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d06d      	beq.n	80026da <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80025fe:	4b39      	ldr	r3, [pc, #228]	; (80026e4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8002604:	2300      	movs	r3, #0
 8002606:	62bb      	str	r3, [r7, #40]	; 0x28
 8002608:	e008      	b.n	800261c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800260a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8002610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002612:	2b00      	cmp	r3, #0
 8002614:	d007      	beq.n	8002626 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8002616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002618:	3301      	adds	r3, #1
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28
 800261c:	79fa      	ldrb	r2, [r7, #7]
 800261e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002620:	429a      	cmp	r2, r3
 8002622:	d8f2      	bhi.n	800260a <SEGGER_SYSVIEW_SendModule+0x1e>
 8002624:	e000      	b.n	8002628 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8002626:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8002628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262a:	2b00      	cmp	r3, #0
 800262c:	d055      	beq.n	80026da <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800262e:	f3ef 8311 	mrs	r3, BASEPRI
 8002632:	f04f 0120 	mov.w	r1, #32
 8002636:	f381 8811 	msr	BASEPRI, r1
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	482a      	ldr	r0, [pc, #168]	; (80026e8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800263e:	f7ff f975 	bl	800192c <_PreparePacket>
 8002642:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	623b      	str	r3, [r7, #32]
 8002650:	e00b      	b.n	800266a <SEGGER_SYSVIEW_SendModule+0x7e>
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	627a      	str	r2, [r7, #36]	; 0x24
 8002658:	6a3a      	ldr	r2, [r7, #32]
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	701a      	strb	r2, [r3, #0]
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	09db      	lsrs	r3, r3, #7
 8002668:	623b      	str	r3, [r7, #32]
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	2b7f      	cmp	r3, #127	; 0x7f
 800266e:	d8f0      	bhi.n	8002652 <SEGGER_SYSVIEW_SendModule+0x66>
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	627a      	str	r2, [r7, #36]	; 0x24
 8002676:	6a3a      	ldr	r2, [r7, #32]
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	701a      	strb	r2, [r3, #0]
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	61fb      	str	r3, [r7, #28]
 8002684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	e00b      	b.n	80026a4 <SEGGER_SYSVIEW_SendModule+0xb8>
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	61fa      	str	r2, [r7, #28]
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	701a      	strb	r2, [r3, #0]
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	09db      	lsrs	r3, r3, #7
 80026a2:	61bb      	str	r3, [r7, #24]
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	2b7f      	cmp	r3, #127	; 0x7f
 80026a8:	d8f0      	bhi.n	800268c <SEGGER_SYSVIEW_SendModule+0xa0>
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	61fa      	str	r2, [r7, #28]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80026ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2280      	movs	r2, #128	; 0x80
 80026c0:	4619      	mov	r1, r3
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f7ff f8e6 	bl	8001894 <_EncodeStr>
 80026c8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80026ca:	2216      	movs	r2, #22
 80026cc:	68f9      	ldr	r1, [r7, #12]
 80026ce:	6938      	ldr	r0, [r7, #16]
 80026d0:	f7ff fa02 	bl	8001ad8 <_SendPacket>
      RECORD_END();
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80026da:	bf00      	nop
 80026dc:	3730      	adds	r7, #48	; 0x30
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20003e34 	.word	0x20003e34
 80026e8:	20003e3c 	.word	0x20003e3c

080026ec <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80026f2:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00f      	beq.n	800271a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f2      	bne.n	8002700 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20003e34 	.word	0x20003e34

08002728 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800272e:	f3ef 8311 	mrs	r3, BASEPRI
 8002732:	f04f 0120 	mov.w	r1, #32
 8002736:	f381 8811 	msr	BASEPRI, r1
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	4817      	ldr	r0, [pc, #92]	; (800279c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800273e:	f7ff f8f5 	bl	800192c <_PreparePacket>
 8002742:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	e00b      	b.n	800276c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	617a      	str	r2, [r7, #20]
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	09db      	lsrs	r3, r3, #7
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	2b7f      	cmp	r3, #127	; 0x7f
 8002770:	d8f0      	bhi.n	8002754 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	617a      	str	r2, [r7, #20]
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	701a      	strb	r2, [r3, #0]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8002782:	221b      	movs	r2, #27
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	68b8      	ldr	r0, [r7, #8]
 8002788:	f7ff f9a6 	bl	8001ad8 <_SendPacket>
  RECORD_END();
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f383 8811 	msr	BASEPRI, r3
}
 8002792:	bf00      	nop
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20003e3c 	.word	0x20003e3c
 80027a0:	20003e38 	.word	0x20003e38

080027a4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	; 0x28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80027ac:	f3ef 8311 	mrs	r3, BASEPRI
 80027b0:	f04f 0120 	mov.w	r1, #32
 80027b4:	f381 8811 	msr	BASEPRI, r1
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	4827      	ldr	r0, [pc, #156]	; (8002858 <SEGGER_SYSVIEW_Warn+0xb4>)
 80027bc:	f7ff f8b6 	bl	800192c <_PreparePacket>
 80027c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80027c2:	2280      	movs	r2, #128	; 0x80
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	6938      	ldr	r0, [r7, #16]
 80027c8:	f7ff f864 	bl	8001894 <_EncodeStr>
 80027cc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
 80027d2:	2301      	movs	r3, #1
 80027d4:	623b      	str	r3, [r7, #32]
 80027d6:	e00b      	b.n	80027f0 <SEGGER_SYSVIEW_Warn+0x4c>
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	627a      	str	r2, [r7, #36]	; 0x24
 80027de:	6a3a      	ldr	r2, [r7, #32]
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	701a      	strb	r2, [r3, #0]
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	09db      	lsrs	r3, r3, #7
 80027ee:	623b      	str	r3, [r7, #32]
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	2b7f      	cmp	r3, #127	; 0x7f
 80027f4:	d8f0      	bhi.n	80027d8 <SEGGER_SYSVIEW_Warn+0x34>
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	627a      	str	r2, [r7, #36]	; 0x24
 80027fc:	6a3a      	ldr	r2, [r7, #32]
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	701a      	strb	r2, [r3, #0]
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	2300      	movs	r3, #0
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	e00b      	b.n	8002828 <SEGGER_SYSVIEW_Warn+0x84>
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	61fa      	str	r2, [r7, #28]
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	09db      	lsrs	r3, r3, #7
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2b7f      	cmp	r3, #127	; 0x7f
 800282c:	d8f0      	bhi.n	8002810 <SEGGER_SYSVIEW_Warn+0x6c>
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	61fa      	str	r2, [r7, #28]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800283e:	221a      	movs	r2, #26
 8002840:	68f9      	ldr	r1, [r7, #12]
 8002842:	6938      	ldr	r0, [r7, #16]
 8002844:	f7ff f948 	bl	8001ad8 <_SendPacket>
  RECORD_END();
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f383 8811 	msr	BASEPRI, r3
}
 800284e:	bf00      	nop
 8002850:	3728      	adds	r7, #40	; 0x28
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20003e3c 	.word	0x20003e3c

0800285c <main>:
uint8_t button_status_flag = NOT_PRESSED ;


/*****************************Main Function****************************/
int main(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af02      	add	r7, sp, #8
	// Initializations
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8002862:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002866:	f7fd fc73 	bl	8000150 <NVIC_PriorityGroupConfig>
	prvSetupHardware();
 800286a:	f000 f851 	bl	8002910 <prvSetupHardware>

	// Create LED Task
	xTaskCreate(LED_Task_Handler,"LED-Task",configMINIMAL_STACK_SIZE,NULL,1,NULL);
 800286e:	2300      	movs	r3, #0
 8002870:	9301      	str	r3, [sp, #4]
 8002872:	2301      	movs	r3, #1
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	2300      	movs	r3, #0
 8002878:	2280      	movs	r2, #128	; 0x80
 800287a:	4908      	ldr	r1, [pc, #32]	; (800289c <main+0x40>)
 800287c:	4808      	ldr	r0, [pc, #32]	; (80028a0 <main+0x44>)
 800287e:	f7fe fa39 	bl	8000cf4 <xTaskCreate>

	// Create Button Task
	xTaskCreate(Button_Task_Handler,"Button-Task",configMINIMAL_STACK_SIZE,NULL,1,NULL);
 8002882:	2300      	movs	r3, #0
 8002884:	9301      	str	r3, [sp, #4]
 8002886:	2301      	movs	r3, #1
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	2300      	movs	r3, #0
 800288c:	2280      	movs	r2, #128	; 0x80
 800288e:	4905      	ldr	r1, [pc, #20]	; (80028a4 <main+0x48>)
 8002890:	4805      	ldr	r0, [pc, #20]	; (80028a8 <main+0x4c>)
 8002892:	f7fe fa2f 	bl	8000cf4 <xTaskCreate>

	//Start Scheduler
	vTaskStartScheduler();
 8002896:	f7fe fb75 	bl	8000f84 <vTaskStartScheduler>


	while(1);
 800289a:	e7fe      	b.n	800289a <main+0x3e>
 800289c:	08002cd8 	.word	0x08002cd8
 80028a0:	080028ad 	.word	0x080028ad
 80028a4:	08002ce4 	.word	0x08002ce4
 80028a8:	080028e1 	.word	0x080028e1

080028ac <LED_Task_Handler>:
}


/***************************** Task Handler Definition****************************/
void LED_Task_Handler (void *param)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(button_status_flag == PRESSED)
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <LED_Task_Handler+0x2c>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d106      	bne.n	80028ca <LED_Task_Handler+0x1e>
		{
			//Turn ON LED
			GPIO_WriteBit(GPIOC,GPIO_Pin_13,Bit_SET);
 80028bc:	2201      	movs	r2, #1
 80028be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028c2:	4806      	ldr	r0, [pc, #24]	; (80028dc <LED_Task_Handler+0x30>)
 80028c4:	f7fd fd2b 	bl	800031e <GPIO_WriteBit>
 80028c8:	e7f4      	b.n	80028b4 <LED_Task_Handler+0x8>
		}
		else
		{
			//Turn OFF LED
			GPIO_WriteBit(GPIOC,GPIO_Pin_13,Bit_RESET);
 80028ca:	2200      	movs	r2, #0
 80028cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028d0:	4802      	ldr	r0, [pc, #8]	; (80028dc <LED_Task_Handler+0x30>)
 80028d2:	f7fd fd24 	bl	800031e <GPIO_WriteBit>
		if(button_status_flag == PRESSED)
 80028d6:	e7ed      	b.n	80028b4 <LED_Task_Handler+0x8>
 80028d8:	20003f1f 	.word	0x20003f1f
 80028dc:	40011000 	.word	0x40011000

080028e0 <Button_Task_Handler>:
		}
	}
}

void Button_Task_Handler (void *param)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(! GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_5) )
 80028e8:	2120      	movs	r1, #32
 80028ea:	4807      	ldr	r0, [pc, #28]	; (8002908 <Button_Task_Handler+0x28>)
 80028ec:	f7fd fcfe 	bl	80002ec <GPIO_ReadInputDataBit>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d103      	bne.n	80028fe <Button_Task_Handler+0x1e>
		{
			// Button is Pressed
			button_status_flag= PRESSED;
 80028f6:	4b05      	ldr	r3, [pc, #20]	; (800290c <Button_Task_Handler+0x2c>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
 80028fc:	e7f4      	b.n	80028e8 <Button_Task_Handler+0x8>
		}
		else
		{
			// Button in not pressed
			button_status_flag= NOT_PRESSED;
 80028fe:	4b03      	ldr	r3, [pc, #12]	; (800290c <Button_Task_Handler+0x2c>)
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
		if(! GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_5) )
 8002904:	e7f0      	b.n	80028e8 <Button_Task_Handler+0x8>
 8002906:	bf00      	nop
 8002908:	40010800 	.word	0x40010800
 800290c:	20003f1f 	.word	0x20003f1f

08002910 <prvSetupHardware>:
	}
}
/*****************************FUNCTION Definition****************************/

static void prvSetupHardware(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
	//Setup GPIO
	prvGPIOSetup();
 8002914:	f000 f844 	bl	80029a0 <prvGPIOSetup>

	//setup UART_1
	prvUARTSetup();
 8002918:	f000 f802 	bl	8002920 <prvUARTSetup>
}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}

08002920 <prvUARTSetup>:
	}

}

void prvUARTSetup()
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
    USART_InitTypeDef usart1_init_struct;
    /* Bit configuration structure for GPIOA PIN9 and PIN10 */
    GPIO_InitTypeDef gpioa_init_struct;

    /* Enalbe clock for USART1, AFIO and GPIOA */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_AFIO |
 8002926:	2101      	movs	r1, #1
 8002928:	f244 0005 	movw	r0, #16389	; 0x4005
 800292c:	f7fd fdbe 	bl	80004ac <RCC_APB2PeriphClockCmd>
                           RCC_APB2Periph_GPIOA, ENABLE);

    /* GPIOA PIN9 alternative function Tx */
    gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
 8002930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002934:	80bb      	strh	r3, [r7, #4]
    gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 8002936:	2303      	movs	r3, #3
 8002938:	71bb      	strb	r3, [r7, #6]
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
 800293a:	2318      	movs	r3, #24
 800293c:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &gpioa_init_struct);
 800293e:	1d3b      	adds	r3, r7, #4
 8002940:	4619      	mov	r1, r3
 8002942:	4815      	ldr	r0, [pc, #84]	; (8002998 <prvUARTSetup+0x78>)
 8002944:	f7fd fc16 	bl	8000174 <GPIO_Init>
    /* GPIOA PIN9 alternative function Rx */
    gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
 8002948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800294c:	80bb      	strh	r3, [r7, #4]
    gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 800294e:	2303      	movs	r3, #3
 8002950:	71bb      	strb	r3, [r7, #6]
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8002952:	2304      	movs	r3, #4
 8002954:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &gpioa_init_struct);
 8002956:	1d3b      	adds	r3, r7, #4
 8002958:	4619      	mov	r1, r3
 800295a:	480f      	ldr	r0, [pc, #60]	; (8002998 <prvUARTSetup+0x78>)
 800295c:	f7fd fc0a 	bl	8000174 <GPIO_Init>

    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);
 8002960:	2101      	movs	r1, #1
 8002962:	480e      	ldr	r0, [pc, #56]	; (800299c <prvUARTSetup+0x7c>)
 8002964:	f7fd fe7a 	bl	800065c <USART_Cmd>
    /* Baud rate 9600, 8-bit data, One stop bit
     * No parity, Do both Rx and Tx, No HW flow control
     */
    usart1_init_struct.USART_BaudRate = 9600;
 8002968:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800296c:	60bb      	str	r3, [r7, #8]
    usart1_init_struct.USART_WordLength = USART_WordLength_8b;
 800296e:	2300      	movs	r3, #0
 8002970:	81bb      	strh	r3, [r7, #12]
    usart1_init_struct.USART_StopBits = USART_StopBits_1;
 8002972:	2300      	movs	r3, #0
 8002974:	81fb      	strh	r3, [r7, #14]
    usart1_init_struct.USART_Parity = USART_Parity_No ;
 8002976:	2300      	movs	r3, #0
 8002978:	823b      	strh	r3, [r7, #16]
    usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800297a:	230c      	movs	r3, #12
 800297c:	827b      	strh	r3, [r7, #18]
    usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800297e:	2300      	movs	r3, #0
 8002980:	82bb      	strh	r3, [r7, #20]
    USART_Init(USART1,&usart1_init_struct);
 8002982:	f107 0308 	add.w	r3, r7, #8
 8002986:	4619      	mov	r1, r3
 8002988:	4804      	ldr	r0, [pc, #16]	; (800299c <prvUARTSetup+0x7c>)
 800298a:	f7fd fdad 	bl	80004e8 <USART_Init>
}
 800298e:	bf00      	nop
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40010800 	.word	0x40010800
 800299c:	40013800 	.word	0x40013800

080029a0 <prvGPIOSetup>:

void prvGPIOSetup(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
	//Enable The clok for GPIOA , GPIOC
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
 80029a6:	2101      	movs	r1, #1
 80029a8:	2004      	movs	r0, #4
 80029aa:	f7fd fd7f 	bl	80004ac <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC,ENABLE);
 80029ae:	2101      	movs	r1, #1
 80029b0:	2010      	movs	r0, #16
 80029b2:	f7fd fd7b 	bl	80004ac <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef led_init , Button_init ;

	//initialize the LED PC13
	led_init.GPIO_Mode = GPIO_Mode_Out_PP ;
 80029b6:	2310      	movs	r3, #16
 80029b8:	71fb      	strb	r3, [r7, #7]
	led_init.GPIO_Pin = GPIO_Pin_13 ;
 80029ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029be:	80bb      	strh	r3, [r7, #4]
	led_init.GPIO_Speed = GPIO_Speed_2MHz ;
 80029c0:	2302      	movs	r3, #2
 80029c2:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC,&led_init);
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	4619      	mov	r1, r3
 80029c8:	4808      	ldr	r0, [pc, #32]	; (80029ec <prvGPIOSetup+0x4c>)
 80029ca:	f7fd fbd3 	bl	8000174 <GPIO_Init>

	//initialize the Button PA5
	Button_init.GPIO_Mode = GPIO_Mode_IPD ; // input pull down
 80029ce:	2328      	movs	r3, #40	; 0x28
 80029d0:	70fb      	strb	r3, [r7, #3]
	Button_init.GPIO_Pin = GPIO_Pin_5 ;
 80029d2:	2320      	movs	r3, #32
 80029d4:	803b      	strh	r3, [r7, #0]
	Button_init.GPIO_Speed = GPIO_Speed_2MHz ;
 80029d6:	2302      	movs	r3, #2
 80029d8:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOA,&Button_init);
 80029da:	463b      	mov	r3, r7
 80029dc:	4619      	mov	r1, r3
 80029de:	4804      	ldr	r0, [pc, #16]	; (80029f0 <prvGPIOSetup+0x50>)
 80029e0:	f7fd fbc8 	bl	8000174 <GPIO_Init>

}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40011000 	.word	0x40011000
 80029f0:	40010800 	.word	0x40010800

080029f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80029f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80029f8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80029fa:	e003      	b.n	8002a04 <LoopCopyDataInit>

080029fc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80029fc:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80029fe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002a00:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002a02:	3104      	adds	r1, #4

08002a04 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002a04:	480b      	ldr	r0, [pc, #44]	; (8002a34 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8002a06:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8002a08:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002a0a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002a0c:	d3f6      	bcc.n	80029fc <CopyDataInit>
	ldr	r2, =_sbss
 8002a0e:	4a0b      	ldr	r2, [pc, #44]	; (8002a3c <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8002a10:	e002      	b.n	8002a18 <LoopFillZerobss>

08002a12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002a12:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002a14:	f842 3b04 	str.w	r3, [r2], #4

08002a18 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002a18:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8002a1a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002a1c:	d3f9      	bcc.n	8002a12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a1e:	f000 f813 	bl	8002a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a22:	f000 f8cb 	bl	8002bbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a26:	f7ff ff19 	bl	800285c <main>
	bx	lr
 8002a2a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a2c:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8002a30:	08002d04 	.word	0x08002d04
	ldr	r0, =_sdata
 8002a34:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002a38:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8002a3c:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8002a40:	20003fc8 	.word	0x20003fc8

08002a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a44:	e7fe      	b.n	8002a44 <ADC1_2_IRQHandler>
	...

08002a48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002a4c:	4a15      	ldr	r2, [pc, #84]	; (8002aa4 <SystemInit+0x5c>)
 8002a4e:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <SystemInit+0x5c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8002a58:	4912      	ldr	r1, [pc, #72]	; (8002aa4 <SystemInit+0x5c>)
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <SystemInit+0x5c>)
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <SystemInit+0x60>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002a64:	4a0f      	ldr	r2, [pc, #60]	; (8002aa4 <SystemInit+0x5c>)
 8002a66:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <SystemInit+0x5c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a72:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002a74:	4a0b      	ldr	r2, [pc, #44]	; (8002aa4 <SystemInit+0x5c>)
 8002a76:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <SystemInit+0x5c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a7e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002a80:	4a08      	ldr	r2, [pc, #32]	; (8002aa4 <SystemInit+0x5c>)
 8002a82:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <SystemInit+0x5c>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002a8a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <SystemInit+0x5c>)
 8002a8e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002a92:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8002a94:	f000 f80c 	bl	8002ab0 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002a98:	4b04      	ldr	r3, [pc, #16]	; (8002aac <SystemInit+0x64>)
 8002a9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a9e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002aa0:	bf00      	nop
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	f8ff0000 	.word	0xf8ff0000
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8002ab4:	f000 f802 	bl	8002abc <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}

08002abc <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	607b      	str	r3, [r7, #4]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002aca:	4a3a      	ldr	r2, [pc, #232]	; (8002bb4 <SetSysClockTo72+0xf8>)
 8002acc:	4b39      	ldr	r3, [pc, #228]	; (8002bb4 <SetSysClockTo72+0xf8>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002ad6:	4b37      	ldr	r3, [pc, #220]	; (8002bb4 <SetSysClockTo72+0xf8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d103      	bne.n	8002af4 <SetSysClockTo72+0x38>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002af2:	d1f0      	bne.n	8002ad6 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002af4:	4b2f      	ldr	r3, [pc, #188]	; (8002bb4 <SetSysClockTo72+0xf8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002b00:	2301      	movs	r3, #1
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	e001      	b.n	8002b0a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002b06:	2300      	movs	r3, #0
 8002b08:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d14b      	bne.n	8002ba8 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002b10:	4a29      	ldr	r2, [pc, #164]	; (8002bb8 <SetSysClockTo72+0xfc>)
 8002b12:	4b29      	ldr	r3, [pc, #164]	; (8002bb8 <SetSysClockTo72+0xfc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f043 0310 	orr.w	r3, r3, #16
 8002b1a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8002b1c:	4a26      	ldr	r2, [pc, #152]	; (8002bb8 <SetSysClockTo72+0xfc>)
 8002b1e:	4b26      	ldr	r3, [pc, #152]	; (8002bb8 <SetSysClockTo72+0xfc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 0303 	bic.w	r3, r3, #3
 8002b26:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8002b28:	4a23      	ldr	r2, [pc, #140]	; (8002bb8 <SetSysClockTo72+0xfc>)
 8002b2a:	4b23      	ldr	r3, [pc, #140]	; (8002bb8 <SetSysClockTo72+0xfc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f043 0302 	orr.w	r3, r3, #2
 8002b32:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002b34:	4a1f      	ldr	r2, [pc, #124]	; (8002bb4 <SetSysClockTo72+0xf8>)
 8002b36:	4b1f      	ldr	r3, [pc, #124]	; (8002bb4 <SetSysClockTo72+0xf8>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002b3c:	4a1d      	ldr	r2, [pc, #116]	; (8002bb4 <SetSysClockTo72+0xf8>)
 8002b3e:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <SetSysClockTo72+0xf8>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002b44:	4a1b      	ldr	r2, [pc, #108]	; (8002bb4 <SetSysClockTo72+0xf8>)
 8002b46:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <SetSysClockTo72+0xf8>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b4e:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8002b50:	4a18      	ldr	r2, [pc, #96]	; (8002bb4 <SetSysClockTo72+0xf8>)
 8002b52:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <SetSysClockTo72+0xf8>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002b5a:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8002b5c:	4a15      	ldr	r2, [pc, #84]	; (8002bb4 <SetSysClockTo72+0xf8>)
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <SetSysClockTo72+0xf8>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8002b66:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002b68:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <SetSysClockTo72+0xf8>)
 8002b6a:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <SetSysClockTo72+0xf8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b72:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002b74:	bf00      	nop
 8002b76:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <SetSysClockTo72+0xf8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f9      	beq.n	8002b76 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002b82:	4a0c      	ldr	r2, [pc, #48]	; (8002bb4 <SetSysClockTo72+0xf8>)
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <SetSysClockTo72+0xf8>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f023 0303 	bic.w	r3, r3, #3
 8002b8c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8002b8e:	4a09      	ldr	r2, [pc, #36]	; (8002bb4 <SetSysClockTo72+0xf8>)
 8002b90:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <SetSysClockTo72+0xf8>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f043 0302 	orr.w	r3, r3, #2
 8002b98:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8002b9a:	bf00      	nop
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <SetSysClockTo72+0xf8>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 030c 	and.w	r3, r3, #12
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d1f9      	bne.n	8002b9c <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40022000 	.word	0x40022000

08002bbc <__libc_init_array>:
 8002bbc:	b570      	push	{r4, r5, r6, lr}
 8002bbe:	2500      	movs	r5, #0
 8002bc0:	4e0c      	ldr	r6, [pc, #48]	; (8002bf4 <__libc_init_array+0x38>)
 8002bc2:	4c0d      	ldr	r4, [pc, #52]	; (8002bf8 <__libc_init_array+0x3c>)
 8002bc4:	1ba4      	subs	r4, r4, r6
 8002bc6:	10a4      	asrs	r4, r4, #2
 8002bc8:	42a5      	cmp	r5, r4
 8002bca:	d109      	bne.n	8002be0 <__libc_init_array+0x24>
 8002bcc:	f000 f83c 	bl	8002c48 <_init>
 8002bd0:	2500      	movs	r5, #0
 8002bd2:	4e0a      	ldr	r6, [pc, #40]	; (8002bfc <__libc_init_array+0x40>)
 8002bd4:	4c0a      	ldr	r4, [pc, #40]	; (8002c00 <__libc_init_array+0x44>)
 8002bd6:	1ba4      	subs	r4, r4, r6
 8002bd8:	10a4      	asrs	r4, r4, #2
 8002bda:	42a5      	cmp	r5, r4
 8002bdc:	d105      	bne.n	8002bea <__libc_init_array+0x2e>
 8002bde:	bd70      	pop	{r4, r5, r6, pc}
 8002be0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002be4:	4798      	blx	r3
 8002be6:	3501      	adds	r5, #1
 8002be8:	e7ee      	b.n	8002bc8 <__libc_init_array+0xc>
 8002bea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bee:	4798      	blx	r3
 8002bf0:	3501      	adds	r5, #1
 8002bf2:	e7f2      	b.n	8002bda <__libc_init_array+0x1e>
 8002bf4:	08002cfc 	.word	0x08002cfc
 8002bf8:	08002cfc 	.word	0x08002cfc
 8002bfc:	08002cfc 	.word	0x08002cfc
 8002c00:	08002d00 	.word	0x08002d00

08002c04 <memcmp>:
 8002c04:	b510      	push	{r4, lr}
 8002c06:	3901      	subs	r1, #1
 8002c08:	4402      	add	r2, r0
 8002c0a:	4290      	cmp	r0, r2
 8002c0c:	d101      	bne.n	8002c12 <memcmp+0xe>
 8002c0e:	2000      	movs	r0, #0
 8002c10:	bd10      	pop	{r4, pc}
 8002c12:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002c16:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002c1a:	42a3      	cmp	r3, r4
 8002c1c:	d0f5      	beq.n	8002c0a <memcmp+0x6>
 8002c1e:	1b18      	subs	r0, r3, r4
 8002c20:	bd10      	pop	{r4, pc}

08002c22 <memcpy>:
 8002c22:	b510      	push	{r4, lr}
 8002c24:	1e43      	subs	r3, r0, #1
 8002c26:	440a      	add	r2, r1
 8002c28:	4291      	cmp	r1, r2
 8002c2a:	d100      	bne.n	8002c2e <memcpy+0xc>
 8002c2c:	bd10      	pop	{r4, pc}
 8002c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c36:	e7f7      	b.n	8002c28 <memcpy+0x6>

08002c38 <memset>:
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4402      	add	r2, r0
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d100      	bne.n	8002c42 <memset+0xa>
 8002c40:	4770      	bx	lr
 8002c42:	f803 1b01 	strb.w	r1, [r3], #1
 8002c46:	e7f9      	b.n	8002c3c <memset+0x4>

08002c48 <_init>:
 8002c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4a:	bf00      	nop
 8002c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c4e:	bc08      	pop	{r3}
 8002c50:	469e      	mov	lr, r3
 8002c52:	4770      	bx	lr

08002c54 <_fini>:
 8002c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c56:	bf00      	nop
 8002c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c5a:	bc08      	pop	{r3}
 8002c5c:	469e      	mov	lr, r3
 8002c5e:	4770      	bx	lr
