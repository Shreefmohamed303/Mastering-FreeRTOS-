
STM32_FreeRTOS_Queue_Processing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056b4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080057c4  080057c4  000157c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005970  08005970  00015970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005974  08005974  00015974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000130  20000000  08005978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000040f8  20000130  08005aa8  00020130  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20004228  08005aa8  00024228  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010a02  00000000  00000000  00020159  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000023c7  00000000  00000000  00030b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d48  00000000  00000000  00032f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c40  00000000  00000000  00033c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000066a7  00000000  00000000  000348b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000048b6  00000000  00000000  0003af57  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003f80d  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003b88  00000000  00000000  0003f88c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000130 	.word	0x20000130
 800012c:	00000000 	.word	0x00000000
 8000130:	080057ac 	.word	0x080057ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000134 	.word	0x20000134
 800014c:	080057ac 	.word	0x080057ac

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000160:	b480      	push	{r7}
 8000162:	b083      	sub	sp, #12
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000168:	4a05      	ldr	r2, [pc, #20]	; (8000180 <NVIC_PriorityGroupConfig+0x20>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000174:	60d3      	str	r3, [r2, #12]
}
 8000176:	bf00      	nop
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	e000ed00 	.word	0xe000ed00

08000184 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000184:	b480      	push	{r7}
 8000186:	b089      	sub	sp, #36	; 0x24
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800018e:	2300      	movs	r3, #0
 8000190:	61fb      	str	r3, [r7, #28]
 8000192:	2300      	movs	r3, #0
 8000194:	613b      	str	r3, [r7, #16]
 8000196:	2300      	movs	r3, #0
 8000198:	61bb      	str	r3, [r7, #24]
 800019a:	2300      	movs	r3, #0
 800019c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800019e:	2300      	movs	r3, #0
 80001a0:	617b      	str	r3, [r7, #20]
 80001a2:	2300      	movs	r3, #0
 80001a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80001a6:	683b      	ldr	r3, [r7, #0]
 80001a8:	78db      	ldrb	r3, [r3, #3]
 80001aa:	f003 030f 	and.w	r3, r3, #15
 80001ae:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	78db      	ldrb	r3, [r3, #3]
 80001b4:	f003 0310 	and.w	r3, r3, #16
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d005      	beq.n	80001c8 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80001bc:	683b      	ldr	r3, [r7, #0]
 80001be:	789b      	ldrb	r3, [r3, #2]
 80001c0:	461a      	mov	r2, r3
 80001c2:	69fb      	ldr	r3, [r7, #28]
 80001c4:	4313      	orrs	r3, r2
 80001c6:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80001c8:	683b      	ldr	r3, [r7, #0]
 80001ca:	881b      	ldrh	r3, [r3, #0]
 80001cc:	b2db      	uxtb	r3, r3
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d044      	beq.n	800025c <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80001d8:	2300      	movs	r3, #0
 80001da:	61bb      	str	r3, [r7, #24]
 80001dc:	e038      	b.n	8000250 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80001de:	2201      	movs	r2, #1
 80001e0:	69bb      	ldr	r3, [r7, #24]
 80001e2:	fa02 f303 	lsl.w	r3, r2, r3
 80001e6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	881b      	ldrh	r3, [r3, #0]
 80001ec:	461a      	mov	r2, r3
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	4013      	ands	r3, r2
 80001f2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80001f4:	693a      	ldr	r2, [r7, #16]
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	429a      	cmp	r2, r3
 80001fa:	d126      	bne.n	800024a <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80001fc:	69bb      	ldr	r3, [r7, #24]
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000202:	220f      	movs	r2, #15
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	fa02 f303 	lsl.w	r3, r2, r3
 800020a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800020c:	68bb      	ldr	r3, [r7, #8]
 800020e:	43db      	mvns	r3, r3
 8000210:	697a      	ldr	r2, [r7, #20]
 8000212:	4013      	ands	r3, r2
 8000214:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000216:	69fa      	ldr	r2, [r7, #28]
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	fa02 f303 	lsl.w	r3, r2, r3
 800021e:	697a      	ldr	r2, [r7, #20]
 8000220:	4313      	orrs	r3, r2
 8000222:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	78db      	ldrb	r3, [r3, #3]
 8000228:	2b28      	cmp	r3, #40	; 0x28
 800022a:	d105      	bne.n	8000238 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800022c:	2201      	movs	r2, #1
 800022e:	69bb      	ldr	r3, [r7, #24]
 8000230:	409a      	lsls	r2, r3
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	615a      	str	r2, [r3, #20]
 8000236:	e008      	b.n	800024a <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	78db      	ldrb	r3, [r3, #3]
 800023c:	2b48      	cmp	r3, #72	; 0x48
 800023e:	d104      	bne.n	800024a <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000240:	2201      	movs	r2, #1
 8000242:	69bb      	ldr	r3, [r7, #24]
 8000244:	409a      	lsls	r2, r3
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800024a:	69bb      	ldr	r3, [r7, #24]
 800024c:	3301      	adds	r3, #1
 800024e:	61bb      	str	r3, [r7, #24]
 8000250:	69bb      	ldr	r3, [r7, #24]
 8000252:	2b07      	cmp	r3, #7
 8000254:	d9c3      	bls.n	80001de <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	697a      	ldr	r2, [r7, #20]
 800025a:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	2bff      	cmp	r3, #255	; 0xff
 8000262:	d946      	bls.n	80002f2 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800026a:	2300      	movs	r3, #0
 800026c:	61bb      	str	r3, [r7, #24]
 800026e:	e03a      	b.n	80002e6 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000270:	69bb      	ldr	r3, [r7, #24]
 8000272:	3308      	adds	r3, #8
 8000274:	2201      	movs	r2, #1
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	881b      	ldrh	r3, [r3, #0]
 8000280:	461a      	mov	r2, r3
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	4013      	ands	r3, r2
 8000286:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000288:	693a      	ldr	r2, [r7, #16]
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	429a      	cmp	r2, r3
 800028e:	d127      	bne.n	80002e0 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000290:	69bb      	ldr	r3, [r7, #24]
 8000292:	009b      	lsls	r3, r3, #2
 8000294:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000296:	220f      	movs	r2, #15
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	fa02 f303 	lsl.w	r3, r2, r3
 800029e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	43db      	mvns	r3, r3
 80002a4:	697a      	ldr	r2, [r7, #20]
 80002a6:	4013      	ands	r3, r2
 80002a8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80002aa:	69fa      	ldr	r2, [r7, #28]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	697a      	ldr	r2, [r7, #20]
 80002b4:	4313      	orrs	r3, r2
 80002b6:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	78db      	ldrb	r3, [r3, #3]
 80002bc:	2b28      	cmp	r3, #40	; 0x28
 80002be:	d105      	bne.n	80002cc <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80002c0:	69bb      	ldr	r3, [r7, #24]
 80002c2:	3308      	adds	r3, #8
 80002c4:	2201      	movs	r2, #1
 80002c6:	409a      	lsls	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	78db      	ldrb	r3, [r3, #3]
 80002d0:	2b48      	cmp	r3, #72	; 0x48
 80002d2:	d105      	bne.n	80002e0 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80002d4:	69bb      	ldr	r3, [r7, #24]
 80002d6:	3308      	adds	r3, #8
 80002d8:	2201      	movs	r2, #1
 80002da:	409a      	lsls	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002e0:	69bb      	ldr	r3, [r7, #24]
 80002e2:	3301      	adds	r3, #1
 80002e4:	61bb      	str	r3, [r7, #24]
 80002e6:	69bb      	ldr	r3, [r7, #24]
 80002e8:	2b07      	cmp	r3, #7
 80002ea:	d9c1      	bls.n	8000270 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	697a      	ldr	r2, [r7, #20]
 80002f0:	605a      	str	r2, [r3, #4]
  }
}
 80002f2:	bf00      	nop
 80002f4:	3724      	adds	r7, #36	; 0x24
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr

080002fc <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	460b      	mov	r3, r1
 8000306:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000308:	2300      	movs	r3, #0
 800030a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	68da      	ldr	r2, [r3, #12]
 8000310:	887b      	ldrh	r3, [r7, #2]
 8000312:	4013      	ands	r3, r2
 8000314:	2b00      	cmp	r3, #0
 8000316:	d002      	beq.n	800031e <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000318:	2301      	movs	r3, #1
 800031a:	73fb      	strb	r3, [r7, #15]
 800031c:	e001      	b.n	8000322 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800031e:	2300      	movs	r3, #0
 8000320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000322:	7bfb      	ldrb	r3, [r7, #15]
}
 8000324:	4618      	mov	r0, r3
 8000326:	3714      	adds	r7, #20
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr

0800032e <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800032e:	b480      	push	{r7}
 8000330:	b083      	sub	sp, #12
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
 8000336:	460b      	mov	r3, r1
 8000338:	807b      	strh	r3, [r7, #2]
 800033a:	4613      	mov	r3, r2
 800033c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 800033e:	787b      	ldrb	r3, [r7, #1]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d003      	beq.n	800034c <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000344:	887a      	ldrh	r2, [r7, #2]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 800034a:	e002      	b.n	8000352 <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 800034c:	887a      	ldrh	r2, [r7, #2]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	615a      	str	r2, [r3, #20]
}
 8000352:	bf00      	nop
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr

0800035c <GPIO_ToggleBit>:
  
  GPIOx->ODR = PortVal;
}

void GPIO_ToggleBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	460b      	mov	r3, r1
 8000366:	807b      	strh	r3, [r7, #2]

	/* Check the parameters */
	assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

	GPIOx->ODR ^= GPIO_Pin;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	68da      	ldr	r2, [r3, #12]
 800036c:	887b      	ldrh	r3, [r7, #2]
 800036e:	405a      	eors	r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	60da      	str	r2, [r3, #12]

}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr
	...

08000380 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000380:	b480      	push	{r7}
 8000382:	b087      	sub	sp, #28
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000388:	2300      	movs	r3, #0
 800038a:	617b      	str	r3, [r7, #20]
 800038c:	2300      	movs	r3, #0
 800038e:	613b      	str	r3, [r7, #16]
 8000390:	2300      	movs	r3, #0
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	2300      	movs	r3, #0
 8000396:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000398:	4b4c      	ldr	r3, [pc, #304]	; (80004cc <RCC_GetClocksFreq+0x14c>)
 800039a:	685b      	ldr	r3, [r3, #4]
 800039c:	f003 030c 	and.w	r3, r3, #12
 80003a0:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	2b04      	cmp	r3, #4
 80003a6:	d007      	beq.n	80003b8 <RCC_GetClocksFreq+0x38>
 80003a8:	2b08      	cmp	r3, #8
 80003aa:	d009      	beq.n	80003c0 <RCC_GetClocksFreq+0x40>
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d133      	bne.n	8000418 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a47      	ldr	r2, [pc, #284]	; (80004d0 <RCC_GetClocksFreq+0x150>)
 80003b4:	601a      	str	r2, [r3, #0]
      break;
 80003b6:	e033      	b.n	8000420 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a45      	ldr	r2, [pc, #276]	; (80004d0 <RCC_GetClocksFreq+0x150>)
 80003bc:	601a      	str	r2, [r3, #0]
      break;
 80003be:	e02f      	b.n	8000420 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80003c0:	4b42      	ldr	r3, [pc, #264]	; (80004cc <RCC_GetClocksFreq+0x14c>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80003c8:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80003ca:	4b40      	ldr	r3, [pc, #256]	; (80004cc <RCC_GetClocksFreq+0x14c>)
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003d2:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80003d4:	693b      	ldr	r3, [r7, #16]
 80003d6:	0c9b      	lsrs	r3, r3, #18
 80003d8:	3302      	adds	r3, #2
 80003da:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d106      	bne.n	80003f0 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	4a3b      	ldr	r2, [pc, #236]	; (80004d4 <RCC_GetClocksFreq+0x154>)
 80003e6:	fb02 f203 	mul.w	r2, r2, r3
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80003ee:	e017      	b.n	8000420 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80003f0:	4b36      	ldr	r3, [pc, #216]	; (80004cc <RCC_GetClocksFreq+0x14c>)
 80003f2:	685b      	ldr	r3, [r3, #4]
 80003f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d006      	beq.n	800040a <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80003fc:	693b      	ldr	r3, [r7, #16]
 80003fe:	4a35      	ldr	r2, [pc, #212]	; (80004d4 <RCC_GetClocksFreq+0x154>)
 8000400:	fb02 f203 	mul.w	r2, r2, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	601a      	str	r2, [r3, #0]
      break;
 8000408:	e00a      	b.n	8000420 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	4a30      	ldr	r2, [pc, #192]	; (80004d0 <RCC_GetClocksFreq+0x150>)
 800040e:	fb02 f203 	mul.w	r2, r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	601a      	str	r2, [r3, #0]
      break;
 8000416:	e003      	b.n	8000420 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a2d      	ldr	r2, [pc, #180]	; (80004d0 <RCC_GetClocksFreq+0x150>)
 800041c:	601a      	str	r2, [r3, #0]
      break;
 800041e:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000420:	4b2a      	ldr	r3, [pc, #168]	; (80004cc <RCC_GetClocksFreq+0x14c>)
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000428:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 800042a:	697b      	ldr	r3, [r7, #20]
 800042c:	091b      	lsrs	r3, r3, #4
 800042e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000430:	4a29      	ldr	r2, [pc, #164]	; (80004d8 <RCC_GetClocksFreq+0x158>)
 8000432:	697b      	ldr	r3, [r7, #20]
 8000434:	4413      	add	r3, r2
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	b2db      	uxtb	r3, r3
 800043a:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	40da      	lsrs	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000448:	4b20      	ldr	r3, [pc, #128]	; (80004cc <RCC_GetClocksFreq+0x14c>)
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000450:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000452:	697b      	ldr	r3, [r7, #20]
 8000454:	0a1b      	lsrs	r3, r3, #8
 8000456:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000458:	4a1f      	ldr	r2, [pc, #124]	; (80004d8 <RCC_GetClocksFreq+0x158>)
 800045a:	697b      	ldr	r3, [r7, #20]
 800045c:	4413      	add	r3, r2
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	b2db      	uxtb	r3, r3
 8000462:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	685a      	ldr	r2, [r3, #4]
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	40da      	lsrs	r2, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000470:	4b16      	ldr	r3, [pc, #88]	; (80004cc <RCC_GetClocksFreq+0x14c>)
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000478:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	0adb      	lsrs	r3, r3, #11
 800047e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000480:	4a15      	ldr	r2, [pc, #84]	; (80004d8 <RCC_GetClocksFreq+0x158>)
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	4413      	add	r3, r2
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	b2db      	uxtb	r3, r3
 800048a:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	685a      	ldr	r2, [r3, #4]
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	40da      	lsrs	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <RCC_GetClocksFreq+0x14c>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004a0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80004a2:	697b      	ldr	r3, [r7, #20]
 80004a4:	0b9b      	lsrs	r3, r3, #14
 80004a6:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80004a8:	4a0c      	ldr	r2, [pc, #48]	; (80004dc <RCC_GetClocksFreq+0x15c>)
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	4413      	add	r3, r2
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	68da      	ldr	r2, [r3, #12]
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	611a      	str	r2, [r3, #16]
}
 80004c2:	bf00      	nop
 80004c4:	371c      	adds	r7, #28
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	40021000 	.word	0x40021000
 80004d0:	007a1200 	.word	0x007a1200
 80004d4:	003d0900 	.word	0x003d0900
 80004d8:	20000000 	.word	0x20000000
 80004dc:	20000010 	.word	0x20000010

080004e0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	460b      	mov	r3, r1
 80004ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80004ec:	78fb      	ldrb	r3, [r7, #3]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d006      	beq.n	8000500 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80004f2:	4909      	ldr	r1, [pc, #36]	; (8000518 <RCC_APB2PeriphClockCmd+0x38>)
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <RCC_APB2PeriphClockCmd+0x38>)
 80004f6:	699a      	ldr	r2, [r3, #24]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4313      	orrs	r3, r2
 80004fc:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80004fe:	e006      	b.n	800050e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000500:	4905      	ldr	r1, [pc, #20]	; (8000518 <RCC_APB2PeriphClockCmd+0x38>)
 8000502:	4b05      	ldr	r3, [pc, #20]	; (8000518 <RCC_APB2PeriphClockCmd+0x38>)
 8000504:	699a      	ldr	r2, [r3, #24]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	43db      	mvns	r3, r3
 800050a:	4013      	ands	r3, r2
 800050c:	618b      	str	r3, [r1, #24]
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr
 8000518:	40021000 	.word	0x40021000

0800051c <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08c      	sub	sp, #48	; 0x30
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000526:	2300      	movs	r3, #0
 8000528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800052a:	2300      	movs	r3, #0
 800052c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 800052e:	2300      	movs	r3, #0
 8000530:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8000532:	2300      	movs	r3, #0
 8000534:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	8a1b      	ldrh	r3, [r3, #16]
 8000542:	b29b      	uxth	r3, r3
 8000544:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8000546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000548:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800054c:	4013      	ands	r3, r2
 800054e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	88db      	ldrh	r3, [r3, #6]
 8000554:	461a      	mov	r2, r3
 8000556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000558:	4313      	orrs	r3, r2
 800055a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800055c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800055e:	b29a      	uxth	r2, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	899b      	ldrh	r3, [r3, #12]
 8000568:	b29b      	uxth	r3, r3
 800056a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 800056c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800056e:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8000572:	4013      	ands	r3, r2
 8000574:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	889a      	ldrh	r2, [r3, #4]
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	891b      	ldrh	r3, [r3, #8]
 800057e:	4313      	orrs	r3, r2
 8000580:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000586:	4313      	orrs	r3, r2
 8000588:	b29b      	uxth	r3, r3
 800058a:	461a      	mov	r2, r3
 800058c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800058e:	4313      	orrs	r3, r2
 8000590:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000594:	b29a      	uxth	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	8a9b      	ldrh	r3, [r3, #20]
 800059e:	b29b      	uxth	r3, r3
 80005a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 80005a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005a4:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 80005a8:	4013      	ands	r3, r2
 80005aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	899b      	ldrh	r3, [r3, #12]
 80005b0:	461a      	mov	r2, r3
 80005b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005b4:	4313      	orrs	r3, r2
 80005b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80005b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff fedb 	bl	8000380 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	4a2e      	ldr	r2, [pc, #184]	; (8000688 <USART_Init+0x16c>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d102      	bne.n	80005d8 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80005d6:	e001      	b.n	80005dc <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80005d8:	693b      	ldr	r3, [r7, #16]
 80005da:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	899b      	ldrh	r3, [r3, #12]
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	b21b      	sxth	r3, r3
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	da0c      	bge.n	8000602 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80005e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005ea:	4613      	mov	r3, r2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	4413      	add	r3, r2
 80005f0:	009a      	lsls	r2, r3, #2
 80005f2:	441a      	add	r2, r3
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000600:	e00b      	b.n	800061a <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000604:	4613      	mov	r3, r2
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4413      	add	r3, r2
 800060a:	009a      	lsls	r2, r3, #2
 800060c:	441a      	add	r2, r3
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	fbb2 f3f3 	udiv	r3, r2, r3
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 800061a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061c:	4a1b      	ldr	r2, [pc, #108]	; (800068c <USART_Init+0x170>)
 800061e:	fba2 2303 	umull	r2, r3, r2, r3
 8000622:	095b      	lsrs	r3, r3, #5
 8000624:	011b      	lsls	r3, r3, #4
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800062a:	091b      	lsrs	r3, r3, #4
 800062c:	2264      	movs	r2, #100	; 0x64
 800062e:	fb02 f303 	mul.w	r3, r2, r3
 8000632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	899b      	ldrh	r3, [r3, #12]
 800063c:	b29b      	uxth	r3, r3
 800063e:	b21b      	sxth	r3, r3
 8000640:	2b00      	cmp	r3, #0
 8000642:	da0c      	bge.n	800065e <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000644:	6a3b      	ldr	r3, [r7, #32]
 8000646:	00db      	lsls	r3, r3, #3
 8000648:	3332      	adds	r3, #50	; 0x32
 800064a:	4a10      	ldr	r2, [pc, #64]	; (800068c <USART_Init+0x170>)
 800064c:	fba2 2303 	umull	r2, r3, r2, r3
 8000650:	095b      	lsrs	r3, r3, #5
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000658:	4313      	orrs	r3, r2
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800065c:	e00b      	b.n	8000676 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800065e:	6a3b      	ldr	r3, [r7, #32]
 8000660:	011b      	lsls	r3, r3, #4
 8000662:	3332      	adds	r3, #50	; 0x32
 8000664:	4a09      	ldr	r2, [pc, #36]	; (800068c <USART_Init+0x170>)
 8000666:	fba2 2303 	umull	r2, r3, r2, r3
 800066a:	095b      	lsrs	r3, r3, #5
 800066c:	f003 030f 	and.w	r3, r3, #15
 8000670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000672:	4313      	orrs	r3, r2
 8000674:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000678:	b29a      	uxth	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	811a      	strh	r2, [r3, #8]
}
 800067e:	bf00      	nop
 8000680:	3730      	adds	r7, #48	; 0x30
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40013800 	.word	0x40013800
 800068c:	51eb851f 	.word	0x51eb851f

08000690 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	460b      	mov	r3, r1
 800069a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800069c:	78fb      	ldrb	r3, [r7, #3]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d008      	beq.n	80006b4 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	899b      	ldrh	r3, [r3, #12]
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 80006b2:	e007      	b.n	80006c4 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	899b      	ldrh	r3, [r3, #12]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80006be:	b29a      	uxth	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	819a      	strh	r2, [r3, #12]
}
 80006c4:	bf00      	nop
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr

080006ce <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80006ce:	b480      	push	{r7}
 80006d0:	b087      	sub	sp, #28
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
 80006d6:	460b      	mov	r3, r1
 80006d8:	807b      	strh	r3, [r7, #2]
 80006da:	4613      	mov	r3, r2
 80006dc:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80006f2:	887b      	ldrh	r3, [r7, #2]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	095b      	lsrs	r3, r3, #5
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 80006fc:	887b      	ldrh	r3, [r7, #2]
 80006fe:	f003 031f 	and.w	r3, r3, #31
 8000702:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000704:	2201      	movs	r2, #1
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d103      	bne.n	800071c <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	330c      	adds	r3, #12
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	e009      	b.n	8000730 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	2b02      	cmp	r3, #2
 8000720:	d103      	bne.n	800072a <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	3310      	adds	r3, #16
 8000726:	617b      	str	r3, [r7, #20]
 8000728:	e002      	b.n	8000730 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	3314      	adds	r3, #20
 800072e:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000730:	787b      	ldrb	r3, [r7, #1]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d006      	beq.n	8000744 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	697a      	ldr	r2, [r7, #20]
 800073a:	6811      	ldr	r1, [r2, #0]
 800073c:	68ba      	ldr	r2, [r7, #8]
 800073e:	430a      	orrs	r2, r1
 8000740:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000742:	e006      	b.n	8000752 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	697a      	ldr	r2, [r7, #20]
 8000748:	6811      	ldr	r1, [r2, #0]
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	43d2      	mvns	r2, r2
 800074e:	400a      	ands	r2, r1
 8000750:	601a      	str	r2, [r3, #0]
}
 8000752:	bf00      	nop
 8000754:	371c      	adds	r7, #28
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000768:	887b      	ldrh	r3, [r7, #2]
 800076a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800076e:	b29a      	uxth	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	809a      	strh	r2, [r3, #4]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr

0800077e <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800077e:	b480      	push	{r7}
 8000780:	b083      	sub	sp, #12
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	889b      	ldrh	r3, [r3, #4]
 800078a:	b29b      	uxth	r3, r3
 800078c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000790:	b29b      	uxth	r3, r3
}
 8000792:	4618      	mov	r0, r3
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80007a8:	2300      	movs	r3, #0
 80007aa:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	887b      	ldrh	r3, [r7, #2]
 80007b4:	4013      	ands	r3, r2
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d002      	beq.n	80007c2 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80007bc:	2301      	movs	r3, #1
 80007be:	73fb      	strb	r3, [r7, #15]
 80007c0:	e001      	b.n	80007c6 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80007c2:	2300      	movs	r3, #0
 80007c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr

080007d2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80007d2:	b480      	push	{r7}
 80007d4:	b083      	sub	sp, #12
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f103 0208 	add.w	r2, r3, #8
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f04f 32ff 	mov.w	r2, #4294967295
 80007ea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f103 0208 	add.w	r2, r3, #8
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	f103 0208 	add.w	r2, r3, #8
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr

08000828 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	689a      	ldr	r2, [r3, #8]
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	683a      	ldr	r2, [r7, #0]
 800084c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	683a      	ldr	r2, [r7, #0]
 8000852:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	1c5a      	adds	r2, r3, #1
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	601a      	str	r2, [r3, #0]
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr

0800086e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800086e:	b480      	push	{r7}
 8000870:	b085      	sub	sp, #20
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
 8000876:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000884:	d103      	bne.n	800088e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	691b      	ldr	r3, [r3, #16]
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	e00c      	b.n	80008a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	3308      	adds	r3, #8
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	e002      	b.n	800089c <vListInsert+0x2e>
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d9f6      	bls.n	8000896 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	685a      	ldr	r2, [r3, #4]
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	683a      	ldr	r2, [r7, #0]
 80008b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	683a      	ldr	r2, [r7, #0]
 80008c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	1c5a      	adds	r2, r3, #1
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	601a      	str	r2, [r3, #0]
}
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr

080008de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80008de:	b480      	push	{r7}
 80008e0:	b085      	sub	sp, #20
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	691b      	ldr	r3, [r3, #16]
 80008ea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	6892      	ldr	r2, [r2, #8]
 80008f4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	6852      	ldr	r2, [r2, #4]
 80008fe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	685a      	ldr	r2, [r3, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	429a      	cmp	r2, r3
 8000908:	d103      	bne.n	8000912 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	689a      	ldr	r2, [r3, #8]
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	1e5a      	subs	r2, r3, #1
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	681b      	ldr	r3, [r3, #0]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	3b04      	subs	r3, #4
 8000940:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000948:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	3b04      	subs	r3, #4
 800094e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	f023 0201 	bic.w	r2, r3, #1
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	3b04      	subs	r3, #4
 800095e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000960:	4a08      	ldr	r2, [pc, #32]	; (8000984 <pxPortInitialiseStack+0x54>)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	3b14      	subs	r3, #20
 800096a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	3b20      	subs	r3, #32
 8000976:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000978:	68fb      	ldr	r3, [r7, #12]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	08000989 	.word	0x08000989

08000988 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000992:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000996:	f383 8811 	msr	BASEPRI, r3
 800099a:	f3bf 8f6f 	isb	sy
 800099e:	f3bf 8f4f 	dsb	sy
 80009a2:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80009a4:	bf00      	nop
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d0fc      	beq.n	80009a6 <prvTaskExitError+0x1e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
	...

080009c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <pxCurrentTCBConst2>)
 80009c2:	6819      	ldr	r1, [r3, #0]
 80009c4:	6808      	ldr	r0, [r1, #0]
 80009c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80009ca:	f380 8809 	msr	PSP, r0
 80009ce:	f3bf 8f6f 	isb	sy
 80009d2:	f04f 0000 	mov.w	r0, #0
 80009d6:	f380 8811 	msr	BASEPRI, r0
 80009da:	f04e 0e0d 	orr.w	lr, lr, #13
 80009de:	4770      	bx	lr

080009e0 <pxCurrentTCBConst2>:
 80009e0:	2000396c 	.word	0x2000396c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80009e4:	bf00      	nop
 80009e6:	bf00      	nop

080009e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80009e8:	4806      	ldr	r0, [pc, #24]	; (8000a04 <prvPortStartFirstTask+0x1c>)
 80009ea:	6800      	ldr	r0, [r0, #0]
 80009ec:	6800      	ldr	r0, [r0, #0]
 80009ee:	f380 8808 	msr	MSP, r0
 80009f2:	b662      	cpsie	i
 80009f4:	b661      	cpsie	f
 80009f6:	f3bf 8f4f 	dsb	sy
 80009fa:	f3bf 8f6f 	isb	sy
 80009fe:	df00      	svc	0
 8000a00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000a02:	bf00      	nop
 8000a04:	e000ed08 	.word	0xe000ed08

08000a08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000a0c:	4a0c      	ldr	r2, [pc, #48]	; (8000a40 <xPortStartScheduler+0x38>)
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <xPortStartScheduler+0x38>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000a16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000a18:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <xPortStartScheduler+0x38>)
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <xPortStartScheduler+0x38>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000a22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000a24:	f000 f890 	bl	8000b48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <xPortStartScheduler+0x3c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8000a2e:	f7ff ffdb 	bl	80009e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000a32:	f001 f9c5 	bl	8001dc0 <vTaskSwitchContext>
	prvTaskExitError();
 8000a36:	f7ff ffa7 	bl	8000988 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000a3a:	2300      	movs	r3, #0
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	e000ed20 	.word	0xe000ed20
 8000a44:	20000014 	.word	0x20000014

08000a48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000a52:	f383 8811 	msr	BASEPRI, r3
 8000a56:	f3bf 8f6f 	isb	sy
 8000a5a:	f3bf 8f4f 	dsb	sy
 8000a5e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <vPortEnterCritical+0x2c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	3301      	adds	r3, #1
 8000a66:	4a03      	ldr	r2, [pc, #12]	; (8000a74 <vPortEnterCritical+0x2c>)
 8000a68:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	20000014 	.word	0x20000014

08000a78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <vPortExitCritical+0x2c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <vPortExitCritical+0x2c>)
 8000a86:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <vPortExitCritical+0x2c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d104      	bne.n	8000a9a <vPortExitCritical+0x22>
 8000a90:	2300      	movs	r3, #0
 8000a92:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr
 8000aa4:	20000014 	.word	0x20000014
	...

08000ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000ab0:	f3ef 8009 	mrs	r0, PSP
 8000ab4:	f3bf 8f6f 	isb	sy
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <pxCurrentTCBConst>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000ac0:	6010      	str	r0, [r2, #0]
 8000ac2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000ac6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8000aca:	f380 8811 	msr	BASEPRI, r0
 8000ace:	f001 f977 	bl	8001dc0 <vTaskSwitchContext>
 8000ad2:	f04f 0000 	mov.w	r0, #0
 8000ad6:	f380 8811 	msr	BASEPRI, r0
 8000ada:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000ade:	6819      	ldr	r1, [r3, #0]
 8000ae0:	6808      	ldr	r0, [r1, #0]
 8000ae2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000ae6:	f380 8809 	msr	PSP, r0
 8000aea:	f3bf 8f6f 	isb	sy
 8000aee:	4770      	bx	lr

08000af0 <pxCurrentTCBConst>:
 8000af0:	2000396c 	.word	0x2000396c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop

08000af8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
	__asm volatile
 8000afe:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000b02:	f383 8811 	msr	BASEPRI, r3
 8000b06:	f3bf 8f6f 	isb	sy
 8000b0a:	f3bf 8f4f 	dsb	sy
 8000b0e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8000b10:	f003 fa3a 	bl	8003f88 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000b14:	f001 f8a8 	bl	8001c68 <xTaskIncrementTick>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d006      	beq.n	8000b2c <SysTick_Handler+0x34>
		{
      traceISR_EXIT_TO_SCHEDULER();
 8000b1e:	f003 fa91 	bl	8004044 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <SysTick_Handler+0x4c>)
 8000b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	e001      	b.n	8000b30 <SysTick_Handler+0x38>
		}
		else
		{
			traceISR_EXIT();
 8000b2c:	f003 fa6e 	bl	800400c <SEGGER_SYSVIEW_RecordExitISR>
 8000b30:	2300      	movs	r3, #0
 8000b32:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	e000ed04 	.word	0xe000ed04

08000b48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <vPortSetupTimerInterrupt+0x24>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <vPortSetupTimerInterrupt+0x28>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <vPortSetupTimerInterrupt+0x2c>)
 8000b5a:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <vPortSetupTimerInterrupt+0x30>)
 8000b5c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000b5e:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <vPortSetupTimerInterrupt+0x24>)
 8000b60:	2207      	movs	r2, #7
 8000b62:	601a      	str	r2, [r3, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	e000e010 	.word	0xe000e010
 8000b70:	e000e018 	.word	0xe000e018
 8000b74:	e000e014 	.word	0xe000e014
 8000b78:	0001193f 	.word	0x0001193f

08000b7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8000b88:	f000 ffc0 	bl	8001b0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000b8c:	4b42      	ldr	r3, [pc, #264]	; (8000c98 <pvPortMalloc+0x11c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d101      	bne.n	8000b98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8000b94:	f000 f8cc 	bl	8000d30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000b98:	4b40      	ldr	r3, [pc, #256]	; (8000c9c <pvPortMalloc+0x120>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d172      	bne.n	8000c8a <pvPortMalloc+0x10e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d00d      	beq.n	8000bc6 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 8000baa:	2208      	movs	r2, #8
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4413      	add	r3, r2
 8000bb0:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f003 0307 	and.w	r3, r3, #7
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d004      	beq.n	8000bc6 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f023 0307 	bic.w	r3, r3, #7
 8000bc2:	3308      	adds	r3, #8
 8000bc4:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d05e      	beq.n	8000c8a <pvPortMalloc+0x10e>
 8000bcc:	4b34      	ldr	r3, [pc, #208]	; (8000ca0 <pvPortMalloc+0x124>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d859      	bhi.n	8000c8a <pvPortMalloc+0x10e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000bd6:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <pvPortMalloc+0x128>)
 8000bd8:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8000bda:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <pvPortMalloc+0x128>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000be0:	e004      	b.n	8000bec <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	685a      	ldr	r2, [r3, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d203      	bcs.n	8000bfe <pvPortMalloc+0x82>
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1f1      	bne.n	8000be2 <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000bfe:	4b26      	ldr	r3, [pc, #152]	; (8000c98 <pvPortMalloc+0x11c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d040      	beq.n	8000c8a <pvPortMalloc+0x10e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2208      	movs	r2, #8
 8000c0e:	4413      	add	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	685a      	ldr	r2, [r3, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	1ad2      	subs	r2, r2, r3
 8000c22:	2308      	movs	r3, #8
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d90f      	bls.n	8000c4a <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4413      	add	r3, r2
 8000c30:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	685a      	ldr	r2, [r3, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	1ad2      	subs	r2, r2, r3
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000c44:	68b8      	ldr	r0, [r7, #8]
 8000c46:	f000 f8d5 	bl	8000df4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <pvPortMalloc+0x124>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <pvPortMalloc+0x124>)
 8000c56:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <pvPortMalloc+0x124>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <pvPortMalloc+0x12c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d203      	bcs.n	8000c6c <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000c64:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <pvPortMalloc+0x124>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0f      	ldr	r2, [pc, #60]	; (8000ca8 <pvPortMalloc+0x12c>)
 8000c6a:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <pvPortMalloc+0x120>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	431a      	orrs	r2, r3
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <pvPortMalloc+0x130>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	3301      	adds	r3, #1
 8000c86:	4a09      	ldr	r2, [pc, #36]	; (8000cac <pvPortMalloc+0x130>)
 8000c88:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000c8a:	f000 ff4d 	bl	8001b28 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20003954 	.word	0x20003954
 8000c9c:	20003968 	.word	0x20003968
 8000ca0:	20003958 	.word	0x20003958
 8000ca4:	2000394c 	.word	0x2000394c
 8000ca8:	2000395c 	.word	0x2000395c
 8000cac:	20003960 	.word	0x20003960

08000cb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d02c      	beq.n	8000d1c <vPortFree+0x6c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000cc2:	2308      	movs	r3, #8
 8000cc4:	425b      	negs	r3, r3
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	4413      	add	r3, r2
 8000cca:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <vPortFree+0x74>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d01e      	beq.n	8000d1c <vPortFree+0x6c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d11a      	bne.n	8000d1c <vPortFree+0x6c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <vPortFree+0x74>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	401a      	ands	r2, r3
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000cf6:	f000 ff09 	bl	8001b0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <vPortFree+0x78>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4413      	add	r3, r2
 8000d04:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <vPortFree+0x78>)
 8000d06:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000d08:	68b8      	ldr	r0, [r7, #8]
 8000d0a:	f000 f873 	bl	8000df4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8000d0e:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <vPortFree+0x7c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	3301      	adds	r3, #1
 8000d14:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <vPortFree+0x7c>)
 8000d16:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8000d18:	f000 ff06 	bl	8001b28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20003968 	.word	0x20003968
 8000d28:	20003958 	.word	0x20003958
 8000d2c:	20003964 	.word	0x20003964

08000d30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000d36:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000d3c:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <prvHeapInit+0xac>)
 8000d3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d00c      	beq.n	8000d64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	3307      	adds	r3, #7
 8000d4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f023 0307 	bic.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000d58:	68ba      	ldr	r2, [r7, #8]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	4a1f      	ldr	r2, [pc, #124]	; (8000ddc <prvHeapInit+0xac>)
 8000d60:	4413      	add	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000d68:	4a1d      	ldr	r2, [pc, #116]	; (8000de0 <prvHeapInit+0xb0>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <prvHeapInit+0xb0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	4413      	add	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000d7c:	2208      	movs	r2, #8
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	1a9b      	subs	r3, r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f023 0307 	bic.w	r3, r3, #7
 8000d8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4a15      	ldr	r2, [pc, #84]	; (8000de4 <prvHeapInit+0xb4>)
 8000d90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <prvHeapInit+0xb4>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2200      	movs	r2, #0
 8000d98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000d9a:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <prvHeapInit+0xb4>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	1ad2      	subs	r2, r2, r3
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <prvHeapInit+0xb4>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <prvHeapInit+0xb8>)
 8000dbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	4a09      	ldr	r2, [pc, #36]	; (8000dec <prvHeapInit+0xbc>)
 8000dc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <prvHeapInit+0xc0>)
 8000dca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000dce:	601a      	str	r2, [r3, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	2000014c 	.word	0x2000014c
 8000de0:	2000394c 	.word	0x2000394c
 8000de4:	20003954 	.word	0x20003954
 8000de8:	2000395c 	.word	0x2000395c
 8000dec:	20003958 	.word	0x20003958
 8000df0:	20003968 	.word	0x20003968

08000df4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000dfc:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <prvInsertBlockIntoFreeList+0xa8>)
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	e002      	b.n	8000e08 <prvInsertBlockIntoFreeList+0x14>
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d3f7      	bcc.n	8000e02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	441a      	add	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d108      	bne.n	8000e36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	685a      	ldr	r2, [r3, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	441a      	add	r2, r3
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	441a      	add	r2, r3
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d118      	bne.n	8000e7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <prvInsertBlockIntoFreeList+0xac>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d00d      	beq.n	8000e72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685a      	ldr	r2, [r3, #4]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	441a      	add	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	e008      	b.n	8000e84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <prvInsertBlockIntoFreeList+0xac>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	e003      	b.n	8000e84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d002      	beq.n	8000e92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	2000394c 	.word	0x2000394c
 8000ea0:	20003954 	.word	0x20003954

08000ea4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8000eb2:	f7ff fdc9 	bl	8000a48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ebe:	68f9      	ldr	r1, [r7, #12]
 8000ec0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000ec2:	fb01 f303 	mul.w	r3, r1, r3
 8000ec6:	441a      	add	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	68f9      	ldr	r1, [r7, #12]
 8000ee6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000ee8:	fb01 f303 	mul.w	r3, r1, r3
 8000eec:	441a      	add	r2, r3
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	22ff      	movs	r2, #255	; 0xff
 8000ef6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	22ff      	movs	r2, #255	; 0xff
 8000efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d114      	bne.n	8000f32 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d01a      	beq.n	8000f46 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	3310      	adds	r3, #16
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 ffdd 	bl	8001ed4 <xTaskRemoveFromEventList>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d012      	beq.n	8000f46 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <xQueueGenericReset+0xb0>)
 8000f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	f3bf 8f4f 	dsb	sy
 8000f2c:	f3bf 8f6f 	isb	sy
 8000f30:	e009      	b.n	8000f46 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	3310      	adds	r3, #16
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fc4b 	bl	80007d2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	3324      	adds	r3, #36	; 0x24
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fc46 	bl	80007d2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000f46:	f7ff fd97 	bl	8000a78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	e000ed04 	.word	0xe000ed04

08000f58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af02      	add	r7, sp, #8
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	4613      	mov	r3, r2
 8000f64:	71fb      	strb	r3, [r7, #7]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	68ba      	ldr	r2, [r7, #8]
 8000f6a:	fb02 f303 	mul.w	r3, r2, r3
 8000f6e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	3348      	adds	r3, #72	; 0x48
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fe01 	bl	8000b7c <pvPortMalloc>
 8000f7a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00d      	beq.n	8000f9e <xQueueGenericCreate+0x46>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	3348      	adds	r3, #72	; 0x48
 8000f8a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000f8c:	79fa      	ldrb	r2, [r7, #7]
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	4613      	mov	r3, r2
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	68b9      	ldr	r1, [r7, #8]
 8000f98:	68f8      	ldr	r0, [r7, #12]
 8000f9a:	f000 f805 	bl	8000fa8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000f9e:	69bb      	ldr	r3, [r7, #24]
	}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3720      	adds	r7, #32
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d103      	bne.n	8000fc4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	e002      	b.n	8000fca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	69b8      	ldr	r0, [r7, #24]
 8000fda:	f7ff ff63 	bl	8000ea4 <xQueueGenericReset>
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8000fde:	78fb      	ldrb	r3, [r7, #3]
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	68f9      	ldr	r1, [r7, #12]
 8000fe4:	2073      	movs	r0, #115	; 0x73
 8000fe6:	f002 fb77 	bl	80036d8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08c      	sub	sp, #48	; 0x30
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800100a:	f7ff fd1d 	bl	8000a48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800100e:	6a3b      	ldr	r3, [r7, #32]
 8001010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001012:	6a3b      	ldr	r3, [r7, #32]
 8001014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001016:	429a      	cmp	r2, r3
 8001018:	d302      	bcc.n	8001020 <xQueueGenericSend+0x2c>
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d136      	bne.n	800108e <xQueueGenericSend+0x9a>
			{
				traceQUEUE_SEND( pxQueue );
 8001020:	6a3b      	ldr	r3, [r7, #32]
 8001022:	4618      	mov	r0, r3
 8001024:	f003 f972 	bl	800430c <SEGGER_SYSVIEW_ShrinkId>
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	460b      	mov	r3, r1
 8001032:	4601      	mov	r1, r0
 8001034:	205a      	movs	r0, #90	; 0x5a
 8001036:	f002 fbc5 	bl	80037c4 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	68b9      	ldr	r1, [r7, #8]
 800103e:	6a38      	ldr	r0, [r7, #32]
 8001040:	f000 f9f4 	bl	800142c <prvCopyDataToQueue>
 8001044:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001046:	6a3b      	ldr	r3, [r7, #32]
 8001048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104a:	2b00      	cmp	r3, #0
 800104c:	d010      	beq.n	8001070 <xQueueGenericSend+0x7c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800104e:	6a3b      	ldr	r3, [r7, #32]
 8001050:	3324      	adds	r3, #36	; 0x24
 8001052:	4618      	mov	r0, r3
 8001054:	f000 ff3e 	bl	8001ed4 <xTaskRemoveFromEventList>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d013      	beq.n	8001086 <xQueueGenericSend+0x92>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800105e:	4b4d      	ldr	r3, [pc, #308]	; (8001194 <xQueueGenericSend+0x1a0>)
 8001060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	f3bf 8f4f 	dsb	sy
 800106a:	f3bf 8f6f 	isb	sy
 800106e:	e00a      	b.n	8001086 <xQueueGenericSend+0x92>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d007      	beq.n	8001086 <xQueueGenericSend+0x92>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001076:	4b47      	ldr	r3, [pc, #284]	; (8001194 <xQueueGenericSend+0x1a0>)
 8001078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	f3bf 8f4f 	dsb	sy
 8001082:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001086:	f7ff fcf7 	bl	8000a78 <vPortExitCritical>
				return pdPASS;
 800108a:	2301      	movs	r3, #1
 800108c:	e07d      	b.n	800118a <xQueueGenericSend+0x196>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d110      	bne.n	80010b6 <xQueueGenericSend+0xc2>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001094:	f7ff fcf0 	bl	8000a78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8001098:	6a3b      	ldr	r3, [r7, #32]
 800109a:	4618      	mov	r0, r3
 800109c:	f003 f936 	bl	800430c <SEGGER_SYSVIEW_ShrinkId>
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	460b      	mov	r3, r1
 80010aa:	4601      	mov	r1, r0
 80010ac:	205a      	movs	r0, #90	; 0x5a
 80010ae:	f002 fb89 	bl	80037c4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	e069      	b.n	800118a <xQueueGenericSend+0x196>
				}
				else if( xEntryTimeSet == pdFALSE )
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d106      	bne.n	80010ca <xQueueGenericSend+0xd6>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 ff5f 	bl	8001f84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80010c6:	2301      	movs	r3, #1
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80010ca:	f7ff fcd5 	bl	8000a78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80010ce:	f000 fd1d 	bl	8001b0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80010d2:	f7ff fcb9 	bl	8000a48 <vPortEnterCritical>
 80010d6:	6a3b      	ldr	r3, [r7, #32]
 80010d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e2:	d103      	bne.n	80010ec <xQueueGenericSend+0xf8>
 80010e4:	6a3b      	ldr	r3, [r7, #32]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80010ec:	6a3b      	ldr	r3, [r7, #32]
 80010ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f8:	d103      	bne.n	8001102 <xQueueGenericSend+0x10e>
 80010fa:	6a3b      	ldr	r3, [r7, #32]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001102:	f7ff fcb9 	bl	8000a78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001106:	1d3a      	adds	r2, r7, #4
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f000 ff4e 	bl	8001fb0 <xTaskCheckForTimeOut>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d124      	bne.n	8001164 <xQueueGenericSend+0x170>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800111a:	6a38      	ldr	r0, [r7, #32]
 800111c:	f000 fa7e 	bl	800161c <prvIsQueueFull>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d018      	beq.n	8001158 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001126:	6a3b      	ldr	r3, [r7, #32]
 8001128:	3310      	adds	r3, #16
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	4611      	mov	r1, r2
 800112e:	4618      	mov	r0, r3
 8001130:	f000 fe9a 	bl	8001e68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001134:	6a38      	ldr	r0, [r7, #32]
 8001136:	f000 fa09 	bl	800154c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800113a:	f000 fcf5 	bl	8001b28 <xTaskResumeAll>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	f47f af62 	bne.w	800100a <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 8001146:	4b13      	ldr	r3, [pc, #76]	; (8001194 <xQueueGenericSend+0x1a0>)
 8001148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	f3bf 8f4f 	dsb	sy
 8001152:	f3bf 8f6f 	isb	sy
 8001156:	e758      	b.n	800100a <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001158:	6a38      	ldr	r0, [r7, #32]
 800115a:	f000 f9f7 	bl	800154c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800115e:	f000 fce3 	bl	8001b28 <xTaskResumeAll>
 8001162:	e752      	b.n	800100a <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001164:	6a38      	ldr	r0, [r7, #32]
 8001166:	f000 f9f1 	bl	800154c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800116a:	f000 fcdd 	bl	8001b28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 800116e:	6a3b      	ldr	r3, [r7, #32]
 8001170:	4618      	mov	r0, r3
 8001172:	f003 f8cb 	bl	800430c <SEGGER_SYSVIEW_ShrinkId>
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	460b      	mov	r3, r1
 8001180:	4601      	mov	r1, r0
 8001182:	205a      	movs	r0, #90	; 0x5a
 8001184:	f002 fb1e 	bl	80037c4 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8001188:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800118a:	4618      	mov	r0, r3
 800118c:	3728      	adds	r7, #40	; 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	e000ed04 	.word	0xe000ed04

08001198 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08c      	sub	sp, #48	; 0x30
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
 80011a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm volatile
 80011aa:	f3ef 8211 	mrs	r2, BASEPRI
 80011ae:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80011b2:	f383 8811 	msr	BASEPRI, r3
 80011b6:	f3bf 8f6f 	isb	sy
 80011ba:	f3bf 8f4f 	dsb	sy
 80011be:	61ba      	str	r2, [r7, #24]
 80011c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80011c2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80011c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d302      	bcc.n	80011d8 <xQueueGenericSendFromISR+0x40>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d139      	bne.n	800124c <xQueueGenericSendFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80011d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80011e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e6:	61fb      	str	r3, [r7, #28]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80011e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ea:	4618      	mov	r0, r3
 80011ec:	f003 f88e 	bl	800430c <SEGGER_SYSVIEW_ShrinkId>
 80011f0:	4601      	mov	r1, r0
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	461a      	mov	r2, r3
 80011f6:	2060      	movs	r0, #96	; 0x60
 80011f8:	f002 fa14 	bl	8003624 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	68b9      	ldr	r1, [r7, #8]
 8001200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001202:	f000 f913 	bl	800142c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001206:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800120a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800120e:	d112      	bne.n	8001236 <xQueueGenericSendFromISR+0x9e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	2b00      	cmp	r3, #0
 8001216:	d016      	beq.n	8001246 <xQueueGenericSendFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121a:	3324      	adds	r3, #36	; 0x24
 800121c:	4618      	mov	r0, r3
 800121e:	f000 fe59 	bl	8001ed4 <xTaskRemoveFromEventList>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00e      	beq.n	8001246 <xQueueGenericSendFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00b      	beq.n	8001246 <xQueueGenericSendFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2201      	movs	r2, #1
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	e007      	b.n	8001246 <xQueueGenericSendFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001236:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800123a:	3301      	adds	r3, #1
 800123c:	b2db      	uxtb	r3, r3
 800123e:	b25a      	sxtb	r2, r3
 8001240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001246:	2301      	movs	r3, #1
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
 800124a:	e00b      	b.n	8001264 <xQueueGenericSendFromISR+0xcc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800124c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124e:	4618      	mov	r0, r3
 8001250:	f003 f85c 	bl	800430c <SEGGER_SYSVIEW_ShrinkId>
 8001254:	4601      	mov	r1, r0
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	461a      	mov	r2, r3
 800125a:	2060      	movs	r0, #96	; 0x60
 800125c:	f002 f9e2 	bl	8003624 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8001260:	2300      	movs	r3, #0
 8001262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	613b      	str	r3, [r7, #16]
	__asm volatile
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800126e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001270:	4618      	mov	r0, r3
 8001272:	3730      	adds	r7, #48	; 0x30
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b08d      	sub	sp, #52	; 0x34
 800127c:	af02      	add	r7, sp, #8
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	623b      	str	r3, [r7, #32]
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800128c:	f7ff fbdc 	bl	8000a48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001294:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d031      	beq.n	8001300 <xQueueReceive+0x88>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6a38      	ldr	r0, [r7, #32]
 80012a0:	f000 f92e 	bl	8001500 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 80012a4:	6a3b      	ldr	r3, [r7, #32]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 f830 	bl	800430c <SEGGER_SYSVIEW_ShrinkId>
 80012ac:	4604      	mov	r4, r0
 80012ae:	2000      	movs	r0, #0
 80012b0:	f003 f82c 	bl	800430c <SEGGER_SYSVIEW_ShrinkId>
 80012b4:	4601      	mov	r1, r0
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	2301      	movs	r3, #1
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	4613      	mov	r3, r2
 80012be:	460a      	mov	r2, r1
 80012c0:	4621      	mov	r1, r4
 80012c2:	205c      	movs	r0, #92	; 0x5c
 80012c4:	f002 fa7e 	bl	80037c4 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	1e5a      	subs	r2, r3, #1
 80012cc:	6a3b      	ldr	r3, [r7, #32]
 80012ce:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80012d0:	6a3b      	ldr	r3, [r7, #32]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00f      	beq.n	80012f8 <xQueueReceive+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	3310      	adds	r3, #16
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fdf9 	bl	8001ed4 <xTaskRemoveFromEventList>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d007      	beq.n	80012f8 <xQueueReceive+0x80>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80012e8:	4b4f      	ldr	r3, [pc, #316]	; (8001428 <xQueueReceive+0x1b0>)
 80012ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	f3bf 8f4f 	dsb	sy
 80012f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80012f8:	f7ff fbbe 	bl	8000a78 <vPortExitCritical>
				return pdPASS;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e08e      	b.n	800141e <xQueueReceive+0x1a6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d115      	bne.n	8001332 <xQueueReceive+0xba>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001306:	f7ff fbb7 	bl	8000a78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800130a:	6a3b      	ldr	r3, [r7, #32]
 800130c:	4618      	mov	r0, r3
 800130e:	f002 fffd 	bl	800430c <SEGGER_SYSVIEW_ShrinkId>
 8001312:	4604      	mov	r4, r0
 8001314:	2000      	movs	r0, #0
 8001316:	f002 fff9 	bl	800430c <SEGGER_SYSVIEW_ShrinkId>
 800131a:	4601      	mov	r1, r0
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	2301      	movs	r3, #1
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	4613      	mov	r3, r2
 8001324:	460a      	mov	r2, r1
 8001326:	4621      	mov	r1, r4
 8001328:	205c      	movs	r0, #92	; 0x5c
 800132a:	f002 fa4b 	bl	80037c4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 800132e:	2300      	movs	r3, #0
 8001330:	e075      	b.n	800141e <xQueueReceive+0x1a6>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	2b00      	cmp	r3, #0
 8001336:	d106      	bne.n	8001346 <xQueueReceive+0xce>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fe21 	bl	8001f84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001342:	2301      	movs	r3, #1
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001346:	f7ff fb97 	bl	8000a78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800134a:	f000 fbdf 	bl	8001b0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800134e:	f7ff fb7b 	bl	8000a48 <vPortEnterCritical>
 8001352:	6a3b      	ldr	r3, [r7, #32]
 8001354:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001358:	b25b      	sxtb	r3, r3
 800135a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135e:	d103      	bne.n	8001368 <xQueueReceive+0xf0>
 8001360:	6a3b      	ldr	r3, [r7, #32]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001368:	6a3b      	ldr	r3, [r7, #32]
 800136a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800136e:	b25b      	sxtb	r3, r3
 8001370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001374:	d103      	bne.n	800137e <xQueueReceive+0x106>
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800137e:	f7ff fb7b 	bl	8000a78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001382:	1d3a      	adds	r2, r7, #4
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4611      	mov	r1, r2
 800138a:	4618      	mov	r0, r3
 800138c:	f000 fe10 	bl	8001fb0 <xTaskCheckForTimeOut>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d124      	bne.n	80013e0 <xQueueReceive+0x168>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001396:	6a38      	ldr	r0, [r7, #32]
 8001398:	f000 f92a 	bl	80015f0 <prvIsQueueEmpty>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d018      	beq.n	80013d4 <xQueueReceive+0x15c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80013a2:	6a3b      	ldr	r3, [r7, #32]
 80013a4:	3324      	adds	r3, #36	; 0x24
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4611      	mov	r1, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 fd5c 	bl	8001e68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80013b0:	6a38      	ldr	r0, [r7, #32]
 80013b2:	f000 f8cb 	bl	800154c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80013b6:	f000 fbb7 	bl	8001b28 <xTaskResumeAll>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f47f af65 	bne.w	800128c <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
 80013c2:	4b19      	ldr	r3, [pc, #100]	; (8001428 <xQueueReceive+0x1b0>)
 80013c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	f3bf 8f4f 	dsb	sy
 80013ce:	f3bf 8f6f 	isb	sy
 80013d2:	e75b      	b.n	800128c <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80013d4:	6a38      	ldr	r0, [r7, #32]
 80013d6:	f000 f8b9 	bl	800154c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80013da:	f000 fba5 	bl	8001b28 <xTaskResumeAll>
 80013de:	e755      	b.n	800128c <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80013e0:	6a38      	ldr	r0, [r7, #32]
 80013e2:	f000 f8b3 	bl	800154c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80013e6:	f000 fb9f 	bl	8001b28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80013ea:	6a38      	ldr	r0, [r7, #32]
 80013ec:	f000 f900 	bl	80015f0 <prvIsQueueEmpty>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f43f af4a 	beq.w	800128c <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80013f8:	6a3b      	ldr	r3, [r7, #32]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f002 ff86 	bl	800430c <SEGGER_SYSVIEW_ShrinkId>
 8001400:	4604      	mov	r4, r0
 8001402:	2000      	movs	r0, #0
 8001404:	f002 ff82 	bl	800430c <SEGGER_SYSVIEW_ShrinkId>
 8001408:	4601      	mov	r1, r0
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	2301      	movs	r3, #1
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	4613      	mov	r3, r2
 8001412:	460a      	mov	r2, r1
 8001414:	4621      	mov	r1, r4
 8001416:	205c      	movs	r0, #92	; 0x5c
 8001418:	f002 f9d4 	bl	80037c4 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800141c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800141e:	4618      	mov	r0, r3
 8001420:	372c      	adds	r7, #44	; 0x2c
 8001422:	46bd      	mov	sp, r7
 8001424:	bd90      	pop	{r4, r7, pc}
 8001426:	bf00      	nop
 8001428:	e000ed04 	.word	0xe000ed04

0800142c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001440:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10d      	bne.n	8001466 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d14d      	bne.n	80014ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	4618      	mov	r0, r3
 8001458:	f000 fed0 	bl	80021fc <xTaskPriorityDisinherit>
 800145c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	e043      	b.n	80014ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d119      	bne.n	80014a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6858      	ldr	r0, [r3, #4]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	461a      	mov	r2, r3
 8001476:	68b9      	ldr	r1, [r7, #8]
 8001478:	f003 fd65 	bl	8004f46 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	441a      	add	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	429a      	cmp	r2, r3
 8001494:	d32b      	bcc.n	80014ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	e026      	b.n	80014ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	68d8      	ldr	r0, [r3, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	461a      	mov	r2, r3
 80014aa:	68b9      	ldr	r1, [r7, #8]
 80014ac:	f003 fd4b 	bl	8004f46 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	68da      	ldr	r2, [r3, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	425b      	negs	r3, r3
 80014ba:	441a      	add	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d207      	bcs.n	80014dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	425b      	negs	r3, r3
 80014d6:	441a      	add	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d105      	bne.n	80014ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d002      	beq.n	80014ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80014f6:	697b      	ldr	r3, [r7, #20]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	2b00      	cmp	r3, #0
 8001510:	d018      	beq.n	8001544 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68da      	ldr	r2, [r3, #12]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	441a      	add	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68da      	ldr	r2, [r3, #12]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	429a      	cmp	r2, r3
 800152a:	d303      	bcc.n	8001534 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68d9      	ldr	r1, [r3, #12]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	461a      	mov	r2, r3
 800153e:	6838      	ldr	r0, [r7, #0]
 8001540:	f003 fd01 	bl	8004f46 <memcpy>
	}
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001554:	f7ff fa78 	bl	8000a48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800155e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001560:	e011      	b.n	8001586 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	2b00      	cmp	r3, #0
 8001568:	d012      	beq.n	8001590 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3324      	adds	r3, #36	; 0x24
 800156e:	4618      	mov	r0, r3
 8001570:	f000 fcb0 	bl	8001ed4 <xTaskRemoveFromEventList>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800157a:	f000 fd5f 	bl	800203c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
 8001580:	3b01      	subs	r3, #1
 8001582:	b2db      	uxtb	r3, r3
 8001584:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158a:	2b00      	cmp	r3, #0
 800158c:	dce9      	bgt.n	8001562 <prvUnlockQueue+0x16>
 800158e:	e000      	b.n	8001592 <prvUnlockQueue+0x46>
					break;
 8001590:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	22ff      	movs	r2, #255	; 0xff
 8001596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800159a:	f7ff fa6d 	bl	8000a78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800159e:	f7ff fa53 	bl	8000a48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80015aa:	e011      	b.n	80015d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d012      	beq.n	80015da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3310      	adds	r3, #16
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 fc8b 	bl	8001ed4 <xTaskRemoveFromEventList>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80015c4:	f000 fd3a 	bl	800203c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80015c8:	7bbb      	ldrb	r3, [r7, #14]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80015d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	dce9      	bgt.n	80015ac <prvUnlockQueue+0x60>
 80015d8:	e000      	b.n	80015dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80015da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	22ff      	movs	r2, #255	; 0xff
 80015e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80015e4:	f7ff fa48 	bl	8000a78 <vPortExitCritical>
}
 80015e8:	bf00      	nop
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80015f8:	f7ff fa26 	bl	8000a48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001600:	2b00      	cmp	r3, #0
 8001602:	d102      	bne.n	800160a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001604:	2301      	movs	r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	e001      	b.n	800160e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800160e:	f7ff fa33 	bl	8000a78 <vPortExitCritical>

	return xReturn;
 8001612:	68fb      	ldr	r3, [r7, #12]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001624:	f7ff fa10 	bl	8000a48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001630:	429a      	cmp	r2, r3
 8001632:	d102      	bne.n	800163a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001634:	2301      	movs	r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	e001      	b.n	800163e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800163e:	f7ff fa1b 	bl	8000a78 <vPortExitCritical>

	return xReturn;
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800165c:	f7ff f9f4 	bl	8000a48 <vPortEnterCritical>
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001666:	b25b      	sxtb	r3, r3
 8001668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800166c:	d103      	bne.n	8001676 <vQueueWaitForMessageRestricted+0x2a>
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800167c:	b25b      	sxtb	r3, r3
 800167e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001682:	d103      	bne.n	800168c <vQueueWaitForMessageRestricted+0x40>
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800168c:	f7ff f9f4 	bl	8000a78 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001694:	2b00      	cmp	r3, #0
 8001696:	d106      	bne.n	80016a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	3324      	adds	r3, #36	; 0x24
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	68b9      	ldr	r1, [r7, #8]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 fbf7 	bl	8001e94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80016a6:	6978      	ldr	r0, [r7, #20]
 80016a8:	f7ff ff50 	bl	800154c <prvUnlockQueue>
	}
 80016ac:	bf00      	nop
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08c      	sub	sp, #48	; 0x30
 80016b8:	af04      	add	r7, sp, #16
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	4613      	mov	r3, r2
 80016c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fa57 	bl	8000b7c <pvPortMalloc>
 80016ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00e      	beq.n	80016f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80016d6:	2054      	movs	r0, #84	; 0x54
 80016d8:	f7ff fa50 	bl	8000b7c <pvPortMalloc>
 80016dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	631a      	str	r2, [r3, #48]	; 0x30
 80016ea:	e005      	b.n	80016f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80016ec:	6978      	ldr	r0, [r7, #20]
 80016ee:	f7ff fadf 	bl	8000cb0 <vPortFree>
 80016f2:	e001      	b.n	80016f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d013      	beq.n	8001726 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80016fe:	88fa      	ldrh	r2, [r7, #6]
 8001700:	2300      	movs	r3, #0
 8001702:	9303      	str	r3, [sp, #12]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	9302      	str	r3, [sp, #8]
 8001708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	68b9      	ldr	r1, [r7, #8]
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 f80e 	bl	8001736 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800171a:	69f8      	ldr	r0, [r7, #28]
 800171c:	f000 f88a 	bl	8001834 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001720:	2301      	movs	r3, #1
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	e002      	b.n	800172c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800172c:	69bb      	ldr	r3, [r7, #24]
	}
 800172e:	4618      	mov	r0, r3
 8001730:	3720      	adds	r7, #32
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b086      	sub	sp, #24
 800173a:	af00      	add	r7, sp, #0
 800173c:	60f8      	str	r0, [r7, #12]
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
 8001742:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001746:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	461a      	mov	r2, r3
 800174e:	21a5      	movs	r1, #165	; 0xa5
 8001750:	f003 fc04 	bl	8004f5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800175e:	3b01      	subs	r3, #1
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	f023 0307 	bic.w	r3, r3, #7
 800176c:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d01f      	beq.n	80017b4 <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	e012      	b.n	80017a0 <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	4413      	add	r3, r2
 8001780:	7819      	ldrb	r1, [r3, #0]
 8001782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	4413      	add	r3, r2
 8001788:	3334      	adds	r3, #52	; 0x34
 800178a:	460a      	mov	r2, r1
 800178c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	4413      	add	r3, r2
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d006      	beq.n	80017a8 <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3301      	adds	r3, #1
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	2b0f      	cmp	r3, #15
 80017a4:	d9e9      	bls.n	800177a <prvInitialiseNewTask+0x44>
 80017a6:	e000      	b.n	80017aa <prvInitialiseNewTask+0x74>
			{
				break;
 80017a8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80017aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017b2:	e003      	b.n	80017bc <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80017b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d901      	bls.n	80017c6 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80017c2:	2304      	movs	r3, #4
 80017c4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80017c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c8:	6a3a      	ldr	r2, [r7, #32]
 80017ca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80017cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ce:	6a3a      	ldr	r2, [r7, #32]
 80017d0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80017d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d4:	2200      	movs	r2, #0
 80017d6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80017d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017da:	3304      	adds	r3, #4
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff f817 	bl	8000810 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80017e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e4:	3318      	adds	r3, #24
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff f812 	bl	8000810 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80017ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017f2:	6a3b      	ldr	r3, [r7, #32]
 80017f4:	f1c3 0205 	rsb	r2, r3, #5
 80017f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80017fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001800:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001804:	2200      	movs	r2, #0
 8001806:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	68f9      	ldr	r1, [r7, #12]
 8001814:	6938      	ldr	r0, [r7, #16]
 8001816:	f7ff f88b 	bl	8000930 <pxPortInitialiseStack>
 800181a:	4602      	mov	r2, r0
 800181c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800181e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	2b00      	cmp	r3, #0
 8001824:	d002      	beq.n	800182c <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800182a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800182c:	bf00      	nop
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001834:	b5b0      	push	{r4, r5, r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af02      	add	r7, sp, #8
 800183a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800183c:	f7ff f904 	bl	8000a48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001840:	4b39      	ldr	r3, [pc, #228]	; (8001928 <prvAddNewTaskToReadyList+0xf4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	3301      	adds	r3, #1
 8001846:	4a38      	ldr	r2, [pc, #224]	; (8001928 <prvAddNewTaskToReadyList+0xf4>)
 8001848:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800184a:	4b38      	ldr	r3, [pc, #224]	; (800192c <prvAddNewTaskToReadyList+0xf8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d109      	bne.n	8001866 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001852:	4a36      	ldr	r2, [pc, #216]	; (800192c <prvAddNewTaskToReadyList+0xf8>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001858:	4b33      	ldr	r3, [pc, #204]	; (8001928 <prvAddNewTaskToReadyList+0xf4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d110      	bne.n	8001882 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001860:	f000 fc12 	bl	8002088 <prvInitialiseTaskLists>
 8001864:	e00d      	b.n	8001882 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001866:	4b32      	ldr	r3, [pc, #200]	; (8001930 <prvAddNewTaskToReadyList+0xfc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d109      	bne.n	8001882 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800186e:	4b2f      	ldr	r3, [pc, #188]	; (800192c <prvAddNewTaskToReadyList+0xf8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	429a      	cmp	r2, r3
 800187a:	d802      	bhi.n	8001882 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800187c:	4a2b      	ldr	r2, [pc, #172]	; (800192c <prvAddNewTaskToReadyList+0xf8>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001882:	4b2c      	ldr	r3, [pc, #176]	; (8001934 <prvAddNewTaskToReadyList+0x100>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	3301      	adds	r3, #1
 8001888:	4a2a      	ldr	r2, [pc, #168]	; (8001934 <prvAddNewTaskToReadyList+0x100>)
 800188a:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d016      	beq.n	80018c0 <prvAddNewTaskToReadyList+0x8c>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4618      	mov	r0, r3
 8001896:	f002 fc0d 	bl	80040b4 <SEGGER_SYSVIEW_OnTaskCreate>
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	461d      	mov	r5, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	461c      	mov	r4, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	1ae3      	subs	r3, r4, r3
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	462b      	mov	r3, r5
 80018bc:	f001 f9ba 	bl	8002c34 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f002 fc7e 	bl	80041c4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	2201      	movs	r2, #1
 80018ce:	409a      	lsls	r2, r3
 80018d0:	4b19      	ldr	r3, [pc, #100]	; (8001938 <prvAddNewTaskToReadyList+0x104>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	4a18      	ldr	r2, [pc, #96]	; (8001938 <prvAddNewTaskToReadyList+0x104>)
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4a15      	ldr	r2, [pc, #84]	; (800193c <prvAddNewTaskToReadyList+0x108>)
 80018e8:	441a      	add	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3304      	adds	r3, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4610      	mov	r0, r2
 80018f2:	f7fe ff99 	bl	8000828 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80018f6:	f7ff f8bf 	bl	8000a78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <prvAddNewTaskToReadyList+0xfc>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00e      	beq.n	8001920 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <prvAddNewTaskToReadyList+0xf8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	429a      	cmp	r2, r3
 800190e:	d207      	bcs.n	8001920 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <prvAddNewTaskToReadyList+0x10c>)
 8001912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	f3bf 8f4f 	dsb	sy
 800191c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bdb0      	pop	{r4, r5, r7, pc}
 8001928:	20003a44 	.word	0x20003a44
 800192c:	2000396c 	.word	0x2000396c
 8001930:	20003a50 	.word	0x20003a50
 8001934:	20003a60 	.word	0x20003a60
 8001938:	20003a4c 	.word	0x20003a4c
 800193c:	20003970 	.word	0x20003970
 8001940:	e000ed04 	.word	0xe000ed04

08001944 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800194c:	f7ff f87c 	bl	8000a48 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d102      	bne.n	800195c <vTaskDelete+0x18>
 8001956:	4b3e      	ldr	r3, [pc, #248]	; (8001a50 <vTaskDelete+0x10c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	e000      	b.n	800195e <vTaskDelete+0x1a>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	3304      	adds	r3, #4
 8001964:	4618      	mov	r0, r3
 8001966:	f7fe ffba 	bl	80008de <uxListRemove>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d115      	bne.n	800199c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001974:	4937      	ldr	r1, [pc, #220]	; (8001a54 <vTaskDelete+0x110>)
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10a      	bne.n	800199c <vTaskDelete+0x58>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	2201      	movs	r2, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43da      	mvns	r2, r3
 8001992:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <vTaskDelete+0x114>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4013      	ands	r3, r2
 8001998:	4a2f      	ldr	r2, [pc, #188]	; (8001a58 <vTaskDelete+0x114>)
 800199a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d004      	beq.n	80019ae <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	3318      	adds	r3, #24
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe ff98 	bl	80008de <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80019ae:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <vTaskDelete+0x118>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	3301      	adds	r3, #1
 80019b4:	4a29      	ldr	r2, [pc, #164]	; (8001a5c <vTaskDelete+0x118>)
 80019b6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80019b8:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <vTaskDelete+0x10c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d118      	bne.n	80019f4 <vTaskDelete+0xb0>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3304      	adds	r3, #4
 80019c6:	4619      	mov	r1, r3
 80019c8:	4825      	ldr	r0, [pc, #148]	; (8001a60 <vTaskDelete+0x11c>)
 80019ca:	f7fe ff2d 	bl	8000828 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80019ce:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <vTaskDelete+0x120>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	3301      	adds	r3, #1
 80019d4:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <vTaskDelete+0x120>)
 80019d6:	6013      	str	r3, [r2, #0]

				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
				traceTASK_DELETE( pxTCB );
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4618      	mov	r0, r3
 80019dc:	f002 fc96 	bl	800430c <SEGGER_SYSVIEW_ShrinkId>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4619      	mov	r1, r3
 80019e4:	2022      	movs	r0, #34	; 0x22
 80019e6:	f001 fde1 	bl	80035ac <SEGGER_SYSVIEW_RecordU32>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f001 f989 	bl	8002d04 <SYSVIEW_DeleteTask>
 80019f2:	e016      	b.n	8001a22 <vTaskDelete+0xde>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80019f4:	4b1c      	ldr	r3, [pc, #112]	; (8001a68 <vTaskDelete+0x124>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	4a1b      	ldr	r2, [pc, #108]	; (8001a68 <vTaskDelete+0x124>)
 80019fc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f002 fc83 	bl	800430c <SEGGER_SYSVIEW_ShrinkId>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4619      	mov	r1, r3
 8001a0a:	2022      	movs	r0, #34	; 0x22
 8001a0c:	f001 fdce 	bl	80035ac <SEGGER_SYSVIEW_RecordU32>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f001 f976 	bl	8002d04 <SYSVIEW_DeleteTask>
				prvDeleteTCB( pxTCB );
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f000 fba1 	bl	8002160 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8001a1e:	f000 fbaf 	bl	8002180 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8001a22:	f7ff f829 	bl	8000a78 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <vTaskDelete+0x128>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00c      	beq.n	8001a48 <vTaskDelete+0x104>
		{
			if( pxTCB == pxCurrentTCB )
 8001a2e:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <vTaskDelete+0x10c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d107      	bne.n	8001a48 <vTaskDelete+0x104>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 8001a38:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <vTaskDelete+0x12c>)
 8001a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	f3bf 8f4f 	dsb	sy
 8001a44:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001a48:	bf00      	nop
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	2000396c 	.word	0x2000396c
 8001a54:	20003970 	.word	0x20003970
 8001a58:	20003a4c 	.word	0x20003a4c
 8001a5c:	20003a60 	.word	0x20003a60
 8001a60:	20003a18 	.word	0x20003a18
 8001a64:	20003a2c 	.word	0x20003a2c
 8001a68:	20003a44 	.word	0x20003a44
 8001a6c:	20003a50 	.word	0x20003a50
 8001a70:	e000ed04 	.word	0xe000ed04

08001a74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <vTaskStartScheduler+0x7c>)
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	2300      	movs	r3, #0
 8001a84:	2280      	movs	r2, #128	; 0x80
 8001a86:	491b      	ldr	r1, [pc, #108]	; (8001af4 <vTaskStartScheduler+0x80>)
 8001a88:	481b      	ldr	r0, [pc, #108]	; (8001af8 <vTaskStartScheduler+0x84>)
 8001a8a:	f7ff fe13 	bl	80016b4 <xTaskCreate>
 8001a8e:	6078      	str	r0, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d102      	bne.n	8001a9c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001a96:	f000 fdb3 	bl	8002600 <xTimerCreateTimerTask>
 8001a9a:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d122      	bne.n	8001ae8 <vTaskStartScheduler+0x74>
	__asm volatile
 8001aa2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001aa6:	f383 8811 	msr	BASEPRI, r3
 8001aaa:	f3bf 8f6f 	isb	sy
 8001aae:	f3bf 8f4f 	dsb	sy
 8001ab2:	603b      	str	r3, [r7, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <vTaskStartScheduler+0x88>)
 8001ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8001aba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001abc:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <vTaskStartScheduler+0x8c>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <vTaskStartScheduler+0x90>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <vTaskStartScheduler+0x94>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <vTaskStartScheduler+0x7c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d102      	bne.n	8001ada <vTaskStartScheduler+0x66>
 8001ad4:	f002 fad2 	bl	800407c <SEGGER_SYSVIEW_OnIdle>
 8001ad8:	e004      	b.n	8001ae4 <vTaskStartScheduler+0x70>
 8001ada:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <vTaskStartScheduler+0x94>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f002 fb2c 	bl	800413c <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001ae4:	f7fe ff90 	bl	8000a08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20003a68 	.word	0x20003a68
 8001af4:	080057c4 	.word	0x080057c4
 8001af8:	08002055 	.word	0x08002055
 8001afc:	20003a64 	.word	0x20003a64
 8001b00:	20003a50 	.word	0x20003a50
 8001b04:	20003a48 	.word	0x20003a48
 8001b08:	2000396c 	.word	0x2000396c

08001b0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <vTaskSuspendAll+0x18>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	3301      	adds	r3, #1
 8001b16:	4a03      	ldr	r2, [pc, #12]	; (8001b24 <vTaskSuspendAll+0x18>)
 8001b18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20003a6c 	.word	0x20003a6c

08001b28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001b36:	f7fe ff87 	bl	8000a48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001b3a:	4b3b      	ldr	r3, [pc, #236]	; (8001c28 <xTaskResumeAll+0x100>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	4a39      	ldr	r2, [pc, #228]	; (8001c28 <xTaskResumeAll+0x100>)
 8001b42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b44:	4b38      	ldr	r3, [pc, #224]	; (8001c28 <xTaskResumeAll+0x100>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d165      	bne.n	8001c18 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001b4c:	4b37      	ldr	r3, [pc, #220]	; (8001c2c <xTaskResumeAll+0x104>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d061      	beq.n	8001c18 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b54:	e032      	b.n	8001bbc <xTaskResumeAll+0x94>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b56:	4b36      	ldr	r3, [pc, #216]	; (8001c30 <xTaskResumeAll+0x108>)
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	3318      	adds	r3, #24
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe febb 	bl	80008de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe feb6 	bl	80008de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f002 fb25 	bl	80041c4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7e:	2201      	movs	r2, #1
 8001b80:	409a      	lsls	r2, r3
 8001b82:	4b2c      	ldr	r3, [pc, #176]	; (8001c34 <xTaskResumeAll+0x10c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	4a2a      	ldr	r2, [pc, #168]	; (8001c34 <xTaskResumeAll+0x10c>)
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4a27      	ldr	r2, [pc, #156]	; (8001c38 <xTaskResumeAll+0x110>)
 8001b9a:	441a      	add	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3304      	adds	r3, #4
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	f7fe fe40 	bl	8000828 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bac:	4b23      	ldr	r3, [pc, #140]	; (8001c3c <xTaskResumeAll+0x114>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d302      	bcc.n	8001bbc <xTaskResumeAll+0x94>
					{
						xYieldPending = pdTRUE;
 8001bb6:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <xTaskResumeAll+0x118>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <xTaskResumeAll+0x108>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1c8      	bne.n	8001b56 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <xTaskResumeAll+0xa6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001bca:	f000 fad9 	bl	8002180 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001bce:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <xTaskResumeAll+0x11c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d010      	beq.n	8001bfc <xTaskResumeAll+0xd4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001bda:	f000 f845 	bl	8001c68 <xTaskIncrementTick>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <xTaskResumeAll+0xc2>
							{
								xYieldPending = pdTRUE;
 8001be4:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <xTaskResumeAll+0x118>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3b01      	subs	r3, #1
 8001bee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f1      	bne.n	8001bda <xTaskResumeAll+0xb2>

						xPendedTicks = 0;
 8001bf6:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <xTaskResumeAll+0x11c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001bfc:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <xTaskResumeAll+0x118>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d009      	beq.n	8001c18 <xTaskResumeAll+0xf0>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001c04:	2301      	movs	r3, #1
 8001c06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <xTaskResumeAll+0x120>)
 8001c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	f3bf 8f4f 	dsb	sy
 8001c14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001c18:	f7fe ff2e 	bl	8000a78 <vPortExitCritical>

	return xAlreadyYielded;
 8001c1c:	68bb      	ldr	r3, [r7, #8]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20003a6c 	.word	0x20003a6c
 8001c2c:	20003a44 	.word	0x20003a44
 8001c30:	20003a04 	.word	0x20003a04
 8001c34:	20003a4c 	.word	0x20003a4c
 8001c38:	20003970 	.word	0x20003970
 8001c3c:	2000396c 	.word	0x2000396c
 8001c40:	20003a58 	.word	0x20003a58
 8001c44:	20003a54 	.word	0x20003a54
 8001c48:	e000ed04 	.word	0xe000ed04

08001c4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001c52:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <xTaskGetTickCount+0x18>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001c58:	687b      	ldr	r3, [r7, #4]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	20003a48 	.word	0x20003a48

08001c68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c72:	4b48      	ldr	r3, [pc, #288]	; (8001d94 <xTaskIncrementTick+0x12c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f040 8082 	bne.w	8001d80 <xTaskIncrementTick+0x118>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001c7c:	4b46      	ldr	r3, [pc, #280]	; (8001d98 <xTaskIncrementTick+0x130>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	3301      	adds	r3, #1
 8001c82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001c84:	4a44      	ldr	r2, [pc, #272]	; (8001d98 <xTaskIncrementTick+0x130>)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d110      	bne.n	8001cb2 <xTaskIncrementTick+0x4a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001c90:	4b42      	ldr	r3, [pc, #264]	; (8001d9c <xTaskIncrementTick+0x134>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	4b42      	ldr	r3, [pc, #264]	; (8001da0 <xTaskIncrementTick+0x138>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a40      	ldr	r2, [pc, #256]	; (8001d9c <xTaskIncrementTick+0x134>)
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	4a40      	ldr	r2, [pc, #256]	; (8001da0 <xTaskIncrementTick+0x138>)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	4b3f      	ldr	r3, [pc, #252]	; (8001da4 <xTaskIncrementTick+0x13c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	4a3e      	ldr	r2, [pc, #248]	; (8001da4 <xTaskIncrementTick+0x13c>)
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	f000 fa67 	bl	8002180 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001cb2:	4b3d      	ldr	r3, [pc, #244]	; (8001da8 <xTaskIncrementTick+0x140>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d34c      	bcc.n	8001d56 <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cbc:	4b37      	ldr	r3, [pc, #220]	; (8001d9c <xTaskIncrementTick+0x134>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d104      	bne.n	8001cd0 <xTaskIncrementTick+0x68>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cc6:	4b38      	ldr	r3, [pc, #224]	; (8001da8 <xTaskIncrementTick+0x140>)
 8001cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ccc:	601a      	str	r2, [r3, #0]
					break;
 8001cce:	e042      	b.n	8001d56 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cd0:	4b32      	ldr	r3, [pc, #200]	; (8001d9c <xTaskIncrementTick+0x134>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d203      	bcs.n	8001cf0 <xTaskIncrementTick+0x88>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001ce8:	4a2f      	ldr	r2, [pc, #188]	; (8001da8 <xTaskIncrementTick+0x140>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001cee:	e032      	b.n	8001d56 <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fdf2 	bl	80008de <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d004      	beq.n	8001d0c <xTaskIncrementTick+0xa4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	3318      	adds	r3, #24
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fde9 	bl	80008de <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f002 fa58 	bl	80041c4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	2201      	movs	r2, #1
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	4b23      	ldr	r3, [pc, #140]	; (8001dac <xTaskIncrementTick+0x144>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	4a22      	ldr	r2, [pc, #136]	; (8001dac <xTaskIncrementTick+0x144>)
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4a1f      	ldr	r2, [pc, #124]	; (8001db0 <xTaskIncrementTick+0x148>)
 8001d34:	441a      	add	r2, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	f7fe fd73 	bl	8000828 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d46:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <xTaskIncrementTick+0x14c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d3b5      	bcc.n	8001cbc <xTaskIncrementTick+0x54>
						{
							xSwitchRequired = pdTRUE;
 8001d50:	2301      	movs	r3, #1
 8001d52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d54:	e7b2      	b.n	8001cbc <xTaskIncrementTick+0x54>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001d56:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <xTaskIncrementTick+0x14c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d5c:	4914      	ldr	r1, [pc, #80]	; (8001db0 <xTaskIncrementTick+0x148>)
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	440b      	add	r3, r1
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d901      	bls.n	8001d72 <xTaskIncrementTick+0x10a>
			{
				xSwitchRequired = pdTRUE;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <xTaskIncrementTick+0x150>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d007      	beq.n	8001d8a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	e004      	b.n	8001d8a <xTaskIncrementTick+0x122>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001d80:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <xTaskIncrementTick+0x154>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	3301      	adds	r3, #1
 8001d86:	4a0d      	ldr	r2, [pc, #52]	; (8001dbc <xTaskIncrementTick+0x154>)
 8001d88:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001d8a:	697b      	ldr	r3, [r7, #20]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20003a6c 	.word	0x20003a6c
 8001d98:	20003a48 	.word	0x20003a48
 8001d9c:	200039fc 	.word	0x200039fc
 8001da0:	20003a00 	.word	0x20003a00
 8001da4:	20003a5c 	.word	0x20003a5c
 8001da8:	20003a64 	.word	0x20003a64
 8001dac:	20003a4c 	.word	0x20003a4c
 8001db0:	20003970 	.word	0x20003970
 8001db4:	2000396c 	.word	0x2000396c
 8001db8:	20003a58 	.word	0x20003a58
 8001dbc:	20003a54 	.word	0x20003a54

08001dc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001dc6:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <vTaskSwitchContext+0x90>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001dce:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <vTaskSwitchContext+0x94>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001dd4:	e038      	b.n	8001e48 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 8001dd6:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <vTaskSwitchContext+0x94>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ddc:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <vTaskSwitchContext+0x98>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	fab3 f383 	clz	r3, r3
 8001de8:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	f1c3 031f 	rsb	r3, r3, #31
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	4613      	mov	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4a17      	ldr	r2, [pc, #92]	; (8001e5c <vTaskSwitchContext+0x9c>)
 8001dfe:	4413      	add	r3, r2
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	3308      	adds	r3, #8
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d104      	bne.n	8001e22 <vTaskSwitchContext+0x62>
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4a0d      	ldr	r2, [pc, #52]	; (8001e60 <vTaskSwitchContext+0xa0>)
 8001e2a:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <vTaskSwitchContext+0xa0>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <vTaskSwitchContext+0xa4>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d102      	bne.n	8001e3e <vTaskSwitchContext+0x7e>
 8001e38:	f002 f920 	bl	800407c <SEGGER_SYSVIEW_OnIdle>
}
 8001e3c:	e004      	b.n	8001e48 <vTaskSwitchContext+0x88>
		traceTASK_SWITCHED_IN();
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <vTaskSwitchContext+0xa0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f002 f97a 	bl	800413c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20003a6c 	.word	0x20003a6c
 8001e54:	20003a58 	.word	0x20003a58
 8001e58:	20003a4c 	.word	0x20003a4c
 8001e5c:	20003970 	.word	0x20003970
 8001e60:	2000396c 	.word	0x2000396c
 8001e64:	20003a68 	.word	0x20003a68

08001e68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001e72:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <vTaskPlaceOnEventList+0x28>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	3318      	adds	r3, #24
 8001e78:	4619      	mov	r1, r3
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7fe fcf7 	bl	800086e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001e80:	2101      	movs	r1, #1
 8001e82:	6838      	ldr	r0, [r7, #0]
 8001e84:	f000 fb44 	bl	8002510 <prvAddCurrentTaskToDelayedList>
}
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	2000396c 	.word	0x2000396c

08001e94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <vTaskPlaceOnEventListRestricted+0x3c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	3318      	adds	r3, #24
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f7fe fcbd 	bl	8000828 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001eba:	2024      	movs	r0, #36	; 0x24
 8001ebc:	f001 fb58 	bl	8003570 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	68b8      	ldr	r0, [r7, #8]
 8001ec4:	f000 fb24 	bl	8002510 <prvAddCurrentTaskToDelayedList>
	}
 8001ec8:	bf00      	nop
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	2000396c 	.word	0x2000396c

08001ed4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	3318      	adds	r3, #24
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fcf8 	bl	80008de <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001eee:	4b1f      	ldr	r3, [pc, #124]	; (8001f6c <xTaskRemoveFromEventList+0x98>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d120      	bne.n	8001f38 <xTaskRemoveFromEventList+0x64>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fcef 	bl	80008de <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f002 f95e 	bl	80041c4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <xTaskRemoveFromEventList+0x9c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	4a16      	ldr	r2, [pc, #88]	; (8001f70 <xTaskRemoveFromEventList+0x9c>)
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <xTaskRemoveFromEventList+0xa0>)
 8001f28:	441a      	add	r2, r3
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4610      	mov	r0, r2
 8001f32:	f7fe fc79 	bl	8000828 <vListInsertEnd>
 8001f36:	e005      	b.n	8001f44 <xTaskRemoveFromEventList+0x70>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	3318      	adds	r3, #24
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	480e      	ldr	r0, [pc, #56]	; (8001f78 <xTaskRemoveFromEventList+0xa4>)
 8001f40:	f7fe fc72 	bl	8000828 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <xTaskRemoveFromEventList+0xa8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d905      	bls.n	8001f5e <xTaskRemoveFromEventList+0x8a>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001f52:	2301      	movs	r3, #1
 8001f54:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <xTaskRemoveFromEventList+0xac>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	e001      	b.n	8001f62 <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		xReturn = pdFALSE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8001f62:	68fb      	ldr	r3, [r7, #12]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20003a6c 	.word	0x20003a6c
 8001f70:	20003a4c 	.word	0x20003a4c
 8001f74:	20003970 	.word	0x20003970
 8001f78:	20003a04 	.word	0x20003a04
 8001f7c:	2000396c 	.word	0x2000396c
 8001f80:	20003a58 	.word	0x20003a58

08001f84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <vTaskInternalSetTimeOutState+0x24>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <vTaskInternalSetTimeOutState+0x28>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	605a      	str	r2, [r3, #4]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	20003a5c 	.word	0x20003a5c
 8001fac:	20003a48 	.word	0x20003a48

08001fb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8001fba:	f7fe fd45 	bl	8000a48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001fbe:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <xTaskCheckForTimeOut+0x84>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd6:	d102      	bne.n	8001fde <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	e023      	b.n	8002026 <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <xTaskCheckForTimeOut+0x88>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d007      	beq.n	8001ffa <xTaskCheckForTimeOut+0x4a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d802      	bhi.n	8001ffa <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	e015      	b.n	8002026 <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	429a      	cmp	r2, r3
 8002002:	d90b      	bls.n	800201c <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1ad2      	subs	r2, r2, r3
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff ffb7 	bl	8001f84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	e004      	b.n	8002026 <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002022:	2301      	movs	r3, #1
 8002024:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8002026:	f7fe fd27 	bl	8000a78 <vPortExitCritical>

	return xReturn;
 800202a:	697b      	ldr	r3, [r7, #20]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20003a48 	.word	0x20003a48
 8002038:	20003a5c 	.word	0x20003a5c

0800203c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002040:	4b03      	ldr	r3, [pc, #12]	; (8002050 <vTaskMissedYield+0x14>)
 8002042:	2201      	movs	r2, #1
 8002044:	601a      	str	r2, [r3, #0]
}
 8002046:	bf00      	nop
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	20003a58 	.word	0x20003a58

08002054 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800205c:	f000 f854 	bl	8002108 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002060:	4b07      	ldr	r3, [pc, #28]	; (8002080 <prvIdleTask+0x2c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d907      	bls.n	8002078 <prvIdleTask+0x24>
			{
				taskYIELD();
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <prvIdleTask+0x30>)
 800206a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	f3bf 8f4f 	dsb	sy
 8002074:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8002078:	f002 fd1a 	bl	8004ab0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800207c:	e7ee      	b.n	800205c <prvIdleTask+0x8>
 800207e:	bf00      	nop
 8002080:	20003970 	.word	0x20003970
 8002084:	e000ed04 	.word	0xe000ed04

08002088 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800208e:	2300      	movs	r3, #0
 8002090:	607b      	str	r3, [r7, #4]
 8002092:	e00c      	b.n	80020ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4a12      	ldr	r2, [pc, #72]	; (80020e8 <prvInitialiseTaskLists+0x60>)
 80020a0:	4413      	add	r3, r2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fb95 	bl	80007d2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3301      	adds	r3, #1
 80020ac:	607b      	str	r3, [r7, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d9ef      	bls.n	8002094 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80020b4:	480d      	ldr	r0, [pc, #52]	; (80020ec <prvInitialiseTaskLists+0x64>)
 80020b6:	f7fe fb8c 	bl	80007d2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80020ba:	480d      	ldr	r0, [pc, #52]	; (80020f0 <prvInitialiseTaskLists+0x68>)
 80020bc:	f7fe fb89 	bl	80007d2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80020c0:	480c      	ldr	r0, [pc, #48]	; (80020f4 <prvInitialiseTaskLists+0x6c>)
 80020c2:	f7fe fb86 	bl	80007d2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80020c6:	480c      	ldr	r0, [pc, #48]	; (80020f8 <prvInitialiseTaskLists+0x70>)
 80020c8:	f7fe fb83 	bl	80007d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80020cc:	480b      	ldr	r0, [pc, #44]	; (80020fc <prvInitialiseTaskLists+0x74>)
 80020ce:	f7fe fb80 	bl	80007d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <prvInitialiseTaskLists+0x78>)
 80020d4:	4a05      	ldr	r2, [pc, #20]	; (80020ec <prvInitialiseTaskLists+0x64>)
 80020d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80020d8:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <prvInitialiseTaskLists+0x7c>)
 80020da:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <prvInitialiseTaskLists+0x68>)
 80020dc:	601a      	str	r2, [r3, #0]
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20003970 	.word	0x20003970
 80020ec:	200039d4 	.word	0x200039d4
 80020f0:	200039e8 	.word	0x200039e8
 80020f4:	20003a04 	.word	0x20003a04
 80020f8:	20003a18 	.word	0x20003a18
 80020fc:	20003a30 	.word	0x20003a30
 8002100:	200039fc 	.word	0x200039fc
 8002104:	20003a00 	.word	0x20003a00

08002108 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800210e:	e019      	b.n	8002144 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002110:	f7fe fc9a 	bl	8000a48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <prvCheckTasksWaitingTermination+0x4c>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3304      	adds	r3, #4
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe fbdc 	bl	80008de <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <prvCheckTasksWaitingTermination+0x50>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	3b01      	subs	r3, #1
 800212c:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <prvCheckTasksWaitingTermination+0x50>)
 800212e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002130:	4b0a      	ldr	r3, [pc, #40]	; (800215c <prvCheckTasksWaitingTermination+0x54>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	3b01      	subs	r3, #1
 8002136:	4a09      	ldr	r2, [pc, #36]	; (800215c <prvCheckTasksWaitingTermination+0x54>)
 8002138:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800213a:	f7fe fc9d 	bl	8000a78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f80e 	bl	8002160 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <prvCheckTasksWaitingTermination+0x54>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1e1      	bne.n	8002110 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20003a18 	.word	0x20003a18
 8002158:	20003a44 	.word	0x20003a44
 800215c:	20003a2c 	.word	0x20003a2c

08002160 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe fd9f 	bl	8000cb0 <vPortFree>
			vPortFree( pxTCB );
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7fe fd9c 	bl	8000cb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002186:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <prvResetNextTaskUnblockTime+0x38>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d104      	bne.n	800219a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002190:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <prvResetNextTaskUnblockTime+0x3c>)
 8002192:	f04f 32ff 	mov.w	r2, #4294967295
 8002196:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002198:	e008      	b.n	80021ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800219a:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <prvResetNextTaskUnblockTime+0x38>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	4a04      	ldr	r2, [pc, #16]	; (80021bc <prvResetNextTaskUnblockTime+0x3c>)
 80021aa:	6013      	str	r3, [r2, #0]
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	200039fc 	.word	0x200039fc
 80021bc:	20003a64 	.word	0x20003a64

080021c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <xTaskGetSchedulerState+0x34>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d102      	bne.n	80021d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80021ce:	2301      	movs	r3, #1
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	e008      	b.n	80021e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021d4:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <xTaskGetSchedulerState+0x38>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d102      	bne.n	80021e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80021dc:	2302      	movs	r3, #2
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	e001      	b.n	80021e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80021e6:	687b      	ldr	r3, [r7, #4]
	}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	20003a50 	.word	0x20003a50
 80021f8:	20003a6c 	.word	0x20003a6c

080021fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d054      	beq.n	80022bc <xTaskPriorityDisinherit+0xc0>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002216:	1e5a      	subs	r2, r3, #1
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002224:	429a      	cmp	r2, r3
 8002226:	d049      	beq.n	80022bc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800222c:	2b00      	cmp	r3, #0
 800222e:	d145      	bne.n	80022bc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	3304      	adds	r3, #4
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe fb52 	bl	80008de <uxListRemove>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d115      	bne.n	800226c <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002244:	4920      	ldr	r1, [pc, #128]	; (80022c8 <xTaskPriorityDisinherit+0xcc>)
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	440b      	add	r3, r1
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10a      	bne.n	800226c <xTaskPriorityDisinherit+0x70>
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	2201      	movs	r2, #1
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43da      	mvns	r2, r3
 8002262:	4b1a      	ldr	r3, [pc, #104]	; (80022cc <xTaskPriorityDisinherit+0xd0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4013      	ands	r3, r2
 8002268:	4a18      	ldr	r2, [pc, #96]	; (80022cc <xTaskPriorityDisinherit+0xd0>)
 800226a:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4619      	mov	r1, r3
 8002270:	204a      	movs	r0, #74	; 0x4a
 8002272:	f001 f99b 	bl	80035ac <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	f1c3 0205 	rsb	r2, r3, #5
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	2201      	movs	r2, #1
 8002290:	409a      	lsls	r2, r3
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <xTaskPriorityDisinherit+0xd0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4313      	orrs	r3, r2
 8002298:	4a0c      	ldr	r2, [pc, #48]	; (80022cc <xTaskPriorityDisinherit+0xd0>)
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4a07      	ldr	r2, [pc, #28]	; (80022c8 <xTaskPriorityDisinherit+0xcc>)
 80022aa:	441a      	add	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	3304      	adds	r3, #4
 80022b0:	4619      	mov	r1, r3
 80022b2:	4610      	mov	r0, r2
 80022b4:	f7fe fab8 	bl	8000828 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80022b8:	2301      	movs	r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80022bc:	68fb      	ldr	r3, [r7, #12]
	}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20003970 	.word	0x20003970
 80022cc:	20003a4c 	.word	0x20003a4c

080022d0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af02      	add	r7, sp, #8
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80022de:	f7fe fbb3 	bl	8000a48 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80022e2:	4b2b      	ldr	r3, [pc, #172]	; (8002390 <xTaskNotifyWait+0xc0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d01a      	beq.n	8002326 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80022f0:	4b27      	ldr	r3, [pc, #156]	; (8002390 <xTaskNotifyWait+0xc0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	43d2      	mvns	r2, r2
 80022fa:	400a      	ands	r2, r1
 80022fc:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80022fe:	4b24      	ldr	r3, [pc, #144]	; (8002390 <xTaskNotifyWait+0xc0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00b      	beq.n	8002326 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800230e:	2101      	movs	r1, #1
 8002310:	6838      	ldr	r0, [r7, #0]
 8002312:	f000 f8fd 	bl	8002510 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8002316:	4b1f      	ldr	r3, [pc, #124]	; (8002394 <xTaskNotifyWait+0xc4>)
 8002318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	f3bf 8f4f 	dsb	sy
 8002322:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8002326:	f7fe fba7 	bl	8000a78 <vPortExitCritical>

		taskENTER_CRITICAL();
 800232a:	f7fe fb8d 	bl	8000a48 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	4613      	mov	r3, r2
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	68f9      	ldr	r1, [r7, #12]
 800233a:	2040      	movs	r0, #64	; 0x40
 800233c:	f001 fa42 	bl	80037c4 <SEGGER_SYSVIEW_RecordU32x4>

			if( pulNotificationValue != NULL )
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d004      	beq.n	8002350 <xTaskNotifyWait+0x80>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8002346:	4b12      	ldr	r3, [pc, #72]	; (8002390 <xTaskNotifyWait+0xc0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <xTaskNotifyWait+0xc0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d002      	beq.n	8002364 <xTaskNotifyWait+0x94>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	e008      	b.n	8002376 <xTaskNotifyWait+0xa6>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8002364:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <xTaskNotifyWait+0xc0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	43d2      	mvns	r2, r2
 800236e:	400a      	ands	r2, r1
 8002370:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8002372:	2301      	movs	r3, #1
 8002374:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <xTaskNotifyWait+0xc0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8002380:	f7fe fb7a 	bl	8000a78 <vPortExitCritical>

		return xReturn;
 8002384:	697b      	ldr	r3, [r7, #20]
	}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	2000396c 	.word	0x2000396c
 8002394:	e000ed04 	.word	0xe000ed04

08002398 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08e      	sub	sp, #56	; 0x38
 800239c:	af02      	add	r7, sp, #8
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	4613      	mov	r3, r2
 80023a6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80023a8:	2301      	movs	r3, #1
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm volatile
 80023b0:	f3ef 8211 	mrs	r2, BASEPRI
 80023b4:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80023b8:	f383 8811 	msr	BASEPRI, r3
 80023bc:	f3bf 8f6f 	isb	sy
 80023c0:	f3bf 8f4f 	dsb	sy
 80023c4:	61fa      	str	r2, [r7, #28]
 80023c6:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80023c8:	69fb      	ldr	r3, [r7, #28]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
		{
			if( pulPreviousNotificationValue != NULL )
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <xTaskGenericNotifyFromISR+0x42>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80023d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80023da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80023e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d828      	bhi.n	8002444 <xTaskGenericNotifyFromISR+0xac>
 80023f2:	a201      	add	r2, pc, #4	; (adr r2, 80023f8 <xTaskGenericNotifyFromISR+0x60>)
 80023f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f8:	08002445 	.word	0x08002445
 80023fc:	0800240d 	.word	0x0800240d
 8002400:	0800241b 	.word	0x0800241b
 8002404:	08002427 	.word	0x08002427
 8002408:	0800242f 	.word	0x0800242f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800240c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	431a      	orrs	r2, r3
 8002414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002416:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8002418:	e015      	b.n	8002446 <xTaskGenericNotifyFromISR+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800241a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002422:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8002424:	e00f      	b.n	8002446 <xTaskGenericNotifyFromISR+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8002426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800242c:	e00b      	b.n	8002446 <xTaskGenericNotifyFromISR+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800242e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002432:	2b02      	cmp	r3, #2
 8002434:	d003      	beq.n	800243e <xTaskGenericNotifyFromISR+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8002436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800243c:	e003      	b.n	8002446 <xTaskGenericNotifyFromISR+0xae>
						xReturn = pdFAIL;
 800243e:	2300      	movs	r3, #0
 8002440:	62fb      	str	r3, [r7, #44]	; 0x2c
					break;
 8002442:	e000      	b.n	8002446 <xTaskGenericNotifyFromISR+0xae>
				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
					break;
 8002444:	bf00      	nop
			}

			traceTASK_NOTIFY_FROM_ISR();
 8002446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002448:	4618      	mov	r0, r3
 800244a:	f001 ff5f 	bl	800430c <SEGGER_SYSVIEW_ShrinkId>
 800244e:	79f9      	ldrb	r1, [r7, #7]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002454:	9201      	str	r2, [sp, #4]
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	460b      	mov	r3, r1
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	4601      	mov	r1, r0
 800245e:	203f      	movs	r0, #63	; 0x3f
 8002460:	f001 fa42 	bl	80038e8 <SEGGER_SYSVIEW_RecordU32x5>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002464:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002468:	2b01      	cmp	r3, #1
 800246a:	d13a      	bne.n	80024e2 <xTaskGenericNotifyFromISR+0x14a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800246c:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <xTaskGenericNotifyFromISR+0x160>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d120      	bne.n	80024b6 <xTaskGenericNotifyFromISR+0x11e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002476:	3304      	adds	r3, #4
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe fa30 	bl	80008de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	4618      	mov	r0, r3
 8002482:	f001 fe9f 	bl	80041c4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248a:	2201      	movs	r2, #1
 800248c:	409a      	lsls	r2, r3
 800248e:	4b1b      	ldr	r3, [pc, #108]	; (80024fc <xTaskGenericNotifyFromISR+0x164>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4313      	orrs	r3, r2
 8002494:	4a19      	ldr	r2, [pc, #100]	; (80024fc <xTaskGenericNotifyFromISR+0x164>)
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4a16      	ldr	r2, [pc, #88]	; (8002500 <xTaskGenericNotifyFromISR+0x168>)
 80024a6:	441a      	add	r2, r3
 80024a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024aa:	3304      	adds	r3, #4
 80024ac:	4619      	mov	r1, r3
 80024ae:	4610      	mov	r0, r2
 80024b0:	f7fe f9ba 	bl	8000828 <vListInsertEnd>
 80024b4:	e005      	b.n	80024c2 <xTaskGenericNotifyFromISR+0x12a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80024b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b8:	3318      	adds	r3, #24
 80024ba:	4619      	mov	r1, r3
 80024bc:	4811      	ldr	r0, [pc, #68]	; (8002504 <xTaskGenericNotifyFromISR+0x16c>)
 80024be:	f7fe f9b3 	bl	8000828 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80024c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c6:	4b10      	ldr	r3, [pc, #64]	; (8002508 <xTaskGenericNotifyFromISR+0x170>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d908      	bls.n	80024e2 <xTaskGenericNotifyFromISR+0x14a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80024d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <xTaskGenericNotifyFromISR+0x144>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80024d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d8:	2201      	movs	r2, #1
 80024da:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <xTaskGenericNotifyFromISR+0x174>)
 80024de:	2201      	movs	r2, #1
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	617b      	str	r3, [r7, #20]
	__asm volatile
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80024ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3730      	adds	r7, #48	; 0x30
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20003a6c 	.word	0x20003a6c
 80024fc:	20003a4c 	.word	0x20003a4c
 8002500:	20003970 	.word	0x20003970
 8002504:	20003a04 	.word	0x20003a04
 8002508:	2000396c 	.word	0x2000396c
 800250c:	20003a58 	.word	0x20003a58

08002510 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800251a:	4b32      	ldr	r3, [pc, #200]	; (80025e4 <prvAddCurrentTaskToDelayedList+0xd4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002520:	4b31      	ldr	r3, [pc, #196]	; (80025e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	3304      	adds	r3, #4
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe f9d9 	bl	80008de <uxListRemove>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10b      	bne.n	800254a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002532:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002538:	2201      	movs	r2, #1
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43da      	mvns	r2, r3
 8002540:	4b2a      	ldr	r3, [pc, #168]	; (80025ec <prvAddCurrentTaskToDelayedList+0xdc>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4013      	ands	r3, r2
 8002546:	4a29      	ldr	r2, [pc, #164]	; (80025ec <prvAddCurrentTaskToDelayedList+0xdc>)
 8002548:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002550:	d110      	bne.n	8002574 <prvAddCurrentTaskToDelayedList+0x64>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00d      	beq.n	8002574 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002558:	4b23      	ldr	r3, [pc, #140]	; (80025e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	211b      	movs	r1, #27
 800255e:	4618      	mov	r0, r3
 8002560:	f001 fe74 	bl	800424c <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002564:	4b20      	ldr	r3, [pc, #128]	; (80025e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	3304      	adds	r3, #4
 800256a:	4619      	mov	r1, r3
 800256c:	4820      	ldr	r0, [pc, #128]	; (80025f0 <prvAddCurrentTaskToDelayedList+0xe0>)
 800256e:	f7fe f95b 	bl	8000828 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002572:	e032      	b.n	80025da <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800257c:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	429a      	cmp	r2, r3
 800258a:	d20f      	bcs.n	80025ac <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800258c:	4b16      	ldr	r3, [pc, #88]	; (80025e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2104      	movs	r1, #4
 8002592:	4618      	mov	r0, r3
 8002594:	f001 fe5a 	bl	800424c <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002598:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <prvAddCurrentTaskToDelayedList+0xe4>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	3304      	adds	r3, #4
 80025a2:	4619      	mov	r1, r3
 80025a4:	4610      	mov	r0, r2
 80025a6:	f7fe f962 	bl	800086e <vListInsert>
}
 80025aa:	e016      	b.n	80025da <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 80025ac:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2104      	movs	r1, #4
 80025b2:	4618      	mov	r0, r3
 80025b4:	f001 fe4a 	bl	800424c <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80025b8:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	3304      	adds	r3, #4
 80025c2:	4619      	mov	r1, r3
 80025c4:	4610      	mov	r0, r2
 80025c6:	f7fe f952 	bl	800086e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80025ca:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <prvAddCurrentTaskToDelayedList+0xec>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d202      	bcs.n	80025da <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 80025d4:	4a09      	ldr	r2, [pc, #36]	; (80025fc <prvAddCurrentTaskToDelayedList+0xec>)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	6013      	str	r3, [r2, #0]
}
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20003a48 	.word	0x20003a48
 80025e8:	2000396c 	.word	0x2000396c
 80025ec:	20003a4c 	.word	0x20003a4c
 80025f0:	20003a30 	.word	0x20003a30
 80025f4:	20003a00 	.word	0x20003a00
 80025f8:	200039fc 	.word	0x200039fc
 80025fc:	20003a64 	.word	0x20003a64

08002600 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8002606:	2300      	movs	r3, #0
 8002608:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800260a:	f000 facd 	bl	8002ba8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800260e:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <xTimerCreateTimerTask+0x38>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <xTimerCreateTimerTask+0x3c>)
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	2304      	movs	r3, #4
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	2300      	movs	r3, #0
 8002620:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002624:	4906      	ldr	r1, [pc, #24]	; (8002640 <xTimerCreateTimerTask+0x40>)
 8002626:	4807      	ldr	r0, [pc, #28]	; (8002644 <xTimerCreateTimerTask+0x44>)
 8002628:	f7ff f844 	bl	80016b4 <xTaskCreate>
 800262c:	6078      	str	r0, [r7, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 800262e:	687b      	ldr	r3, [r7, #4]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20003aa0 	.word	0x20003aa0
 800263c:	20003aa4 	.word	0x20003aa4
 8002640:	080057cc 	.word	0x080057cc
 8002644:	080027e5 	.word	0x080027e5

08002648 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af02      	add	r7, sp, #8
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8002656:	2028      	movs	r0, #40	; 0x28
 8002658:	f7fe fa90 	bl	8000b7c <pvPortMalloc>
 800265c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00d      	beq.n	8002680 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68b9      	ldr	r1, [r7, #8]
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 f805 	bl	800268a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8002680:	697b      	ldr	r3, [r7, #20]
	}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b084      	sub	sp, #16
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );

	if( pxNewTimer != NULL )
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d01e      	beq.n	80026dc <prvInitialiseNewTimer+0x52>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800269e:	f000 fa83 	bl	8002ba8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3304      	adds	r3, #4
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe f8a6 	bl	8000810 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d008      	beq.n	80026dc <prvInitialiseNewTimer+0x52>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026d0:	f043 0304 	orr.w	r3, r3, #4
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80026dc:	bf00      	nop
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80026f6:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <xTimerGenericCommand+0x7c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d02a      	beq.n	8002754 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b05      	cmp	r3, #5
 800270e:	dc18      	bgt.n	8002742 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002710:	f7ff fd56 	bl	80021c0 <xTaskGetSchedulerState>
 8002714:	4603      	mov	r3, r0
 8002716:	2b02      	cmp	r3, #2
 8002718:	d109      	bne.n	800272e <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800271a:	4b11      	ldr	r3, [pc, #68]	; (8002760 <xTimerGenericCommand+0x7c>)
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	f107 0110 	add.w	r1, r7, #16
 8002722:	2300      	movs	r3, #0
 8002724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002726:	f7fe fc65 	bl	8000ff4 <xQueueGenericSend>
 800272a:	61f8      	str	r0, [r7, #28]
 800272c:	e012      	b.n	8002754 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800272e:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <xTimerGenericCommand+0x7c>)
 8002730:	6818      	ldr	r0, [r3, #0]
 8002732:	f107 0110 	add.w	r1, r7, #16
 8002736:	2300      	movs	r3, #0
 8002738:	2200      	movs	r2, #0
 800273a:	f7fe fc5b 	bl	8000ff4 <xQueueGenericSend>
 800273e:	61f8      	str	r0, [r7, #28]
 8002740:	e008      	b.n	8002754 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002742:	4b07      	ldr	r3, [pc, #28]	; (8002760 <xTimerGenericCommand+0x7c>)
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	f107 0110 	add.w	r1, r7, #16
 800274a:	2300      	movs	r3, #0
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	f7fe fd23 	bl	8001198 <xQueueGenericSendFromISR>
 8002752:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002754:	69fb      	ldr	r3, [r7, #28]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3720      	adds	r7, #32
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20003aa0 	.word	0x20003aa0

08002764 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af02      	add	r7, sp, #8
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800276e:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <prvProcessExpiredTimer+0x7c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3304      	adds	r3, #4
 800277c:	4618      	mov	r0, r3
 800277e:	f7fe f8ae 	bl	80008de <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d015      	beq.n	80027bc <prvProcessExpiredTimer+0x58>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	699a      	ldr	r2, [r3, #24]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	18d1      	adds	r1, r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 f8c3 	bl	8002928 <prvInsertTimerInActiveList>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d012      	beq.n	80027ce <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80027a8:	2300      	movs	r3, #0
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2300      	movs	r3, #0
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	2100      	movs	r1, #0
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f7ff ff96 	bl	80026e4 <xTimerGenericCommand>
 80027b8:	60b8      	str	r0, [r7, #8]
 80027ba:	e008      	b.n	80027ce <prvProcessExpiredTimer+0x6a>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027c2:	f023 0301 	bic.w	r3, r3, #1
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	4798      	blx	r3
}
 80027d6:	bf00      	nop
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20003a98 	.word	0x20003a98

080027e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80027ec:	f107 0308 	add.w	r3, r7, #8
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 f857 	bl	80028a4 <prvGetNextExpireTime>
 80027f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	4619      	mov	r1, r3
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 f803 	bl	8002808 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002802:	f000 f8d3 	bl	80029ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002806:	e7f1      	b.n	80027ec <prvTimerTask+0x8>

08002808 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002812:	f7ff f97b 	bl	8001b0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002816:	f107 0308 	add.w	r3, r7, #8
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f864 	bl	80028e8 <prvSampleTimeNow>
 8002820:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d130      	bne.n	800288a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10a      	bne.n	8002844 <prvProcessTimerOrBlockTask+0x3c>
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	429a      	cmp	r2, r3
 8002834:	d806      	bhi.n	8002844 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002836:	f7ff f977 	bl	8001b28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800283a:	68f9      	ldr	r1, [r7, #12]
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff ff91 	bl	8002764 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002842:	e024      	b.n	800288e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d008      	beq.n	800285c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800284a:	4b13      	ldr	r3, [pc, #76]	; (8002898 <prvProcessTimerOrBlockTask+0x90>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <prvProcessTimerOrBlockTask+0x50>
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <prvProcessTimerOrBlockTask+0x52>
 8002858:	2300      	movs	r3, #0
 800285a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800285c:	4b0f      	ldr	r3, [pc, #60]	; (800289c <prvProcessTimerOrBlockTask+0x94>)
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	4619      	mov	r1, r3
 800286a:	f7fe feef 	bl	800164c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800286e:	f7ff f95b 	bl	8001b28 <xTaskResumeAll>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10a      	bne.n	800288e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002878:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <prvProcessTimerOrBlockTask+0x98>)
 800287a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	f3bf 8f6f 	isb	sy
}
 8002888:	e001      	b.n	800288e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800288a:	f7ff f94d 	bl	8001b28 <xTaskResumeAll>
}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20003a9c 	.word	0x20003a9c
 800289c:	20003aa0 	.word	0x20003aa0
 80028a0:	e000ed04 	.word	0xe000ed04

080028a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80028ac:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <prvGetNextExpireTime+0x40>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <prvGetNextExpireTime+0x16>
 80028b6:	2201      	movs	r2, #1
 80028b8:	e000      	b.n	80028bc <prvGetNextExpireTime+0x18>
 80028ba:	2200      	movs	r2, #0
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d105      	bne.n	80028d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <prvGetNextExpireTime+0x40>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	e001      	b.n	80028d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80028d8:	68fb      	ldr	r3, [r7, #12]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	20003a98 	.word	0x20003a98

080028e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80028f0:	f7ff f9ac 	bl	8001c4c <xTaskGetTickCount>
 80028f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80028f6:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <prvSampleTimeNow+0x3c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d205      	bcs.n	800290c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002900:	f000 f8fc 	bl	8002afc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	e002      	b.n	8002912 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002912:	4a04      	ldr	r2, [pc, #16]	; (8002924 <prvSampleTimeNow+0x3c>)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002918:	68fb      	ldr	r3, [r7, #12]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20003aa8 	.word	0x20003aa8

08002928 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	429a      	cmp	r2, r3
 800294c:	d812      	bhi.n	8002974 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	1ad2      	subs	r2, r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	429a      	cmp	r2, r3
 800295a:	d302      	bcc.n	8002962 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800295c:	2301      	movs	r3, #1
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	e01b      	b.n	800299a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <prvInsertTimerInActiveList+0x7c>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	3304      	adds	r3, #4
 800296a:	4619      	mov	r1, r3
 800296c:	4610      	mov	r0, r2
 800296e:	f7fd ff7e 	bl	800086e <vListInsert>
 8002972:	e012      	b.n	800299a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d206      	bcs.n	800298a <prvInsertTimerInActiveList+0x62>
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d302      	bcc.n	800298a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002984:	2301      	movs	r3, #1
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	e007      	b.n	800299a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800298a:	4b07      	ldr	r3, [pc, #28]	; (80029a8 <prvInsertTimerInActiveList+0x80>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	3304      	adds	r3, #4
 8002992:	4619      	mov	r1, r3
 8002994:	4610      	mov	r0, r2
 8002996:	f7fd ff6a 	bl	800086e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800299a:	697b      	ldr	r3, [r7, #20]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	20003a9c 	.word	0x20003a9c
 80029a8:	20003a98 	.word	0x20003a98

080029ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08a      	sub	sp, #40	; 0x28
 80029b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80029b2:	e090      	b.n	8002ad6 <prvProcessReceivedCommands+0x12a>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f2c0 808d 	blt.w	8002ad6 <prvProcessReceivedCommands+0x12a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d004      	beq.n	80029d2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	3304      	adds	r3, #4
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd ff86 	bl	80008de <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80029d2:	1d3b      	adds	r3, r7, #4
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff87 	bl	80028e8 <prvSampleTimeNow>
 80029da:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b09      	cmp	r3, #9
 80029e0:	d878      	bhi.n	8002ad4 <prvProcessReceivedCommands+0x128>
 80029e2:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <prvProcessReceivedCommands+0x3c>)
 80029e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e8:	08002a11 	.word	0x08002a11
 80029ec:	08002a11 	.word	0x08002a11
 80029f0:	08002a11 	.word	0x08002a11
 80029f4:	08002a6b 	.word	0x08002a6b
 80029f8:	08002a7f 	.word	0x08002a7f
 80029fc:	08002aab 	.word	0x08002aab
 8002a00:	08002a11 	.word	0x08002a11
 8002a04:	08002a11 	.word	0x08002a11
 8002a08:	08002a6b 	.word	0x08002a6b
 8002a0c:	08002a7f 	.word	0x08002a7f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	18d1      	adds	r1, r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	69f8      	ldr	r0, [r7, #28]
 8002a30:	f7ff ff7a 	bl	8002928 <prvInsertTimerInActiveList>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d04d      	beq.n	8002ad6 <prvProcessReceivedCommands+0x12a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	69f8      	ldr	r0, [r7, #28]
 8002a40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d042      	beq.n	8002ad6 <prvProcessReceivedCommands+0x12a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	441a      	add	r2, r3
 8002a58:	2300      	movs	r3, #0
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	2100      	movs	r1, #0
 8002a60:	69f8      	ldr	r0, [r7, #28]
 8002a62:	f7ff fe3f 	bl	80026e4 <xTimerGenericCommand>
 8002a66:	6178      	str	r0, [r7, #20]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 8002a68:	e035      	b.n	8002ad6 <prvProcessReceivedCommands+0x12a>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a70:	f023 0301 	bic.w	r3, r3, #1
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8002a7c:	e02b      	b.n	8002ad6 <prvProcessReceivedCommands+0x12a>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	699a      	ldr	r2, [r3, #24]
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	18d1      	adds	r1, r2, r3
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	69f8      	ldr	r0, [r7, #28]
 8002aa4:	f7ff ff40 	bl	8002928 <prvInsertTimerInActiveList>
					break;
 8002aa8:	e015      	b.n	8002ad6 <prvProcessReceivedCommands+0x12a>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d103      	bne.n	8002ac0 <prvProcessReceivedCommands+0x114>
						{
							vPortFree( pxTimer );
 8002ab8:	69f8      	ldr	r0, [r7, #28]
 8002aba:	f7fe f8f9 	bl	8000cb0 <vPortFree>
 8002abe:	e00a      	b.n	8002ad6 <prvProcessReceivedCommands+0x12a>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ac6:	f023 0301 	bic.w	r3, r3, #1
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002ad2:	e000      	b.n	8002ad6 <prvProcessReceivedCommands+0x12a>

				default	:
					/* Don't expect to get here. */
					break;
 8002ad4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002ad6:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <prvProcessReceivedCommands+0x14c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f107 0108 	add.w	r1, r7, #8
 8002ade:	2200      	movs	r2, #0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fe fbc9 	bl	8001278 <xQueueReceive>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f47f af63 	bne.w	80029b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8002aee:	bf00      	nop
 8002af0:	3720      	adds	r7, #32
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20003aa0 	.word	0x20003aa0

08002afc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002b02:	e03a      	b.n	8002b7a <prvSwitchTimerLists+0x7e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002b04:	4b26      	ldr	r3, [pc, #152]	; (8002ba0 <prvSwitchTimerLists+0xa4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b0e:	4b24      	ldr	r3, [pc, #144]	; (8002ba0 <prvSwitchTimerLists+0xa4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fd fede 	bl	80008de <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	6938      	ldr	r0, [r7, #16]
 8002b28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d020      	beq.n	8002b7a <prvSwitchTimerLists+0x7e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	699a      	ldr	r2, [r3, #24]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	4413      	add	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d90e      	bls.n	8002b68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <prvSwitchTimerLists+0xa4>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4610      	mov	r0, r2
 8002b62:	f7fd fe84 	bl	800086e <vListInsert>
 8002b66:	e008      	b.n	8002b7a <prvSwitchTimerLists+0x7e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002b68:	2300      	movs	r3, #0
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	2100      	movs	r1, #0
 8002b72:	6938      	ldr	r0, [r7, #16]
 8002b74:	f7ff fdb6 	bl	80026e4 <xTimerGenericCommand>
 8002b78:	60b8      	str	r0, [r7, #8]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002b7a:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <prvSwitchTimerLists+0xa4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1bf      	bne.n	8002b04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <prvSwitchTimerLists+0xa4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <prvSwitchTimerLists+0xa8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <prvSwitchTimerLists+0xa4>)
 8002b90:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002b92:	4a04      	ldr	r2, [pc, #16]	; (8002ba4 <prvSwitchTimerLists+0xa8>)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6013      	str	r3, [r2, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20003a98 	.word	0x20003a98
 8002ba4:	20003a9c 	.word	0x20003a9c

08002ba8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002bac:	f7fd ff4c 	bl	8000a48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002bb0:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <prvCheckForValidListAndQueue+0x40>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d113      	bne.n	8002be0 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8002bb8:	480c      	ldr	r0, [pc, #48]	; (8002bec <prvCheckForValidListAndQueue+0x44>)
 8002bba:	f7fd fe0a 	bl	80007d2 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002bbe:	480c      	ldr	r0, [pc, #48]	; (8002bf0 <prvCheckForValidListAndQueue+0x48>)
 8002bc0:	f7fd fe07 	bl	80007d2 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <prvCheckForValidListAndQueue+0x4c>)
 8002bc6:	4a09      	ldr	r2, [pc, #36]	; (8002bec <prvCheckForValidListAndQueue+0x44>)
 8002bc8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002bca:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <prvCheckForValidListAndQueue+0x50>)
 8002bcc:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <prvCheckForValidListAndQueue+0x48>)
 8002bce:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	210c      	movs	r1, #12
 8002bd4:	2005      	movs	r0, #5
 8002bd6:	f7fe f9bf 	bl	8000f58 <xQueueGenericCreate>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	4b02      	ldr	r3, [pc, #8]	; (8002be8 <prvCheckForValidListAndQueue+0x40>)
 8002bde:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002be0:	f7fd ff4a 	bl	8000a78 <vPortExitCritical>
}
 8002be4:	bf00      	nop
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20003aa0 	.word	0x20003aa0
 8002bec:	20003a70 	.word	0x20003a70
 8002bf0:	20003a84 	.word	0x20003a84
 8002bf4:	20003a98 	.word	0x20003a98
 8002bf8:	20003a9c 	.word	0x20003a9c

08002bfc <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	60bb      	str	r3, [r7, #8]

	configASSERT( xTimer );

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8002c08:	f7fd ff1e 	bl	8000a48 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d102      	bne.n	8002c20 <xTimerIsTimerActive+0x24>
		{
			xReturn = pdFALSE;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	e001      	b.n	8002c24 <xTimerIsTimerActive+0x28>
		}
		else
		{
			xReturn = pdTRUE;
 8002c20:	2301      	movs	r3, #1
 8002c22:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c24:	f7fd ff28 	bl	8000a78 <vPortExitCritical>

	return xReturn;
 8002c28:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
 8002c40:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002c42:	2205      	movs	r2, #5
 8002c44:	492b      	ldr	r1, [pc, #172]	; (8002cf4 <SYSVIEW_AddTask+0xc0>)
 8002c46:	68b8      	ldr	r0, [r7, #8]
 8002c48:	f002 f96e 	bl	8004f28 <memcmp>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d04b      	beq.n	8002cea <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002c52:	4b29      	ldr	r3, [pc, #164]	; (8002cf8 <SYSVIEW_AddTask+0xc4>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b07      	cmp	r3, #7
 8002c58:	d903      	bls.n	8002c62 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002c5a:	4828      	ldr	r0, [pc, #160]	; (8002cfc <SYSVIEW_AddTask+0xc8>)
 8002c5c:	f001 fc42 	bl	80044e4 <SEGGER_SYSVIEW_Warn>
    return;
 8002c60:	e044      	b.n	8002cec <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002c62:	4b25      	ldr	r3, [pc, #148]	; (8002cf8 <SYSVIEW_AddTask+0xc4>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4926      	ldr	r1, [pc, #152]	; (8002d00 <SYSVIEW_AddTask+0xcc>)
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002c76:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <SYSVIEW_AddTask+0xc4>)
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	4921      	ldr	r1, [pc, #132]	; (8002d00 <SYSVIEW_AddTask+0xcc>)
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	3304      	adds	r3, #4
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002c8c:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <SYSVIEW_AddTask+0xc4>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	491b      	ldr	r1, [pc, #108]	; (8002d00 <SYSVIEW_AddTask+0xcc>)
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	3308      	adds	r3, #8
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002ca2:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <SYSVIEW_AddTask+0xc4>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	4916      	ldr	r1, [pc, #88]	; (8002d00 <SYSVIEW_AddTask+0xcc>)
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	330c      	adds	r3, #12
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002cb8:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <SYSVIEW_AddTask+0xc4>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	4910      	ldr	r1, [pc, #64]	; (8002d00 <SYSVIEW_AddTask+0xcc>)
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3310      	adds	r3, #16
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002cce:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <SYSVIEW_AddTask+0xc4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	4a08      	ldr	r2, [pc, #32]	; (8002cf8 <SYSVIEW_AddTask+0xc4>)
 8002cd6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f8ca 	bl	8002e7c <SYSVIEW_SendTaskInfo>
 8002ce8:	e000      	b.n	8002cec <SYSVIEW_AddTask+0xb8>
    return;
 8002cea:	bf00      	nop

}
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	080057d4 	.word	0x080057d4
 8002cf8:	20003b4c 	.word	0x20003b4c
 8002cfc:	080057dc 	.word	0x080057dc
 8002d00:	20003aac 	.word	0x20003aac

08002d04 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8002d0c:	4b59      	ldr	r3, [pc, #356]	; (8002e74 <SYSVIEW_DeleteTask+0x170>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80ab 	beq.w	8002e6c <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	e00d      	b.n	8002d38 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8002d1c:	4956      	ldr	r1, [pc, #344]	; (8002e78 <SYSVIEW_DeleteTask+0x174>)
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d008      	beq.n	8002d44 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	3301      	adds	r3, #1
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	4b4e      	ldr	r3, [pc, #312]	; (8002e74 <SYSVIEW_DeleteTask+0x170>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d3ec      	bcc.n	8002d1c <SYSVIEW_DeleteTask+0x18>
 8002d42:	e000      	b.n	8002d46 <SYSVIEW_DeleteTask+0x42>
      break;
 8002d44:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8002d46:	4b4b      	ldr	r3, [pc, #300]	; (8002e74 <SYSVIEW_DeleteTask+0x170>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	1e5a      	subs	r2, r3, #1
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d111      	bne.n	8002d76 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4a46      	ldr	r2, [pc, #280]	; (8002e78 <SYSVIEW_DeleteTask+0x174>)
 8002d5e:	4413      	add	r3, r2
 8002d60:	2214      	movs	r2, #20
 8002d62:	2100      	movs	r1, #0
 8002d64:	4618      	mov	r0, r3
 8002d66:	f002 f8f9 	bl	8004f5c <memset>
    _NumTasks--;
 8002d6a:	4b42      	ldr	r3, [pc, #264]	; (8002e74 <SYSVIEW_DeleteTask+0x170>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	4a40      	ldr	r2, [pc, #256]	; (8002e74 <SYSVIEW_DeleteTask+0x170>)
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	e07b      	b.n	8002e6e <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8002d76:	4b3f      	ldr	r3, [pc, #252]	; (8002e74 <SYSVIEW_DeleteTask+0x170>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d276      	bcs.n	8002e6e <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8002d80:	4b3c      	ldr	r3, [pc, #240]	; (8002e74 <SYSVIEW_DeleteTask+0x170>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	1e5a      	subs	r2, r3, #1
 8002d86:	493c      	ldr	r1, [pc, #240]	; (8002e78 <SYSVIEW_DeleteTask+0x174>)
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	6819      	ldr	r1, [r3, #0]
 8002d94:	4838      	ldr	r0, [pc, #224]	; (8002e78 <SYSVIEW_DeleteTask+0x174>)
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4403      	add	r3, r0
 8002da2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8002da4:	4b33      	ldr	r3, [pc, #204]	; (8002e74 <SYSVIEW_DeleteTask+0x170>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	1e5a      	subs	r2, r3, #1
 8002daa:	4933      	ldr	r1, [pc, #204]	; (8002e78 <SYSVIEW_DeleteTask+0x174>)
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	3304      	adds	r3, #4
 8002db8:	6819      	ldr	r1, [r3, #0]
 8002dba:	482f      	ldr	r0, [pc, #188]	; (8002e78 <SYSVIEW_DeleteTask+0x174>)
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4403      	add	r3, r0
 8002dc8:	3304      	adds	r3, #4
 8002dca:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8002dcc:	4b29      	ldr	r3, [pc, #164]	; (8002e74 <SYSVIEW_DeleteTask+0x170>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	1e5a      	subs	r2, r3, #1
 8002dd2:	4929      	ldr	r1, [pc, #164]	; (8002e78 <SYSVIEW_DeleteTask+0x174>)
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	3308      	adds	r3, #8
 8002de0:	6819      	ldr	r1, [r3, #0]
 8002de2:	4825      	ldr	r0, [pc, #148]	; (8002e78 <SYSVIEW_DeleteTask+0x174>)
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4403      	add	r3, r0
 8002df0:	3308      	adds	r3, #8
 8002df2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8002df4:	4b1f      	ldr	r3, [pc, #124]	; (8002e74 <SYSVIEW_DeleteTask+0x170>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	1e5a      	subs	r2, r3, #1
 8002dfa:	491f      	ldr	r1, [pc, #124]	; (8002e78 <SYSVIEW_DeleteTask+0x174>)
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	330c      	adds	r3, #12
 8002e08:	6819      	ldr	r1, [r3, #0]
 8002e0a:	481b      	ldr	r0, [pc, #108]	; (8002e78 <SYSVIEW_DeleteTask+0x174>)
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4403      	add	r3, r0
 8002e18:	330c      	adds	r3, #12
 8002e1a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8002e1c:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <SYSVIEW_DeleteTask+0x170>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	1e5a      	subs	r2, r3, #1
 8002e22:	4915      	ldr	r1, [pc, #84]	; (8002e78 <SYSVIEW_DeleteTask+0x174>)
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3310      	adds	r3, #16
 8002e30:	6819      	ldr	r1, [r3, #0]
 8002e32:	4811      	ldr	r0, [pc, #68]	; (8002e78 <SYSVIEW_DeleteTask+0x174>)
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4403      	add	r3, r0
 8002e40:	3310      	adds	r3, #16
 8002e42:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8002e44:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <SYSVIEW_DeleteTask+0x170>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	1e5a      	subs	r2, r3, #1
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4a09      	ldr	r2, [pc, #36]	; (8002e78 <SYSVIEW_DeleteTask+0x174>)
 8002e54:	4413      	add	r3, r2
 8002e56:	2214      	movs	r2, #20
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f002 f87e 	bl	8004f5c <memset>
    _NumTasks--;
 8002e60:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <SYSVIEW_DeleteTask+0x170>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	4a03      	ldr	r2, [pc, #12]	; (8002e74 <SYSVIEW_DeleteTask+0x170>)
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	e000      	b.n	8002e6e <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8002e6c:	bf00      	nop
  }
}
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20003b4c 	.word	0x20003b4c
 8002e78:	20003aac 	.word	0x20003aac

08002e7c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08a      	sub	sp, #40	; 0x28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002e8a:	f107 0314 	add.w	r3, r7, #20
 8002e8e:	2214      	movs	r2, #20
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f002 f862 	bl	8004f5c <memset>
  TaskInfo.TaskID     = TaskID;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002eac:	f107 0314 	add.w	r3, r7, #20
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 ff43 	bl	8003d3c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002eb6:	bf00      	nop
 8002eb8:	3728      	adds	r7, #40	; 0x28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8002ec6:	4b21      	ldr	r3, [pc, #132]	; (8002f4c <_DoInit+0x8c>)
 8002ec8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2203      	movs	r2, #3
 8002ece:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a1d      	ldr	r2, [pc, #116]	; (8002f50 <_DoInit+0x90>)
 8002eda:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a1d      	ldr	r2, [pc, #116]	; (8002f54 <_DoInit+0x94>)
 8002ee0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ee8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a14      	ldr	r2, [pc, #80]	; (8002f50 <_DoInit+0x90>)
 8002f00:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a14      	ldr	r2, [pc, #80]	; (8002f58 <_DoInit+0x98>)
 8002f06:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2210      	movs	r2, #16
 8002f0c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3307      	adds	r3, #7
 8002f24:	4a0d      	ldr	r2, [pc, #52]	; (8002f5c <_DoInit+0x9c>)
 8002f26:	6810      	ldr	r0, [r2, #0]
 8002f28:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a0c      	ldr	r2, [pc, #48]	; (8002f60 <_DoInit+0xa0>)
 8002f2e:	6810      	ldr	r0, [r2, #0]
 8002f30:	6018      	str	r0, [r3, #0]
 8002f32:	8891      	ldrh	r1, [r2, #4]
 8002f34:	7992      	ldrb	r2, [r2, #6]
 8002f36:	8099      	strh	r1, [r3, #4]
 8002f38:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	719a      	strb	r2, [r3, #6]
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	20004168 	.word	0x20004168
 8002f50:	0800582c 	.word	0x0800582c
 8002f54:	20003b50 	.word	0x20003b50
 8002f58:	20003f50 	.word	0x20003f50
 8002f5c:	08005838 	.word	0x08005838
 8002f60:	0800583c 	.word	0x0800583c

08002f64 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08a      	sub	sp, #40	; 0x28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8002f70:	4b3c      	ldr	r3, [pc, #240]	; (8003064 <SEGGER_RTT_ReadNoLock+0x100>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <SEGGER_RTT_ReadNoLock+0x18>
 8002f78:	f7ff ffa2 	bl	8002ec0 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	4413      	add	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	3360      	adds	r3, #96	; 0x60
 8002f88:	4a36      	ldr	r2, [pc, #216]	; (8003064 <SEGGER_RTT_ReadNoLock+0x100>)
 8002f8a:	4413      	add	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002fa2:	6a3a      	ldr	r2, [r7, #32]
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d92a      	bls.n	8003000 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	bf28      	it	cs
 8002fbc:	4613      	movcs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4619      	mov	r1, r3
 8002fcc:	69f8      	ldr	r0, [r7, #28]
 8002fce:	f001 ffba 	bl	8004f46 <memcpy>
    NumBytesRead += NumBytesRem;
 8002fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4413      	add	r3, r2
 8002fe0:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002fea:	6a3a      	ldr	r2, [r7, #32]
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4413      	add	r3, r2
 8002ff0:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d101      	bne.n	8003000 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4293      	cmp	r3, r2
 800300e:	bf28      	it	cs
 8003010:	4613      	movcs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d018      	beq.n	800304c <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	4413      	add	r3, r2
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4619      	mov	r1, r3
 8003026:	69f8      	ldr	r0, [r7, #28]
 8003028:	f001 ff8d 	bl	8004f46 <memcpy>
    NumBytesRead += NumBytesRem;
 800302c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4413      	add	r3, r2
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8003034:	69fa      	ldr	r2, [r7, #28]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4413      	add	r3, r2
 800303a:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003044:	6a3a      	ldr	r2, [r7, #32]
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4413      	add	r3, r2
 800304a:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	6a3a      	ldr	r2, [r7, #32]
 8003056:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800305a:	4618      	mov	r0, r3
 800305c:	3728      	adds	r7, #40	; 0x28
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20004168 	.word	0x20004168

08003068 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003068:	b580      	push	{r7, lr}
 800306a:	b08a      	sub	sp, #40	; 0x28
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	4613      	mov	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4413      	add	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4a3f      	ldr	r2, [pc, #252]	; (8003184 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8003086:	4413      	add	r3, r2
 8003088:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8003096:	69fa      	ldr	r2, [r7, #28]
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	429a      	cmp	r2, r3
 800309c:	d854      	bhi.n	8003148 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	3b01      	subs	r3, #1
 80030a8:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d30f      	bcc.n	80030d2 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	4413      	add	r3, r2
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030be:	4618      	mov	r0, r3
 80030c0:	f001 ff41 	bl	8004f46 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	441a      	add	r2, r3
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e054      	b.n	800317c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	4413      	add	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d34b      	bcc.n	800317a <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d90e      	bls.n	8003112 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	4413      	add	r3, r2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003100:	4618      	mov	r0, r3
 8003102:	f001 ff20 	bl	8004f46 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	441a      	add	r2, r3
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	60da      	str	r2, [r3, #12]
 8003110:	e018      	b.n	8003144 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	4413      	add	r3, r2
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800311e:	4618      	mov	r0, r3
 8003120:	f001 ff11 	bl	8004f46 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	6858      	ldr	r0, [r3, #4]
 8003128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	18d1      	adds	r1, r2, r3
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	461a      	mov	r2, r3
 8003136:	f001 ff06 	bl	8004f46 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad2      	subs	r2, r2, r3
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8003144:	2301      	movs	r3, #1
 8003146:	e019      	b.n	800317c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8003148:	69fa      	ldr	r2, [r7, #28]
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	429a      	cmp	r2, r3
 8003158:	d30f      	bcc.n	800317a <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	4413      	add	r3, r2
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003166:	4618      	mov	r0, r3
 8003168:	f001 feed 	bl	8004f46 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	441a      	add	r2, r3
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3728      	adds	r7, #40	; 0x28
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20004168 	.word	0x20004168

08003188 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003198:	e002      	b.n	80031a0 <_EncodeStr+0x18>
    Len++;
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	3301      	adds	r3, #1
 800319e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4413      	add	r3, r2
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f6      	bne.n	800319a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d901      	bls.n	80031b8 <_EncodeStr+0x30>
    Len = Limit;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	2bfe      	cmp	r3, #254	; 0xfe
 80031bc:	d806      	bhi.n	80031cc <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	60fa      	str	r2, [r7, #12]
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	701a      	strb	r2, [r3, #0]
 80031ca:	e011      	b.n	80031f0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	60fa      	str	r2, [r7, #12]
 80031d2:	22ff      	movs	r2, #255	; 0xff
 80031d4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	60fa      	str	r2, [r7, #12]
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	60fa      	str	r2, [r7, #12]
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	0a12      	lsrs	r2, r2, #8
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80031f4:	e00a      	b.n	800320c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	60fa      	str	r2, [r7, #12]
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	1c51      	adds	r1, r2, #1
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	7812      	ldrb	r2, [r2, #0]
 8003204:	701a      	strb	r2, [r3, #0]
    n++;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	3301      	adds	r3, #1
 800320a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	429a      	cmp	r2, r3
 8003212:	d3f0      	bcc.n	80031f6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8003214:	68fb      	ldr	r3, [r7, #12]
}
 8003216:	4618      	mov	r0, r3
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr

08003220 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3304      	adds	r3, #4
}
 800322c:	4618      	mov	r0, r3
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr

08003236 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800323c:	1cfb      	adds	r3, r7, #3
 800323e:	2201      	movs	r2, #1
 8003240:	4619      	mov	r1, r3
 8003242:	2001      	movs	r0, #1
 8003244:	f7ff fe8e 	bl	8002f64 <SEGGER_RTT_ReadNoLock>
 8003248:	4603      	mov	r3, r0
 800324a:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	dd47      	ble.n	80032e2 <_HandleIncomingPacket+0xac>
    switch (Cmd) {
 8003252:	78fb      	ldrb	r3, [r7, #3]
 8003254:	2b04      	cmp	r3, #4
 8003256:	d01a      	beq.n	800328e <_HandleIncomingPacket+0x58>
 8003258:	2b04      	cmp	r3, #4
 800325a:	dc06      	bgt.n	800326a <_HandleIncomingPacket+0x34>
 800325c:	2b02      	cmp	r3, #2
 800325e:	d010      	beq.n	8003282 <_HandleIncomingPacket+0x4c>
 8003260:	2b02      	cmp	r3, #2
 8003262:	dc11      	bgt.n	8003288 <_HandleIncomingPacket+0x52>
 8003264:	2b01      	cmp	r3, #1
 8003266:	d009      	beq.n	800327c <_HandleIncomingPacket+0x46>
 8003268:	e02d      	b.n	80032c6 <_HandleIncomingPacket+0x90>
 800326a:	2b06      	cmp	r3, #6
 800326c:	d015      	beq.n	800329a <_HandleIncomingPacket+0x64>
 800326e:	2b06      	cmp	r3, #6
 8003270:	db10      	blt.n	8003294 <_HandleIncomingPacket+0x5e>
 8003272:	2b07      	cmp	r3, #7
 8003274:	d014      	beq.n	80032a0 <_HandleIncomingPacket+0x6a>
 8003276:	2b80      	cmp	r3, #128	; 0x80
 8003278:	d015      	beq.n	80032a6 <_HandleIncomingPacket+0x70>
 800327a:	e024      	b.n	80032c6 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800327c:	f000 fbe2 	bl	8003a44 <SEGGER_SYSVIEW_Start>
      break;
 8003280:	e02f      	b.n	80032e2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003282:	f000 fc9b 	bl	8003bbc <SEGGER_SYSVIEW_Stop>
      break;
 8003286:	e02c      	b.n	80032e2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003288:	f000 fe52 	bl	8003f30 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800328c:	e029      	b.n	80032e2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800328e:	f000 fe3b 	bl	8003f08 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003292:	e026      	b.n	80032e2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003294:	f000 fcb8 	bl	8003c08 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003298:	e023      	b.n	80032e2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800329a:	f001 f8e5 	bl	8004468 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800329e:	e020      	b.n	80032e2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80032a0:	f001 f8c4 	bl	800442c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80032a4:	e01d      	b.n	80032e2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80032a6:	1cfb      	adds	r3, r7, #3
 80032a8:	2201      	movs	r2, #1
 80032aa:	4619      	mov	r1, r3
 80032ac:	2001      	movs	r0, #1
 80032ae:	f7ff fe59 	bl	8002f64 <SEGGER_RTT_ReadNoLock>
 80032b2:	4603      	mov	r3, r0
 80032b4:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	dd0f      	ble.n	80032dc <_HandleIncomingPacket+0xa6>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80032bc:	78fb      	ldrb	r3, [r7, #3]
 80032be:	4618      	mov	r0, r3
 80032c0:	f001 f834 	bl	800432c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80032c4:	e00a      	b.n	80032dc <_HandleIncomingPacket+0xa6>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80032c6:	78fb      	ldrb	r3, [r7, #3]
 80032c8:	b25b      	sxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	da08      	bge.n	80032e0 <_HandleIncomingPacket+0xaa>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80032ce:	1cfb      	adds	r3, r7, #3
 80032d0:	2201      	movs	r2, #1
 80032d2:	4619      	mov	r1, r3
 80032d4:	2001      	movs	r0, #1
 80032d6:	f7ff fe45 	bl	8002f64 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80032da:	e001      	b.n	80032e0 <_HandleIncomingPacket+0xaa>
      break;
 80032dc:	bf00      	nop
 80032de:	e000      	b.n	80032e2 <_HandleIncomingPacket+0xac>
      break;
 80032e0:	bf00      	nop
    }
  }
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
	...

080032ec <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08c      	sub	sp, #48	; 0x30
 80032f0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80032f2:	2301      	movs	r3, #1
 80032f4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80032f6:	1d3b      	adds	r3, r7, #4
 80032f8:	3301      	adds	r3, #1
 80032fa:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003300:	4b30      	ldr	r3, [pc, #192]	; (80033c4 <_TrySendOverflowPacket+0xd8>)
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	62bb      	str	r3, [r7, #40]	; 0x28
 8003306:	e00b      	b.n	8003320 <_TrySendOverflowPacket+0x34>
 8003308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800330e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	701a      	strb	r2, [r3, #0]
 800331a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331c:	09db      	lsrs	r3, r3, #7
 800331e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003322:	2b7f      	cmp	r3, #127	; 0x7f
 8003324:	d8f0      	bhi.n	8003308 <_TrySendOverflowPacket+0x1c>
 8003326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003328:	1c5a      	adds	r2, r3, #1
 800332a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800332c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	701a      	strb	r2, [r3, #0]
 8003332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003334:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003336:	4b24      	ldr	r3, [pc, #144]	; (80033c8 <_TrySendOverflowPacket+0xdc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800333c:	4b21      	ldr	r3, [pc, #132]	; (80033c4 <_TrySendOverflowPacket+0xd8>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	623b      	str	r3, [r7, #32]
 800334e:	e00b      	b.n	8003368 <_TrySendOverflowPacket+0x7c>
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	627a      	str	r2, [r7, #36]	; 0x24
 8003356:	6a3a      	ldr	r2, [r7, #32]
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	701a      	strb	r2, [r3, #0]
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	09db      	lsrs	r3, r3, #7
 8003366:	623b      	str	r3, [r7, #32]
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	2b7f      	cmp	r3, #127	; 0x7f
 800336c:	d8f0      	bhi.n	8003350 <_TrySendOverflowPacket+0x64>
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	627a      	str	r2, [r7, #36]	; 0x24
 8003374:	6a3a      	ldr	r2, [r7, #32]
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	701a      	strb	r2, [r3, #0]
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800337e:	69fa      	ldr	r2, [r7, #28]
 8003380:	1d3b      	adds	r3, r7, #4
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	461a      	mov	r2, r3
 8003386:	1d3b      	adds	r3, r7, #4
 8003388:	4619      	mov	r1, r3
 800338a:	2001      	movs	r0, #1
 800338c:	f7ff fe6c 	bl	8003068 <SEGGER_RTT_WriteSkipNoLock>
 8003390:	4603      	mov	r3, r0
 8003392:	613b      	str	r3, [r7, #16]
  if (Status) {
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d009      	beq.n	80033ae <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800339a:	4a0a      	ldr	r2, [pc, #40]	; (80033c4 <_TrySendOverflowPacket+0xd8>)
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80033a0:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <_TrySendOverflowPacket+0xd8>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <_TrySendOverflowPacket+0xd8>)
 80033aa:	701a      	strb	r2, [r3, #0]
 80033ac:	e004      	b.n	80033b8 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80033ae:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <_TrySendOverflowPacket+0xd8>)
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	3301      	adds	r3, #1
 80033b4:	4a03      	ldr	r2, [pc, #12]	; (80033c4 <_TrySendOverflowPacket+0xd8>)
 80033b6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80033b8:	693b      	ldr	r3, [r7, #16]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3730      	adds	r7, #48	; 0x30
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20003f60 	.word	0x20003f60
 80033c8:	e0001004 	.word	0xe0001004

080033cc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08a      	sub	sp, #40	; 0x28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80033d8:	4b62      	ldr	r3, [pc, #392]	; (8003564 <_SendPacket+0x198>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d010      	beq.n	8003402 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80033e0:	4b60      	ldr	r3, [pc, #384]	; (8003564 <_SendPacket+0x198>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 809f 	beq.w	8003528 <_SendPacket+0x15c>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80033ea:	4b5e      	ldr	r3, [pc, #376]	; (8003564 <_SendPacket+0x198>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d108      	bne.n	8003404 <_SendPacket+0x38>
    _TrySendOverflowPacket();
 80033f2:	f7ff ff7b 	bl	80032ec <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80033f6:	4b5b      	ldr	r3, [pc, #364]	; (8003564 <_SendPacket+0x198>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	f040 8096 	bne.w	800352c <_SendPacket+0x160>
 8003400:	e000      	b.n	8003404 <_SendPacket+0x38>
    goto Send;
 8003402:	bf00      	nop
Send:
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b1f      	cmp	r3, #31
 8003408:	d809      	bhi.n	800341e <_SendPacket+0x52>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800340a:	4b56      	ldr	r3, [pc, #344]	; (8003564 <_SendPacket+0x198>)
 800340c:	69da      	ldr	r2, [r3, #28]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	f040 8089 	bne.w	8003530 <_SendPacket+0x164>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b17      	cmp	r3, #23
 8003422:	d807      	bhi.n	8003434 <_SendPacket+0x68>
    *--pStartPacket = EventId;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	3b01      	subs	r3, #1
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	e03d      	b.n	80034b0 <_SendPacket+0xe4>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	2b7f      	cmp	r3, #127	; 0x7f
 8003440:	d912      	bls.n	8003468 <_SendPacket+0x9c>
      *--pStartPacket = (NumBytes >> 7);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3b01      	subs	r3, #1
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	09db      	lsrs	r3, r3, #7
 800344c:	b2da      	uxtb	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	3b01      	subs	r3, #1
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003460:	b2da      	uxtb	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	701a      	strb	r2, [r3, #0]
 8003466:	e006      	b.n	8003476 <_SendPacket+0xaa>
    } else {
      *--pStartPacket = NumBytes;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	3b01      	subs	r3, #1
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	b2da      	uxtb	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b7f      	cmp	r3, #127	; 0x7f
 800347a:	d912      	bls.n	80034a2 <_SendPacket+0xd6>
      *--pStartPacket = (EventId >> 7);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	3b01      	subs	r3, #1
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	09db      	lsrs	r3, r3, #7
 8003486:	b2da      	uxtb	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3b01      	subs	r3, #1
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	b2db      	uxtb	r3, r3
 8003496:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800349a:	b2da      	uxtb	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	701a      	strb	r2, [r3, #0]
 80034a0:	e006      	b.n	80034b0 <_SendPacket+0xe4>
    } else {
      *--pStartPacket = EventId;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	3b01      	subs	r3, #1
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80034b0:	4b2d      	ldr	r3, [pc, #180]	; (8003568 <_SendPacket+0x19c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80034b6:	4b2b      	ldr	r3, [pc, #172]	; (8003564 <_SendPacket+0x198>)
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	623b      	str	r3, [r7, #32]
 80034c8:	e00b      	b.n	80034e2 <_SendPacket+0x116>
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	627a      	str	r2, [r7, #36]	; 0x24
 80034d0:	6a3a      	ldr	r2, [r7, #32]
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	701a      	strb	r2, [r3, #0]
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	09db      	lsrs	r3, r3, #7
 80034e0:	623b      	str	r3, [r7, #32]
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	2b7f      	cmp	r3, #127	; 0x7f
 80034e6:	d8f0      	bhi.n	80034ca <_SendPacket+0xfe>
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	627a      	str	r2, [r7, #36]	; 0x24
 80034ee:	6a3a      	ldr	r2, [r7, #32]
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	701a      	strb	r2, [r3, #0]
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	68f9      	ldr	r1, [r7, #12]
 8003502:	2001      	movs	r0, #1
 8003504:	f7ff fdb0 	bl	8003068 <SEGGER_RTT_WriteSkipNoLock>
 8003508:	4603      	mov	r3, r0
 800350a:	613b      	str	r3, [r7, #16]
  if (Status) {
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <_SendPacket+0x14e>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003512:	4a14      	ldr	r2, [pc, #80]	; (8003564 <_SendPacket+0x198>)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	60d3      	str	r3, [r2, #12]
 8003518:	e00b      	b.n	8003532 <_SendPacket+0x166>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800351a:	4b12      	ldr	r3, [pc, #72]	; (8003564 <_SendPacket+0x198>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	3301      	adds	r3, #1
 8003520:	b2da      	uxtb	r2, r3
 8003522:	4b10      	ldr	r3, [pc, #64]	; (8003564 <_SendPacket+0x198>)
 8003524:	701a      	strb	r2, [r3, #0]
 8003526:	e004      	b.n	8003532 <_SendPacket+0x166>
    goto SendDone;
 8003528:	bf00      	nop
 800352a:	e002      	b.n	8003532 <_SendPacket+0x166>
      goto SendDone;
 800352c:	bf00      	nop
 800352e:	e000      	b.n	8003532 <_SendPacket+0x166>
      goto SendDone;
 8003530:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003532:	4b0e      	ldr	r3, [pc, #56]	; (800356c <_SendPacket+0x1a0>)
 8003534:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003538:	4b0c      	ldr	r3, [pc, #48]	; (800356c <_SendPacket+0x1a0>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353e:	429a      	cmp	r2, r3
 8003540:	d00b      	beq.n	800355a <_SendPacket+0x18e>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003542:	4b08      	ldr	r3, [pc, #32]	; (8003564 <_SendPacket+0x198>)
 8003544:	789b      	ldrb	r3, [r3, #2]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d107      	bne.n	800355a <_SendPacket+0x18e>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <_SendPacket+0x198>)
 800354c:	2201      	movs	r2, #1
 800354e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003550:	f7ff fe71 	bl	8003236 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003554:	4b03      	ldr	r3, [pc, #12]	; (8003564 <_SendPacket+0x198>)
 8003556:	2200      	movs	r2, #0
 8003558:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800355a:	bf00      	nop
 800355c:	3728      	adds	r7, #40	; 0x28
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20003f60 	.word	0x20003f60
 8003568:	e0001004 	.word	0xe0001004
 800356c:	20004168 	.word	0x20004168

08003570 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003578:	f3ef 8311 	mrs	r3, BASEPRI
 800357c:	f04f 0120 	mov.w	r1, #32
 8003580:	f381 8811 	msr	BASEPRI, r1
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	4808      	ldr	r0, [pc, #32]	; (80035a8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003588:	f7ff fe4a 	bl	8003220 <_PreparePacket>
 800358c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	68b8      	ldr	r0, [r7, #8]
 8003594:	f7ff ff1a 	bl	80033cc <_SendPacket>
  RECORD_END();
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f383 8811 	msr	BASEPRI, r3
}
 800359e:	bf00      	nop
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20003f90 	.word	0x20003f90

080035ac <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80035b6:	f3ef 8311 	mrs	r3, BASEPRI
 80035ba:	f04f 0120 	mov.w	r1, #32
 80035be:	f381 8811 	msr	BASEPRI, r1
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	4816      	ldr	r0, [pc, #88]	; (8003620 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80035c6:	f7ff fe2b 	bl	8003220 <_PreparePacket>
 80035ca:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	61fb      	str	r3, [r7, #28]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	61bb      	str	r3, [r7, #24]
 80035d8:	e00b      	b.n	80035f2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	61fa      	str	r2, [r7, #28]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	701a      	strb	r2, [r3, #0]
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	09db      	lsrs	r3, r3, #7
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	2b7f      	cmp	r3, #127	; 0x7f
 80035f6:	d8f0      	bhi.n	80035da <SEGGER_SYSVIEW_RecordU32+0x2e>
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	61fa      	str	r2, [r7, #28]
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	701a      	strb	r2, [r3, #0]
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	68f9      	ldr	r1, [r7, #12]
 800360c:	6938      	ldr	r0, [r7, #16]
 800360e:	f7ff fedd 	bl	80033cc <_SendPacket>
  RECORD_END();
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f383 8811 	msr	BASEPRI, r3
}
 8003618:	bf00      	nop
 800361a:	3720      	adds	r7, #32
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	20003f90 	.word	0x20003f90

08003624 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003624:	b580      	push	{r7, lr}
 8003626:	b08c      	sub	sp, #48	; 0x30
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003630:	f3ef 8311 	mrs	r3, BASEPRI
 8003634:	f04f 0120 	mov.w	r1, #32
 8003638:	f381 8811 	msr	BASEPRI, r1
 800363c:	61fb      	str	r3, [r7, #28]
 800363e:	4825      	ldr	r0, [pc, #148]	; (80036d4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003640:	f7ff fdee 	bl	8003220 <_PreparePacket>
 8003644:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	62bb      	str	r3, [r7, #40]	; 0x28
 8003652:	e00b      	b.n	800366c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	62fa      	str	r2, [r7, #44]	; 0x2c
 800365a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003668:	09db      	lsrs	r3, r3, #7
 800366a:	62bb      	str	r3, [r7, #40]	; 0x28
 800366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366e:	2b7f      	cmp	r3, #127	; 0x7f
 8003670:	d8f0      	bhi.n	8003654 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	701a      	strb	r2, [r3, #0]
 800367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003680:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	623b      	str	r3, [r7, #32]
 800368a:	e00b      	b.n	80036a4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	627a      	str	r2, [r7, #36]	; 0x24
 8003692:	6a3a      	ldr	r2, [r7, #32]
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	701a      	strb	r2, [r3, #0]
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	09db      	lsrs	r3, r3, #7
 80036a2:	623b      	str	r3, [r7, #32]
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	2b7f      	cmp	r3, #127	; 0x7f
 80036a8:	d8f0      	bhi.n	800368c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	627a      	str	r2, [r7, #36]	; 0x24
 80036b0:	6a3a      	ldr	r2, [r7, #32]
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	701a      	strb	r2, [r3, #0]
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	6979      	ldr	r1, [r7, #20]
 80036be:	69b8      	ldr	r0, [r7, #24]
 80036c0:	f7ff fe84 	bl	80033cc <_SendPacket>
  RECORD_END();
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f383 8811 	msr	BASEPRI, r3
}
 80036ca:	bf00      	nop
 80036cc:	3730      	adds	r7, #48	; 0x30
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20003f90 	.word	0x20003f90

080036d8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08e      	sub	sp, #56	; 0x38
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80036e6:	f3ef 8311 	mrs	r3, BASEPRI
 80036ea:	f04f 0120 	mov.w	r1, #32
 80036ee:	f381 8811 	msr	BASEPRI, r1
 80036f2:	61fb      	str	r3, [r7, #28]
 80036f4:	4832      	ldr	r0, [pc, #200]	; (80037c0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80036f6:	f7ff fd93 	bl	8003220 <_PreparePacket>
 80036fa:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	637b      	str	r3, [r7, #52]	; 0x34
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	633b      	str	r3, [r7, #48]	; 0x30
 8003708:	e00b      	b.n	8003722 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800370a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	637a      	str	r2, [r7, #52]	; 0x34
 8003710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	701a      	strb	r2, [r3, #0]
 800371c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371e:	09db      	lsrs	r3, r3, #7
 8003720:	633b      	str	r3, [r7, #48]	; 0x30
 8003722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003724:	2b7f      	cmp	r3, #127	; 0x7f
 8003726:	d8f0      	bhi.n	800370a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8003728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	637a      	str	r2, [r7, #52]	; 0x34
 800372e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	701a      	strb	r2, [r3, #0]
 8003734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003736:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003740:	e00b      	b.n	800375a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8003742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	701a      	strb	r2, [r3, #0]
 8003754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003756:	09db      	lsrs	r3, r3, #7
 8003758:	62bb      	str	r3, [r7, #40]	; 0x28
 800375a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375c:	2b7f      	cmp	r3, #127	; 0x7f
 800375e:	d8f0      	bhi.n	8003742 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8003760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	701a      	strb	r2, [r3, #0]
 800376c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	623b      	str	r3, [r7, #32]
 8003778:	e00b      	b.n	8003792 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	627a      	str	r2, [r7, #36]	; 0x24
 8003780:	6a3a      	ldr	r2, [r7, #32]
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	701a      	strb	r2, [r3, #0]
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	09db      	lsrs	r3, r3, #7
 8003790:	623b      	str	r3, [r7, #32]
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	2b7f      	cmp	r3, #127	; 0x7f
 8003796:	d8f0      	bhi.n	800377a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	627a      	str	r2, [r7, #36]	; 0x24
 800379e:	6a3a      	ldr	r2, [r7, #32]
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	701a      	strb	r2, [r3, #0]
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	6979      	ldr	r1, [r7, #20]
 80037ac:	69b8      	ldr	r0, [r7, #24]
 80037ae:	f7ff fe0d 	bl	80033cc <_SendPacket>
  RECORD_END();
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f383 8811 	msr	BASEPRI, r3
}
 80037b8:	bf00      	nop
 80037ba:	3738      	adds	r7, #56	; 0x38
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20003f90 	.word	0x20003f90

080037c4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b090      	sub	sp, #64	; 0x40
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80037d2:	f3ef 8311 	mrs	r3, BASEPRI
 80037d6:	f04f 0120 	mov.w	r1, #32
 80037da:	f381 8811 	msr	BASEPRI, r1
 80037de:	61fb      	str	r3, [r7, #28]
 80037e0:	4840      	ldr	r0, [pc, #256]	; (80038e4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80037e2:	f7ff fd1d 	bl	8003220 <_PreparePacket>
 80037e6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80037f4:	e00b      	b.n	800380e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80037f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	701a      	strb	r2, [r3, #0]
 8003808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380a:	09db      	lsrs	r3, r3, #7
 800380c:	63bb      	str	r3, [r7, #56]	; 0x38
 800380e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003810:	2b7f      	cmp	r3, #127	; 0x7f
 8003812:	d8f0      	bhi.n	80037f6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	63fa      	str	r2, [r7, #60]	; 0x3c
 800381a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003822:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	637b      	str	r3, [r7, #52]	; 0x34
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	633b      	str	r3, [r7, #48]	; 0x30
 800382c:	e00b      	b.n	8003846 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800382e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	637a      	str	r2, [r7, #52]	; 0x34
 8003834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	701a      	strb	r2, [r3, #0]
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	09db      	lsrs	r3, r3, #7
 8003844:	633b      	str	r3, [r7, #48]	; 0x30
 8003846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003848:	2b7f      	cmp	r3, #127	; 0x7f
 800384a:	d8f0      	bhi.n	800382e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800384c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	637a      	str	r2, [r7, #52]	; 0x34
 8003852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	701a      	strb	r2, [r3, #0]
 8003858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	62bb      	str	r3, [r7, #40]	; 0x28
 8003864:	e00b      	b.n	800387e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8003866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800386c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	701a      	strb	r2, [r3, #0]
 8003878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387a:	09db      	lsrs	r3, r3, #7
 800387c:	62bb      	str	r3, [r7, #40]	; 0x28
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003880:	2b7f      	cmp	r3, #127	; 0x7f
 8003882:	d8f0      	bhi.n	8003866 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	62fa      	str	r2, [r7, #44]	; 0x2c
 800388a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	701a      	strb	r2, [r3, #0]
 8003890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003892:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
 8003898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800389a:	623b      	str	r3, [r7, #32]
 800389c:	e00b      	b.n	80038b6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	627a      	str	r2, [r7, #36]	; 0x24
 80038a4:	6a3a      	ldr	r2, [r7, #32]
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	701a      	strb	r2, [r3, #0]
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	09db      	lsrs	r3, r3, #7
 80038b4:	623b      	str	r3, [r7, #32]
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	2b7f      	cmp	r3, #127	; 0x7f
 80038ba:	d8f0      	bhi.n	800389e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	627a      	str	r2, [r7, #36]	; 0x24
 80038c2:	6a3a      	ldr	r2, [r7, #32]
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	701a      	strb	r2, [r3, #0]
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	6979      	ldr	r1, [r7, #20]
 80038d0:	69b8      	ldr	r0, [r7, #24]
 80038d2:	f7ff fd7b 	bl	80033cc <_SendPacket>
  RECORD_END();
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f383 8811 	msr	BASEPRI, r3
}
 80038dc:	bf00      	nop
 80038de:	3740      	adds	r7, #64	; 0x40
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	20003f90 	.word	0x20003f90

080038e8 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b092      	sub	sp, #72	; 0x48
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 80038f6:	f3ef 8311 	mrs	r3, BASEPRI
 80038fa:	f04f 0120 	mov.w	r1, #32
 80038fe:	f381 8811 	msr	BASEPRI, r1
 8003902:	61fb      	str	r3, [r7, #28]
 8003904:	484e      	ldr	r0, [pc, #312]	; (8003a40 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8003906:	f7ff fc8b 	bl	8003220 <_PreparePacket>
 800390a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	647b      	str	r3, [r7, #68]	; 0x44
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	643b      	str	r3, [r7, #64]	; 0x40
 8003918:	e00b      	b.n	8003932 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800391a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	647a      	str	r2, [r7, #68]	; 0x44
 8003920:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	701a      	strb	r2, [r3, #0]
 800392c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800392e:	09db      	lsrs	r3, r3, #7
 8003930:	643b      	str	r3, [r7, #64]	; 0x40
 8003932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003934:	2b7f      	cmp	r3, #127	; 0x7f
 8003936:	d8f0      	bhi.n	800391a <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8003938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	647a      	str	r2, [r7, #68]	; 0x44
 800393e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	701a      	strb	r2, [r3, #0]
 8003944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003946:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003950:	e00b      	b.n	800396a <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8003952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003958:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	701a      	strb	r2, [r3, #0]
 8003964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003966:	09db      	lsrs	r3, r3, #7
 8003968:	63bb      	str	r3, [r7, #56]	; 0x38
 800396a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396c:	2b7f      	cmp	r3, #127	; 0x7f
 800396e:	d8f0      	bhi.n	8003952 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8003970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003976:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	701a      	strb	r2, [r3, #0]
 800397c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800397e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	637b      	str	r3, [r7, #52]	; 0x34
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	633b      	str	r3, [r7, #48]	; 0x30
 8003988:	e00b      	b.n	80039a2 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800398a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	637a      	str	r2, [r7, #52]	; 0x34
 8003990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	701a      	strb	r2, [r3, #0]
 800399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399e:	09db      	lsrs	r3, r3, #7
 80039a0:	633b      	str	r3, [r7, #48]	; 0x30
 80039a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a4:	2b7f      	cmp	r3, #127	; 0x7f
 80039a6:	d8f0      	bhi.n	800398a <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 80039a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	637a      	str	r2, [r7, #52]	; 0x34
 80039ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	701a      	strb	r2, [r3, #0]
 80039b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039be:	62bb      	str	r3, [r7, #40]	; 0x28
 80039c0:	e00b      	b.n	80039da <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 80039c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	701a      	strb	r2, [r3, #0]
 80039d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d6:	09db      	lsrs	r3, r3, #7
 80039d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039dc:	2b7f      	cmp	r3, #127	; 0x7f
 80039de:	d8f0      	bhi.n	80039c2 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 80039e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	701a      	strb	r2, [r3, #0]
 80039ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
 80039f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039f6:	623b      	str	r3, [r7, #32]
 80039f8:	e00b      	b.n	8003a12 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	627a      	str	r2, [r7, #36]	; 0x24
 8003a00:	6a3a      	ldr	r2, [r7, #32]
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	701a      	strb	r2, [r3, #0]
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	09db      	lsrs	r3, r3, #7
 8003a10:	623b      	str	r3, [r7, #32]
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	2b7f      	cmp	r3, #127	; 0x7f
 8003a16:	d8f0      	bhi.n	80039fa <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	627a      	str	r2, [r7, #36]	; 0x24
 8003a1e:	6a3a      	ldr	r2, [r7, #32]
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	701a      	strb	r2, [r3, #0]
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	6979      	ldr	r1, [r7, #20]
 8003a2c:	69b8      	ldr	r0, [r7, #24]
 8003a2e:	f7ff fccd 	bl	80033cc <_SendPacket>
  RECORD_END();
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	f383 8811 	msr	BASEPRI, r3
}
 8003a38:	bf00      	nop
 8003a3a:	3748      	adds	r7, #72	; 0x48
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	20003f90 	.word	0x20003f90

08003a44 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08c      	sub	sp, #48	; 0x30
 8003a48:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003a4a:	4b59      	ldr	r3, [pc, #356]	; (8003bb0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f040 80aa 	bne.w	8003ba8 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8003a54:	4b56      	ldr	r3, [pc, #344]	; (8003bb0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003a5a:	f3ef 8311 	mrs	r3, BASEPRI
 8003a5e:	f04f 0120 	mov.w	r1, #32
 8003a62:	f381 8811 	msr	BASEPRI, r1
 8003a66:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003a68:	220a      	movs	r2, #10
 8003a6a:	4952      	ldr	r1, [pc, #328]	; (8003bb4 <SEGGER_SYSVIEW_Start+0x170>)
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	f7ff fafb 	bl	8003068 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003a78:	200a      	movs	r0, #10
 8003a7a:	f7ff fd79 	bl	8003570 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003a7e:	f3ef 8311 	mrs	r3, BASEPRI
 8003a82:	f04f 0120 	mov.w	r1, #32
 8003a86:	f381 8811 	msr	BASEPRI, r1
 8003a8a:	60bb      	str	r3, [r7, #8]
 8003a8c:	484a      	ldr	r0, [pc, #296]	; (8003bb8 <SEGGER_SYSVIEW_Start+0x174>)
 8003a8e:	f7ff fbc7 	bl	8003220 <_PreparePacket>
 8003a92:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a9c:	4b44      	ldr	r3, [pc, #272]	; (8003bb0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aa2:	e00b      	b.n	8003abc <SEGGER_SYSVIEW_Start+0x78>
 8003aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	701a      	strb	r2, [r3, #0]
 8003ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab8:	09db      	lsrs	r3, r3, #7
 8003aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abe:	2b7f      	cmp	r3, #127	; 0x7f
 8003ac0:	d8f0      	bhi.n	8003aa4 <SEGGER_SYSVIEW_Start+0x60>
 8003ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ac8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad6:	4b36      	ldr	r3, [pc, #216]	; (8003bb0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	623b      	str	r3, [r7, #32]
 8003adc:	e00b      	b.n	8003af6 <SEGGER_SYSVIEW_Start+0xb2>
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	627a      	str	r2, [r7, #36]	; 0x24
 8003ae4:	6a3a      	ldr	r2, [r7, #32]
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	701a      	strb	r2, [r3, #0]
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	09db      	lsrs	r3, r3, #7
 8003af4:	623b      	str	r3, [r7, #32]
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	2b7f      	cmp	r3, #127	; 0x7f
 8003afa:	d8f0      	bhi.n	8003ade <SEGGER_SYSVIEW_Start+0x9a>
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	627a      	str	r2, [r7, #36]	; 0x24
 8003b02:	6a3a      	ldr	r2, [r7, #32]
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	701a      	strb	r2, [r3, #0]
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	61fb      	str	r3, [r7, #28]
 8003b10:	4b27      	ldr	r3, [pc, #156]	; (8003bb0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	e00b      	b.n	8003b30 <SEGGER_SYSVIEW_Start+0xec>
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	61fa      	str	r2, [r7, #28]
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	701a      	strb	r2, [r3, #0]
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	09db      	lsrs	r3, r3, #7
 8003b2e:	61bb      	str	r3, [r7, #24]
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	2b7f      	cmp	r3, #127	; 0x7f
 8003b34:	d8f0      	bhi.n	8003b18 <SEGGER_SYSVIEW_Start+0xd4>
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	61fa      	str	r2, [r7, #28]
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	701a      	strb	r2, [r3, #0]
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	e00b      	b.n	8003b68 <SEGGER_SYSVIEW_Start+0x124>
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	617a      	str	r2, [r7, #20]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	701a      	strb	r2, [r3, #0]
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	09db      	lsrs	r3, r3, #7
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	2b7f      	cmp	r3, #127	; 0x7f
 8003b6c:	d8f0      	bhi.n	8003b50 <SEGGER_SYSVIEW_Start+0x10c>
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	617a      	str	r2, [r7, #20]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	701a      	strb	r2, [r3, #0]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003b7e:	2218      	movs	r2, #24
 8003b80:	6839      	ldr	r1, [r7, #0]
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff fc22 	bl	80033cc <_SendPacket>
      RECORD_END();
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003b8e:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003b96:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003b9c:	f000 f9c8 	bl	8003f30 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003ba0:	f000 f9b2 	bl	8003f08 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003ba4:	f000 fc60 	bl	8004468 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8003ba8:	bf00      	nop
 8003baa:	3730      	adds	r7, #48	; 0x30
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	20003f60 	.word	0x20003f60
 8003bb4:	08005930 	.word	0x08005930
 8003bb8:	20003f90 	.word	0x20003f90

08003bbc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003bc2:	f3ef 8311 	mrs	r3, BASEPRI
 8003bc6:	f04f 0120 	mov.w	r1, #32
 8003bca:	f381 8811 	msr	BASEPRI, r1
 8003bce:	607b      	str	r3, [r7, #4]
 8003bd0:	480b      	ldr	r0, [pc, #44]	; (8003c00 <SEGGER_SYSVIEW_Stop+0x44>)
 8003bd2:	f7ff fb25 	bl	8003220 <_PreparePacket>
 8003bd6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003bd8:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <SEGGER_SYSVIEW_Stop+0x48>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d007      	beq.n	8003bf0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003be0:	220b      	movs	r2, #11
 8003be2:	6839      	ldr	r1, [r7, #0]
 8003be4:	6838      	ldr	r0, [r7, #0]
 8003be6:	f7ff fbf1 	bl	80033cc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003bea:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <SEGGER_SYSVIEW_Stop+0x48>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f383 8811 	msr	BASEPRI, r3
}
 8003bf6:	bf00      	nop
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20003f90 	.word	0x20003f90
 8003c04:	20003f60 	.word	0x20003f60

08003c08 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08c      	sub	sp, #48	; 0x30
 8003c0c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003c0e:	f3ef 8311 	mrs	r3, BASEPRI
 8003c12:	f04f 0120 	mov.w	r1, #32
 8003c16:	f381 8811 	msr	BASEPRI, r1
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	4845      	ldr	r0, [pc, #276]	; (8003d34 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003c1e:	f7ff faff 	bl	8003220 <_PreparePacket>
 8003c22:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c2c:	4b42      	ldr	r3, [pc, #264]	; (8003d38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c32:	e00b      	b.n	8003c4c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]
 8003c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c48:	09db      	lsrs	r3, r3, #7
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8003c50:	d8f0      	bhi.n	8003c34 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	701a      	strb	r2, [r3, #0]
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
 8003c66:	4b34      	ldr	r3, [pc, #208]	; (8003d38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	623b      	str	r3, [r7, #32]
 8003c6c:	e00b      	b.n	8003c86 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	627a      	str	r2, [r7, #36]	; 0x24
 8003c74:	6a3a      	ldr	r2, [r7, #32]
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	09db      	lsrs	r3, r3, #7
 8003c84:	623b      	str	r3, [r7, #32]
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	2b7f      	cmp	r3, #127	; 0x7f
 8003c8a:	d8f0      	bhi.n	8003c6e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	627a      	str	r2, [r7, #36]	; 0x24
 8003c92:	6a3a      	ldr	r2, [r7, #32]
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	701a      	strb	r2, [r3, #0]
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	61fb      	str	r3, [r7, #28]
 8003ca0:	4b25      	ldr	r3, [pc, #148]	; (8003d38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	e00b      	b.n	8003cc0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	61fa      	str	r2, [r7, #28]
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	701a      	strb	r2, [r3, #0]
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	09db      	lsrs	r3, r3, #7
 8003cbe:	61bb      	str	r3, [r7, #24]
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	2b7f      	cmp	r3, #127	; 0x7f
 8003cc4:	d8f0      	bhi.n	8003ca8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	61fa      	str	r2, [r7, #28]
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	701a      	strb	r2, [r3, #0]
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	2302      	movs	r3, #2
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	e00b      	b.n	8003cf8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	617a      	str	r2, [r7, #20]
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	701a      	strb	r2, [r3, #0]
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	09db      	lsrs	r3, r3, #7
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8003cfc:	d8f0      	bhi.n	8003ce0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	617a      	str	r2, [r7, #20]
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003d0e:	2218      	movs	r2, #24
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	68b8      	ldr	r0, [r7, #8]
 8003d14:	f7ff fb5a 	bl	80033cc <_SendPacket>
  RECORD_END();
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003d1e:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003d26:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	4798      	blx	r3
  }
}
 8003d2c:	bf00      	nop
 8003d2e:	3730      	adds	r7, #48	; 0x30
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20003f90 	.word	0x20003f90
 8003d38:	20003f60 	.word	0x20003f60

08003d3c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b092      	sub	sp, #72	; 0x48
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003d44:	f3ef 8311 	mrs	r3, BASEPRI
 8003d48:	f04f 0120 	mov.w	r1, #32
 8003d4c:	f381 8811 	msr	BASEPRI, r1
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	486b      	ldr	r0, [pc, #428]	; (8003f00 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003d54:	f7ff fa64 	bl	8003220 <_PreparePacket>
 8003d58:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	647b      	str	r3, [r7, #68]	; 0x44
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	4b67      	ldr	r3, [pc, #412]	; (8003f04 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	089b      	lsrs	r3, r3, #2
 8003d6e:	643b      	str	r3, [r7, #64]	; 0x40
 8003d70:	e00b      	b.n	8003d8a <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8003d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	647a      	str	r2, [r7, #68]	; 0x44
 8003d78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	701a      	strb	r2, [r3, #0]
 8003d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d86:	09db      	lsrs	r3, r3, #7
 8003d88:	643b      	str	r3, [r7, #64]	; 0x40
 8003d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d8c:	2b7f      	cmp	r3, #127	; 0x7f
 8003d8e:	d8f0      	bhi.n	8003d72 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8003d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	647a      	str	r2, [r7, #68]	; 0x44
 8003d96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d9e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003daa:	e00b      	b.n	8003dc4 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8003dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003db2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	701a      	strb	r2, [r3, #0]
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc0:	09db      	lsrs	r3, r3, #7
 8003dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc6:	2b7f      	cmp	r3, #127	; 0x7f
 8003dc8:	d8f0      	bhi.n	8003dac <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8003dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003dd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	701a      	strb	r2, [r3, #0]
 8003dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd8:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2220      	movs	r2, #32
 8003de0:	4619      	mov	r1, r3
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f7ff f9d0 	bl	8003188 <_EncodeStr>
 8003de8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003dea:	2209      	movs	r2, #9
 8003dec:	68f9      	ldr	r1, [r7, #12]
 8003dee:	6938      	ldr	r0, [r7, #16]
 8003df0:	f7ff faec 	bl	80033cc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	4b40      	ldr	r3, [pc, #256]	; (8003f04 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	089b      	lsrs	r3, r3, #2
 8003e08:	633b      	str	r3, [r7, #48]	; 0x30
 8003e0a:	e00b      	b.n	8003e24 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8003e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	637a      	str	r2, [r7, #52]	; 0x34
 8003e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e20:	09db      	lsrs	r3, r3, #7
 8003e22:	633b      	str	r3, [r7, #48]	; 0x30
 8003e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e26:	2b7f      	cmp	r3, #127	; 0x7f
 8003e28:	d8f0      	bhi.n	8003e0c <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8003e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2c:	1c5a      	adds	r2, r3, #1
 8003e2e:	637a      	str	r2, [r7, #52]	; 0x34
 8003e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]
 8003e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e44:	e00b      	b.n	8003e5e <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8003e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	701a      	strb	r2, [r3, #0]
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	09db      	lsrs	r3, r3, #7
 8003e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e60:	2b7f      	cmp	r3, #127	; 0x7f
 8003e62:	d8f0      	bhi.n	8003e46 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8003e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	701a      	strb	r2, [r3, #0]
 8003e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e72:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	623b      	str	r3, [r7, #32]
 8003e7e:	e00b      	b.n	8003e98 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	627a      	str	r2, [r7, #36]	; 0x24
 8003e86:	6a3a      	ldr	r2, [r7, #32]
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	701a      	strb	r2, [r3, #0]
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	09db      	lsrs	r3, r3, #7
 8003e96:	623b      	str	r3, [r7, #32]
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	2b7f      	cmp	r3, #127	; 0x7f
 8003e9c:	d8f0      	bhi.n	8003e80 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	627a      	str	r2, [r7, #36]	; 0x24
 8003ea4:	6a3a      	ldr	r2, [r7, #32]
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61bb      	str	r3, [r7, #24]
 8003eb6:	e00b      	b.n	8003ed0 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	61fa      	str	r2, [r7, #28]
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	09db      	lsrs	r3, r3, #7
 8003ece:	61bb      	str	r3, [r7, #24]
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	2b7f      	cmp	r3, #127	; 0x7f
 8003ed4:	d8f0      	bhi.n	8003eb8 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	61fa      	str	r2, [r7, #28]
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	701a      	strb	r2, [r3, #0]
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003ee6:	2215      	movs	r2, #21
 8003ee8:	68f9      	ldr	r1, [r7, #12]
 8003eea:	6938      	ldr	r0, [r7, #16]
 8003eec:	f7ff fa6e 	bl	80033cc <_SendPacket>
  RECORD_END();
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f383 8811 	msr	BASEPRI, r3
}
 8003ef6:	bf00      	nop
 8003ef8:	3748      	adds	r7, #72	; 0x48
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20003f90 	.word	0x20003f90
 8003f04:	20003f60 	.word	0x20003f60

08003f08 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003f0c:	4b07      	ldr	r3, [pc, #28]	; (8003f2c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003f14:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003f1e:	4b03      	ldr	r3, [pc, #12]	; (8003f2c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	4798      	blx	r3
  }
}
 8003f26:	bf00      	nop
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20003f60 	.word	0x20003f60

08003f30 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003f36:	4b12      	ldr	r3, [pc, #72]	; (8003f80 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d015      	beq.n	8003f6a <SEGGER_SYSVIEW_RecordSystime+0x3a>
 8003f3e:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d010      	beq.n	8003f6a <SEGGER_SYSVIEW_RecordSystime+0x3a>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003f48:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4798      	blx	r3
 8003f50:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003f54:	6839      	ldr	r1, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003f56:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003f5a:	0025      	movs	r5, r4
 8003f5c:	2600      	movs	r6, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003f5e:	462b      	mov	r3, r5
 8003f60:	461a      	mov	r2, r3
 8003f62:	200d      	movs	r0, #13
 8003f64:	f7ff fb5e 	bl	8003624 <SEGGER_SYSVIEW_RecordU32x2>
 8003f68:	e005      	b.n	8003f76 <SEGGER_SYSVIEW_RecordSystime+0x46>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003f6a:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <SEGGER_SYSVIEW_RecordSystime+0x54>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4619      	mov	r1, r3
 8003f70:	200c      	movs	r0, #12
 8003f72:	f7ff fb1b 	bl	80035ac <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20003f60 	.word	0x20003f60
 8003f84:	e0001004 	.word	0xe0001004

08003f88 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003f8e:	f3ef 8311 	mrs	r3, BASEPRI
 8003f92:	f04f 0120 	mov.w	r1, #32
 8003f96:	f381 8811 	msr	BASEPRI, r1
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	4819      	ldr	r0, [pc, #100]	; (8004004 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8003f9e:	f7ff f93f 	bl	8003220 <_PreparePacket>
 8003fa2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8003fa8:	4b17      	ldr	r3, [pc, #92]	; (8004008 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	e00b      	b.n	8003fd4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	617a      	str	r2, [r7, #20]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	09db      	lsrs	r3, r3, #7
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	2b7f      	cmp	r3, #127	; 0x7f
 8003fd8:	d8f0      	bhi.n	8003fbc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	617a      	str	r2, [r7, #20]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	701a      	strb	r2, [r3, #0]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8003fea:	2202      	movs	r2, #2
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	68b8      	ldr	r0, [r7, #8]
 8003ff0:	f7ff f9ec 	bl	80033cc <_SendPacket>
  RECORD_END();
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f383 8811 	msr	BASEPRI, r3
}
 8003ffa:	bf00      	nop
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20003f90 	.word	0x20003f90
 8004008:	e000ed04 	.word	0xe000ed04

0800400c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004012:	f3ef 8311 	mrs	r3, BASEPRI
 8004016:	f04f 0120 	mov.w	r1, #32
 800401a:	f381 8811 	msr	BASEPRI, r1
 800401e:	607b      	str	r3, [r7, #4]
 8004020:	4807      	ldr	r0, [pc, #28]	; (8004040 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004022:	f7ff f8fd 	bl	8003220 <_PreparePacket>
 8004026:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004028:	2203      	movs	r2, #3
 800402a:	6839      	ldr	r1, [r7, #0]
 800402c:	6838      	ldr	r0, [r7, #0]
 800402e:	f7ff f9cd 	bl	80033cc <_SendPacket>
  RECORD_END();
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f383 8811 	msr	BASEPRI, r3
}
 8004038:	bf00      	nop
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	20003f90 	.word	0x20003f90

08004044 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800404a:	f3ef 8311 	mrs	r3, BASEPRI
 800404e:	f04f 0120 	mov.w	r1, #32
 8004052:	f381 8811 	msr	BASEPRI, r1
 8004056:	607b      	str	r3, [r7, #4]
 8004058:	4807      	ldr	r0, [pc, #28]	; (8004078 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800405a:	f7ff f8e1 	bl	8003220 <_PreparePacket>
 800405e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004060:	2212      	movs	r2, #18
 8004062:	6839      	ldr	r1, [r7, #0]
 8004064:	6838      	ldr	r0, [r7, #0]
 8004066:	f7ff f9b1 	bl	80033cc <_SendPacket>
  RECORD_END();
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f383 8811 	msr	BASEPRI, r3
}
 8004070:	bf00      	nop
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	20003f90 	.word	0x20003f90

0800407c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004082:	f3ef 8311 	mrs	r3, BASEPRI
 8004086:	f04f 0120 	mov.w	r1, #32
 800408a:	f381 8811 	msr	BASEPRI, r1
 800408e:	607b      	str	r3, [r7, #4]
 8004090:	4807      	ldr	r0, [pc, #28]	; (80040b0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004092:	f7ff f8c5 	bl	8003220 <_PreparePacket>
 8004096:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004098:	2211      	movs	r2, #17
 800409a:	6839      	ldr	r1, [r7, #0]
 800409c:	6838      	ldr	r0, [r7, #0]
 800409e:	f7ff f995 	bl	80033cc <_SendPacket>
  RECORD_END();
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f383 8811 	msr	BASEPRI, r3
}
 80040a8:	bf00      	nop
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	20003f90 	.word	0x20003f90

080040b4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80040bc:	f3ef 8311 	mrs	r3, BASEPRI
 80040c0:	f04f 0120 	mov.w	r1, #32
 80040c4:	f381 8811 	msr	BASEPRI, r1
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	481a      	ldr	r0, [pc, #104]	; (8004134 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80040cc:	f7ff f8a8 	bl	8003220 <_PreparePacket>
 80040d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80040d6:	4b18      	ldr	r3, [pc, #96]	; (8004138 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	089b      	lsrs	r3, r3, #2
 80040e0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	61fb      	str	r3, [r7, #28]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	61bb      	str	r3, [r7, #24]
 80040ea:	e00b      	b.n	8004104 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	61fa      	str	r2, [r7, #28]
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	09db      	lsrs	r3, r3, #7
 8004102:	61bb      	str	r3, [r7, #24]
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b7f      	cmp	r3, #127	; 0x7f
 8004108:	d8f0      	bhi.n	80040ec <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	61fa      	str	r2, [r7, #28]
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	701a      	strb	r2, [r3, #0]
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800411a:	2208      	movs	r2, #8
 800411c:	68f9      	ldr	r1, [r7, #12]
 800411e:	6938      	ldr	r0, [r7, #16]
 8004120:	f7ff f954 	bl	80033cc <_SendPacket>
  RECORD_END();
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f383 8811 	msr	BASEPRI, r3
}
 800412a:	bf00      	nop
 800412c:	3720      	adds	r7, #32
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20003f90 	.word	0x20003f90
 8004138:	20003f60 	.word	0x20003f60

0800413c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004144:	f3ef 8311 	mrs	r3, BASEPRI
 8004148:	f04f 0120 	mov.w	r1, #32
 800414c:	f381 8811 	msr	BASEPRI, r1
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	481a      	ldr	r0, [pc, #104]	; (80041bc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004154:	f7ff f864 	bl	8003220 <_PreparePacket>
 8004158:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800415e:	4b18      	ldr	r3, [pc, #96]	; (80041c0 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	089b      	lsrs	r3, r3, #2
 8004168:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	61fb      	str	r3, [r7, #28]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	61bb      	str	r3, [r7, #24]
 8004172:	e00b      	b.n	800418c <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	61fa      	str	r2, [r7, #28]
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	701a      	strb	r2, [r3, #0]
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	09db      	lsrs	r3, r3, #7
 800418a:	61bb      	str	r3, [r7, #24]
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	2b7f      	cmp	r3, #127	; 0x7f
 8004190:	d8f0      	bhi.n	8004174 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	61fa      	str	r2, [r7, #28]
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	701a      	strb	r2, [r3, #0]
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80041a2:	2204      	movs	r2, #4
 80041a4:	68f9      	ldr	r1, [r7, #12]
 80041a6:	6938      	ldr	r0, [r7, #16]
 80041a8:	f7ff f910 	bl	80033cc <_SendPacket>
  RECORD_END();
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f383 8811 	msr	BASEPRI, r3
}
 80041b2:	bf00      	nop
 80041b4:	3720      	adds	r7, #32
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20003f90 	.word	0x20003f90
 80041c0:	20003f60 	.word	0x20003f60

080041c4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80041cc:	f3ef 8311 	mrs	r3, BASEPRI
 80041d0:	f04f 0120 	mov.w	r1, #32
 80041d4:	f381 8811 	msr	BASEPRI, r1
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	481a      	ldr	r0, [pc, #104]	; (8004244 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80041dc:	f7ff f820 	bl	8003220 <_PreparePacket>
 80041e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80041e6:	4b18      	ldr	r3, [pc, #96]	; (8004248 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	089b      	lsrs	r3, r3, #2
 80041f0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	61fb      	str	r3, [r7, #28]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	61bb      	str	r3, [r7, #24]
 80041fa:	e00b      	b.n	8004214 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	61fa      	str	r2, [r7, #28]
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	701a      	strb	r2, [r3, #0]
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	09db      	lsrs	r3, r3, #7
 8004212:	61bb      	str	r3, [r7, #24]
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	2b7f      	cmp	r3, #127	; 0x7f
 8004218:	d8f0      	bhi.n	80041fc <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	61fa      	str	r2, [r7, #28]
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800422a:	2206      	movs	r2, #6
 800422c:	68f9      	ldr	r1, [r7, #12]
 800422e:	6938      	ldr	r0, [r7, #16]
 8004230:	f7ff f8cc 	bl	80033cc <_SendPacket>
  RECORD_END();
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f383 8811 	msr	BASEPRI, r3
}
 800423a:	bf00      	nop
 800423c:	3720      	adds	r7, #32
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	20003f90 	.word	0x20003f90
 8004248:	20003f60 	.word	0x20003f60

0800424c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800424c:	b580      	push	{r7, lr}
 800424e:	b08a      	sub	sp, #40	; 0x28
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004256:	f3ef 8311 	mrs	r3, BASEPRI
 800425a:	f04f 0120 	mov.w	r1, #32
 800425e:	f381 8811 	msr	BASEPRI, r1
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	4827      	ldr	r0, [pc, #156]	; (8004304 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004266:	f7fe ffdb 	bl	8003220 <_PreparePacket>
 800426a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004270:	4b25      	ldr	r3, [pc, #148]	; (8004308 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	089b      	lsrs	r3, r3, #2
 800427a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	623b      	str	r3, [r7, #32]
 8004284:	e00b      	b.n	800429e <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	627a      	str	r2, [r7, #36]	; 0x24
 800428c:	6a3a      	ldr	r2, [r7, #32]
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004294:	b2d2      	uxtb	r2, r2
 8004296:	701a      	strb	r2, [r3, #0]
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	09db      	lsrs	r3, r3, #7
 800429c:	623b      	str	r3, [r7, #32]
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	2b7f      	cmp	r3, #127	; 0x7f
 80042a2:	d8f0      	bhi.n	8004286 <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	627a      	str	r2, [r7, #36]	; 0x24
 80042aa:	6a3a      	ldr	r2, [r7, #32]
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	701a      	strb	r2, [r3, #0]
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	61fb      	str	r3, [r7, #28]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	61bb      	str	r3, [r7, #24]
 80042bc:	e00b      	b.n	80042d6 <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	1c5a      	adds	r2, r3, #1
 80042c2:	61fa      	str	r2, [r7, #28]
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	701a      	strb	r2, [r3, #0]
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	09db      	lsrs	r3, r3, #7
 80042d4:	61bb      	str	r3, [r7, #24]
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	2b7f      	cmp	r3, #127	; 0x7f
 80042da:	d8f0      	bhi.n	80042be <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	61fa      	str	r2, [r7, #28]
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	701a      	strb	r2, [r3, #0]
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80042ec:	2207      	movs	r2, #7
 80042ee:	68f9      	ldr	r1, [r7, #12]
 80042f0:	6938      	ldr	r0, [r7, #16]
 80042f2:	f7ff f86b 	bl	80033cc <_SendPacket>
  RECORD_END();
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f383 8811 	msr	BASEPRI, r3
}
 80042fc:	bf00      	nop
 80042fe:	3728      	adds	r7, #40	; 0x28
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	20003f90 	.word	0x20003f90
 8004308:	20003f60 	.word	0x20003f60

0800430c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004314:	4b04      	ldr	r3, [pc, #16]	; (8004328 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	089b      	lsrs	r3, r3, #2
}
 800431e:	4618      	mov	r0, r3
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr
 8004328:	20003f60 	.word	0x20003f60

0800432c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800432c:	b580      	push	{r7, lr}
 800432e:	b08c      	sub	sp, #48	; 0x30
 8004330:	af00      	add	r7, sp, #0
 8004332:	4603      	mov	r3, r0
 8004334:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004336:	4b3b      	ldr	r3, [pc, #236]	; (8004424 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d06d      	beq.n	800441a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800433e:	4b39      	ldr	r3, [pc, #228]	; (8004424 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004344:	2300      	movs	r3, #0
 8004346:	62bb      	str	r3, [r7, #40]	; 0x28
 8004348:	e008      	b.n	800435c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004352:	2b00      	cmp	r3, #0
 8004354:	d007      	beq.n	8004366 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004358:	3301      	adds	r3, #1
 800435a:	62bb      	str	r3, [r7, #40]	; 0x28
 800435c:	79fa      	ldrb	r2, [r7, #7]
 800435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004360:	429a      	cmp	r2, r3
 8004362:	d8f2      	bhi.n	800434a <SEGGER_SYSVIEW_SendModule+0x1e>
 8004364:	e000      	b.n	8004368 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004366:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436a:	2b00      	cmp	r3, #0
 800436c:	d055      	beq.n	800441a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800436e:	f3ef 8311 	mrs	r3, BASEPRI
 8004372:	f04f 0120 	mov.w	r1, #32
 8004376:	f381 8811 	msr	BASEPRI, r1
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	482a      	ldr	r0, [pc, #168]	; (8004428 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800437e:	f7fe ff4f 	bl	8003220 <_PreparePacket>
 8004382:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	627b      	str	r3, [r7, #36]	; 0x24
 800438c:	79fb      	ldrb	r3, [r7, #7]
 800438e:	623b      	str	r3, [r7, #32]
 8004390:	e00b      	b.n	80043aa <SEGGER_SYSVIEW_SendModule+0x7e>
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	627a      	str	r2, [r7, #36]	; 0x24
 8004398:	6a3a      	ldr	r2, [r7, #32]
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	701a      	strb	r2, [r3, #0]
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	09db      	lsrs	r3, r3, #7
 80043a8:	623b      	str	r3, [r7, #32]
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	2b7f      	cmp	r3, #127	; 0x7f
 80043ae:	d8f0      	bhi.n	8004392 <SEGGER_SYSVIEW_SendModule+0x66>
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	627a      	str	r2, [r7, #36]	; 0x24
 80043b6:	6a3a      	ldr	r2, [r7, #32]
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	701a      	strb	r2, [r3, #0]
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	61fb      	str	r3, [r7, #28]
 80043c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	61bb      	str	r3, [r7, #24]
 80043ca:	e00b      	b.n	80043e4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	61fa      	str	r2, [r7, #28]
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	701a      	strb	r2, [r3, #0]
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	09db      	lsrs	r3, r3, #7
 80043e2:	61bb      	str	r3, [r7, #24]
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	2b7f      	cmp	r3, #127	; 0x7f
 80043e8:	d8f0      	bhi.n	80043cc <SEGGER_SYSVIEW_SendModule+0xa0>
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	61fa      	str	r2, [r7, #28]
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80043fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2280      	movs	r2, #128	; 0x80
 8004400:	4619      	mov	r1, r3
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f7fe fec0 	bl	8003188 <_EncodeStr>
 8004408:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800440a:	2216      	movs	r2, #22
 800440c:	68f9      	ldr	r1, [r7, #12]
 800440e:	6938      	ldr	r0, [r7, #16]
 8004410:	f7fe ffdc 	bl	80033cc <_SendPacket>
      RECORD_END();
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800441a:	bf00      	nop
 800441c:	3730      	adds	r7, #48	; 0x30
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20003f88 	.word	0x20003f88
 8004428:	20003f90 	.word	0x20003f90

0800442c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004432:	4b0c      	ldr	r3, [pc, #48]	; (8004464 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00f      	beq.n	800445a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800443a:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f2      	bne.n	8004440 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800445a:	bf00      	nop
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	20003f88 	.word	0x20003f88

08004468 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800446e:	f3ef 8311 	mrs	r3, BASEPRI
 8004472:	f04f 0120 	mov.w	r1, #32
 8004476:	f381 8811 	msr	BASEPRI, r1
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	4817      	ldr	r0, [pc, #92]	; (80044dc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800447e:	f7fe fecf 	bl	8003220 <_PreparePacket>
 8004482:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	e00b      	b.n	80044ac <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	617a      	str	r2, [r7, #20]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	09db      	lsrs	r3, r3, #7
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	2b7f      	cmp	r3, #127	; 0x7f
 80044b0:	d8f0      	bhi.n	8004494 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	617a      	str	r2, [r7, #20]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80044c2:	221b      	movs	r2, #27
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	68b8      	ldr	r0, [r7, #8]
 80044c8:	f7fe ff80 	bl	80033cc <_SendPacket>
  RECORD_END();
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f383 8811 	msr	BASEPRI, r3
}
 80044d2:	bf00      	nop
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20003f90 	.word	0x20003f90
 80044e0:	20003f8c 	.word	0x20003f8c

080044e4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08a      	sub	sp, #40	; 0x28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80044ec:	f3ef 8311 	mrs	r3, BASEPRI
 80044f0:	f04f 0120 	mov.w	r1, #32
 80044f4:	f381 8811 	msr	BASEPRI, r1
 80044f8:	617b      	str	r3, [r7, #20]
 80044fa:	4827      	ldr	r0, [pc, #156]	; (8004598 <SEGGER_SYSVIEW_Warn+0xb4>)
 80044fc:	f7fe fe90 	bl	8003220 <_PreparePacket>
 8004500:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004502:	2280      	movs	r2, #128	; 0x80
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	6938      	ldr	r0, [r7, #16]
 8004508:	f7fe fe3e 	bl	8003188 <_EncodeStr>
 800450c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	627b      	str	r3, [r7, #36]	; 0x24
 8004512:	2301      	movs	r3, #1
 8004514:	623b      	str	r3, [r7, #32]
 8004516:	e00b      	b.n	8004530 <SEGGER_SYSVIEW_Warn+0x4c>
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	627a      	str	r2, [r7, #36]	; 0x24
 800451e:	6a3a      	ldr	r2, [r7, #32]
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	701a      	strb	r2, [r3, #0]
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	09db      	lsrs	r3, r3, #7
 800452e:	623b      	str	r3, [r7, #32]
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	2b7f      	cmp	r3, #127	; 0x7f
 8004534:	d8f0      	bhi.n	8004518 <SEGGER_SYSVIEW_Warn+0x34>
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	627a      	str	r2, [r7, #36]	; 0x24
 800453c:	6a3a      	ldr	r2, [r7, #32]
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	701a      	strb	r2, [r3, #0]
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	61fb      	str	r3, [r7, #28]
 800454a:	2300      	movs	r3, #0
 800454c:	61bb      	str	r3, [r7, #24]
 800454e:	e00b      	b.n	8004568 <SEGGER_SYSVIEW_Warn+0x84>
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	61fa      	str	r2, [r7, #28]
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	09db      	lsrs	r3, r3, #7
 8004566:	61bb      	str	r3, [r7, #24]
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	2b7f      	cmp	r3, #127	; 0x7f
 800456c:	d8f0      	bhi.n	8004550 <SEGGER_SYSVIEW_Warn+0x6c>
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	61fa      	str	r2, [r7, #28]
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800457e:	221a      	movs	r2, #26
 8004580:	68f9      	ldr	r1, [r7, #12]
 8004582:	6938      	ldr	r0, [r7, #16]
 8004584:	f7fe ff22 	bl	80033cc <_SendPacket>
  RECORD_END();
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f383 8811 	msr	BASEPRI, r3
}
 800458e:	bf00      	nop
 8004590:	3728      	adds	r7, #40	; 0x28
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20003f90 	.word	0x20003f90

0800459c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	4603      	mov	r3, r0
 80045a4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80045a6:	4908      	ldr	r1, [pc, #32]	; (80045c8 <NVIC_EnableIRQ+0x2c>)
 80045a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	79fa      	ldrb	r2, [r7, #7]
 80045b0:	f002 021f 	and.w	r2, r2, #31
 80045b4:	2001      	movs	r0, #1
 80045b6:	fa00 f202 	lsl.w	r2, r0, r2
 80045ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bc80      	pop	{r7}
 80045c6:	4770      	bx	lr
 80045c8:	e000e100 	.word	0xe000e100

080045cc <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	6039      	str	r1, [r7, #0]
 80045d6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80045d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	da0b      	bge.n	80045f8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80045e0:	490d      	ldr	r1, [pc, #52]	; (8004618 <NVIC_SetPriority+0x4c>)
 80045e2:	79fb      	ldrb	r3, [r7, #7]
 80045e4:	f003 030f 	and.w	r3, r3, #15
 80045e8:	3b04      	subs	r3, #4
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	0112      	lsls	r2, r2, #4
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	440b      	add	r3, r1
 80045f4:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80045f6:	e009      	b.n	800460c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80045f8:	4908      	ldr	r1, [pc, #32]	; (800461c <NVIC_SetPriority+0x50>)
 80045fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	0112      	lsls	r2, r2, #4
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	440b      	add	r3, r1
 8004608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	e000ed00 	.word	0xe000ed00
 800461c:	e000e100 	.word	0xe000e100

08004620 <main>:
\r\nExit_APP			--->0 \
\r\nType your Option Here : "};

/*****************************Main Function****************************/
int main(void)
{
 8004620:	b5b0      	push	{r4, r5, r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af02      	add	r7, sp, #8
	// Initializations
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8004626:	f44f 7040 	mov.w	r0, #768	; 0x300
 800462a:	f7fb fd99 	bl	8000160 <NVIC_PriorityGroupConfig>
	prvSetupHardware();
 800462e:	f000 f925 	bl	800487c <prvSetupHardware>


	printmsg("\r\nThis Queue Command Processing Project\r\n");
 8004632:	482c      	ldr	r0, [pc, #176]	; (80046e4 <main+0xc4>)
 8004634:	f000 f92a 	bl	800488c <printmsg>

	//Creation of Command Queue of 10 pointer to APP_CMD Structure
	//Using Pointer to minimize heap allocation memory it will have 4*10 = 40bytes
	comman_queue_handle = xQueueCreate(10,sizeof(APP_CMD_t *));
 8004638:	2200      	movs	r2, #0
 800463a:	2104      	movs	r1, #4
 800463c:	200a      	movs	r0, #10
 800463e:	f7fc fc8b 	bl	8000f58 <xQueueGenericCreate>
 8004642:	4602      	mov	r2, r0
 8004644:	4b28      	ldr	r3, [pc, #160]	; (80046e8 <main+0xc8>)
 8004646:	601a      	str	r2, [r3, #0]

	// Creation of UART_Write Queue of 10 pointer to char
	uart_write_queue_handle = xQueueCreate(10,sizeof(char *));
 8004648:	2200      	movs	r2, #0
 800464a:	2104      	movs	r1, #4
 800464c:	200a      	movs	r0, #10
 800464e:	f7fc fc83 	bl	8000f58 <xQueueGenericCreate>
 8004652:	4602      	mov	r2, r0
 8004654:	4b25      	ldr	r3, [pc, #148]	; (80046ec <main+0xcc>)
 8004656:	601a      	str	r2, [r3, #0]


	// check if the Creation of the Queue is successful or not
	if( (comman_queue_handle != NULL) && (uart_write_queue_handle != NULL) )
 8004658:	4b23      	ldr	r3, [pc, #140]	; (80046e8 <main+0xc8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d032      	beq.n	80046c6 <main+0xa6>
 8004660:	4b22      	ldr	r3, [pc, #136]	; (80046ec <main+0xcc>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d02e      	beq.n	80046c6 <main+0xa6>
	{
	// Create Task 1
	xTaskCreate(vTask1_menu_display,"TASK1-MENU",300,NULL,1,&xTaskHandle1);
 8004668:	4b21      	ldr	r3, [pc, #132]	; (80046f0 <main+0xd0>)
 800466a:	9301      	str	r3, [sp, #4]
 800466c:	2301      	movs	r3, #1
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	2300      	movs	r3, #0
 8004672:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004676:	491f      	ldr	r1, [pc, #124]	; (80046f4 <main+0xd4>)
 8004678:	481f      	ldr	r0, [pc, #124]	; (80046f8 <main+0xd8>)
 800467a:	f7fd f81b 	bl	80016b4 <xTaskCreate>

	// Create Task 2
	xTaskCreate(vTask2_cmd_handling,"TASK2-CMD-HANDLING",300,NULL,2,&xTaskHandle2);
 800467e:	4b1f      	ldr	r3, [pc, #124]	; (80046fc <main+0xdc>)
 8004680:	9301      	str	r3, [sp, #4]
 8004682:	2302      	movs	r3, #2
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	2300      	movs	r3, #0
 8004688:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800468c:	491c      	ldr	r1, [pc, #112]	; (8004700 <main+0xe0>)
 800468e:	481d      	ldr	r0, [pc, #116]	; (8004704 <main+0xe4>)
 8004690:	f7fd f810 	bl	80016b4 <xTaskCreate>

	// Create Task 3
	xTaskCreate(vTask3_cmd_processing,"TASK3-CMD-PROCESSING",300,NULL,2,&xTaskHandle3);
 8004694:	4b1c      	ldr	r3, [pc, #112]	; (8004708 <main+0xe8>)
 8004696:	9301      	str	r3, [sp, #4]
 8004698:	2302      	movs	r3, #2
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	2300      	movs	r3, #0
 800469e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046a2:	491a      	ldr	r1, [pc, #104]	; (800470c <main+0xec>)
 80046a4:	481a      	ldr	r0, [pc, #104]	; (8004710 <main+0xf0>)
 80046a6:	f7fd f805 	bl	80016b4 <xTaskCreate>

	// Create Task 4
	xTaskCreate(vTask4_uart_write,"TASK4-UART-WRITE",300,NULL,2,&xTaskHandle4);
 80046aa:	4b1a      	ldr	r3, [pc, #104]	; (8004714 <main+0xf4>)
 80046ac:	9301      	str	r3, [sp, #4]
 80046ae:	2302      	movs	r3, #2
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	2300      	movs	r3, #0
 80046b4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046b8:	4917      	ldr	r1, [pc, #92]	; (8004718 <main+0xf8>)
 80046ba:	4818      	ldr	r0, [pc, #96]	; (800471c <main+0xfc>)
 80046bc:	f7fc fffa 	bl	80016b4 <xTaskCreate>

	//Start Scheduler
	vTaskStartScheduler();
 80046c0:	f7fd f9d8 	bl	8001a74 <vTaskStartScheduler>
 80046c4:	e00c      	b.n	80046e0 <main+0xc0>

	}
	else
	{
		sprintf(usr_msg,"Queue Creation Faild \r\n");
 80046c6:	4a16      	ldr	r2, [pc, #88]	; (8004720 <main+0x100>)
 80046c8:	4b16      	ldr	r3, [pc, #88]	; (8004724 <main+0x104>)
 80046ca:	4614      	mov	r4, r2
 80046cc:	461d      	mov	r5, r3
 80046ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80046d6:	e884 0003 	stmia.w	r4, {r0, r1}
		printmsg(usr_msg);
 80046da:	4811      	ldr	r0, [pc, #68]	; (8004720 <main+0x100>)
 80046dc:	f000 f8d6 	bl	800488c <printmsg>
	}

	while(1);
 80046e0:	e7fe      	b.n	80046e0 <main+0xc0>
 80046e2:	bf00      	nop
 80046e4:	08005844 	.word	0x08005844
 80046e8:	2000414c 	.word	0x2000414c
 80046ec:	20004150 	.word	0x20004150
 80046f0:	2000413c 	.word	0x2000413c
 80046f4:	08005870 	.word	0x08005870
 80046f8:	08004729 	.word	0x08004729
 80046fc:	20004140 	.word	0x20004140
 8004700:	0800587c 	.word	0x0800587c
 8004704:	08004761 	.word	0x08004761
 8004708:	20004144 	.word	0x20004144
 800470c:	08005890 	.word	0x08005890
 8004710:	080047b1 	.word	0x080047b1
 8004714:	20004148 	.word	0x20004148
 8004718:	080058a8 	.word	0x080058a8
 800471c:	08004851 	.word	0x08004851
 8004720:	20004074 	.word	0x20004074
 8004724:	080058bc 	.word	0x080058bc

08004728 <vTask1_menu_display>:


/***************************** Task Handler Definition****************************/

void vTask1_menu_display (void *param)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
	char *pData = menu;
 8004730:	4b09      	ldr	r3, [pc, #36]	; (8004758 <vTask1_menu_display+0x30>)
 8004732:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		// second Parameter is address of Pointer to the Data
		xQueueSend(uart_write_queue_handle,&pData,portMAX_DELAY);
 8004734:	4b09      	ldr	r3, [pc, #36]	; (800475c <vTask1_menu_display+0x34>)
 8004736:	6818      	ldr	r0, [r3, #0]
 8004738:	f107 010c 	add.w	r1, r7, #12
 800473c:	2300      	movs	r3, #0
 800473e:	f04f 32ff 	mov.w	r2, #4294967295
 8004742:	f7fc fc57 	bl	8000ff4 <xQueueGenericSend>

		// lets wait here until someone Notifies
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8004746:	f04f 33ff 	mov.w	r3, #4294967295
 800474a:	2200      	movs	r2, #0
 800474c:	2100      	movs	r1, #0
 800474e:	2000      	movs	r0, #0
 8004750:	f7fd fdbe 	bl	80022d0 <xTaskNotifyWait>
		xQueueSend(uart_write_queue_handle,&pData,portMAX_DELAY);
 8004754:	e7ee      	b.n	8004734 <vTask1_menu_display+0xc>
 8004756:	bf00      	nop
 8004758:	20000018 	.word	0x20000018
 800475c:	20004150 	.word	0x20004150

08004760 <vTask2_cmd_handling>:

	}
}
void vTask2_cmd_handling (void *param)
{
 8004760:	b590      	push	{r4, r7, lr}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
	APP_CMD_t * new_cmd;
	while(1)
	{
		// wait until Getting notified from UART ISR
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8004768:	f04f 33ff 	mov.w	r3, #4294967295
 800476c:	2200      	movs	r2, #0
 800476e:	2100      	movs	r1, #0
 8004770:	2000      	movs	r0, #0
 8004772:	f7fd fdad 	bl	80022d0 <xTaskNotifyWait>

		new_cmd= (APP_CMD_t*)pvPortMalloc(sizeof(APP_CMD_t));
 8004776:	200b      	movs	r0, #11
 8004778:	f7fc fa00 	bl	8000b7c <pvPortMalloc>
 800477c:	4603      	mov	r3, r0
 800477e:	60fb      	str	r3, [r7, #12]
		// Global Data is shared between interrupt and command Handling Task
		// "g_command_buffer"  can be updated from ISR at any time
		// Here there is a Chance of Race condition
		//so, Solution is to Disable Interrupts until finishing accessing Global Variables

		taskENTER_CRITICAL(); // Disable Interrupts
 8004780:	f7fc f962 	bl	8000a48 <vPortEnterCritical>
		new_cmd->COMMAND_NUM= getCommandCode(g_command_buffer);
 8004784:	68fc      	ldr	r4, [r7, #12]
 8004786:	4808      	ldr	r0, [pc, #32]	; (80047a8 <vTask2_cmd_handling+0x48>)
 8004788:	f000 f924 	bl	80049d4 <getCommandCode>
 800478c:	4603      	mov	r3, r0
 800478e:	7023      	strb	r3, [r4, #0]
		taskEXIT_CRITICAL(); // Enable Interrupts
 8004790:	f7fc f972 	bl	8000a78 <vPortExitCritical>

		// Send Command to the COMMAND_QUEUE
		xQueueSend(comman_queue_handle,&new_cmd,portMAX_DELAY);
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <vTask2_cmd_handling+0x4c>)
 8004796:	6818      	ldr	r0, [r3, #0]
 8004798:	f107 010c 	add.w	r1, r7, #12
 800479c:	2300      	movs	r3, #0
 800479e:	f04f 32ff 	mov.w	r2, #4294967295
 80047a2:	f7fc fc27 	bl	8000ff4 <xQueueGenericSend>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80047a6:	e7df      	b.n	8004768 <vTask2_cmd_handling+0x8>
 80047a8:	20004210 	.word	0x20004210
 80047ac:	2000414c 	.word	0x2000414c

080047b0 <vTask3_cmd_processing>:
	}
}
void vTask3_cmd_processing (void *param)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b092      	sub	sp, #72	; 0x48
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
	APP_CMD_t * new_cmd;
	char task_mesg[50];
	uint32_t Toggle_Duration_Ticks= pdMS_TO_TICKS(TOGGLE_DURATION_MS);
 80047b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80047bc:	647b      	str	r3, [r7, #68]	; 0x44
	while(1)
	{
		// Receive Command from COMMAND QUEUE
		xQueueReceive(comman_queue_handle,(void*)&new_cmd,portMAX_DELAY);
 80047be:	4b23      	ldr	r3, [pc, #140]	; (800484c <vTask3_cmd_processing+0x9c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80047c6:	f04f 32ff 	mov.w	r2, #4294967295
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fc fd54 	bl	8001278 <xQueueReceive>

		// Response to The Command which is get from User
		switch(new_cmd->COMMAND_NUM)
 80047d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b06      	cmp	r3, #6
 80047d6:	d82e      	bhi.n	8004836 <vTask3_cmd_processing+0x86>
 80047d8:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <vTask3_cmd_processing+0x30>)
 80047da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047de:	bf00      	nop
 80047e0:	08004831 	.word	0x08004831
 80047e4:	080047fd 	.word	0x080047fd
 80047e8:	08004803 	.word	0x08004803
 80047ec:	08004809 	.word	0x08004809
 80047f0:	08004811 	.word	0x08004811
 80047f4:	08004819 	.word	0x08004819
 80047f8:	08004825 	.word	0x08004825
		{
		case LED_ON_COMMAND:  LED_ON();
 80047fc:	f000 f960 	bl	8004ac0 <LED_ON>
							break ;
 8004800:	e01e      	b.n	8004840 <vTask3_cmd_processing+0x90>
		case LED_OFF_COMMAND: LED_OFF();
 8004802:	f000 f969 	bl	8004ad8 <LED_OFF>
							break ;
 8004806:	e01b      	b.n	8004840 <vTask3_cmd_processing+0x90>
		case LED_TOGGLE_COMMAND: LED_ToggleStart(Toggle_Duration_Ticks);
 8004808:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800480a:	f000 f971 	bl	8004af0 <LED_ToggleStart>
							break ;
 800480e:	e017      	b.n	8004840 <vTask3_cmd_processing+0x90>
		case LED_TOGGLE_STOP: LED_ToggleStop(Toggle_Duration_Ticks);
 8004810:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004812:	f000 f9a5 	bl	8004b60 <LED_ToggleStop>
							break ;
 8004816:	e013      	b.n	8004840 <vTask3_cmd_processing+0x90>
		case LED_READ_STATUS: LED_ReadStatus(task_mesg);
 8004818:	f107 030c 	add.w	r3, r7, #12
 800481c:	4618      	mov	r0, r3
 800481e:	f000 f9bb 	bl	8004b98 <LED_ReadStatus>
							break ;
 8004822:	e00d      	b.n	8004840 <vTask3_cmd_processing+0x90>
		case RTC_READ_DATE_TIME: RTC_ReadInfo(task_mesg);
 8004824:	f107 030c 	add.w	r3, r7, #12
 8004828:	4618      	mov	r0, r3
 800482a:	f000 f9d7 	bl	8004bdc <RTC_ReadInfo>
							break ;
 800482e:	e007      	b.n	8004840 <vTask3_cmd_processing+0x90>
		case Exit_APP_COMMAND : Exit_App();
 8004830:	f000 fa16 	bl	8004c60 <Exit_App>
							break ;
 8004834:	e004      	b.n	8004840 <vTask3_cmd_processing+0x90>
		default: Print_Error_Message(task_mesg);
 8004836:	f107 030c 	add.w	r3, r7, #12
 800483a:	4618      	mov	r0, r3
 800483c:	f000 f9ee 	bl	8004c1c <Print_Error_Message>
		}

		// Lets Free The Allocated Memory for the "new_cmd"
		vPortFree(new_cmd);
 8004840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004842:	4618      	mov	r0, r3
 8004844:	f7fc fa34 	bl	8000cb0 <vPortFree>
		xQueueReceive(comman_queue_handle,(void*)&new_cmd,portMAX_DELAY);
 8004848:	e7b9      	b.n	80047be <vTask3_cmd_processing+0xe>
 800484a:	bf00      	nop
 800484c:	2000414c 	.word	0x2000414c

08004850 <vTask4_uart_write>:

	}
}
void vTask4_uart_write (void *param)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
	char *pData=NULL ;
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		// Read data From The UART Queue
		xQueueReceive(uart_write_queue_handle,&pData,portMAX_DELAY);
 800485c:	4b06      	ldr	r3, [pc, #24]	; (8004878 <vTask4_uart_write+0x28>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f107 010c 	add.w	r1, r7, #12
 8004864:	f04f 32ff 	mov.w	r2, #4294967295
 8004868:	4618      	mov	r0, r3
 800486a:	f7fc fd05 	bl	8001278 <xQueueReceive>

		//Print The Data via UART
		printmsg(pData);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4618      	mov	r0, r3
 8004872:	f000 f80b 	bl	800488c <printmsg>
		xQueueReceive(uart_write_queue_handle,&pData,portMAX_DELAY);
 8004876:	e7f1      	b.n	800485c <vTask4_uart_write+0xc>
 8004878:	20004150 	.word	0x20004150

0800487c <prvSetupHardware>:
}

/*****************************FUNCTION Definition****************************/

static void prvSetupHardware(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
	//Setup GPIO
	prvGPIOSetup();
 8004880:	f000 f878 	bl	8004974 <prvGPIOSetup>

	//setup UART_1
	prvUARTSetup();
 8004884:	f000 f82a 	bl	80048dc <prvUARTSetup>
}
 8004888:	bf00      	nop
 800488a:	bd80      	pop	{r7, pc}

0800488c <printmsg>:

void printmsg(char *msg)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i<strlen(msg) ; i++)
 8004894:	2300      	movs	r3, #0
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	e013      	b.n	80048c2 <printmsg+0x36>
	{
		//polling to check that the Date Register is Empty
		while(USART_GetFlagStatus(USART1, USART_FLAG_TXE)!=SET);
 800489a:	bf00      	nop
 800489c:	2180      	movs	r1, #128	; 0x80
 800489e:	480e      	ldr	r0, [pc, #56]	; (80048d8 <printmsg+0x4c>)
 80048a0:	f7fb ff7c 	bl	800079c <USART_GetFlagStatus>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d1f8      	bne.n	800489c <printmsg+0x10>
		//put our mesg in the UART Data Register
		USART_SendData(USART1,msg[i]);
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4413      	add	r3, r2
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	4619      	mov	r1, r3
 80048b6:	4808      	ldr	r0, [pc, #32]	; (80048d8 <printmsg+0x4c>)
 80048b8:	f7fb ff50 	bl	800075c <USART_SendData>
	for(uint32_t i=0 ; i<strlen(msg) ; i++)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	3301      	adds	r3, #1
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fb fc44 	bl	8000150 <strlen>
 80048c8:	4602      	mov	r2, r0
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d8e4      	bhi.n	800489a <printmsg+0xe>
	}

}
 80048d0:	bf00      	nop
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40013800 	.word	0x40013800

080048dc <prvUARTSetup>:

void prvUARTSetup()
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
    USART_InitTypeDef usart1_init_struct;
    /* Bit configuration structure for GPIOA PIN9 and PIN10 */
    GPIO_InitTypeDef gpioa_init_struct;

    /* Enalbe clock for USART1, AFIO and GPIOA */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_AFIO |
 80048e2:	2101      	movs	r1, #1
 80048e4:	f244 0005 	movw	r0, #16389	; 0x4005
 80048e8:	f7fb fdfa 	bl	80004e0 <RCC_APB2PeriphClockCmd>
                           RCC_APB2Periph_GPIOA, ENABLE);

    /* GPIOA PIN9 alternative function Tx */
    gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
 80048ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048f0:	80bb      	strh	r3, [r7, #4]
    gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 80048f2:	2303      	movs	r3, #3
 80048f4:	71bb      	strb	r3, [r7, #6]
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
 80048f6:	2318      	movs	r3, #24
 80048f8:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &gpioa_init_struct);
 80048fa:	1d3b      	adds	r3, r7, #4
 80048fc:	4619      	mov	r1, r3
 80048fe:	481b      	ldr	r0, [pc, #108]	; (800496c <prvUARTSetup+0x90>)
 8004900:	f7fb fc40 	bl	8000184 <GPIO_Init>

    /* GPIOA PIN9 alternative function Rx */
    gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
 8004904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004908:	80bb      	strh	r3, [r7, #4]
    gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 800490a:	2303      	movs	r3, #3
 800490c:	71bb      	strb	r3, [r7, #6]
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800490e:	2304      	movs	r3, #4
 8004910:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &gpioa_init_struct);
 8004912:	1d3b      	adds	r3, r7, #4
 8004914:	4619      	mov	r1, r3
 8004916:	4815      	ldr	r0, [pc, #84]	; (800496c <prvUARTSetup+0x90>)
 8004918:	f7fb fc34 	bl	8000184 <GPIO_Init>

    /* Enable USART 1 Byte Reception Interrupt in Micro_controller */
    USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);
 800491c:	2201      	movs	r2, #1
 800491e:	f240 5125 	movw	r1, #1317	; 0x525
 8004922:	4813      	ldr	r0, [pc, #76]	; (8004970 <prvUARTSetup+0x94>)
 8004924:	f7fb fed3 	bl	80006ce <USART_ITConfig>

    /* Set The Priority in NVIC for USART1 interrupt */
    NVIC_SetPriority(USART1_IRQn,12);
 8004928:	210c      	movs	r1, #12
 800492a:	2025      	movs	r0, #37	; 0x25
 800492c:	f7ff fe4e 	bl	80045cc <NVIC_SetPriority>

    /* Enable The USART1 IRQ in the NVIC  */
    NVIC_EnableIRQ(USART1_IRQn);
 8004930:	2025      	movs	r0, #37	; 0x25
 8004932:	f7ff fe33 	bl	800459c <NVIC_EnableIRQ>

    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);
 8004936:	2101      	movs	r1, #1
 8004938:	480d      	ldr	r0, [pc, #52]	; (8004970 <prvUARTSetup+0x94>)
 800493a:	f7fb fea9 	bl	8000690 <USART_Cmd>
    /* Baud rate 9600, 8-bit data, One stop bit
     * No parity, Do both Rx and Tx, No HW flow control
     */
    usart1_init_struct.USART_BaudRate = 9600;
 800493e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004942:	60bb      	str	r3, [r7, #8]
    usart1_init_struct.USART_WordLength = USART_WordLength_8b;
 8004944:	2300      	movs	r3, #0
 8004946:	81bb      	strh	r3, [r7, #12]
    usart1_init_struct.USART_StopBits = USART_StopBits_1;
 8004948:	2300      	movs	r3, #0
 800494a:	81fb      	strh	r3, [r7, #14]
    usart1_init_struct.USART_Parity = USART_Parity_No ;
 800494c:	2300      	movs	r3, #0
 800494e:	823b      	strh	r3, [r7, #16]
    usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8004950:	230c      	movs	r3, #12
 8004952:	827b      	strh	r3, [r7, #18]
    usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8004954:	2300      	movs	r3, #0
 8004956:	82bb      	strh	r3, [r7, #20]
    USART_Init(USART1,&usart1_init_struct);
 8004958:	f107 0308 	add.w	r3, r7, #8
 800495c:	4619      	mov	r1, r3
 800495e:	4804      	ldr	r0, [pc, #16]	; (8004970 <prvUARTSetup+0x94>)
 8004960:	f7fb fddc 	bl	800051c <USART_Init>
}
 8004964:	bf00      	nop
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40010800 	.word	0x40010800
 8004970:	40013800 	.word	0x40013800

08004974 <prvGPIOSetup>:

void prvGPIOSetup(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
	//Enable The clok for GPIOA , GPIOC
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
 800497a:	2101      	movs	r1, #1
 800497c:	2004      	movs	r0, #4
 800497e:	f7fb fdaf 	bl	80004e0 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC,ENABLE);
 8004982:	2101      	movs	r1, #1
 8004984:	2010      	movs	r0, #16
 8004986:	f7fb fdab 	bl	80004e0 <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef led_init , Button_init ;

	//initialize the LED PC13
	led_init.GPIO_Mode = GPIO_Mode_Out_PP ;
 800498a:	2310      	movs	r3, #16
 800498c:	71fb      	strb	r3, [r7, #7]
	led_init.GPIO_Pin = GPIO_Pin_13 ;
 800498e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004992:	80bb      	strh	r3, [r7, #4]
	led_init.GPIO_Speed = GPIO_Speed_2MHz ;
 8004994:	2302      	movs	r3, #2
 8004996:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC,&led_init);
 8004998:	1d3b      	adds	r3, r7, #4
 800499a:	4619      	mov	r1, r3
 800499c:	480b      	ldr	r0, [pc, #44]	; (80049cc <prvGPIOSetup+0x58>)
 800499e:	f7fb fbf1 	bl	8000184 <GPIO_Init>

	// turn OFF The LED at the First ** LED is Active LOW **
	GPIO_WriteBit(GPIOC,GPIO_Pin_13,Bit_SET);
 80049a2:	2201      	movs	r2, #1
 80049a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80049a8:	4808      	ldr	r0, [pc, #32]	; (80049cc <prvGPIOSetup+0x58>)
 80049aa:	f7fb fcc0 	bl	800032e <GPIO_WriteBit>

	//initialize the Button PA5
	Button_init.GPIO_Mode = GPIO_Mode_IPD ; // input pull down
 80049ae:	2328      	movs	r3, #40	; 0x28
 80049b0:	70fb      	strb	r3, [r7, #3]
	Button_init.GPIO_Pin = GPIO_Pin_5 ;
 80049b2:	2320      	movs	r3, #32
 80049b4:	803b      	strh	r3, [r7, #0]
	Button_init.GPIO_Speed = GPIO_Speed_2MHz ;
 80049b6:	2302      	movs	r3, #2
 80049b8:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOA,&Button_init);
 80049ba:	463b      	mov	r3, r7
 80049bc:	4619      	mov	r1, r3
 80049be:	4804      	ldr	r0, [pc, #16]	; (80049d0 <prvGPIOSetup+0x5c>)
 80049c0:	f7fb fbe0 	bl	8000184 <GPIO_Init>
}
 80049c4:	bf00      	nop
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40011000 	.word	0x40011000
 80049d0:	40010800 	.word	0x40010800

080049d4 <getCommandCode>:
	uint32_t delay_in_ticks = (delay_in_ms * configTICK_RATE_HZ)/1000 ;
	while(xTaskGetTickCount() < (current_tick_count + delay_in_ticks)) ;
}

uint8_t getCommandCode(uint8_t *buffer)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
	// Convert ASCII to Numerical Value
	return buffer[0]-48;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	3b30      	subs	r3, #48	; 0x30
 80049e2:	b2db      	uxtb	r3, r3
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bc80      	pop	{r7}
 80049ec:	4770      	bx	lr
	...

080049f0 <USART1_IRQHandler>:
/*****************************Call Back Functions****************************/
void USART1_IRQHandler(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af02      	add	r7, sp, #8
	uint16_t uart_data_byte;
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 80049f6:	2300      	movs	r3, #0
 80049f8:	603b      	str	r3, [r7, #0]

	// check if the callback function is called because of Receiving or else
	if( USART_GetFlagStatus(USART1,USART_FLAG_RXNE) )
 80049fa:	2120      	movs	r1, #32
 80049fc:	481e      	ldr	r0, [pc, #120]	; (8004a78 <USART1_IRQHandler+0x88>)
 80049fe:	f7fb fecd 	bl	800079c <USART_GetFlagStatus>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d027      	beq.n	8004a58 <USART1_IRQHandler+0x68>
	{
		// Data Byte is Received from the user
		uart_data_byte=USART_ReceiveData(USART1);
 8004a08:	481b      	ldr	r0, [pc, #108]	; (8004a78 <USART1_IRQHandler+0x88>)
 8004a0a:	f7fb feb8 	bl	800077e <USART_ReceiveData>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	80fb      	strh	r3, [r7, #6]
		// Get the data into The Buffer and save only the LSB
		g_command_buffer[g_command_length++]= uart_data_byte & 0xFF;
 8004a12:	4b1a      	ldr	r3, [pc, #104]	; (8004a7c <USART1_IRQHandler+0x8c>)
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	b2d1      	uxtb	r1, r2
 8004a1a:	4a18      	ldr	r2, [pc, #96]	; (8004a7c <USART1_IRQHandler+0x8c>)
 8004a1c:	7011      	strb	r1, [r2, #0]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	88fb      	ldrh	r3, [r7, #6]
 8004a22:	b2d9      	uxtb	r1, r3
 8004a24:	4b16      	ldr	r3, [pc, #88]	; (8004a80 <USART1_IRQHandler+0x90>)
 8004a26:	5499      	strb	r1, [r3, r2]

		// check if the User press Enter key "End of The Transmission"
		if(uart_data_byte=='\r')
 8004a28:	88fb      	ldrh	r3, [r7, #6]
 8004a2a:	2b0d      	cmp	r3, #13
 8004a2c:	d114      	bne.n	8004a58 <USART1_IRQHandler+0x68>
		{
			// User Finishing Enter The Data

			//1. Reset The Command Length Variable
			g_command_length=0;
 8004a2e:	4b13      	ldr	r3, [pc, #76]	; (8004a7c <USART1_IRQHandler+0x8c>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	701a      	strb	r2, [r3, #0]

			//2. Lets Notify the Command Handling Task
			xTaskNotifyFromISR(xTaskHandle2,0,eNoAction,&pxHigherPriorityTaskWoken) ;
 8004a34:	4b13      	ldr	r3, [pc, #76]	; (8004a84 <USART1_IRQHandler+0x94>)
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	463b      	mov	r3, r7
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	2200      	movs	r2, #0
 8004a40:	2100      	movs	r1, #0
 8004a42:	f7fd fca9 	bl	8002398 <xTaskGenericNotifyFromISR>

			//3. Lets Notify the Menu_Display Handling Task
			xTaskNotifyFromISR(xTaskHandle1,0,eNoAction,&pxHigherPriorityTaskWoken) ;
 8004a46:	4b10      	ldr	r3, [pc, #64]	; (8004a88 <USART1_IRQHandler+0x98>)
 8004a48:	6818      	ldr	r0, [r3, #0]
 8004a4a:	463b      	mov	r3, r7
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	2300      	movs	r3, #0
 8004a50:	2200      	movs	r2, #0
 8004a52:	2100      	movs	r1, #0
 8004a54:	f7fd fca0 	bl	8002398 <xTaskGenericNotifyFromISR>
		}
	}
	// if the above FREE_RTOS APIs Wake up any higher priority Task
	// then yield the processor to the higher priority Task which is just waken up
	if(pxHigherPriorityTaskWoken)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d007      	beq.n	8004a6e <USART1_IRQHandler+0x7e>
	{
		taskYIELD();
 8004a5e:	4b0b      	ldr	r3, [pc, #44]	; (8004a8c <USART1_IRQHandler+0x9c>)
 8004a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	f3bf 8f6f 	isb	sy
	}
}
 8004a6e:	bf00      	nop
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40013800 	.word	0x40013800
 8004a7c:	20004158 	.word	0x20004158
 8004a80:	20004210 	.word	0x20004210
 8004a84:	20004140 	.word	0x20004140
 8004a88:	2000413c 	.word	0x2000413c
 8004a8c:	e000ed04 	.word	0xe000ed04

08004a90 <LED_SW_Timer_CallBack>:
void LED_SW_Timer_CallBack(TimerHandle_t xTimer)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
	GPIO_ToggleBit(GPIOC,GPIO_Pin_13);
 8004a98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a9c:	4803      	ldr	r0, [pc, #12]	; (8004aac <LED_SW_Timer_CallBack+0x1c>)
 8004a9e:	f7fb fc5d 	bl	800035c <GPIO_ToggleBit>
}
 8004aa2:	bf00      	nop
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40011000 	.word	0x40011000

08004ab0 <vApplicationIdleHook>:
void vApplicationIdleHook(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8004ab4:	bf30      	wfi
	// send the cpu to the Normal Sleep
	__WFI();
}
 8004ab6:	bf00      	nop
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bc80      	pop	{r7}
 8004abc:	4770      	bx	lr
	...

08004ac0 <LED_ON>:

/*********************Command Helper Function Definition*********************/
void LED_ON(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
	// LED on The Board is Active Low
	GPIO_WriteBit(GPIOC,GPIO_Pin_13,Bit_RESET);
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004aca:	4802      	ldr	r0, [pc, #8]	; (8004ad4 <LED_ON+0x14>)
 8004acc:	f7fb fc2f 	bl	800032e <GPIO_WriteBit>
}
 8004ad0:	bf00      	nop
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40011000 	.word	0x40011000

08004ad8 <LED_OFF>:
void LED_OFF(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
	// LED on The Board is Active Low
	GPIO_WriteBit(GPIOC,GPIO_Pin_13,Bit_SET);
 8004adc:	2201      	movs	r2, #1
 8004ade:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ae2:	4802      	ldr	r0, [pc, #8]	; (8004aec <LED_OFF+0x14>)
 8004ae4:	f7fb fc23 	bl	800032e <GPIO_WriteBit>
}
 8004ae8:	bf00      	nop
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40011000 	.word	0x40011000

08004af0 <LED_ToggleStart>:
void LED_ToggleStart(uint32_t Duration)
{
 8004af0:	b590      	push	{r4, r7, lr}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	6078      	str	r0, [r7, #4]
	if(LED_Timer_Handle==NULL)
 8004af8:	4b16      	ldr	r3, [pc, #88]	; (8004b54 <LED_ToggleStart+0x64>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d118      	bne.n	8004b32 <LED_ToggleStart+0x42>
	{
		//It's First Enter To That Function

		//1. Lets Create The Software Timer
		LED_Timer_Handle=xTimerCreate("LED-TIMER",Duration,pdTRUE,NULL,LED_SW_Timer_CallBack);
 8004b00:	4b15      	ldr	r3, [pc, #84]	; (8004b58 <LED_ToggleStart+0x68>)
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	2300      	movs	r3, #0
 8004b06:	2201      	movs	r2, #1
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	4814      	ldr	r0, [pc, #80]	; (8004b5c <LED_ToggleStart+0x6c>)
 8004b0c:	f7fd fd9c 	bl	8002648 <xTimerCreate>
 8004b10:	4602      	mov	r2, r0
 8004b12:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <LED_ToggleStart+0x64>)
 8004b14:	601a      	str	r2, [r3, #0]

		//2. Start The Software Timer
		xTimerStart(LED_Timer_Handle,portMAX_DELAY);
 8004b16:	4b0f      	ldr	r3, [pc, #60]	; (8004b54 <LED_ToggleStart+0x64>)
 8004b18:	681c      	ldr	r4, [r3, #0]
 8004b1a:	f7fd f897 	bl	8001c4c <xTaskGetTickCount>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	f04f 33ff 	mov.w	r3, #4294967295
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	2300      	movs	r3, #0
 8004b28:	2101      	movs	r1, #1
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	f7fd fdda 	bl	80026e4 <xTimerGenericCommand>
	else
	{
		// Start The Software Timer
		xTimerStart(LED_Timer_Handle,portMAX_DELAY);
	}
}
 8004b30:	e00c      	b.n	8004b4c <LED_ToggleStart+0x5c>
		xTimerStart(LED_Timer_Handle,portMAX_DELAY);
 8004b32:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <LED_ToggleStart+0x64>)
 8004b34:	681c      	ldr	r4, [r3, #0]
 8004b36:	f7fd f889 	bl	8001c4c <xTaskGetTickCount>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	2300      	movs	r3, #0
 8004b44:	2101      	movs	r1, #1
 8004b46:	4620      	mov	r0, r4
 8004b48:	f7fd fdcc 	bl	80026e4 <xTimerGenericCommand>
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd90      	pop	{r4, r7, pc}
 8004b54:	20004154 	.word	0x20004154
 8004b58:	08004a91 	.word	0x08004a91
 8004b5c:	080058d4 	.word	0x080058d4

08004b60 <LED_ToggleStop>:
void LED_ToggleStop(uint32_t Duration)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	6078      	str	r0, [r7, #4]
	if(xTimerIsTimerActive(LED_Timer_Handle) == pdTRUE)
 8004b68:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <LED_ToggleStop+0x34>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fe f845 	bl	8002bfc <xTimerIsTimerActive>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d109      	bne.n	8004b8c <LED_ToggleStop+0x2c>
	{
		xTimerStop(LED_Timer_Handle,portMAX_DELAY);
 8004b78:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <LED_ToggleStop+0x34>)
 8004b7a:	6818      	ldr	r0, [r3, #0]
 8004b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	2300      	movs	r3, #0
 8004b84:	2200      	movs	r2, #0
 8004b86:	2103      	movs	r1, #3
 8004b88:	f7fd fdac 	bl	80026e4 <xTimerGenericCommand>
	}
}
 8004b8c:	bf00      	nop
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	20004154 	.word	0x20004154

08004b98 <LED_ReadStatus>:
void LED_ReadStatus(char *task_mesg)
{
 8004b98:	b590      	push	{r4, r7, lr}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
	//put The Required Message to be Display in the task_mesg
	sprintf(task_mesg,"\r\nLED Status is : %d\r\n",GPIO_ReadOutputDataBit(GPIOC,GPIO_Pin_13));
 8004ba0:	687c      	ldr	r4, [r7, #4]
 8004ba2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ba6:	480a      	ldr	r0, [pc, #40]	; (8004bd0 <LED_ReadStatus+0x38>)
 8004ba8:	f7fb fba8 	bl	80002fc <GPIO_ReadOutputDataBit>
 8004bac:	4603      	mov	r3, r0
 8004bae:	461a      	mov	r2, r3
 8004bb0:	4908      	ldr	r1, [pc, #32]	; (8004bd4 <LED_ReadStatus+0x3c>)
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	f000 f9da 	bl	8004f6c <siprintf>

	//Update The UART_WRITE_QUEUE with the New message to be Displayed
	xQueueSend(uart_write_queue_handle,&task_mesg,portMAX_DELAY);
 8004bb8:	4b07      	ldr	r3, [pc, #28]	; (8004bd8 <LED_ReadStatus+0x40>)
 8004bba:	6818      	ldr	r0, [r3, #0]
 8004bbc:	1d39      	adds	r1, r7, #4
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc4:	f7fc fa16 	bl	8000ff4 <xQueueGenericSend>
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd90      	pop	{r4, r7, pc}
 8004bd0:	40011000 	.word	0x40011000
 8004bd4:	080058e0 	.word	0x080058e0
 8004bd8:	20004150 	.word	0x20004150

08004bdc <RTC_ReadInfo>:
void RTC_ReadInfo(char *task_mesg)
{
 8004bdc:	b5b0      	push	{r4, r5, r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
	sprintf(task_mesg,"\r\nNot Implemented Yet\r\n");
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a0b      	ldr	r2, [pc, #44]	; (8004c14 <RTC_ReadInfo+0x38>)
 8004be8:	461d      	mov	r5, r3
 8004bea:	4614      	mov	r4, r2
 8004bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bee:	6028      	str	r0, [r5, #0]
 8004bf0:	6069      	str	r1, [r5, #4]
 8004bf2:	60aa      	str	r2, [r5, #8]
 8004bf4:	60eb      	str	r3, [r5, #12]
 8004bf6:	cc03      	ldmia	r4!, {r0, r1}
 8004bf8:	6128      	str	r0, [r5, #16]
 8004bfa:	6169      	str	r1, [r5, #20]
	//Update The UART_WRITE_QUEUE with the New message to be Displayed
	xQueueSend(uart_write_queue_handle,&task_mesg,portMAX_DELAY);
 8004bfc:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <RTC_ReadInfo+0x3c>)
 8004bfe:	6818      	ldr	r0, [r3, #0]
 8004c00:	1d39      	adds	r1, r7, #4
 8004c02:	2300      	movs	r3, #0
 8004c04:	f04f 32ff 	mov.w	r2, #4294967295
 8004c08:	f7fc f9f4 	bl	8000ff4 <xQueueGenericSend>
}
 8004c0c:	bf00      	nop
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bdb0      	pop	{r4, r5, r7, pc}
 8004c14:	080058f8 	.word	0x080058f8
 8004c18:	20004150 	.word	0x20004150

08004c1c <Print_Error_Message>:
void Print_Error_Message(char *task_mesg)
{
 8004c1c:	b5b0      	push	{r4, r5, r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
	//put The Required Message to be Display in the task_mesg
	sprintf(task_mesg,"\r\nInvalid Command Received !!\r\n");
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <Print_Error_Message+0x3c>)
 8004c28:	461c      	mov	r4, r3
 8004c2a:	4615      	mov	r5, r2
 8004c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c2e:	6020      	str	r0, [r4, #0]
 8004c30:	6061      	str	r1, [r4, #4]
 8004c32:	60a2      	str	r2, [r4, #8]
 8004c34:	60e3      	str	r3, [r4, #12]
 8004c36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c38:	6120      	str	r0, [r4, #16]
 8004c3a:	6161      	str	r1, [r4, #20]
 8004c3c:	61a2      	str	r2, [r4, #24]
 8004c3e:	61e3      	str	r3, [r4, #28]

	//Update The UART_WRITE_QUEUE with the New message to be Displayed
	xQueueSend(uart_write_queue_handle,&task_mesg,portMAX_DELAY);
 8004c40:	4b06      	ldr	r3, [pc, #24]	; (8004c5c <Print_Error_Message+0x40>)
 8004c42:	6818      	ldr	r0, [r3, #0]
 8004c44:	1d39      	adds	r1, r7, #4
 8004c46:	2300      	movs	r3, #0
 8004c48:	f04f 32ff 	mov.w	r2, #4294967295
 8004c4c:	f7fc f9d2 	bl	8000ff4 <xQueueGenericSend>
}
 8004c50:	bf00      	nop
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bdb0      	pop	{r4, r5, r7, pc}
 8004c58:	08005910 	.word	0x08005910
 8004c5c:	20004150 	.word	0x20004150

08004c60 <Exit_App>:
void Exit_App(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
	//1. Deleting All Tasks
	vTaskDelete(xTaskHandle1);
 8004c64:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <Exit_App+0x3c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fc fe6b 	bl	8001944 <vTaskDelete>
	vTaskDelete(xTaskHandle2);
 8004c6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <Exit_App+0x40>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fc fe66 	bl	8001944 <vTaskDelete>
	vTaskDelete(xTaskHandle3);
 8004c78:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <Exit_App+0x44>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fc fe61 	bl	8001944 <vTaskDelete>
	vTaskDelete(xTaskHandle4);
 8004c82:	4b09      	ldr	r3, [pc, #36]	; (8004ca8 <Exit_App+0x48>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fc fe5c 	bl	8001944 <vTaskDelete>

	//2. Disable All interrupts
	USART_ITConfig(USART1,USART_IT_RXNE,DISABLE);
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f240 5125 	movw	r1, #1317	; 0x525
 8004c92:	4806      	ldr	r0, [pc, #24]	; (8004cac <Exit_App+0x4c>)
 8004c94:	f7fb fd1b 	bl	80006ce <USART_ITConfig>

	//3. Send CPU to the Sleep Mode by using IdleHook Function

}
 8004c98:	bf00      	nop
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	2000413c 	.word	0x2000413c
 8004ca0:	20004140 	.word	0x20004140
 8004ca4:	20004144 	.word	0x20004144
 8004ca8:	20004148 	.word	0x20004148
 8004cac:	40013800 	.word	0x40013800

08004cb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ce8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004cb4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004cb6:	e003      	b.n	8004cc0 <LoopCopyDataInit>

08004cb8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004cb8:	4b0c      	ldr	r3, [pc, #48]	; (8004cec <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8004cba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004cbc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004cbe:	3104      	adds	r1, #4

08004cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004cc0:	480b      	ldr	r0, [pc, #44]	; (8004cf0 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8004cc2:	4b0c      	ldr	r3, [pc, #48]	; (8004cf4 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8004cc4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004cc6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004cc8:	d3f6      	bcc.n	8004cb8 <CopyDataInit>
	ldr	r2, =_sbss
 8004cca:	4a0b      	ldr	r2, [pc, #44]	; (8004cf8 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8004ccc:	e002      	b.n	8004cd4 <LoopFillZerobss>

08004cce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004cce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004cd0:	f842 3b04 	str.w	r3, [r2], #4

08004cd4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004cd4:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8004cd6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004cd8:	d3f9      	bcc.n	8004cce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004cda:	f000 f847 	bl	8004d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004cde:	f000 f8ff 	bl	8004ee0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004ce2:	f7ff fc9d 	bl	8004620 <main>
	bx	lr
 8004ce6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004ce8:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8004cec:	08005978 	.word	0x08005978
	ldr	r0, =_sdata
 8004cf0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004cf4:	20000130 	.word	0x20000130
	ldr	r2, =_sbss
 8004cf8:	20000130 	.word	0x20000130
	ldr	r3, = _ebss
 8004cfc:	20004228 	.word	0x20004228

08004d00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004d00:	e7fe      	b.n	8004d00 <ADC1_2_IRQHandler>
	...

08004d04 <_sbrk>:
  /* Implement your write code here, this is used by puts and printf for example */
  return len;
}

caddr_t _sbrk(int32_t incr)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  extern uint32_t _Min_Heap_Size; /* _Min_Heap_Size symbol defined in the linker script. */
  extern uint8_t end asm("end");
  const uint8_t *max_heap = (uint8_t*)((uint32_t)&end + (uint32_t)&_Min_Heap_Size);
 8004d0c:	4a13      	ldr	r2, [pc, #76]	; (8004d5c <_sbrk+0x58>)
 8004d0e:	4b14      	ldr	r3, [pc, #80]	; (8004d60 <_sbrk+0x5c>)
 8004d10:	4413      	add	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]
  static uint8_t *heap_end;
  uint8_t *prev_heap_end;

  if (heap_end == 0)
 8004d14:	4b13      	ldr	r3, [pc, #76]	; (8004d64 <_sbrk+0x60>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d102      	bne.n	8004d22 <_sbrk+0x1e>
    heap_end = &end;
 8004d1c:	4b11      	ldr	r3, [pc, #68]	; (8004d64 <_sbrk+0x60>)
 8004d1e:	4a0f      	ldr	r2, [pc, #60]	; (8004d5c <_sbrk+0x58>)
 8004d20:	601a      	str	r2, [r3, #0]

  prev_heap_end = heap_end;
 8004d22:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <_sbrk+0x60>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	60bb      	str	r3, [r7, #8]
  if (heap_end + incr > max_heap)
 8004d28:	4b0e      	ldr	r3, [pc, #56]	; (8004d64 <_sbrk+0x60>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	441a      	add	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d905      	bls.n	8004d42 <_sbrk+0x3e>
  {
//    write(1, "Heap and stack collision\n", 25);
//    abort();
    errno = ENOMEM;
 8004d36:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <_sbrk+0x64>)
 8004d38:	220c      	movs	r2, #12
 8004d3a:	601a      	str	r2, [r3, #0]
    return (caddr_t) -1;
 8004d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d40:	e006      	b.n	8004d50 <_sbrk+0x4c>
  }

  heap_end += incr;
 8004d42:	4b08      	ldr	r3, [pc, #32]	; (8004d64 <_sbrk+0x60>)
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4413      	add	r3, r2
 8004d4a:	4a06      	ldr	r2, [pc, #24]	; (8004d64 <_sbrk+0x60>)
 8004d4c:	6013      	str	r3, [r2, #0]

  return (caddr_t) prev_heap_end;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bc80      	pop	{r7}
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	20004228 	.word	0x20004228
 8004d60:	00000000 	.word	0x00000000
 8004d64:	2000415c 	.word	0x2000415c
 8004d68:	20004224 	.word	0x20004224

08004d6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004d70:	4a15      	ldr	r2, [pc, #84]	; (8004dc8 <SystemInit+0x5c>)
 8004d72:	4b15      	ldr	r3, [pc, #84]	; (8004dc8 <SystemInit+0x5c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f043 0301 	orr.w	r3, r3, #1
 8004d7a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8004d7c:	4912      	ldr	r1, [pc, #72]	; (8004dc8 <SystemInit+0x5c>)
 8004d7e:	4b12      	ldr	r3, [pc, #72]	; (8004dc8 <SystemInit+0x5c>)
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	4b12      	ldr	r3, [pc, #72]	; (8004dcc <SystemInit+0x60>)
 8004d84:	4013      	ands	r3, r2
 8004d86:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004d88:	4a0f      	ldr	r2, [pc, #60]	; (8004dc8 <SystemInit+0x5c>)
 8004d8a:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <SystemInit+0x5c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d96:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004d98:	4a0b      	ldr	r2, [pc, #44]	; (8004dc8 <SystemInit+0x5c>)
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <SystemInit+0x5c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004da2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8004da4:	4a08      	ldr	r2, [pc, #32]	; (8004dc8 <SystemInit+0x5c>)
 8004da6:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <SystemInit+0x5c>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004dae:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8004db0:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <SystemInit+0x5c>)
 8004db2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004db6:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8004db8:	f000 f80c 	bl	8004dd4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004dbc:	4b04      	ldr	r3, [pc, #16]	; (8004dd0 <SystemInit+0x64>)
 8004dbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004dc2:	609a      	str	r2, [r3, #8]
#endif 
}
 8004dc4:	bf00      	nop
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	f8ff0000 	.word	0xf8ff0000
 8004dd0:	e000ed00 	.word	0xe000ed00

08004dd4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8004dd8:	f000 f802 	bl	8004de0 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8004ddc:	bf00      	nop
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8004de6:	2300      	movs	r3, #0
 8004de8:	607b      	str	r3, [r7, #4]
 8004dea:	2300      	movs	r3, #0
 8004dec:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004dee:	4a3a      	ldr	r2, [pc, #232]	; (8004ed8 <SetSysClockTo72+0xf8>)
 8004df0:	4b39      	ldr	r3, [pc, #228]	; (8004ed8 <SetSysClockTo72+0xf8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004dfa:	4b37      	ldr	r3, [pc, #220]	; (8004ed8 <SetSysClockTo72+0xf8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e02:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3301      	adds	r3, #1
 8004e08:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d103      	bne.n	8004e18 <SetSysClockTo72+0x38>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004e16:	d1f0      	bne.n	8004dfa <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004e18:	4b2f      	ldr	r3, [pc, #188]	; (8004ed8 <SetSysClockTo72+0xf8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8004e24:	2301      	movs	r3, #1
 8004e26:	603b      	str	r3, [r7, #0]
 8004e28:	e001      	b.n	8004e2e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d14b      	bne.n	8004ecc <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8004e34:	4a29      	ldr	r2, [pc, #164]	; (8004edc <SetSysClockTo72+0xfc>)
 8004e36:	4b29      	ldr	r3, [pc, #164]	; (8004edc <SetSysClockTo72+0xfc>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f043 0310 	orr.w	r3, r3, #16
 8004e3e:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8004e40:	4a26      	ldr	r2, [pc, #152]	; (8004edc <SetSysClockTo72+0xfc>)
 8004e42:	4b26      	ldr	r3, [pc, #152]	; (8004edc <SetSysClockTo72+0xfc>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f023 0303 	bic.w	r3, r3, #3
 8004e4a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8004e4c:	4a23      	ldr	r2, [pc, #140]	; (8004edc <SetSysClockTo72+0xfc>)
 8004e4e:	4b23      	ldr	r3, [pc, #140]	; (8004edc <SetSysClockTo72+0xfc>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f043 0302 	orr.w	r3, r3, #2
 8004e56:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8004e58:	4a1f      	ldr	r2, [pc, #124]	; (8004ed8 <SetSysClockTo72+0xf8>)
 8004e5a:	4b1f      	ldr	r3, [pc, #124]	; (8004ed8 <SetSysClockTo72+0xf8>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8004e60:	4a1d      	ldr	r2, [pc, #116]	; (8004ed8 <SetSysClockTo72+0xf8>)
 8004e62:	4b1d      	ldr	r3, [pc, #116]	; (8004ed8 <SetSysClockTo72+0xf8>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8004e68:	4a1b      	ldr	r2, [pc, #108]	; (8004ed8 <SetSysClockTo72+0xf8>)
 8004e6a:	4b1b      	ldr	r3, [pc, #108]	; (8004ed8 <SetSysClockTo72+0xf8>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e72:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8004e74:	4a18      	ldr	r2, [pc, #96]	; (8004ed8 <SetSysClockTo72+0xf8>)
 8004e76:	4b18      	ldr	r3, [pc, #96]	; (8004ed8 <SetSysClockTo72+0xf8>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004e7e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8004e80:	4a15      	ldr	r2, [pc, #84]	; (8004ed8 <SetSysClockTo72+0xf8>)
 8004e82:	4b15      	ldr	r3, [pc, #84]	; (8004ed8 <SetSysClockTo72+0xf8>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8004e8a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8004e8c:	4a12      	ldr	r2, [pc, #72]	; (8004ed8 <SetSysClockTo72+0xf8>)
 8004e8e:	4b12      	ldr	r3, [pc, #72]	; (8004ed8 <SetSysClockTo72+0xf8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e96:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004e98:	bf00      	nop
 8004e9a:	4b0f      	ldr	r3, [pc, #60]	; (8004ed8 <SetSysClockTo72+0xf8>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f9      	beq.n	8004e9a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004ea6:	4a0c      	ldr	r2, [pc, #48]	; (8004ed8 <SetSysClockTo72+0xf8>)
 8004ea8:	4b0b      	ldr	r3, [pc, #44]	; (8004ed8 <SetSysClockTo72+0xf8>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f023 0303 	bic.w	r3, r3, #3
 8004eb0:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8004eb2:	4a09      	ldr	r2, [pc, #36]	; (8004ed8 <SetSysClockTo72+0xf8>)
 8004eb4:	4b08      	ldr	r3, [pc, #32]	; (8004ed8 <SetSysClockTo72+0xf8>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f043 0302 	orr.w	r3, r3, #2
 8004ebc:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8004ebe:	bf00      	nop
 8004ec0:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <SetSysClockTo72+0xf8>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f003 030c 	and.w	r3, r3, #12
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d1f9      	bne.n	8004ec0 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	40022000 	.word	0x40022000

08004ee0 <__libc_init_array>:
 8004ee0:	b570      	push	{r4, r5, r6, lr}
 8004ee2:	2500      	movs	r5, #0
 8004ee4:	4e0c      	ldr	r6, [pc, #48]	; (8004f18 <__libc_init_array+0x38>)
 8004ee6:	4c0d      	ldr	r4, [pc, #52]	; (8004f1c <__libc_init_array+0x3c>)
 8004ee8:	1ba4      	subs	r4, r4, r6
 8004eea:	10a4      	asrs	r4, r4, #2
 8004eec:	42a5      	cmp	r5, r4
 8004eee:	d109      	bne.n	8004f04 <__libc_init_array+0x24>
 8004ef0:	f000 fc5c 	bl	80057ac <_init>
 8004ef4:	2500      	movs	r5, #0
 8004ef6:	4e0a      	ldr	r6, [pc, #40]	; (8004f20 <__libc_init_array+0x40>)
 8004ef8:	4c0a      	ldr	r4, [pc, #40]	; (8004f24 <__libc_init_array+0x44>)
 8004efa:	1ba4      	subs	r4, r4, r6
 8004efc:	10a4      	asrs	r4, r4, #2
 8004efe:	42a5      	cmp	r5, r4
 8004f00:	d105      	bne.n	8004f0e <__libc_init_array+0x2e>
 8004f02:	bd70      	pop	{r4, r5, r6, pc}
 8004f04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f08:	4798      	blx	r3
 8004f0a:	3501      	adds	r5, #1
 8004f0c:	e7ee      	b.n	8004eec <__libc_init_array+0xc>
 8004f0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f12:	4798      	blx	r3
 8004f14:	3501      	adds	r5, #1
 8004f16:	e7f2      	b.n	8004efe <__libc_init_array+0x1e>
 8004f18:	08005970 	.word	0x08005970
 8004f1c:	08005970 	.word	0x08005970
 8004f20:	08005970 	.word	0x08005970
 8004f24:	08005974 	.word	0x08005974

08004f28 <memcmp>:
 8004f28:	b510      	push	{r4, lr}
 8004f2a:	3901      	subs	r1, #1
 8004f2c:	4402      	add	r2, r0
 8004f2e:	4290      	cmp	r0, r2
 8004f30:	d101      	bne.n	8004f36 <memcmp+0xe>
 8004f32:	2000      	movs	r0, #0
 8004f34:	bd10      	pop	{r4, pc}
 8004f36:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004f3a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004f3e:	42a3      	cmp	r3, r4
 8004f40:	d0f5      	beq.n	8004f2e <memcmp+0x6>
 8004f42:	1b18      	subs	r0, r3, r4
 8004f44:	bd10      	pop	{r4, pc}

08004f46 <memcpy>:
 8004f46:	b510      	push	{r4, lr}
 8004f48:	1e43      	subs	r3, r0, #1
 8004f4a:	440a      	add	r2, r1
 8004f4c:	4291      	cmp	r1, r2
 8004f4e:	d100      	bne.n	8004f52 <memcpy+0xc>
 8004f50:	bd10      	pop	{r4, pc}
 8004f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f5a:	e7f7      	b.n	8004f4c <memcpy+0x6>

08004f5c <memset>:
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	4402      	add	r2, r0
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d100      	bne.n	8004f66 <memset+0xa>
 8004f64:	4770      	bx	lr
 8004f66:	f803 1b01 	strb.w	r1, [r3], #1
 8004f6a:	e7f9      	b.n	8004f60 <memset+0x4>

08004f6c <siprintf>:
 8004f6c:	b40e      	push	{r1, r2, r3}
 8004f6e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004f72:	b500      	push	{lr}
 8004f74:	b09c      	sub	sp, #112	; 0x70
 8004f76:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004f7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f7e:	9104      	str	r1, [sp, #16]
 8004f80:	9107      	str	r1, [sp, #28]
 8004f82:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004f86:	ab1d      	add	r3, sp, #116	; 0x74
 8004f88:	9002      	str	r0, [sp, #8]
 8004f8a:	9006      	str	r0, [sp, #24]
 8004f8c:	4808      	ldr	r0, [pc, #32]	; (8004fb0 <siprintf+0x44>)
 8004f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f92:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004f96:	6800      	ldr	r0, [r0, #0]
 8004f98:	a902      	add	r1, sp, #8
 8004f9a:	9301      	str	r3, [sp, #4]
 8004f9c:	f000 f910 	bl	80051c0 <_svfiprintf_r>
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	9b02      	ldr	r3, [sp, #8]
 8004fa4:	701a      	strb	r2, [r3, #0]
 8004fa6:	b01c      	add	sp, #112	; 0x70
 8004fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fac:	b003      	add	sp, #12
 8004fae:	4770      	bx	lr
 8004fb0:	200000cc 	.word	0x200000cc

08004fb4 <_free_r>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	4605      	mov	r5, r0
 8004fb8:	2900      	cmp	r1, #0
 8004fba:	d043      	beq.n	8005044 <_free_r+0x90>
 8004fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fc0:	1f0c      	subs	r4, r1, #4
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	bfb8      	it	lt
 8004fc6:	18e4      	addlt	r4, r4, r3
 8004fc8:	f000 fbbe 	bl	8005748 <__malloc_lock>
 8004fcc:	4a1e      	ldr	r2, [pc, #120]	; (8005048 <_free_r+0x94>)
 8004fce:	6813      	ldr	r3, [r2, #0]
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	b933      	cbnz	r3, 8004fe2 <_free_r+0x2e>
 8004fd4:	6063      	str	r3, [r4, #4]
 8004fd6:	6014      	str	r4, [r2, #0]
 8004fd8:	4628      	mov	r0, r5
 8004fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fde:	f000 bbb4 	b.w	800574a <__malloc_unlock>
 8004fe2:	42a3      	cmp	r3, r4
 8004fe4:	d90b      	bls.n	8004ffe <_free_r+0x4a>
 8004fe6:	6821      	ldr	r1, [r4, #0]
 8004fe8:	1862      	adds	r2, r4, r1
 8004fea:	4293      	cmp	r3, r2
 8004fec:	bf01      	itttt	eq
 8004fee:	681a      	ldreq	r2, [r3, #0]
 8004ff0:	685b      	ldreq	r3, [r3, #4]
 8004ff2:	1852      	addeq	r2, r2, r1
 8004ff4:	6022      	streq	r2, [r4, #0]
 8004ff6:	6063      	str	r3, [r4, #4]
 8004ff8:	6004      	str	r4, [r0, #0]
 8004ffa:	e7ed      	b.n	8004fd8 <_free_r+0x24>
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	b10a      	cbz	r2, 8005006 <_free_r+0x52>
 8005002:	42a2      	cmp	r2, r4
 8005004:	d9fa      	bls.n	8004ffc <_free_r+0x48>
 8005006:	6819      	ldr	r1, [r3, #0]
 8005008:	1858      	adds	r0, r3, r1
 800500a:	42a0      	cmp	r0, r4
 800500c:	d10b      	bne.n	8005026 <_free_r+0x72>
 800500e:	6820      	ldr	r0, [r4, #0]
 8005010:	4401      	add	r1, r0
 8005012:	1858      	adds	r0, r3, r1
 8005014:	4282      	cmp	r2, r0
 8005016:	6019      	str	r1, [r3, #0]
 8005018:	d1de      	bne.n	8004fd8 <_free_r+0x24>
 800501a:	6810      	ldr	r0, [r2, #0]
 800501c:	6852      	ldr	r2, [r2, #4]
 800501e:	4401      	add	r1, r0
 8005020:	6019      	str	r1, [r3, #0]
 8005022:	605a      	str	r2, [r3, #4]
 8005024:	e7d8      	b.n	8004fd8 <_free_r+0x24>
 8005026:	d902      	bls.n	800502e <_free_r+0x7a>
 8005028:	230c      	movs	r3, #12
 800502a:	602b      	str	r3, [r5, #0]
 800502c:	e7d4      	b.n	8004fd8 <_free_r+0x24>
 800502e:	6820      	ldr	r0, [r4, #0]
 8005030:	1821      	adds	r1, r4, r0
 8005032:	428a      	cmp	r2, r1
 8005034:	bf01      	itttt	eq
 8005036:	6811      	ldreq	r1, [r2, #0]
 8005038:	6852      	ldreq	r2, [r2, #4]
 800503a:	1809      	addeq	r1, r1, r0
 800503c:	6021      	streq	r1, [r4, #0]
 800503e:	6062      	str	r2, [r4, #4]
 8005040:	605c      	str	r4, [r3, #4]
 8005042:	e7c9      	b.n	8004fd8 <_free_r+0x24>
 8005044:	bd38      	pop	{r3, r4, r5, pc}
 8005046:	bf00      	nop
 8005048:	20004160 	.word	0x20004160

0800504c <_malloc_r>:
 800504c:	b570      	push	{r4, r5, r6, lr}
 800504e:	1ccd      	adds	r5, r1, #3
 8005050:	f025 0503 	bic.w	r5, r5, #3
 8005054:	3508      	adds	r5, #8
 8005056:	2d0c      	cmp	r5, #12
 8005058:	bf38      	it	cc
 800505a:	250c      	movcc	r5, #12
 800505c:	2d00      	cmp	r5, #0
 800505e:	4606      	mov	r6, r0
 8005060:	db01      	blt.n	8005066 <_malloc_r+0x1a>
 8005062:	42a9      	cmp	r1, r5
 8005064:	d903      	bls.n	800506e <_malloc_r+0x22>
 8005066:	230c      	movs	r3, #12
 8005068:	6033      	str	r3, [r6, #0]
 800506a:	2000      	movs	r0, #0
 800506c:	bd70      	pop	{r4, r5, r6, pc}
 800506e:	f000 fb6b 	bl	8005748 <__malloc_lock>
 8005072:	4a23      	ldr	r2, [pc, #140]	; (8005100 <_malloc_r+0xb4>)
 8005074:	6814      	ldr	r4, [r2, #0]
 8005076:	4621      	mov	r1, r4
 8005078:	b991      	cbnz	r1, 80050a0 <_malloc_r+0x54>
 800507a:	4c22      	ldr	r4, [pc, #136]	; (8005104 <_malloc_r+0xb8>)
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	b91b      	cbnz	r3, 8005088 <_malloc_r+0x3c>
 8005080:	4630      	mov	r0, r6
 8005082:	f000 fb29 	bl	80056d8 <_sbrk_r>
 8005086:	6020      	str	r0, [r4, #0]
 8005088:	4629      	mov	r1, r5
 800508a:	4630      	mov	r0, r6
 800508c:	f000 fb24 	bl	80056d8 <_sbrk_r>
 8005090:	1c43      	adds	r3, r0, #1
 8005092:	d126      	bne.n	80050e2 <_malloc_r+0x96>
 8005094:	230c      	movs	r3, #12
 8005096:	4630      	mov	r0, r6
 8005098:	6033      	str	r3, [r6, #0]
 800509a:	f000 fb56 	bl	800574a <__malloc_unlock>
 800509e:	e7e4      	b.n	800506a <_malloc_r+0x1e>
 80050a0:	680b      	ldr	r3, [r1, #0]
 80050a2:	1b5b      	subs	r3, r3, r5
 80050a4:	d41a      	bmi.n	80050dc <_malloc_r+0x90>
 80050a6:	2b0b      	cmp	r3, #11
 80050a8:	d90f      	bls.n	80050ca <_malloc_r+0x7e>
 80050aa:	600b      	str	r3, [r1, #0]
 80050ac:	18cc      	adds	r4, r1, r3
 80050ae:	50cd      	str	r5, [r1, r3]
 80050b0:	4630      	mov	r0, r6
 80050b2:	f000 fb4a 	bl	800574a <__malloc_unlock>
 80050b6:	f104 000b 	add.w	r0, r4, #11
 80050ba:	1d23      	adds	r3, r4, #4
 80050bc:	f020 0007 	bic.w	r0, r0, #7
 80050c0:	1ac3      	subs	r3, r0, r3
 80050c2:	d01b      	beq.n	80050fc <_malloc_r+0xb0>
 80050c4:	425a      	negs	r2, r3
 80050c6:	50e2      	str	r2, [r4, r3]
 80050c8:	bd70      	pop	{r4, r5, r6, pc}
 80050ca:	428c      	cmp	r4, r1
 80050cc:	bf0b      	itete	eq
 80050ce:	6863      	ldreq	r3, [r4, #4]
 80050d0:	684b      	ldrne	r3, [r1, #4]
 80050d2:	6013      	streq	r3, [r2, #0]
 80050d4:	6063      	strne	r3, [r4, #4]
 80050d6:	bf18      	it	ne
 80050d8:	460c      	movne	r4, r1
 80050da:	e7e9      	b.n	80050b0 <_malloc_r+0x64>
 80050dc:	460c      	mov	r4, r1
 80050de:	6849      	ldr	r1, [r1, #4]
 80050e0:	e7ca      	b.n	8005078 <_malloc_r+0x2c>
 80050e2:	1cc4      	adds	r4, r0, #3
 80050e4:	f024 0403 	bic.w	r4, r4, #3
 80050e8:	42a0      	cmp	r0, r4
 80050ea:	d005      	beq.n	80050f8 <_malloc_r+0xac>
 80050ec:	1a21      	subs	r1, r4, r0
 80050ee:	4630      	mov	r0, r6
 80050f0:	f000 faf2 	bl	80056d8 <_sbrk_r>
 80050f4:	3001      	adds	r0, #1
 80050f6:	d0cd      	beq.n	8005094 <_malloc_r+0x48>
 80050f8:	6025      	str	r5, [r4, #0]
 80050fa:	e7d9      	b.n	80050b0 <_malloc_r+0x64>
 80050fc:	bd70      	pop	{r4, r5, r6, pc}
 80050fe:	bf00      	nop
 8005100:	20004160 	.word	0x20004160
 8005104:	20004164 	.word	0x20004164

08005108 <__ssputs_r>:
 8005108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800510c:	688e      	ldr	r6, [r1, #8]
 800510e:	4682      	mov	sl, r0
 8005110:	429e      	cmp	r6, r3
 8005112:	460c      	mov	r4, r1
 8005114:	4691      	mov	r9, r2
 8005116:	4698      	mov	r8, r3
 8005118:	d835      	bhi.n	8005186 <__ssputs_r+0x7e>
 800511a:	898a      	ldrh	r2, [r1, #12]
 800511c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005120:	d031      	beq.n	8005186 <__ssputs_r+0x7e>
 8005122:	2302      	movs	r3, #2
 8005124:	6825      	ldr	r5, [r4, #0]
 8005126:	6909      	ldr	r1, [r1, #16]
 8005128:	1a6f      	subs	r7, r5, r1
 800512a:	6965      	ldr	r5, [r4, #20]
 800512c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005130:	fb95 f5f3 	sdiv	r5, r5, r3
 8005134:	f108 0301 	add.w	r3, r8, #1
 8005138:	443b      	add	r3, r7
 800513a:	429d      	cmp	r5, r3
 800513c:	bf38      	it	cc
 800513e:	461d      	movcc	r5, r3
 8005140:	0553      	lsls	r3, r2, #21
 8005142:	d531      	bpl.n	80051a8 <__ssputs_r+0xa0>
 8005144:	4629      	mov	r1, r5
 8005146:	f7ff ff81 	bl	800504c <_malloc_r>
 800514a:	4606      	mov	r6, r0
 800514c:	b950      	cbnz	r0, 8005164 <__ssputs_r+0x5c>
 800514e:	230c      	movs	r3, #12
 8005150:	f8ca 3000 	str.w	r3, [sl]
 8005154:	89a3      	ldrh	r3, [r4, #12]
 8005156:	f04f 30ff 	mov.w	r0, #4294967295
 800515a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800515e:	81a3      	strh	r3, [r4, #12]
 8005160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005164:	463a      	mov	r2, r7
 8005166:	6921      	ldr	r1, [r4, #16]
 8005168:	f7ff feed 	bl	8004f46 <memcpy>
 800516c:	89a3      	ldrh	r3, [r4, #12]
 800516e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005176:	81a3      	strh	r3, [r4, #12]
 8005178:	6126      	str	r6, [r4, #16]
 800517a:	443e      	add	r6, r7
 800517c:	6026      	str	r6, [r4, #0]
 800517e:	4646      	mov	r6, r8
 8005180:	6165      	str	r5, [r4, #20]
 8005182:	1bed      	subs	r5, r5, r7
 8005184:	60a5      	str	r5, [r4, #8]
 8005186:	4546      	cmp	r6, r8
 8005188:	bf28      	it	cs
 800518a:	4646      	movcs	r6, r8
 800518c:	4649      	mov	r1, r9
 800518e:	4632      	mov	r2, r6
 8005190:	6820      	ldr	r0, [r4, #0]
 8005192:	f000 fabf 	bl	8005714 <memmove>
 8005196:	68a3      	ldr	r3, [r4, #8]
 8005198:	2000      	movs	r0, #0
 800519a:	1b9b      	subs	r3, r3, r6
 800519c:	60a3      	str	r3, [r4, #8]
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	441e      	add	r6, r3
 80051a2:	6026      	str	r6, [r4, #0]
 80051a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a8:	462a      	mov	r2, r5
 80051aa:	f000 facf 	bl	800574c <_realloc_r>
 80051ae:	4606      	mov	r6, r0
 80051b0:	2800      	cmp	r0, #0
 80051b2:	d1e1      	bne.n	8005178 <__ssputs_r+0x70>
 80051b4:	6921      	ldr	r1, [r4, #16]
 80051b6:	4650      	mov	r0, sl
 80051b8:	f7ff fefc 	bl	8004fb4 <_free_r>
 80051bc:	e7c7      	b.n	800514e <__ssputs_r+0x46>
	...

080051c0 <_svfiprintf_r>:
 80051c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c4:	b09d      	sub	sp, #116	; 0x74
 80051c6:	9303      	str	r3, [sp, #12]
 80051c8:	898b      	ldrh	r3, [r1, #12]
 80051ca:	4680      	mov	r8, r0
 80051cc:	061c      	lsls	r4, r3, #24
 80051ce:	460d      	mov	r5, r1
 80051d0:	4616      	mov	r6, r2
 80051d2:	d50f      	bpl.n	80051f4 <_svfiprintf_r+0x34>
 80051d4:	690b      	ldr	r3, [r1, #16]
 80051d6:	b96b      	cbnz	r3, 80051f4 <_svfiprintf_r+0x34>
 80051d8:	2140      	movs	r1, #64	; 0x40
 80051da:	f7ff ff37 	bl	800504c <_malloc_r>
 80051de:	6028      	str	r0, [r5, #0]
 80051e0:	6128      	str	r0, [r5, #16]
 80051e2:	b928      	cbnz	r0, 80051f0 <_svfiprintf_r+0x30>
 80051e4:	230c      	movs	r3, #12
 80051e6:	f8c8 3000 	str.w	r3, [r8]
 80051ea:	f04f 30ff 	mov.w	r0, #4294967295
 80051ee:	e0c4      	b.n	800537a <_svfiprintf_r+0x1ba>
 80051f0:	2340      	movs	r3, #64	; 0x40
 80051f2:	616b      	str	r3, [r5, #20]
 80051f4:	2300      	movs	r3, #0
 80051f6:	9309      	str	r3, [sp, #36]	; 0x24
 80051f8:	2320      	movs	r3, #32
 80051fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051fe:	2330      	movs	r3, #48	; 0x30
 8005200:	f04f 0b01 	mov.w	fp, #1
 8005204:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005208:	4637      	mov	r7, r6
 800520a:	463c      	mov	r4, r7
 800520c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	d13c      	bne.n	800528e <_svfiprintf_r+0xce>
 8005214:	ebb7 0a06 	subs.w	sl, r7, r6
 8005218:	d00b      	beq.n	8005232 <_svfiprintf_r+0x72>
 800521a:	4653      	mov	r3, sl
 800521c:	4632      	mov	r2, r6
 800521e:	4629      	mov	r1, r5
 8005220:	4640      	mov	r0, r8
 8005222:	f7ff ff71 	bl	8005108 <__ssputs_r>
 8005226:	3001      	adds	r0, #1
 8005228:	f000 80a2 	beq.w	8005370 <_svfiprintf_r+0x1b0>
 800522c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800522e:	4453      	add	r3, sl
 8005230:	9309      	str	r3, [sp, #36]	; 0x24
 8005232:	783b      	ldrb	r3, [r7, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 809b 	beq.w	8005370 <_svfiprintf_r+0x1b0>
 800523a:	2300      	movs	r3, #0
 800523c:	f04f 32ff 	mov.w	r2, #4294967295
 8005240:	9304      	str	r3, [sp, #16]
 8005242:	9307      	str	r3, [sp, #28]
 8005244:	9205      	str	r2, [sp, #20]
 8005246:	9306      	str	r3, [sp, #24]
 8005248:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800524c:	931a      	str	r3, [sp, #104]	; 0x68
 800524e:	2205      	movs	r2, #5
 8005250:	7821      	ldrb	r1, [r4, #0]
 8005252:	4850      	ldr	r0, [pc, #320]	; (8005394 <_svfiprintf_r+0x1d4>)
 8005254:	f000 fa50 	bl	80056f8 <memchr>
 8005258:	1c67      	adds	r7, r4, #1
 800525a:	9b04      	ldr	r3, [sp, #16]
 800525c:	b9d8      	cbnz	r0, 8005296 <_svfiprintf_r+0xd6>
 800525e:	06d9      	lsls	r1, r3, #27
 8005260:	bf44      	itt	mi
 8005262:	2220      	movmi	r2, #32
 8005264:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005268:	071a      	lsls	r2, r3, #28
 800526a:	bf44      	itt	mi
 800526c:	222b      	movmi	r2, #43	; 0x2b
 800526e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005272:	7822      	ldrb	r2, [r4, #0]
 8005274:	2a2a      	cmp	r2, #42	; 0x2a
 8005276:	d016      	beq.n	80052a6 <_svfiprintf_r+0xe6>
 8005278:	2100      	movs	r1, #0
 800527a:	200a      	movs	r0, #10
 800527c:	9a07      	ldr	r2, [sp, #28]
 800527e:	4627      	mov	r7, r4
 8005280:	783b      	ldrb	r3, [r7, #0]
 8005282:	3401      	adds	r4, #1
 8005284:	3b30      	subs	r3, #48	; 0x30
 8005286:	2b09      	cmp	r3, #9
 8005288:	d950      	bls.n	800532c <_svfiprintf_r+0x16c>
 800528a:	b1c9      	cbz	r1, 80052c0 <_svfiprintf_r+0x100>
 800528c:	e011      	b.n	80052b2 <_svfiprintf_r+0xf2>
 800528e:	2b25      	cmp	r3, #37	; 0x25
 8005290:	d0c0      	beq.n	8005214 <_svfiprintf_r+0x54>
 8005292:	4627      	mov	r7, r4
 8005294:	e7b9      	b.n	800520a <_svfiprintf_r+0x4a>
 8005296:	4a3f      	ldr	r2, [pc, #252]	; (8005394 <_svfiprintf_r+0x1d4>)
 8005298:	463c      	mov	r4, r7
 800529a:	1a80      	subs	r0, r0, r2
 800529c:	fa0b f000 	lsl.w	r0, fp, r0
 80052a0:	4318      	orrs	r0, r3
 80052a2:	9004      	str	r0, [sp, #16]
 80052a4:	e7d3      	b.n	800524e <_svfiprintf_r+0x8e>
 80052a6:	9a03      	ldr	r2, [sp, #12]
 80052a8:	1d11      	adds	r1, r2, #4
 80052aa:	6812      	ldr	r2, [r2, #0]
 80052ac:	9103      	str	r1, [sp, #12]
 80052ae:	2a00      	cmp	r2, #0
 80052b0:	db01      	blt.n	80052b6 <_svfiprintf_r+0xf6>
 80052b2:	9207      	str	r2, [sp, #28]
 80052b4:	e004      	b.n	80052c0 <_svfiprintf_r+0x100>
 80052b6:	4252      	negs	r2, r2
 80052b8:	f043 0302 	orr.w	r3, r3, #2
 80052bc:	9207      	str	r2, [sp, #28]
 80052be:	9304      	str	r3, [sp, #16]
 80052c0:	783b      	ldrb	r3, [r7, #0]
 80052c2:	2b2e      	cmp	r3, #46	; 0x2e
 80052c4:	d10d      	bne.n	80052e2 <_svfiprintf_r+0x122>
 80052c6:	787b      	ldrb	r3, [r7, #1]
 80052c8:	1c79      	adds	r1, r7, #1
 80052ca:	2b2a      	cmp	r3, #42	; 0x2a
 80052cc:	d132      	bne.n	8005334 <_svfiprintf_r+0x174>
 80052ce:	9b03      	ldr	r3, [sp, #12]
 80052d0:	3702      	adds	r7, #2
 80052d2:	1d1a      	adds	r2, r3, #4
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	9203      	str	r2, [sp, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	bfb8      	it	lt
 80052dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80052e0:	9305      	str	r3, [sp, #20]
 80052e2:	4c2d      	ldr	r4, [pc, #180]	; (8005398 <_svfiprintf_r+0x1d8>)
 80052e4:	2203      	movs	r2, #3
 80052e6:	7839      	ldrb	r1, [r7, #0]
 80052e8:	4620      	mov	r0, r4
 80052ea:	f000 fa05 	bl	80056f8 <memchr>
 80052ee:	b138      	cbz	r0, 8005300 <_svfiprintf_r+0x140>
 80052f0:	2340      	movs	r3, #64	; 0x40
 80052f2:	1b00      	subs	r0, r0, r4
 80052f4:	fa03 f000 	lsl.w	r0, r3, r0
 80052f8:	9b04      	ldr	r3, [sp, #16]
 80052fa:	3701      	adds	r7, #1
 80052fc:	4303      	orrs	r3, r0
 80052fe:	9304      	str	r3, [sp, #16]
 8005300:	7839      	ldrb	r1, [r7, #0]
 8005302:	2206      	movs	r2, #6
 8005304:	4825      	ldr	r0, [pc, #148]	; (800539c <_svfiprintf_r+0x1dc>)
 8005306:	1c7e      	adds	r6, r7, #1
 8005308:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800530c:	f000 f9f4 	bl	80056f8 <memchr>
 8005310:	2800      	cmp	r0, #0
 8005312:	d035      	beq.n	8005380 <_svfiprintf_r+0x1c0>
 8005314:	4b22      	ldr	r3, [pc, #136]	; (80053a0 <_svfiprintf_r+0x1e0>)
 8005316:	b9fb      	cbnz	r3, 8005358 <_svfiprintf_r+0x198>
 8005318:	9b03      	ldr	r3, [sp, #12]
 800531a:	3307      	adds	r3, #7
 800531c:	f023 0307 	bic.w	r3, r3, #7
 8005320:	3308      	adds	r3, #8
 8005322:	9303      	str	r3, [sp, #12]
 8005324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005326:	444b      	add	r3, r9
 8005328:	9309      	str	r3, [sp, #36]	; 0x24
 800532a:	e76d      	b.n	8005208 <_svfiprintf_r+0x48>
 800532c:	fb00 3202 	mla	r2, r0, r2, r3
 8005330:	2101      	movs	r1, #1
 8005332:	e7a4      	b.n	800527e <_svfiprintf_r+0xbe>
 8005334:	2300      	movs	r3, #0
 8005336:	240a      	movs	r4, #10
 8005338:	4618      	mov	r0, r3
 800533a:	9305      	str	r3, [sp, #20]
 800533c:	460f      	mov	r7, r1
 800533e:	783a      	ldrb	r2, [r7, #0]
 8005340:	3101      	adds	r1, #1
 8005342:	3a30      	subs	r2, #48	; 0x30
 8005344:	2a09      	cmp	r2, #9
 8005346:	d903      	bls.n	8005350 <_svfiprintf_r+0x190>
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0ca      	beq.n	80052e2 <_svfiprintf_r+0x122>
 800534c:	9005      	str	r0, [sp, #20]
 800534e:	e7c8      	b.n	80052e2 <_svfiprintf_r+0x122>
 8005350:	fb04 2000 	mla	r0, r4, r0, r2
 8005354:	2301      	movs	r3, #1
 8005356:	e7f1      	b.n	800533c <_svfiprintf_r+0x17c>
 8005358:	ab03      	add	r3, sp, #12
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	462a      	mov	r2, r5
 800535e:	4b11      	ldr	r3, [pc, #68]	; (80053a4 <_svfiprintf_r+0x1e4>)
 8005360:	a904      	add	r1, sp, #16
 8005362:	4640      	mov	r0, r8
 8005364:	f3af 8000 	nop.w
 8005368:	f1b0 3fff 	cmp.w	r0, #4294967295
 800536c:	4681      	mov	r9, r0
 800536e:	d1d9      	bne.n	8005324 <_svfiprintf_r+0x164>
 8005370:	89ab      	ldrh	r3, [r5, #12]
 8005372:	065b      	lsls	r3, r3, #25
 8005374:	f53f af39 	bmi.w	80051ea <_svfiprintf_r+0x2a>
 8005378:	9809      	ldr	r0, [sp, #36]	; 0x24
 800537a:	b01d      	add	sp, #116	; 0x74
 800537c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005380:	ab03      	add	r3, sp, #12
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	462a      	mov	r2, r5
 8005386:	4b07      	ldr	r3, [pc, #28]	; (80053a4 <_svfiprintf_r+0x1e4>)
 8005388:	a904      	add	r1, sp, #16
 800538a:	4640      	mov	r0, r8
 800538c:	f000 f884 	bl	8005498 <_printf_i>
 8005390:	e7ea      	b.n	8005368 <_svfiprintf_r+0x1a8>
 8005392:	bf00      	nop
 8005394:	0800593a 	.word	0x0800593a
 8005398:	08005940 	.word	0x08005940
 800539c:	08005944 	.word	0x08005944
 80053a0:	00000000 	.word	0x00000000
 80053a4:	08005109 	.word	0x08005109

080053a8 <_printf_common>:
 80053a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053ac:	4691      	mov	r9, r2
 80053ae:	461f      	mov	r7, r3
 80053b0:	688a      	ldr	r2, [r1, #8]
 80053b2:	690b      	ldr	r3, [r1, #16]
 80053b4:	4606      	mov	r6, r0
 80053b6:	4293      	cmp	r3, r2
 80053b8:	bfb8      	it	lt
 80053ba:	4613      	movlt	r3, r2
 80053bc:	f8c9 3000 	str.w	r3, [r9]
 80053c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053c4:	460c      	mov	r4, r1
 80053c6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053ca:	b112      	cbz	r2, 80053d2 <_printf_common+0x2a>
 80053cc:	3301      	adds	r3, #1
 80053ce:	f8c9 3000 	str.w	r3, [r9]
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	0699      	lsls	r1, r3, #26
 80053d6:	bf42      	ittt	mi
 80053d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80053dc:	3302      	addmi	r3, #2
 80053de:	f8c9 3000 	strmi.w	r3, [r9]
 80053e2:	6825      	ldr	r5, [r4, #0]
 80053e4:	f015 0506 	ands.w	r5, r5, #6
 80053e8:	d107      	bne.n	80053fa <_printf_common+0x52>
 80053ea:	f104 0a19 	add.w	sl, r4, #25
 80053ee:	68e3      	ldr	r3, [r4, #12]
 80053f0:	f8d9 2000 	ldr.w	r2, [r9]
 80053f4:	1a9b      	subs	r3, r3, r2
 80053f6:	429d      	cmp	r5, r3
 80053f8:	db2a      	blt.n	8005450 <_printf_common+0xa8>
 80053fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80053fe:	6822      	ldr	r2, [r4, #0]
 8005400:	3300      	adds	r3, #0
 8005402:	bf18      	it	ne
 8005404:	2301      	movne	r3, #1
 8005406:	0692      	lsls	r2, r2, #26
 8005408:	d42f      	bmi.n	800546a <_printf_common+0xc2>
 800540a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800540e:	4639      	mov	r1, r7
 8005410:	4630      	mov	r0, r6
 8005412:	47c0      	blx	r8
 8005414:	3001      	adds	r0, #1
 8005416:	d022      	beq.n	800545e <_printf_common+0xb6>
 8005418:	6823      	ldr	r3, [r4, #0]
 800541a:	68e5      	ldr	r5, [r4, #12]
 800541c:	f003 0306 	and.w	r3, r3, #6
 8005420:	2b04      	cmp	r3, #4
 8005422:	bf18      	it	ne
 8005424:	2500      	movne	r5, #0
 8005426:	f8d9 2000 	ldr.w	r2, [r9]
 800542a:	f04f 0900 	mov.w	r9, #0
 800542e:	bf08      	it	eq
 8005430:	1aad      	subeq	r5, r5, r2
 8005432:	68a3      	ldr	r3, [r4, #8]
 8005434:	6922      	ldr	r2, [r4, #16]
 8005436:	bf08      	it	eq
 8005438:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800543c:	4293      	cmp	r3, r2
 800543e:	bfc4      	itt	gt
 8005440:	1a9b      	subgt	r3, r3, r2
 8005442:	18ed      	addgt	r5, r5, r3
 8005444:	341a      	adds	r4, #26
 8005446:	454d      	cmp	r5, r9
 8005448:	d11b      	bne.n	8005482 <_printf_common+0xda>
 800544a:	2000      	movs	r0, #0
 800544c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005450:	2301      	movs	r3, #1
 8005452:	4652      	mov	r2, sl
 8005454:	4639      	mov	r1, r7
 8005456:	4630      	mov	r0, r6
 8005458:	47c0      	blx	r8
 800545a:	3001      	adds	r0, #1
 800545c:	d103      	bne.n	8005466 <_printf_common+0xbe>
 800545e:	f04f 30ff 	mov.w	r0, #4294967295
 8005462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005466:	3501      	adds	r5, #1
 8005468:	e7c1      	b.n	80053ee <_printf_common+0x46>
 800546a:	2030      	movs	r0, #48	; 0x30
 800546c:	18e1      	adds	r1, r4, r3
 800546e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005472:	1c5a      	adds	r2, r3, #1
 8005474:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005478:	4422      	add	r2, r4
 800547a:	3302      	adds	r3, #2
 800547c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005480:	e7c3      	b.n	800540a <_printf_common+0x62>
 8005482:	2301      	movs	r3, #1
 8005484:	4622      	mov	r2, r4
 8005486:	4639      	mov	r1, r7
 8005488:	4630      	mov	r0, r6
 800548a:	47c0      	blx	r8
 800548c:	3001      	adds	r0, #1
 800548e:	d0e6      	beq.n	800545e <_printf_common+0xb6>
 8005490:	f109 0901 	add.w	r9, r9, #1
 8005494:	e7d7      	b.n	8005446 <_printf_common+0x9e>
	...

08005498 <_printf_i>:
 8005498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800549c:	4617      	mov	r7, r2
 800549e:	7e0a      	ldrb	r2, [r1, #24]
 80054a0:	b085      	sub	sp, #20
 80054a2:	2a6e      	cmp	r2, #110	; 0x6e
 80054a4:	4698      	mov	r8, r3
 80054a6:	4606      	mov	r6, r0
 80054a8:	460c      	mov	r4, r1
 80054aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054ac:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80054b0:	f000 80bc 	beq.w	800562c <_printf_i+0x194>
 80054b4:	d81a      	bhi.n	80054ec <_printf_i+0x54>
 80054b6:	2a63      	cmp	r2, #99	; 0x63
 80054b8:	d02e      	beq.n	8005518 <_printf_i+0x80>
 80054ba:	d80a      	bhi.n	80054d2 <_printf_i+0x3a>
 80054bc:	2a00      	cmp	r2, #0
 80054be:	f000 80c8 	beq.w	8005652 <_printf_i+0x1ba>
 80054c2:	2a58      	cmp	r2, #88	; 0x58
 80054c4:	f000 808a 	beq.w	80055dc <_printf_i+0x144>
 80054c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054cc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80054d0:	e02a      	b.n	8005528 <_printf_i+0x90>
 80054d2:	2a64      	cmp	r2, #100	; 0x64
 80054d4:	d001      	beq.n	80054da <_printf_i+0x42>
 80054d6:	2a69      	cmp	r2, #105	; 0x69
 80054d8:	d1f6      	bne.n	80054c8 <_printf_i+0x30>
 80054da:	6821      	ldr	r1, [r4, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	f011 0f80 	tst.w	r1, #128	; 0x80
 80054e2:	d023      	beq.n	800552c <_printf_i+0x94>
 80054e4:	1d11      	adds	r1, r2, #4
 80054e6:	6019      	str	r1, [r3, #0]
 80054e8:	6813      	ldr	r3, [r2, #0]
 80054ea:	e027      	b.n	800553c <_printf_i+0xa4>
 80054ec:	2a73      	cmp	r2, #115	; 0x73
 80054ee:	f000 80b4 	beq.w	800565a <_printf_i+0x1c2>
 80054f2:	d808      	bhi.n	8005506 <_printf_i+0x6e>
 80054f4:	2a6f      	cmp	r2, #111	; 0x6f
 80054f6:	d02a      	beq.n	800554e <_printf_i+0xb6>
 80054f8:	2a70      	cmp	r2, #112	; 0x70
 80054fa:	d1e5      	bne.n	80054c8 <_printf_i+0x30>
 80054fc:	680a      	ldr	r2, [r1, #0]
 80054fe:	f042 0220 	orr.w	r2, r2, #32
 8005502:	600a      	str	r2, [r1, #0]
 8005504:	e003      	b.n	800550e <_printf_i+0x76>
 8005506:	2a75      	cmp	r2, #117	; 0x75
 8005508:	d021      	beq.n	800554e <_printf_i+0xb6>
 800550a:	2a78      	cmp	r2, #120	; 0x78
 800550c:	d1dc      	bne.n	80054c8 <_printf_i+0x30>
 800550e:	2278      	movs	r2, #120	; 0x78
 8005510:	496f      	ldr	r1, [pc, #444]	; (80056d0 <_printf_i+0x238>)
 8005512:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005516:	e064      	b.n	80055e2 <_printf_i+0x14a>
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800551e:	1d11      	adds	r1, r2, #4
 8005520:	6019      	str	r1, [r3, #0]
 8005522:	6813      	ldr	r3, [r2, #0]
 8005524:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005528:	2301      	movs	r3, #1
 800552a:	e0a3      	b.n	8005674 <_printf_i+0x1dc>
 800552c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005530:	f102 0104 	add.w	r1, r2, #4
 8005534:	6019      	str	r1, [r3, #0]
 8005536:	d0d7      	beq.n	80054e8 <_printf_i+0x50>
 8005538:	f9b2 3000 	ldrsh.w	r3, [r2]
 800553c:	2b00      	cmp	r3, #0
 800553e:	da03      	bge.n	8005548 <_printf_i+0xb0>
 8005540:	222d      	movs	r2, #45	; 0x2d
 8005542:	425b      	negs	r3, r3
 8005544:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005548:	4962      	ldr	r1, [pc, #392]	; (80056d4 <_printf_i+0x23c>)
 800554a:	220a      	movs	r2, #10
 800554c:	e017      	b.n	800557e <_printf_i+0xe6>
 800554e:	6820      	ldr	r0, [r4, #0]
 8005550:	6819      	ldr	r1, [r3, #0]
 8005552:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005556:	d003      	beq.n	8005560 <_printf_i+0xc8>
 8005558:	1d08      	adds	r0, r1, #4
 800555a:	6018      	str	r0, [r3, #0]
 800555c:	680b      	ldr	r3, [r1, #0]
 800555e:	e006      	b.n	800556e <_printf_i+0xd6>
 8005560:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005564:	f101 0004 	add.w	r0, r1, #4
 8005568:	6018      	str	r0, [r3, #0]
 800556a:	d0f7      	beq.n	800555c <_printf_i+0xc4>
 800556c:	880b      	ldrh	r3, [r1, #0]
 800556e:	2a6f      	cmp	r2, #111	; 0x6f
 8005570:	bf14      	ite	ne
 8005572:	220a      	movne	r2, #10
 8005574:	2208      	moveq	r2, #8
 8005576:	4957      	ldr	r1, [pc, #348]	; (80056d4 <_printf_i+0x23c>)
 8005578:	2000      	movs	r0, #0
 800557a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800557e:	6865      	ldr	r5, [r4, #4]
 8005580:	2d00      	cmp	r5, #0
 8005582:	60a5      	str	r5, [r4, #8]
 8005584:	f2c0 809c 	blt.w	80056c0 <_printf_i+0x228>
 8005588:	6820      	ldr	r0, [r4, #0]
 800558a:	f020 0004 	bic.w	r0, r0, #4
 800558e:	6020      	str	r0, [r4, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d13f      	bne.n	8005614 <_printf_i+0x17c>
 8005594:	2d00      	cmp	r5, #0
 8005596:	f040 8095 	bne.w	80056c4 <_printf_i+0x22c>
 800559a:	4675      	mov	r5, lr
 800559c:	2a08      	cmp	r2, #8
 800559e:	d10b      	bne.n	80055b8 <_printf_i+0x120>
 80055a0:	6823      	ldr	r3, [r4, #0]
 80055a2:	07da      	lsls	r2, r3, #31
 80055a4:	d508      	bpl.n	80055b8 <_printf_i+0x120>
 80055a6:	6923      	ldr	r3, [r4, #16]
 80055a8:	6862      	ldr	r2, [r4, #4]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	bfde      	ittt	le
 80055ae:	2330      	movle	r3, #48	; 0x30
 80055b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055b8:	ebae 0305 	sub.w	r3, lr, r5
 80055bc:	6123      	str	r3, [r4, #16]
 80055be:	f8cd 8000 	str.w	r8, [sp]
 80055c2:	463b      	mov	r3, r7
 80055c4:	aa03      	add	r2, sp, #12
 80055c6:	4621      	mov	r1, r4
 80055c8:	4630      	mov	r0, r6
 80055ca:	f7ff feed 	bl	80053a8 <_printf_common>
 80055ce:	3001      	adds	r0, #1
 80055d0:	d155      	bne.n	800567e <_printf_i+0x1e6>
 80055d2:	f04f 30ff 	mov.w	r0, #4294967295
 80055d6:	b005      	add	sp, #20
 80055d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055dc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80055e0:	493c      	ldr	r1, [pc, #240]	; (80056d4 <_printf_i+0x23c>)
 80055e2:	6822      	ldr	r2, [r4, #0]
 80055e4:	6818      	ldr	r0, [r3, #0]
 80055e6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80055ea:	f100 0504 	add.w	r5, r0, #4
 80055ee:	601d      	str	r5, [r3, #0]
 80055f0:	d001      	beq.n	80055f6 <_printf_i+0x15e>
 80055f2:	6803      	ldr	r3, [r0, #0]
 80055f4:	e002      	b.n	80055fc <_printf_i+0x164>
 80055f6:	0655      	lsls	r5, r2, #25
 80055f8:	d5fb      	bpl.n	80055f2 <_printf_i+0x15a>
 80055fa:	8803      	ldrh	r3, [r0, #0]
 80055fc:	07d0      	lsls	r0, r2, #31
 80055fe:	bf44      	itt	mi
 8005600:	f042 0220 	orrmi.w	r2, r2, #32
 8005604:	6022      	strmi	r2, [r4, #0]
 8005606:	b91b      	cbnz	r3, 8005610 <_printf_i+0x178>
 8005608:	6822      	ldr	r2, [r4, #0]
 800560a:	f022 0220 	bic.w	r2, r2, #32
 800560e:	6022      	str	r2, [r4, #0]
 8005610:	2210      	movs	r2, #16
 8005612:	e7b1      	b.n	8005578 <_printf_i+0xe0>
 8005614:	4675      	mov	r5, lr
 8005616:	fbb3 f0f2 	udiv	r0, r3, r2
 800561a:	fb02 3310 	mls	r3, r2, r0, r3
 800561e:	5ccb      	ldrb	r3, [r1, r3]
 8005620:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005624:	4603      	mov	r3, r0
 8005626:	2800      	cmp	r0, #0
 8005628:	d1f5      	bne.n	8005616 <_printf_i+0x17e>
 800562a:	e7b7      	b.n	800559c <_printf_i+0x104>
 800562c:	6808      	ldr	r0, [r1, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005634:	6949      	ldr	r1, [r1, #20]
 8005636:	d004      	beq.n	8005642 <_printf_i+0x1aa>
 8005638:	1d10      	adds	r0, r2, #4
 800563a:	6018      	str	r0, [r3, #0]
 800563c:	6813      	ldr	r3, [r2, #0]
 800563e:	6019      	str	r1, [r3, #0]
 8005640:	e007      	b.n	8005652 <_printf_i+0x1ba>
 8005642:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005646:	f102 0004 	add.w	r0, r2, #4
 800564a:	6018      	str	r0, [r3, #0]
 800564c:	6813      	ldr	r3, [r2, #0]
 800564e:	d0f6      	beq.n	800563e <_printf_i+0x1a6>
 8005650:	8019      	strh	r1, [r3, #0]
 8005652:	2300      	movs	r3, #0
 8005654:	4675      	mov	r5, lr
 8005656:	6123      	str	r3, [r4, #16]
 8005658:	e7b1      	b.n	80055be <_printf_i+0x126>
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	1d11      	adds	r1, r2, #4
 800565e:	6019      	str	r1, [r3, #0]
 8005660:	6815      	ldr	r5, [r2, #0]
 8005662:	2100      	movs	r1, #0
 8005664:	6862      	ldr	r2, [r4, #4]
 8005666:	4628      	mov	r0, r5
 8005668:	f000 f846 	bl	80056f8 <memchr>
 800566c:	b108      	cbz	r0, 8005672 <_printf_i+0x1da>
 800566e:	1b40      	subs	r0, r0, r5
 8005670:	6060      	str	r0, [r4, #4]
 8005672:	6863      	ldr	r3, [r4, #4]
 8005674:	6123      	str	r3, [r4, #16]
 8005676:	2300      	movs	r3, #0
 8005678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800567c:	e79f      	b.n	80055be <_printf_i+0x126>
 800567e:	6923      	ldr	r3, [r4, #16]
 8005680:	462a      	mov	r2, r5
 8005682:	4639      	mov	r1, r7
 8005684:	4630      	mov	r0, r6
 8005686:	47c0      	blx	r8
 8005688:	3001      	adds	r0, #1
 800568a:	d0a2      	beq.n	80055d2 <_printf_i+0x13a>
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	079b      	lsls	r3, r3, #30
 8005690:	d507      	bpl.n	80056a2 <_printf_i+0x20a>
 8005692:	2500      	movs	r5, #0
 8005694:	f104 0919 	add.w	r9, r4, #25
 8005698:	68e3      	ldr	r3, [r4, #12]
 800569a:	9a03      	ldr	r2, [sp, #12]
 800569c:	1a9b      	subs	r3, r3, r2
 800569e:	429d      	cmp	r5, r3
 80056a0:	db05      	blt.n	80056ae <_printf_i+0x216>
 80056a2:	68e0      	ldr	r0, [r4, #12]
 80056a4:	9b03      	ldr	r3, [sp, #12]
 80056a6:	4298      	cmp	r0, r3
 80056a8:	bfb8      	it	lt
 80056aa:	4618      	movlt	r0, r3
 80056ac:	e793      	b.n	80055d6 <_printf_i+0x13e>
 80056ae:	2301      	movs	r3, #1
 80056b0:	464a      	mov	r2, r9
 80056b2:	4639      	mov	r1, r7
 80056b4:	4630      	mov	r0, r6
 80056b6:	47c0      	blx	r8
 80056b8:	3001      	adds	r0, #1
 80056ba:	d08a      	beq.n	80055d2 <_printf_i+0x13a>
 80056bc:	3501      	adds	r5, #1
 80056be:	e7eb      	b.n	8005698 <_printf_i+0x200>
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1a7      	bne.n	8005614 <_printf_i+0x17c>
 80056c4:	780b      	ldrb	r3, [r1, #0]
 80056c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056ce:	e765      	b.n	800559c <_printf_i+0x104>
 80056d0:	0800595c 	.word	0x0800595c
 80056d4:	0800594b 	.word	0x0800594b

080056d8 <_sbrk_r>:
 80056d8:	b538      	push	{r3, r4, r5, lr}
 80056da:	2300      	movs	r3, #0
 80056dc:	4c05      	ldr	r4, [pc, #20]	; (80056f4 <_sbrk_r+0x1c>)
 80056de:	4605      	mov	r5, r0
 80056e0:	4608      	mov	r0, r1
 80056e2:	6023      	str	r3, [r4, #0]
 80056e4:	f7ff fb0e 	bl	8004d04 <_sbrk>
 80056e8:	1c43      	adds	r3, r0, #1
 80056ea:	d102      	bne.n	80056f2 <_sbrk_r+0x1a>
 80056ec:	6823      	ldr	r3, [r4, #0]
 80056ee:	b103      	cbz	r3, 80056f2 <_sbrk_r+0x1a>
 80056f0:	602b      	str	r3, [r5, #0]
 80056f2:	bd38      	pop	{r3, r4, r5, pc}
 80056f4:	20004224 	.word	0x20004224

080056f8 <memchr>:
 80056f8:	b510      	push	{r4, lr}
 80056fa:	b2c9      	uxtb	r1, r1
 80056fc:	4402      	add	r2, r0
 80056fe:	4290      	cmp	r0, r2
 8005700:	4603      	mov	r3, r0
 8005702:	d101      	bne.n	8005708 <memchr+0x10>
 8005704:	2000      	movs	r0, #0
 8005706:	bd10      	pop	{r4, pc}
 8005708:	781c      	ldrb	r4, [r3, #0]
 800570a:	3001      	adds	r0, #1
 800570c:	428c      	cmp	r4, r1
 800570e:	d1f6      	bne.n	80056fe <memchr+0x6>
 8005710:	4618      	mov	r0, r3
 8005712:	bd10      	pop	{r4, pc}

08005714 <memmove>:
 8005714:	4288      	cmp	r0, r1
 8005716:	b510      	push	{r4, lr}
 8005718:	eb01 0302 	add.w	r3, r1, r2
 800571c:	d803      	bhi.n	8005726 <memmove+0x12>
 800571e:	1e42      	subs	r2, r0, #1
 8005720:	4299      	cmp	r1, r3
 8005722:	d10c      	bne.n	800573e <memmove+0x2a>
 8005724:	bd10      	pop	{r4, pc}
 8005726:	4298      	cmp	r0, r3
 8005728:	d2f9      	bcs.n	800571e <memmove+0xa>
 800572a:	1881      	adds	r1, r0, r2
 800572c:	1ad2      	subs	r2, r2, r3
 800572e:	42d3      	cmn	r3, r2
 8005730:	d100      	bne.n	8005734 <memmove+0x20>
 8005732:	bd10      	pop	{r4, pc}
 8005734:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005738:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800573c:	e7f7      	b.n	800572e <memmove+0x1a>
 800573e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005742:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005746:	e7eb      	b.n	8005720 <memmove+0xc>

08005748 <__malloc_lock>:
 8005748:	4770      	bx	lr

0800574a <__malloc_unlock>:
 800574a:	4770      	bx	lr

0800574c <_realloc_r>:
 800574c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574e:	4607      	mov	r7, r0
 8005750:	4614      	mov	r4, r2
 8005752:	460e      	mov	r6, r1
 8005754:	b921      	cbnz	r1, 8005760 <_realloc_r+0x14>
 8005756:	4611      	mov	r1, r2
 8005758:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800575c:	f7ff bc76 	b.w	800504c <_malloc_r>
 8005760:	b922      	cbnz	r2, 800576c <_realloc_r+0x20>
 8005762:	f7ff fc27 	bl	8004fb4 <_free_r>
 8005766:	4625      	mov	r5, r4
 8005768:	4628      	mov	r0, r5
 800576a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800576c:	f000 f814 	bl	8005798 <_malloc_usable_size_r>
 8005770:	4284      	cmp	r4, r0
 8005772:	d90f      	bls.n	8005794 <_realloc_r+0x48>
 8005774:	4621      	mov	r1, r4
 8005776:	4638      	mov	r0, r7
 8005778:	f7ff fc68 	bl	800504c <_malloc_r>
 800577c:	4605      	mov	r5, r0
 800577e:	2800      	cmp	r0, #0
 8005780:	d0f2      	beq.n	8005768 <_realloc_r+0x1c>
 8005782:	4631      	mov	r1, r6
 8005784:	4622      	mov	r2, r4
 8005786:	f7ff fbde 	bl	8004f46 <memcpy>
 800578a:	4631      	mov	r1, r6
 800578c:	4638      	mov	r0, r7
 800578e:	f7ff fc11 	bl	8004fb4 <_free_r>
 8005792:	e7e9      	b.n	8005768 <_realloc_r+0x1c>
 8005794:	4635      	mov	r5, r6
 8005796:	e7e7      	b.n	8005768 <_realloc_r+0x1c>

08005798 <_malloc_usable_size_r>:
 8005798:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800579c:	2800      	cmp	r0, #0
 800579e:	f1a0 0004 	sub.w	r0, r0, #4
 80057a2:	bfbc      	itt	lt
 80057a4:	580b      	ldrlt	r3, [r1, r0]
 80057a6:	18c0      	addlt	r0, r0, r3
 80057a8:	4770      	bx	lr
	...

080057ac <_init>:
 80057ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ae:	bf00      	nop
 80057b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057b2:	bc08      	pop	{r3}
 80057b4:	469e      	mov	lr, r3
 80057b6:	4770      	bx	lr

080057b8 <_fini>:
 80057b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ba:	bf00      	nop
 80057bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057be:	bc08      	pop	{r3}
 80057c0:	469e      	mov	lr, r3
 80057c2:	4770      	bx	lr
