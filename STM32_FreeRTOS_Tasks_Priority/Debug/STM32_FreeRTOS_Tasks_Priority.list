
STM32_FreeRTOS_Tasks_Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a90  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08003ba0  08003ba0  00013ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003ce8  08003ce8  00013ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003cec  08003cec  00013cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  20000000  08003cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004090  2000007c  08003d6c  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  2000410c  08003d6c  0002410c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e11c  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f9b  00000000  00000000  0002e1c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b78  00000000  00000000  00030160  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a80  00000000  00000000  00030cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000583f  00000000  00000000  00031758  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003fd2  00000000  00000000  00036f97  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003af69  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000033ac  00000000  00000000  0003afe8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003b88 	.word	0x08003b88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08003b88 	.word	0x08003b88

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000160:	b480      	push	{r7}
 8000162:	b083      	sub	sp, #12
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000168:	4a05      	ldr	r2, [pc, #20]	; (8000180 <NVIC_PriorityGroupConfig+0x20>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000174:	60d3      	str	r3, [r2, #12]
}
 8000176:	bf00      	nop
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	e000ed00 	.word	0xe000ed00

08000184 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000184:	b480      	push	{r7}
 8000186:	b085      	sub	sp, #20
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800018c:	2300      	movs	r3, #0
 800018e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000190:	4b34      	ldr	r3, [pc, #208]	; (8000264 <EXTI_Init+0xe0>)
 8000192:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	799b      	ldrb	r3, [r3, #6]
 8000198:	2b00      	cmp	r3, #0
 800019a:	d04f      	beq.n	800023c <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800019c:	4931      	ldr	r1, [pc, #196]	; (8000264 <EXTI_Init+0xe0>)
 800019e:	4b31      	ldr	r3, [pc, #196]	; (8000264 <EXTI_Init+0xe0>)
 80001a0:	681a      	ldr	r2, [r3, #0]
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	43db      	mvns	r3, r3
 80001a8:	4013      	ands	r3, r2
 80001aa:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80001ac:	492d      	ldr	r1, [pc, #180]	; (8000264 <EXTI_Init+0xe0>)
 80001ae:	4b2d      	ldr	r3, [pc, #180]	; (8000264 <EXTI_Init+0xe0>)
 80001b0:	685a      	ldr	r2, [r3, #4]
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	43db      	mvns	r3, r3
 80001b8:	4013      	ands	r3, r2
 80001ba:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	791b      	ldrb	r3, [r3, #4]
 80001c0:	461a      	mov	r2, r3
 80001c2:	68fb      	ldr	r3, [r7, #12]
 80001c4:	4413      	add	r3, r2
 80001c6:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	68fa      	ldr	r2, [r7, #12]
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	687a      	ldr	r2, [r7, #4]
 80001d0:	6812      	ldr	r2, [r2, #0]
 80001d2:	430a      	orrs	r2, r1
 80001d4:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80001d6:	4923      	ldr	r1, [pc, #140]	; (8000264 <EXTI_Init+0xe0>)
 80001d8:	4b22      	ldr	r3, [pc, #136]	; (8000264 <EXTI_Init+0xe0>)
 80001da:	689a      	ldr	r2, [r3, #8]
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	43db      	mvns	r3, r3
 80001e2:	4013      	ands	r3, r2
 80001e4:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80001e6:	491f      	ldr	r1, [pc, #124]	; (8000264 <EXTI_Init+0xe0>)
 80001e8:	4b1e      	ldr	r3, [pc, #120]	; (8000264 <EXTI_Init+0xe0>)
 80001ea:	68da      	ldr	r2, [r3, #12]
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	43db      	mvns	r3, r3
 80001f2:	4013      	ands	r3, r2
 80001f4:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	795b      	ldrb	r3, [r3, #5]
 80001fa:	2b10      	cmp	r3, #16
 80001fc:	d10e      	bne.n	800021c <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80001fe:	4919      	ldr	r1, [pc, #100]	; (8000264 <EXTI_Init+0xe0>)
 8000200:	4b18      	ldr	r3, [pc, #96]	; (8000264 <EXTI_Init+0xe0>)
 8000202:	689a      	ldr	r2, [r3, #8]
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4313      	orrs	r3, r2
 800020a:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 800020c:	4915      	ldr	r1, [pc, #84]	; (8000264 <EXTI_Init+0xe0>)
 800020e:	4b15      	ldr	r3, [pc, #84]	; (8000264 <EXTI_Init+0xe0>)
 8000210:	68da      	ldr	r2, [r3, #12]
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4313      	orrs	r3, r2
 8000218:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800021a:	e01d      	b.n	8000258 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 800021c:	4b11      	ldr	r3, [pc, #68]	; (8000264 <EXTI_Init+0xe0>)
 800021e:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	795b      	ldrb	r3, [r3, #5]
 8000224:	461a      	mov	r2, r3
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	4413      	add	r3, r2
 800022a:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	68fa      	ldr	r2, [r7, #12]
 8000230:	6811      	ldr	r1, [r2, #0]
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	6812      	ldr	r2, [r2, #0]
 8000236:	430a      	orrs	r2, r1
 8000238:	601a      	str	r2, [r3, #0]
}
 800023a:	e00d      	b.n	8000258 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	791b      	ldrb	r3, [r3, #4]
 8000240:	461a      	mov	r2, r3
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	4413      	add	r3, r2
 8000246:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	68fa      	ldr	r2, [r7, #12]
 800024c:	6811      	ldr	r1, [r2, #0]
 800024e:	687a      	ldr	r2, [r7, #4]
 8000250:	6812      	ldr	r2, [r2, #0]
 8000252:	43d2      	mvns	r2, r2
 8000254:	400a      	ands	r2, r1
 8000256:	601a      	str	r2, [r3, #0]
}
 8000258:	bf00      	nop
 800025a:	3714      	adds	r7, #20
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40010400 	.word	0x40010400

08000268 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000270:	4a03      	ldr	r2, [pc, #12]	; (8000280 <EXTI_ClearITPendingBit+0x18>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	6153      	str	r3, [r2, #20]
}
 8000276:	bf00      	nop
 8000278:	370c      	adds	r7, #12
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr
 8000280:	40010400 	.word	0x40010400

08000284 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000284:	b480      	push	{r7}
 8000286:	b089      	sub	sp, #36	; 0x24
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800028e:	2300      	movs	r3, #0
 8000290:	61fb      	str	r3, [r7, #28]
 8000292:	2300      	movs	r3, #0
 8000294:	613b      	str	r3, [r7, #16]
 8000296:	2300      	movs	r3, #0
 8000298:	61bb      	str	r3, [r7, #24]
 800029a:	2300      	movs	r3, #0
 800029c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800029e:	2300      	movs	r3, #0
 80002a0:	617b      	str	r3, [r7, #20]
 80002a2:	2300      	movs	r3, #0
 80002a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	78db      	ldrb	r3, [r3, #3]
 80002aa:	f003 030f 	and.w	r3, r3, #15
 80002ae:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	78db      	ldrb	r3, [r3, #3]
 80002b4:	f003 0310 	and.w	r3, r3, #16
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d005      	beq.n	80002c8 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	789b      	ldrb	r3, [r3, #2]
 80002c0:	461a      	mov	r2, r3
 80002c2:	69fb      	ldr	r3, [r7, #28]
 80002c4:	4313      	orrs	r3, r2
 80002c6:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	881b      	ldrh	r3, [r3, #0]
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d044      	beq.n	800035c <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002d8:	2300      	movs	r3, #0
 80002da:	61bb      	str	r3, [r7, #24]
 80002dc:	e038      	b.n	8000350 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80002de:	2201      	movs	r2, #1
 80002e0:	69bb      	ldr	r3, [r7, #24]
 80002e2:	fa02 f303 	lsl.w	r3, r2, r3
 80002e6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	881b      	ldrh	r3, [r3, #0]
 80002ec:	461a      	mov	r2, r3
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	4013      	ands	r3, r2
 80002f2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80002f4:	693a      	ldr	r2, [r7, #16]
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	d126      	bne.n	800034a <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80002fc:	69bb      	ldr	r3, [r7, #24]
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000302:	220f      	movs	r2, #15
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	fa02 f303 	lsl.w	r3, r2, r3
 800030a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	43db      	mvns	r3, r3
 8000310:	697a      	ldr	r2, [r7, #20]
 8000312:	4013      	ands	r3, r2
 8000314:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000316:	69fa      	ldr	r2, [r7, #28]
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	fa02 f303 	lsl.w	r3, r2, r3
 800031e:	697a      	ldr	r2, [r7, #20]
 8000320:	4313      	orrs	r3, r2
 8000322:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	78db      	ldrb	r3, [r3, #3]
 8000328:	2b28      	cmp	r3, #40	; 0x28
 800032a:	d105      	bne.n	8000338 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800032c:	2201      	movs	r2, #1
 800032e:	69bb      	ldr	r3, [r7, #24]
 8000330:	409a      	lsls	r2, r3
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	615a      	str	r2, [r3, #20]
 8000336:	e008      	b.n	800034a <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	78db      	ldrb	r3, [r3, #3]
 800033c:	2b48      	cmp	r3, #72	; 0x48
 800033e:	d104      	bne.n	800034a <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000340:	2201      	movs	r2, #1
 8000342:	69bb      	ldr	r3, [r7, #24]
 8000344:	409a      	lsls	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800034a:	69bb      	ldr	r3, [r7, #24]
 800034c:	3301      	adds	r3, #1
 800034e:	61bb      	str	r3, [r7, #24]
 8000350:	69bb      	ldr	r3, [r7, #24]
 8000352:	2b07      	cmp	r3, #7
 8000354:	d9c3      	bls.n	80002de <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	697a      	ldr	r2, [r7, #20]
 800035a:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	881b      	ldrh	r3, [r3, #0]
 8000360:	2bff      	cmp	r3, #255	; 0xff
 8000362:	d946      	bls.n	80003f2 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800036a:	2300      	movs	r3, #0
 800036c:	61bb      	str	r3, [r7, #24]
 800036e:	e03a      	b.n	80003e6 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000370:	69bb      	ldr	r3, [r7, #24]
 8000372:	3308      	adds	r3, #8
 8000374:	2201      	movs	r2, #1
 8000376:	fa02 f303 	lsl.w	r3, r2, r3
 800037a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	461a      	mov	r2, r3
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	4013      	ands	r3, r2
 8000386:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000388:	693a      	ldr	r2, [r7, #16]
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	429a      	cmp	r2, r3
 800038e:	d127      	bne.n	80003e0 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000390:	69bb      	ldr	r3, [r7, #24]
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000396:	220f      	movs	r2, #15
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	fa02 f303 	lsl.w	r3, r2, r3
 800039e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	43db      	mvns	r3, r3
 80003a4:	697a      	ldr	r2, [r7, #20]
 80003a6:	4013      	ands	r3, r2
 80003a8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80003aa:	69fa      	ldr	r2, [r7, #28]
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	fa02 f303 	lsl.w	r3, r2, r3
 80003b2:	697a      	ldr	r2, [r7, #20]
 80003b4:	4313      	orrs	r3, r2
 80003b6:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	78db      	ldrb	r3, [r3, #3]
 80003bc:	2b28      	cmp	r3, #40	; 0x28
 80003be:	d105      	bne.n	80003cc <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80003c0:	69bb      	ldr	r3, [r7, #24]
 80003c2:	3308      	adds	r3, #8
 80003c4:	2201      	movs	r2, #1
 80003c6:	409a      	lsls	r2, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	78db      	ldrb	r3, [r3, #3]
 80003d0:	2b48      	cmp	r3, #72	; 0x48
 80003d2:	d105      	bne.n	80003e0 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80003d4:	69bb      	ldr	r3, [r7, #24]
 80003d6:	3308      	adds	r3, #8
 80003d8:	2201      	movs	r2, #1
 80003da:	409a      	lsls	r2, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003e0:	69bb      	ldr	r3, [r7, #24]
 80003e2:	3301      	adds	r3, #1
 80003e4:	61bb      	str	r3, [r7, #24]
 80003e6:	69bb      	ldr	r3, [r7, #24]
 80003e8:	2b07      	cmp	r3, #7
 80003ea:	d9c1      	bls.n	8000370 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	697a      	ldr	r2, [r7, #20]
 80003f0:	605a      	str	r2, [r3, #4]
  }
}
 80003f2:	bf00      	nop
 80003f4:	3724      	adds	r7, #36	; 0x24
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr

080003fc <GPIO_ToggleBit>:
  
  GPIOx->ODR = PortVal;
}

void GPIO_ToggleBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	460b      	mov	r3, r1
 8000406:	807b      	strh	r3, [r7, #2]

	/* Check the parameters */
	assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

	GPIOx->ODR ^= GPIO_Pin;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	68da      	ldr	r2, [r3, #12]
 800040c:	887b      	ldrh	r3, [r7, #2]
 800040e:	405a      	eors	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	60da      	str	r2, [r3, #12]

}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr
	...

08000420 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000420:	b480      	push	{r7}
 8000422:	b087      	sub	sp, #28
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000428:	2300      	movs	r3, #0
 800042a:	617b      	str	r3, [r7, #20]
 800042c:	2300      	movs	r3, #0
 800042e:	613b      	str	r3, [r7, #16]
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	2300      	movs	r3, #0
 8000436:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000438:	4b4c      	ldr	r3, [pc, #304]	; (800056c <RCC_GetClocksFreq+0x14c>)
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	f003 030c 	and.w	r3, r3, #12
 8000440:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000442:	697b      	ldr	r3, [r7, #20]
 8000444:	2b04      	cmp	r3, #4
 8000446:	d007      	beq.n	8000458 <RCC_GetClocksFreq+0x38>
 8000448:	2b08      	cmp	r3, #8
 800044a:	d009      	beq.n	8000460 <RCC_GetClocksFreq+0x40>
 800044c:	2b00      	cmp	r3, #0
 800044e:	d133      	bne.n	80004b8 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a47      	ldr	r2, [pc, #284]	; (8000570 <RCC_GetClocksFreq+0x150>)
 8000454:	601a      	str	r2, [r3, #0]
      break;
 8000456:	e033      	b.n	80004c0 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a45      	ldr	r2, [pc, #276]	; (8000570 <RCC_GetClocksFreq+0x150>)
 800045c:	601a      	str	r2, [r3, #0]
      break;
 800045e:	e02f      	b.n	80004c0 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000460:	4b42      	ldr	r3, [pc, #264]	; (800056c <RCC_GetClocksFreq+0x14c>)
 8000462:	685b      	ldr	r3, [r3, #4]
 8000464:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000468:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800046a:	4b40      	ldr	r3, [pc, #256]	; (800056c <RCC_GetClocksFreq+0x14c>)
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000472:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000474:	693b      	ldr	r3, [r7, #16]
 8000476:	0c9b      	lsrs	r3, r3, #18
 8000478:	3302      	adds	r3, #2
 800047a:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d106      	bne.n	8000490 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000482:	693b      	ldr	r3, [r7, #16]
 8000484:	4a3b      	ldr	r2, [pc, #236]	; (8000574 <RCC_GetClocksFreq+0x154>)
 8000486:	fb02 f203 	mul.w	r2, r2, r3
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 800048e:	e017      	b.n	80004c0 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000490:	4b36      	ldr	r3, [pc, #216]	; (800056c <RCC_GetClocksFreq+0x14c>)
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000498:	2b00      	cmp	r3, #0
 800049a:	d006      	beq.n	80004aa <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 800049c:	693b      	ldr	r3, [r7, #16]
 800049e:	4a35      	ldr	r2, [pc, #212]	; (8000574 <RCC_GetClocksFreq+0x154>)
 80004a0:	fb02 f203 	mul.w	r2, r2, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	601a      	str	r2, [r3, #0]
      break;
 80004a8:	e00a      	b.n	80004c0 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	4a30      	ldr	r2, [pc, #192]	; (8000570 <RCC_GetClocksFreq+0x150>)
 80004ae:	fb02 f203 	mul.w	r2, r2, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	601a      	str	r2, [r3, #0]
      break;
 80004b6:	e003      	b.n	80004c0 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a2d      	ldr	r2, [pc, #180]	; (8000570 <RCC_GetClocksFreq+0x150>)
 80004bc:	601a      	str	r2, [r3, #0]
      break;
 80004be:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80004c0:	4b2a      	ldr	r3, [pc, #168]	; (800056c <RCC_GetClocksFreq+0x14c>)
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80004c8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	091b      	lsrs	r3, r3, #4
 80004ce:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80004d0:	4a29      	ldr	r2, [pc, #164]	; (8000578 <RCC_GetClocksFreq+0x158>)
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	4413      	add	r3, r2
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	40da      	lsrs	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80004e8:	4b20      	ldr	r3, [pc, #128]	; (800056c <RCC_GetClocksFreq+0x14c>)
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80004f0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	0a1b      	lsrs	r3, r3, #8
 80004f6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80004f8:	4a1f      	ldr	r2, [pc, #124]	; (8000578 <RCC_GetClocksFreq+0x158>)
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	4413      	add	r3, r2
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	b2db      	uxtb	r3, r3
 8000502:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	685a      	ldr	r2, [r3, #4]
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	40da      	lsrs	r2, r3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000510:	4b16      	ldr	r3, [pc, #88]	; (800056c <RCC_GetClocksFreq+0x14c>)
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000518:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	0adb      	lsrs	r3, r3, #11
 800051e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000520:	4a15      	ldr	r2, [pc, #84]	; (8000578 <RCC_GetClocksFreq+0x158>)
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	4413      	add	r3, r2
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b2db      	uxtb	r3, r3
 800052a:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	685a      	ldr	r2, [r3, #4]
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	40da      	lsrs	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <RCC_GetClocksFreq+0x14c>)
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000540:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	0b9b      	lsrs	r3, r3, #14
 8000546:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000548:	4a0c      	ldr	r2, [pc, #48]	; (800057c <RCC_GetClocksFreq+0x15c>)
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	4413      	add	r3, r2
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b2db      	uxtb	r3, r3
 8000552:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	68da      	ldr	r2, [r3, #12]
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	fbb2 f2f3 	udiv	r2, r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	611a      	str	r2, [r3, #16]
}
 8000562:	bf00      	nop
 8000564:	371c      	adds	r7, #28
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	40021000 	.word	0x40021000
 8000570:	007a1200 	.word	0x007a1200
 8000574:	003d0900 	.word	0x003d0900
 8000578:	20000000 	.word	0x20000000
 800057c:	20000010 	.word	0x20000010

08000580 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800058c:	78fb      	ldrb	r3, [r7, #3]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d006      	beq.n	80005a0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000592:	4909      	ldr	r1, [pc, #36]	; (80005b8 <RCC_APB2PeriphClockCmd+0x38>)
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <RCC_APB2PeriphClockCmd+0x38>)
 8000596:	699a      	ldr	r2, [r3, #24]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4313      	orrs	r3, r2
 800059c:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800059e:	e006      	b.n	80005ae <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80005a0:	4905      	ldr	r1, [pc, #20]	; (80005b8 <RCC_APB2PeriphClockCmd+0x38>)
 80005a2:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <RCC_APB2PeriphClockCmd+0x38>)
 80005a4:	699a      	ldr	r2, [r3, #24]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	43db      	mvns	r3, r3
 80005aa:	4013      	ands	r3, r2
 80005ac:	618b      	str	r3, [r1, #24]
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	40021000 	.word	0x40021000

080005bc <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08c      	sub	sp, #48	; 0x30
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80005c6:	2300      	movs	r3, #0
 80005c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005ca:	2300      	movs	r3, #0
 80005cc:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 80005ce:	2300      	movs	r3, #0
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 80005d2:	2300      	movs	r3, #0
 80005d4:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	8a1b      	ldrh	r3, [r3, #16]
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80005e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005e8:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80005ec:	4013      	ands	r3, r2
 80005ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	88db      	ldrh	r3, [r3, #6]
 80005f4:	461a      	mov	r2, r3
 80005f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005f8:	4313      	orrs	r3, r2
 80005fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80005fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005fe:	b29a      	uxth	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	899b      	ldrh	r3, [r3, #12]
 8000608:	b29b      	uxth	r3, r3
 800060a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 800060c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800060e:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8000612:	4013      	ands	r3, r2
 8000614:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	889a      	ldrh	r2, [r3, #4]
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	891b      	ldrh	r3, [r3, #8]
 800061e:	4313      	orrs	r3, r2
 8000620:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000626:	4313      	orrs	r3, r2
 8000628:	b29b      	uxth	r3, r3
 800062a:	461a      	mov	r2, r3
 800062c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800062e:	4313      	orrs	r3, r2
 8000630:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000634:	b29a      	uxth	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	8a9b      	ldrh	r3, [r3, #20]
 800063e:	b29b      	uxth	r3, r3
 8000640:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8000642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000644:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000648:	4013      	ands	r3, r2
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	899b      	ldrh	r3, [r3, #12]
 8000650:	461a      	mov	r2, r3
 8000652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000654:	4313      	orrs	r3, r2
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800065a:	b29a      	uxth	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff fedb 	bl	8000420 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	4a2e      	ldr	r2, [pc, #184]	; (8000728 <USART_Init+0x16c>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d102      	bne.n	8000678 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	62bb      	str	r3, [r7, #40]	; 0x28
 8000676:	e001      	b.n	800067c <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	899b      	ldrh	r3, [r3, #12]
 8000680:	b29b      	uxth	r3, r3
 8000682:	b21b      	sxth	r3, r3
 8000684:	2b00      	cmp	r3, #0
 8000686:	da0c      	bge.n	80006a2 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000688:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800068a:	4613      	mov	r3, r2
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	4413      	add	r3, r2
 8000690:	009a      	lsls	r2, r3, #2
 8000692:	441a      	add	r2, r3
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	fbb2 f3f3 	udiv	r3, r2, r3
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
 80006a0:	e00b      	b.n	80006ba <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80006a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006a4:	4613      	mov	r3, r2
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	4413      	add	r3, r2
 80006aa:	009a      	lsls	r2, r3, #2
 80006ac:	441a      	add	r2, r3
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 80006ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006bc:	4a1b      	ldr	r2, [pc, #108]	; (800072c <USART_Init+0x170>)
 80006be:	fba2 2303 	umull	r2, r3, r2, r3
 80006c2:	095b      	lsrs	r3, r3, #5
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80006c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ca:	091b      	lsrs	r3, r3, #4
 80006cc:	2264      	movs	r2, #100	; 0x64
 80006ce:	fb02 f303 	mul.w	r3, r2, r3
 80006d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	899b      	ldrh	r3, [r3, #12]
 80006dc:	b29b      	uxth	r3, r3
 80006de:	b21b      	sxth	r3, r3
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	da0c      	bge.n	80006fe <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80006e4:	6a3b      	ldr	r3, [r7, #32]
 80006e6:	00db      	lsls	r3, r3, #3
 80006e8:	3332      	adds	r3, #50	; 0x32
 80006ea:	4a10      	ldr	r2, [pc, #64]	; (800072c <USART_Init+0x170>)
 80006ec:	fba2 2303 	umull	r2, r3, r2, r3
 80006f0:	095b      	lsrs	r3, r3, #5
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006f8:	4313      	orrs	r3, r2
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006fc:	e00b      	b.n	8000716 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80006fe:	6a3b      	ldr	r3, [r7, #32]
 8000700:	011b      	lsls	r3, r3, #4
 8000702:	3332      	adds	r3, #50	; 0x32
 8000704:	4a09      	ldr	r2, [pc, #36]	; (800072c <USART_Init+0x170>)
 8000706:	fba2 2303 	umull	r2, r3, r2, r3
 800070a:	095b      	lsrs	r3, r3, #5
 800070c:	f003 030f 	and.w	r3, r3, #15
 8000710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000712:	4313      	orrs	r3, r2
 8000714:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000718:	b29a      	uxth	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	811a      	strh	r2, [r3, #8]
}
 800071e:	bf00      	nop
 8000720:	3730      	adds	r7, #48	; 0x30
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40013800 	.word	0x40013800
 800072c:	51eb851f 	.word	0x51eb851f

08000730 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	460b      	mov	r3, r1
 800073a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d008      	beq.n	8000754 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	b29b      	uxth	r3, r3
 8000748:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800074c:	b29a      	uxth	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8000752:	e007      	b.n	8000764 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	899b      	ldrh	r3, [r3, #12]
 8000758:	b29b      	uxth	r3, r3
 800075a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800075e:	b29a      	uxth	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	819a      	strh	r2, [r3, #12]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr

0800076e <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800076e:	b480      	push	{r7}
 8000770:	b083      	sub	sp, #12
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	460b      	mov	r3, r1
 8000778:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800077a:	887b      	ldrh	r3, [r7, #2]
 800077c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000780:	b29a      	uxth	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	809a      	strh	r2, [r3, #4]
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	460b      	mov	r3, r1
 800079a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800079c:	2300      	movs	r3, #0
 800079e:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	887b      	ldrh	r3, [r7, #2]
 80007a8:	4013      	ands	r3, r2
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d002      	beq.n	80007b6 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80007b0:	2301      	movs	r3, #1
 80007b2:	73fb      	strb	r3, [r7, #15]
 80007b4:	e001      	b.n	80007ba <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3714      	adds	r7, #20
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr

080007c6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80007c6:	b480      	push	{r7}
 80007c8:	b083      	sub	sp, #12
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f103 0208 	add.w	r2, r3, #8
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f04f 32ff 	mov.w	r2, #4294967295
 80007de:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f103 0208 	add.w	r2, r3, #8
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	f103 0208 	add.w	r2, r3, #8
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr

08000804 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr

0800081c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	689a      	ldr	r2, [r3, #8]
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	689b      	ldr	r3, [r3, #8]
 800083e:	683a      	ldr	r2, [r7, #0]
 8000840:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	683a      	ldr	r2, [r7, #0]
 8000846:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	1c5a      	adds	r2, r3, #1
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	601a      	str	r2, [r3, #0]
}
 8000858:	bf00      	nop
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr

08000862 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000862:	b480      	push	{r7}
 8000864:	b085      	sub	sp, #20
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	691b      	ldr	r3, [r3, #16]
 800086e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	6892      	ldr	r2, [r2, #8]
 8000878:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	6852      	ldr	r2, [r2, #4]
 8000882:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	685a      	ldr	r2, [r3, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	429a      	cmp	r2, r3
 800088c:	d103      	bne.n	8000896 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	689a      	ldr	r2, [r3, #8]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	1e5a      	subs	r2, r3, #1
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	681b      	ldr	r3, [r3, #0]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr

080008b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	3b04      	subs	r3, #4
 80008c4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80008cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	3b04      	subs	r3, #4
 80008d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	f023 0201 	bic.w	r2, r3, #1
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	3b04      	subs	r3, #4
 80008e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80008e4:	4a08      	ldr	r2, [pc, #32]	; (8000908 <pxPortInitialiseStack+0x54>)
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	3b14      	subs	r3, #20
 80008ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	3b20      	subs	r3, #32
 80008fa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80008fc:	68fb      	ldr	r3, [r7, #12]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3714      	adds	r7, #20
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	0800090d 	.word	0x0800090d

0800090c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000916:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800091a:	f383 8811 	msr	BASEPRI, r3
 800091e:	f3bf 8f6f 	isb	sy
 8000922:	f3bf 8f4f 	dsb	sy
 8000926:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000928:	bf00      	nop
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d0fc      	beq.n	800092a <prvTaskExitError+0x1e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
 800093a:	0000      	movs	r0, r0
 800093c:	0000      	movs	r0, r0
	...

08000940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <pxCurrentTCBConst2>)
 8000942:	6819      	ldr	r1, [r3, #0]
 8000944:	6808      	ldr	r0, [r1, #0]
 8000946:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800094a:	f380 8809 	msr	PSP, r0
 800094e:	f3bf 8f6f 	isb	sy
 8000952:	f04f 0000 	mov.w	r0, #0
 8000956:	f380 8811 	msr	BASEPRI, r0
 800095a:	f04e 0e0d 	orr.w	lr, lr, #13
 800095e:	4770      	bx	lr

08000960 <pxCurrentTCBConst2>:
 8000960:	200038b8 	.word	0x200038b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop

08000968 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000968:	4806      	ldr	r0, [pc, #24]	; (8000984 <prvPortStartFirstTask+0x1c>)
 800096a:	6800      	ldr	r0, [r0, #0]
 800096c:	6800      	ldr	r0, [r0, #0]
 800096e:	f380 8808 	msr	MSP, r0
 8000972:	b662      	cpsie	i
 8000974:	b661      	cpsie	f
 8000976:	f3bf 8f4f 	dsb	sy
 800097a:	f3bf 8f6f 	isb	sy
 800097e:	df00      	svc	0
 8000980:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000982:	bf00      	nop
 8000984:	e000ed08 	.word	0xe000ed08

08000988 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800098c:	4a0c      	ldr	r2, [pc, #48]	; (80009c0 <xPortStartScheduler+0x38>)
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <xPortStartScheduler+0x38>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000996:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000998:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <xPortStartScheduler+0x38>)
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <xPortStartScheduler+0x38>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80009a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80009a4:	f000 f890 	bl	8000ac8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <xPortStartScheduler+0x3c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80009ae:	f7ff ffdb 	bl	8000968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80009b2:	f000 fdeb 	bl	800158c <vTaskSwitchContext>
	prvTaskExitError();
 80009b6:	f7ff ffa9 	bl	800090c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	e000ed20 	.word	0xe000ed20
 80009c4:	20000014 	.word	0x20000014

080009c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80009d2:	f383 8811 	msr	BASEPRI, r3
 80009d6:	f3bf 8f6f 	isb	sy
 80009da:	f3bf 8f4f 	dsb	sy
 80009de:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80009e0:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <vPortEnterCritical+0x2c>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	3301      	adds	r3, #1
 80009e6:	4a03      	ldr	r2, [pc, #12]	; (80009f4 <vPortEnterCritical+0x2c>)
 80009e8:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	20000014 	.word	0x20000014

080009f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <vPortExitCritical+0x2c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <vPortExitCritical+0x2c>)
 8000a06:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <vPortExitCritical+0x2c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d104      	bne.n	8000a1a <vPortExitCritical+0x22>
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	20000014 	.word	0x20000014
	...

08000a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000a30:	f3ef 8009 	mrs	r0, PSP
 8000a34:	f3bf 8f6f 	isb	sy
 8000a38:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <pxCurrentTCBConst>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000a40:	6010      	str	r0, [r2, #0]
 8000a42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000a46:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8000a4a:	f380 8811 	msr	BASEPRI, r0
 8000a4e:	f000 fd9d 	bl	800158c <vTaskSwitchContext>
 8000a52:	f04f 0000 	mov.w	r0, #0
 8000a56:	f380 8811 	msr	BASEPRI, r0
 8000a5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000a5e:	6819      	ldr	r1, [r3, #0]
 8000a60:	6808      	ldr	r0, [r1, #0]
 8000a62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000a66:	f380 8809 	msr	PSP, r0
 8000a6a:	f3bf 8f6f 	isb	sy
 8000a6e:	4770      	bx	lr

08000a70 <pxCurrentTCBConst>:
 8000a70:	200038b8 	.word	0x200038b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop

08000a78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8000a7e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000a82:	f383 8811 	msr	BASEPRI, r3
 8000a86:	f3bf 8f6f 	isb	sy
 8000a8a:	f3bf 8f4f 	dsb	sy
 8000a8e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8000a90:	f001 fe2c 	bl	80026ec <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000a94:	f000 fcce 	bl	8001434 <xTaskIncrementTick>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d006      	beq.n	8000aac <SysTick_Handler+0x34>
		{
      traceISR_EXIT_TO_SCHEDULER();
 8000a9e:	f001 fe83 	bl	80027a8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <SysTick_Handler+0x4c>)
 8000aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	e001      	b.n	8000ab0 <SysTick_Handler+0x38>
		}
		else
		{
			traceISR_EXIT();
 8000aac:	f001 fe60 	bl	8002770 <SEGGER_SYSVIEW_RecordExitISR>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	e000ed04 	.word	0xe000ed04

08000ac8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000acc:	4b07      	ldr	r3, [pc, #28]	; (8000aec <vPortSetupTimerInterrupt+0x24>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <vPortSetupTimerInterrupt+0x28>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <vPortSetupTimerInterrupt+0x2c>)
 8000ada:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <vPortSetupTimerInterrupt+0x30>)
 8000adc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000ade:	4b03      	ldr	r3, [pc, #12]	; (8000aec <vPortSetupTimerInterrupt+0x24>)
 8000ae0:	2207      	movs	r2, #7
 8000ae2:	601a      	str	r2, [r3, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	e000e010 	.word	0xe000e010
 8000af0:	e000e018 	.word	0xe000e018
 8000af4:	e000e014 	.word	0xe000e014
 8000af8:	0001193f 	.word	0x0001193f

08000afc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8000b08:	f000 fbe6 	bl	80012d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000b0c:	4b42      	ldr	r3, [pc, #264]	; (8000c18 <pvPortMalloc+0x11c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d101      	bne.n	8000b18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8000b14:	f000 f8cc 	bl	8000cb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000b18:	4b40      	ldr	r3, [pc, #256]	; (8000c1c <pvPortMalloc+0x120>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d172      	bne.n	8000c0a <pvPortMalloc+0x10e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d00d      	beq.n	8000b46 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 8000b2a:	2208      	movs	r2, #8
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4413      	add	r3, r2
 8000b30:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f003 0307 	and.w	r3, r3, #7
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d004      	beq.n	8000b46 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f023 0307 	bic.w	r3, r3, #7
 8000b42:	3308      	adds	r3, #8
 8000b44:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d05e      	beq.n	8000c0a <pvPortMalloc+0x10e>
 8000b4c:	4b34      	ldr	r3, [pc, #208]	; (8000c20 <pvPortMalloc+0x124>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d859      	bhi.n	8000c0a <pvPortMalloc+0x10e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000b56:	4b33      	ldr	r3, [pc, #204]	; (8000c24 <pvPortMalloc+0x128>)
 8000b58:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8000b5a:	4b32      	ldr	r3, [pc, #200]	; (8000c24 <pvPortMalloc+0x128>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000b60:	e004      	b.n	8000b6c <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	685a      	ldr	r2, [r3, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d203      	bcs.n	8000b7e <pvPortMalloc+0x82>
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d1f1      	bne.n	8000b62 <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000b7e:	4b26      	ldr	r3, [pc, #152]	; (8000c18 <pvPortMalloc+0x11c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d040      	beq.n	8000c0a <pvPortMalloc+0x10e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2208      	movs	r2, #8
 8000b8e:	4413      	add	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	1ad2      	subs	r2, r2, r3
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d90f      	bls.n	8000bca <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000baa:	697a      	ldr	r2, [r7, #20]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4413      	add	r3, r2
 8000bb0:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	685a      	ldr	r2, [r3, #4]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	1ad2      	subs	r2, r2, r3
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000bc4:	68b8      	ldr	r0, [r7, #8]
 8000bc6:	f000 f8d5 	bl	8000d74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <pvPortMalloc+0x124>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	1ad3      	subs	r3, r2, r3
 8000bd4:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <pvPortMalloc+0x124>)
 8000bd6:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <pvPortMalloc+0x124>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <pvPortMalloc+0x12c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d203      	bcs.n	8000bec <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000be4:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <pvPortMalloc+0x124>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0f      	ldr	r2, [pc, #60]	; (8000c28 <pvPortMalloc+0x12c>)
 8000bea:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	685a      	ldr	r2, [r3, #4]
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <pvPortMalloc+0x120>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <pvPortMalloc+0x130>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	3301      	adds	r3, #1
 8000c06:	4a09      	ldr	r2, [pc, #36]	; (8000c2c <pvPortMalloc+0x130>)
 8000c08:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000c0a:	f000 fb73 	bl	80012f4 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200038a0 	.word	0x200038a0
 8000c1c:	200038b4 	.word	0x200038b4
 8000c20:	200038a4 	.word	0x200038a4
 8000c24:	20003898 	.word	0x20003898
 8000c28:	200038a8 	.word	0x200038a8
 8000c2c:	200038ac 	.word	0x200038ac

08000c30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d02c      	beq.n	8000c9c <vPortFree+0x6c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000c42:	2308      	movs	r3, #8
 8000c44:	425b      	negs	r3, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	4413      	add	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	685a      	ldr	r2, [r3, #4]
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <vPortFree+0x74>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d01e      	beq.n	8000c9c <vPortFree+0x6c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d11a      	bne.n	8000c9c <vPortFree+0x6c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	685a      	ldr	r2, [r3, #4]
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <vPortFree+0x74>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	401a      	ands	r2, r3
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000c76:	f000 fb2f 	bl	80012d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <vPortFree+0x78>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a08      	ldr	r2, [pc, #32]	; (8000ca8 <vPortFree+0x78>)
 8000c86:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000c88:	68b8      	ldr	r0, [r7, #8]
 8000c8a:	f000 f873 	bl	8000d74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <vPortFree+0x7c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	3301      	adds	r3, #1
 8000c94:	4a05      	ldr	r2, [pc, #20]	; (8000cac <vPortFree+0x7c>)
 8000c96:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8000c98:	f000 fb2c 	bl	80012f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200038b4 	.word	0x200038b4
 8000ca8:	200038a4 	.word	0x200038a4
 8000cac:	200038b0 	.word	0x200038b0

08000cb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000cb6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000cba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000cbc:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <prvHeapInit+0xac>)
 8000cbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d00c      	beq.n	8000ce4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	3307      	adds	r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f023 0307 	bic.w	r3, r3, #7
 8000cd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000cd8:	68ba      	ldr	r2, [r7, #8]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	4a1f      	ldr	r2, [pc, #124]	; (8000d5c <prvHeapInit+0xac>)
 8000ce0:	4413      	add	r3, r2
 8000ce2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000ce8:	4a1d      	ldr	r2, [pc, #116]	; (8000d60 <prvHeapInit+0xb0>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000cee:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <prvHeapInit+0xb0>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000cfc:	2208      	movs	r2, #8
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	1a9b      	subs	r3, r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f023 0307 	bic.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4a15      	ldr	r2, [pc, #84]	; (8000d64 <prvHeapInit+0xb4>)
 8000d10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <prvHeapInit+0xb4>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2200      	movs	r2, #0
 8000d18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000d1a:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <prvHeapInit+0xb4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	68fa      	ldr	r2, [r7, #12]
 8000d2a:	1ad2      	subs	r2, r2, r3
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <prvHeapInit+0xb4>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <prvHeapInit+0xb8>)
 8000d3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <prvHeapInit+0xbc>)
 8000d46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <prvHeapInit+0xc0>)
 8000d4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000d4e:	601a      	str	r2, [r3, #0]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000098 	.word	0x20000098
 8000d60:	20003898 	.word	0x20003898
 8000d64:	200038a0 	.word	0x200038a0
 8000d68:	200038a8 	.word	0x200038a8
 8000d6c:	200038a4 	.word	0x200038a4
 8000d70:	200038b4 	.word	0x200038b4

08000d74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000d7c:	4b27      	ldr	r3, [pc, #156]	; (8000e1c <prvInsertBlockIntoFreeList+0xa8>)
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	e002      	b.n	8000d88 <prvInsertBlockIntoFreeList+0x14>
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d3f7      	bcc.n	8000d82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	441a      	add	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d108      	bne.n	8000db6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	441a      	add	r2, r3
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	441a      	add	r2, r3
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d118      	bne.n	8000dfc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <prvInsertBlockIntoFreeList+0xac>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d00d      	beq.n	8000df2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	441a      	add	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	e008      	b.n	8000e04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <prvInsertBlockIntoFreeList+0xac>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	e003      	b.n	8000e04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d002      	beq.n	8000e12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e12:	bf00      	nop
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	20003898 	.word	0x20003898
 8000e20:	200038a0 	.word	0x200038a0

08000e24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08c      	sub	sp, #48	; 0x30
 8000e28:	af04      	add	r7, sp, #16
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	4613      	mov	r3, r2
 8000e32:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000e34:	88fb      	ldrh	r3, [r7, #6]
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fe5f 	bl	8000afc <pvPortMalloc>
 8000e3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00e      	beq.n	8000e64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000e46:	2054      	movs	r0, #84	; 0x54
 8000e48:	f7ff fe58 	bl	8000afc <pvPortMalloc>
 8000e4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	631a      	str	r2, [r3, #48]	; 0x30
 8000e5a:	e005      	b.n	8000e68 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000e5c:	6978      	ldr	r0, [r7, #20]
 8000e5e:	f7ff fee7 	bl	8000c30 <vPortFree>
 8000e62:	e001      	b.n	8000e68 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d013      	beq.n	8000e96 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000e6e:	88fa      	ldrh	r2, [r7, #6]
 8000e70:	2300      	movs	r3, #0
 8000e72:	9303      	str	r3, [sp, #12]
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	9302      	str	r3, [sp, #8]
 8000e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7a:	9301      	str	r3, [sp, #4]
 8000e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	68b9      	ldr	r1, [r7, #8]
 8000e84:	68f8      	ldr	r0, [r7, #12]
 8000e86:	f000 f80e 	bl	8000ea6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000e8a:	69f8      	ldr	r0, [r7, #28]
 8000e8c:	f000 f88a 	bl	8000fa4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000e90:	2301      	movs	r3, #1
 8000e92:	61bb      	str	r3, [r7, #24]
 8000e94:	e002      	b.n	8000e9c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000e9c:	69bb      	ldr	r3, [r7, #24]
	}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3720      	adds	r7, #32
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	60f8      	str	r0, [r7, #12]
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	21a5      	movs	r1, #165	; 0xa5
 8000ec0:	f002 fa3a 	bl	8003338 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	f023 0307 	bic.w	r3, r3, #7
 8000edc:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d01f      	beq.n	8000f24 <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	e012      	b.n	8000f10 <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	4413      	add	r3, r2
 8000ef0:	7819      	ldrb	r1, [r3, #0]
 8000ef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	3334      	adds	r3, #52	; 0x34
 8000efa:	460a      	mov	r2, r1
 8000efc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	4413      	add	r3, r2
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d006      	beq.n	8000f18 <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	2b0f      	cmp	r3, #15
 8000f14:	d9e9      	bls.n	8000eea <prvInitialiseNewTask+0x44>
 8000f16:	e000      	b.n	8000f1a <prvInitialiseNewTask+0x74>
			{
				break;
 8000f18:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000f22:	e003      	b.n	8000f2c <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	d901      	bls.n	8000f36 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000f32:	2304      	movs	r3, #4
 8000f34:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f38:	6a3a      	ldr	r2, [r7, #32]
 8000f3a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3e:	6a3a      	ldr	r2, [r7, #32]
 8000f40:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8000f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f44:	2200      	movs	r2, #0
 8000f46:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f4a:	3304      	adds	r3, #4
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fc59 	bl	8000804 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f54:	3318      	adds	r3, #24
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fc54 	bl	8000804 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f60:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f62:	6a3b      	ldr	r3, [r7, #32]
 8000f64:	f1c3 0205 	rsb	r2, r3, #5
 8000f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f6a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f74:	2200      	movs	r2, #0
 8000f76:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	68f9      	ldr	r1, [r7, #12]
 8000f84:	6938      	ldr	r0, [r7, #16]
 8000f86:	f7ff fc95 	bl	80008b4 <pxPortInitialiseStack>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8000f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d002      	beq.n	8000f9c <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000f9c:	bf00      	nop
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000fa4:	b5b0      	push	{r4, r5, r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000fac:	f7ff fd0c 	bl	80009c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000fb0:	4b39      	ldr	r3, [pc, #228]	; (8001098 <prvAddNewTaskToReadyList+0xf4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	4a38      	ldr	r2, [pc, #224]	; (8001098 <prvAddNewTaskToReadyList+0xf4>)
 8000fb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000fba:	4b38      	ldr	r3, [pc, #224]	; (800109c <prvAddNewTaskToReadyList+0xf8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d109      	bne.n	8000fd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000fc2:	4a36      	ldr	r2, [pc, #216]	; (800109c <prvAddNewTaskToReadyList+0xf8>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000fc8:	4b33      	ldr	r3, [pc, #204]	; (8001098 <prvAddNewTaskToReadyList+0xf4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d110      	bne.n	8000ff2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000fd0:	f000 fb48 	bl	8001664 <prvInitialiseTaskLists>
 8000fd4:	e00d      	b.n	8000ff2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000fd6:	4b32      	ldr	r3, [pc, #200]	; (80010a0 <prvAddNewTaskToReadyList+0xfc>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d109      	bne.n	8000ff2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000fde:	4b2f      	ldr	r3, [pc, #188]	; (800109c <prvAddNewTaskToReadyList+0xf8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d802      	bhi.n	8000ff2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000fec:	4a2b      	ldr	r2, [pc, #172]	; (800109c <prvAddNewTaskToReadyList+0xf8>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000ff2:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <prvAddNewTaskToReadyList+0x100>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	4a2a      	ldr	r2, [pc, #168]	; (80010a4 <prvAddNewTaskToReadyList+0x100>)
 8000ffa:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d016      	beq.n	8001030 <prvAddNewTaskToReadyList+0x8c>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4618      	mov	r0, r3
 8001006:	f001 fc07 	bl	8002818 <SEGGER_SYSVIEW_OnTaskCreate>
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	461d      	mov	r5, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	461c      	mov	r4, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	1ae3      	subs	r3, r4, r3
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	462b      	mov	r3, r5
 800102c:	f000 fbb6 	bl	800179c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4618      	mov	r0, r3
 8001034:	f001 fc78 	bl	8002928 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103c:	2201      	movs	r2, #1
 800103e:	409a      	lsls	r2, r3
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <prvAddNewTaskToReadyList+0x104>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4313      	orrs	r3, r2
 8001046:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <prvAddNewTaskToReadyList+0x104>)
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4a15      	ldr	r2, [pc, #84]	; (80010ac <prvAddNewTaskToReadyList+0x108>)
 8001058:	441a      	add	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3304      	adds	r3, #4
 800105e:	4619      	mov	r1, r3
 8001060:	4610      	mov	r0, r2
 8001062:	f7ff fbdb 	bl	800081c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001066:	f7ff fcc7 	bl	80009f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800106a:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <prvAddNewTaskToReadyList+0xfc>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00e      	beq.n	8001090 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <prvAddNewTaskToReadyList+0xf8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107c:	429a      	cmp	r2, r3
 800107e:	d207      	bcs.n	8001090 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <prvAddNewTaskToReadyList+0x10c>)
 8001082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	f3bf 8f4f 	dsb	sy
 800108c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bdb0      	pop	{r4, r5, r7, pc}
 8001098:	20003990 	.word	0x20003990
 800109c:	200038b8 	.word	0x200038b8
 80010a0:	2000399c 	.word	0x2000399c
 80010a4:	200039ac 	.word	0x200039ac
 80010a8:	20003998 	.word	0x20003998
 80010ac:	200038bc 	.word	0x200038bc
 80010b0:	e000ed04 	.word	0xe000ed04

080010b4 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 80010bc:	f7ff fc84 	bl	80009c8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d102      	bne.n	80010cc <uxTaskPriorityGet+0x18>
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <uxTaskPriorityGet+0x30>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	e000      	b.n	80010ce <uxTaskPriorityGet+0x1a>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d4:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 80010d6:	f7ff fc8f 	bl	80009f8 <vPortExitCritical>

		return uxReturn;
 80010da:	68bb      	ldr	r3, [r7, #8]
	}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200038b8 	.word	0x200038b8

080010e8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af02      	add	r7, sp, #8
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d901      	bls.n	8001100 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80010fc:	2304      	movs	r3, #4
 80010fe:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8001100:	f7ff fc62 	bl	80009c8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d102      	bne.n	8001110 <vTaskPrioritySet+0x28>
 800110a:	4b4c      	ldr	r3, [pc, #304]	; (800123c <vTaskPrioritySet+0x154>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	e000      	b.n	8001112 <vTaskPrioritySet+0x2a>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4618      	mov	r0, r3
 8001118:	f001 fc4a 	bl	80029b0 <SEGGER_SYSVIEW_ShrinkId>
 800111c:	4603      	mov	r3, r0
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	2028      	movs	r0, #40	; 0x28
 8001124:	f000 ffe6 	bl	80020f4 <SEGGER_SYSVIEW_RecordU32x2>
 8001128:	6938      	ldr	r0, [r7, #16]
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	461a      	mov	r2, r3
 8001136:	2300      	movs	r3, #0
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	4613      	mov	r3, r2
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	f000 fb95 	bl	800186c <SYSVIEW_UpdateTask>

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	429a      	cmp	r2, r3
 800114e:	d06f      	beq.n	8001230 <vTaskPrioritySet+0x148>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	429a      	cmp	r2, r3
 8001156:	d90d      	bls.n	8001174 <vTaskPrioritySet+0x8c>
				{
					if( pxTCB != pxCurrentTCB )
 8001158:	4b38      	ldr	r3, [pc, #224]	; (800123c <vTaskPrioritySet+0x154>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	429a      	cmp	r2, r3
 8001160:	d00f      	beq.n	8001182 <vTaskPrioritySet+0x9a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8001162:	4b36      	ldr	r3, [pc, #216]	; (800123c <vTaskPrioritySet+0x154>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	429a      	cmp	r2, r3
 800116c:	d809      	bhi.n	8001182 <vTaskPrioritySet+0x9a>
						{
							xYieldRequired = pdTRUE;
 800116e:	2301      	movs	r3, #1
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	e006      	b.n	8001182 <vTaskPrioritySet+0x9a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8001174:	4b31      	ldr	r3, [pc, #196]	; (800123c <vTaskPrioritySet+0x154>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	429a      	cmp	r2, r3
 800117c:	d101      	bne.n	8001182 <vTaskPrioritySet+0x9a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800117e:	2301      	movs	r3, #1
 8001180:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001186:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001190:	429a      	cmp	r2, r3
 8001192:	d102      	bne.n	800119a <vTaskPrioritySet+0xb2>
					{
						pxTCB->uxPriority = uxNewPriority;
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	645a      	str	r2, [r3, #68]	; 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db04      	blt.n	80011b2 <vTaskPrioritySet+0xca>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	f1c3 0205 	rsb	r2, r3, #5
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	6959      	ldr	r1, [r3, #20]
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	4613      	mov	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4a1f      	ldr	r2, [pc, #124]	; (8001240 <vTaskPrioritySet+0x158>)
 80011c2:	4413      	add	r3, r2
 80011c4:	4299      	cmp	r1, r3
 80011c6:	d128      	bne.n	800121a <vTaskPrioritySet+0x132>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	3304      	adds	r3, #4
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fb48 	bl	8000862 <uxListRemove>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d109      	bne.n	80011ec <vTaskPrioritySet+0x104>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80011d8:	2201      	movs	r2, #1
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43da      	mvns	r2, r3
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <vTaskPrioritySet+0x15c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4013      	ands	r3, r2
 80011e8:	4a16      	ldr	r2, [pc, #88]	; (8001244 <vTaskPrioritySet+0x15c>)
 80011ea:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvReaddTaskToReadyList( pxTCB );
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f0:	2201      	movs	r2, #1
 80011f2:	409a      	lsls	r2, r3
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <vTaskPrioritySet+0x15c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <vTaskPrioritySet+0x15c>)
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <vTaskPrioritySet+0x158>)
 800120c:	441a      	add	r2, r3
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	3304      	adds	r3, #4
 8001212:	4619      	mov	r1, r3
 8001214:	4610      	mov	r0, r2
 8001216:	f7ff fb01 	bl	800081c <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d007      	beq.n	8001230 <vTaskPrioritySet+0x148>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <vTaskPrioritySet+0x160>)
 8001222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	f3bf 8f4f 	dsb	sy
 800122c:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8001230:	f7ff fbe2 	bl	80009f8 <vPortExitCritical>
	}
 8001234:	bf00      	nop
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200038b8 	.word	0x200038b8
 8001240:	200038bc 	.word	0x200038bc
 8001244:	20003998 	.word	0x20003998
 8001248:	e000ed04 	.word	0xe000ed04

0800124c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001252:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <vTaskStartScheduler+0x70>)
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	2300      	movs	r3, #0
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2300      	movs	r3, #0
 800125c:	2280      	movs	r2, #128	; 0x80
 800125e:	4918      	ldr	r1, [pc, #96]	; (80012c0 <vTaskStartScheduler+0x74>)
 8001260:	4818      	ldr	r0, [pc, #96]	; (80012c4 <vTaskStartScheduler+0x78>)
 8001262:	f7ff fddf 	bl	8000e24 <xTaskCreate>
 8001266:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d122      	bne.n	80012b4 <vTaskStartScheduler+0x68>
	__asm volatile
 800126e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001272:	f383 8811 	msr	BASEPRI, r3
 8001276:	f3bf 8f6f 	isb	sy
 800127a:	f3bf 8f4f 	dsb	sy
 800127e:	603b      	str	r3, [r7, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <vTaskStartScheduler+0x7c>)
 8001282:	f04f 32ff 	mov.w	r2, #4294967295
 8001286:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001288:	4b10      	ldr	r3, [pc, #64]	; (80012cc <vTaskStartScheduler+0x80>)
 800128a:	2201      	movs	r2, #1
 800128c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <vTaskStartScheduler+0x84>)
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <vTaskStartScheduler+0x88>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <vTaskStartScheduler+0x70>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	429a      	cmp	r2, r3
 800129e:	d102      	bne.n	80012a6 <vTaskStartScheduler+0x5a>
 80012a0:	f001 fa9e 	bl	80027e0 <SEGGER_SYSVIEW_OnIdle>
 80012a4:	e004      	b.n	80012b0 <vTaskStartScheduler+0x64>
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <vTaskStartScheduler+0x88>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f001 faf8 	bl	80028a0 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80012b0:	f7ff fb6a 	bl	8000988 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200039b4 	.word	0x200039b4
 80012c0:	08003ba0 	.word	0x08003ba0
 80012c4:	08001635 	.word	0x08001635
 80012c8:	200039b0 	.word	0x200039b0
 80012cc:	2000399c 	.word	0x2000399c
 80012d0:	20003994 	.word	0x20003994
 80012d4:	200038b8 	.word	0x200038b8

080012d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <vTaskSuspendAll+0x18>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	3301      	adds	r3, #1
 80012e2:	4a03      	ldr	r2, [pc, #12]	; (80012f0 <vTaskSuspendAll+0x18>)
 80012e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	200039b8 	.word	0x200039b8

080012f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001302:	f7ff fb61 	bl	80009c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001306:	4b3b      	ldr	r3, [pc, #236]	; (80013f4 <xTaskResumeAll+0x100>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	3b01      	subs	r3, #1
 800130c:	4a39      	ldr	r2, [pc, #228]	; (80013f4 <xTaskResumeAll+0x100>)
 800130e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001310:	4b38      	ldr	r3, [pc, #224]	; (80013f4 <xTaskResumeAll+0x100>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d165      	bne.n	80013e4 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001318:	4b37      	ldr	r3, [pc, #220]	; (80013f8 <xTaskResumeAll+0x104>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d061      	beq.n	80013e4 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001320:	e032      	b.n	8001388 <xTaskResumeAll+0x94>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001322:	4b36      	ldr	r3, [pc, #216]	; (80013fc <xTaskResumeAll+0x108>)
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3318      	adds	r3, #24
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fa97 	bl	8000862 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	3304      	adds	r3, #4
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fa92 	bl	8000862 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4618      	mov	r0, r3
 8001342:	f001 faf1 	bl	8002928 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134a:	2201      	movs	r2, #1
 800134c:	409a      	lsls	r2, r3
 800134e:	4b2c      	ldr	r3, [pc, #176]	; (8001400 <xTaskResumeAll+0x10c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4313      	orrs	r3, r2
 8001354:	4a2a      	ldr	r2, [pc, #168]	; (8001400 <xTaskResumeAll+0x10c>)
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800135c:	4613      	mov	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4a27      	ldr	r2, [pc, #156]	; (8001404 <xTaskResumeAll+0x110>)
 8001366:	441a      	add	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	3304      	adds	r3, #4
 800136c:	4619      	mov	r1, r3
 800136e:	4610      	mov	r0, r2
 8001370:	f7ff fa54 	bl	800081c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001378:	4b23      	ldr	r3, [pc, #140]	; (8001408 <xTaskResumeAll+0x114>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137e:	429a      	cmp	r2, r3
 8001380:	d302      	bcc.n	8001388 <xTaskResumeAll+0x94>
					{
						xYieldPending = pdTRUE;
 8001382:	4b22      	ldr	r3, [pc, #136]	; (800140c <xTaskResumeAll+0x118>)
 8001384:	2201      	movs	r2, #1
 8001386:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001388:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <xTaskResumeAll+0x108>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1c8      	bne.n	8001322 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <xTaskResumeAll+0xa6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001396:	f000 f9e1 	bl	800175c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800139a:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <xTaskResumeAll+0x11c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d010      	beq.n	80013c8 <xTaskResumeAll+0xd4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80013a6:	f000 f845 	bl	8001434 <xTaskIncrementTick>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d002      	beq.n	80013b6 <xTaskResumeAll+0xc2>
							{
								xYieldPending = pdTRUE;
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <xTaskResumeAll+0x118>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f1      	bne.n	80013a6 <xTaskResumeAll+0xb2>

						xPendedTicks = 0;
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <xTaskResumeAll+0x11c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80013c8:	4b10      	ldr	r3, [pc, #64]	; (800140c <xTaskResumeAll+0x118>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d009      	beq.n	80013e4 <xTaskResumeAll+0xf0>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80013d0:	2301      	movs	r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <xTaskResumeAll+0x120>)
 80013d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	f3bf 8f4f 	dsb	sy
 80013e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80013e4:	f7ff fb08 	bl	80009f8 <vPortExitCritical>

	return xAlreadyYielded;
 80013e8:	68bb      	ldr	r3, [r7, #8]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200039b8 	.word	0x200039b8
 80013f8:	20003990 	.word	0x20003990
 80013fc:	20003950 	.word	0x20003950
 8001400:	20003998 	.word	0x20003998
 8001404:	200038bc 	.word	0x200038bc
 8001408:	200038b8 	.word	0x200038b8
 800140c:	200039a4 	.word	0x200039a4
 8001410:	200039a0 	.word	0x200039a0
 8001414:	e000ed04 	.word	0xe000ed04

08001418 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <xTaskGetTickCount+0x18>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001424:	687b      	ldr	r3, [r7, #4]
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	20003994 	.word	0x20003994

08001434 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800143e:	4b48      	ldr	r3, [pc, #288]	; (8001560 <xTaskIncrementTick+0x12c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	f040 8082 	bne.w	800154c <xTaskIncrementTick+0x118>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001448:	4b46      	ldr	r3, [pc, #280]	; (8001564 <xTaskIncrementTick+0x130>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	3301      	adds	r3, #1
 800144e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001450:	4a44      	ldr	r2, [pc, #272]	; (8001564 <xTaskIncrementTick+0x130>)
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d110      	bne.n	800147e <xTaskIncrementTick+0x4a>
		{
			taskSWITCH_DELAYED_LISTS();
 800145c:	4b42      	ldr	r3, [pc, #264]	; (8001568 <xTaskIncrementTick+0x134>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b42      	ldr	r3, [pc, #264]	; (800156c <xTaskIncrementTick+0x138>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a40      	ldr	r2, [pc, #256]	; (8001568 <xTaskIncrementTick+0x134>)
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4a40      	ldr	r2, [pc, #256]	; (800156c <xTaskIncrementTick+0x138>)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4b3f      	ldr	r3, [pc, #252]	; (8001570 <xTaskIncrementTick+0x13c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	3301      	adds	r3, #1
 8001476:	4a3e      	ldr	r2, [pc, #248]	; (8001570 <xTaskIncrementTick+0x13c>)
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	f000 f96f 	bl	800175c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800147e:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <xTaskIncrementTick+0x140>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	429a      	cmp	r2, r3
 8001486:	d34c      	bcc.n	8001522 <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001488:	4b37      	ldr	r3, [pc, #220]	; (8001568 <xTaskIncrementTick+0x134>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d104      	bne.n	800149c <xTaskIncrementTick+0x68>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001492:	4b38      	ldr	r3, [pc, #224]	; (8001574 <xTaskIncrementTick+0x140>)
 8001494:	f04f 32ff 	mov.w	r2, #4294967295
 8001498:	601a      	str	r2, [r3, #0]
					break;
 800149a:	e042      	b.n	8001522 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800149c:	4b32      	ldr	r3, [pc, #200]	; (8001568 <xTaskIncrementTick+0x134>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d203      	bcs.n	80014bc <xTaskIncrementTick+0x88>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80014b4:	4a2f      	ldr	r2, [pc, #188]	; (8001574 <xTaskIncrementTick+0x140>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80014ba:	e032      	b.n	8001522 <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	3304      	adds	r3, #4
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f9ce 	bl	8000862 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d004      	beq.n	80014d8 <xTaskIncrementTick+0xa4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	3318      	adds	r3, #24
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f9c5 	bl	8000862 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	4618      	mov	r0, r3
 80014dc:	f001 fa24 	bl	8002928 <SEGGER_SYSVIEW_OnTaskStartReady>
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e4:	2201      	movs	r2, #1
 80014e6:	409a      	lsls	r2, r3
 80014e8:	4b23      	ldr	r3, [pc, #140]	; (8001578 <xTaskIncrementTick+0x144>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	4a22      	ldr	r2, [pc, #136]	; (8001578 <xTaskIncrementTick+0x144>)
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4a1f      	ldr	r2, [pc, #124]	; (800157c <xTaskIncrementTick+0x148>)
 8001500:	441a      	add	r2, r3
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	3304      	adds	r3, #4
 8001506:	4619      	mov	r1, r3
 8001508:	4610      	mov	r0, r2
 800150a:	f7ff f987 	bl	800081c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001512:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <xTaskIncrementTick+0x14c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001518:	429a      	cmp	r2, r3
 800151a:	d3b5      	bcc.n	8001488 <xTaskIncrementTick+0x54>
						{
							xSwitchRequired = pdTRUE;
 800151c:	2301      	movs	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001520:	e7b2      	b.n	8001488 <xTaskIncrementTick+0x54>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <xTaskIncrementTick+0x14c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001528:	4914      	ldr	r1, [pc, #80]	; (800157c <xTaskIncrementTick+0x148>)
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	440b      	add	r3, r1
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d901      	bls.n	800153e <xTaskIncrementTick+0x10a>
			{
				xSwitchRequired = pdTRUE;
 800153a:	2301      	movs	r3, #1
 800153c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <xTaskIncrementTick+0x150>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d007      	beq.n	8001556 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8001546:	2301      	movs	r3, #1
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	e004      	b.n	8001556 <xTaskIncrementTick+0x122>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <xTaskIncrementTick+0x154>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <xTaskIncrementTick+0x154>)
 8001554:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001556:	697b      	ldr	r3, [r7, #20]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200039b8 	.word	0x200039b8
 8001564:	20003994 	.word	0x20003994
 8001568:	20003948 	.word	0x20003948
 800156c:	2000394c 	.word	0x2000394c
 8001570:	200039a8 	.word	0x200039a8
 8001574:	200039b0 	.word	0x200039b0
 8001578:	20003998 	.word	0x20003998
 800157c:	200038bc 	.word	0x200038bc
 8001580:	200038b8 	.word	0x200038b8
 8001584:	200039a4 	.word	0x200039a4
 8001588:	200039a0 	.word	0x200039a0

0800158c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001592:	4b22      	ldr	r3, [pc, #136]	; (800161c <vTaskSwitchContext+0x90>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800159a:	4b21      	ldr	r3, [pc, #132]	; (8001620 <vTaskSwitchContext+0x94>)
 800159c:	2201      	movs	r2, #1
 800159e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80015a0:	e038      	b.n	8001614 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 80015a2:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <vTaskSwitchContext+0x94>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015a8:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <vTaskSwitchContext+0x98>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	fab3 f383 	clz	r3, r3
 80015b4:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 80015b6:	78fb      	ldrb	r3, [r7, #3]
 80015b8:	f1c3 031f 	rsb	r3, r3, #31
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	4613      	mov	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4a17      	ldr	r2, [pc, #92]	; (8001628 <vTaskSwitchContext+0x9c>)
 80015ca:	4413      	add	r3, r2
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	3308      	adds	r3, #8
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d104      	bne.n	80015ee <vTaskSwitchContext+0x62>
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	4a0d      	ldr	r2, [pc, #52]	; (800162c <vTaskSwitchContext+0xa0>)
 80015f6:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <vTaskSwitchContext+0xa0>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <vTaskSwitchContext+0xa4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d102      	bne.n	800160a <vTaskSwitchContext+0x7e>
 8001604:	f001 f8ec 	bl	80027e0 <SEGGER_SYSVIEW_OnIdle>
}
 8001608:	e004      	b.n	8001614 <vTaskSwitchContext+0x88>
		traceTASK_SWITCHED_IN();
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <vTaskSwitchContext+0xa0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f001 f946 	bl	80028a0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001614:	bf00      	nop
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	200039b8 	.word	0x200039b8
 8001620:	200039a4 	.word	0x200039a4
 8001624:	20003998 	.word	0x20003998
 8001628:	200038bc 	.word	0x200038bc
 800162c:	200038b8 	.word	0x200038b8
 8001630:	200039b4 	.word	0x200039b4

08001634 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800163c:	f000 f852 	bl	80016e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <prvIdleTask+0x28>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d9f9      	bls.n	800163c <prvIdleTask+0x8>
			{
				taskYIELD();
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <prvIdleTask+0x2c>)
 800164a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	f3bf 8f4f 	dsb	sy
 8001654:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001658:	e7f0      	b.n	800163c <prvIdleTask+0x8>
 800165a:	bf00      	nop
 800165c:	200038bc 	.word	0x200038bc
 8001660:	e000ed04 	.word	0xe000ed04

08001664 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	e00c      	b.n	800168a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <prvInitialiseTaskLists+0x60>)
 800167c:	4413      	add	r3, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff f8a1 	bl	80007c6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3301      	adds	r3, #1
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b04      	cmp	r3, #4
 800168e:	d9ef      	bls.n	8001670 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001690:	480d      	ldr	r0, [pc, #52]	; (80016c8 <prvInitialiseTaskLists+0x64>)
 8001692:	f7ff f898 	bl	80007c6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001696:	480d      	ldr	r0, [pc, #52]	; (80016cc <prvInitialiseTaskLists+0x68>)
 8001698:	f7ff f895 	bl	80007c6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800169c:	480c      	ldr	r0, [pc, #48]	; (80016d0 <prvInitialiseTaskLists+0x6c>)
 800169e:	f7ff f892 	bl	80007c6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80016a2:	480c      	ldr	r0, [pc, #48]	; (80016d4 <prvInitialiseTaskLists+0x70>)
 80016a4:	f7ff f88f 	bl	80007c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80016a8:	480b      	ldr	r0, [pc, #44]	; (80016d8 <prvInitialiseTaskLists+0x74>)
 80016aa:	f7ff f88c 	bl	80007c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <prvInitialiseTaskLists+0x78>)
 80016b0:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <prvInitialiseTaskLists+0x64>)
 80016b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80016b4:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <prvInitialiseTaskLists+0x7c>)
 80016b6:	4a05      	ldr	r2, [pc, #20]	; (80016cc <prvInitialiseTaskLists+0x68>)
 80016b8:	601a      	str	r2, [r3, #0]
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200038bc 	.word	0x200038bc
 80016c8:	20003920 	.word	0x20003920
 80016cc:	20003934 	.word	0x20003934
 80016d0:	20003950 	.word	0x20003950
 80016d4:	20003964 	.word	0x20003964
 80016d8:	2000397c 	.word	0x2000397c
 80016dc:	20003948 	.word	0x20003948
 80016e0:	2000394c 	.word	0x2000394c

080016e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80016ea:	e019      	b.n	8001720 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80016ec:	f7ff f96c 	bl	80009c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <prvCheckTasksWaitingTermination+0x4c>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3304      	adds	r3, #4
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff f8b0 	bl	8000862 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <prvCheckTasksWaitingTermination+0x50>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	3b01      	subs	r3, #1
 8001708:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <prvCheckTasksWaitingTermination+0x50>)
 800170a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <prvCheckTasksWaitingTermination+0x54>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	3b01      	subs	r3, #1
 8001712:	4a09      	ldr	r2, [pc, #36]	; (8001738 <prvCheckTasksWaitingTermination+0x54>)
 8001714:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001716:	f7ff f96f 	bl	80009f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f80e 	bl	800173c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <prvCheckTasksWaitingTermination+0x54>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1e1      	bne.n	80016ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20003964 	.word	0x20003964
 8001734:	20003990 	.word	0x20003990
 8001738:	20003978 	.word	0x20003978

0800173c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fa71 	bl	8000c30 <vPortFree>
			vPortFree( pxTCB );
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff fa6e 	bl	8000c30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001762:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <prvResetNextTaskUnblockTime+0x38>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d104      	bne.n	8001776 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800176c:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <prvResetNextTaskUnblockTime+0x3c>)
 800176e:	f04f 32ff 	mov.w	r2, #4294967295
 8001772:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001774:	e008      	b.n	8001788 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <prvResetNextTaskUnblockTime+0x38>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	4a04      	ldr	r2, [pc, #16]	; (8001798 <prvResetNextTaskUnblockTime+0x3c>)
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20003948 	.word	0x20003948
 8001798:	200039b0 	.word	0x200039b0

0800179c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
 80017a8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80017aa:	2205      	movs	r2, #5
 80017ac:	492b      	ldr	r1, [pc, #172]	; (800185c <SYSVIEW_AddTask+0xc0>)
 80017ae:	68b8      	ldr	r0, [r7, #8]
 80017b0:	f001 fda8 	bl	8003304 <memcmp>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d04b      	beq.n	8001852 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80017ba:	4b29      	ldr	r3, [pc, #164]	; (8001860 <SYSVIEW_AddTask+0xc4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b07      	cmp	r3, #7
 80017c0:	d903      	bls.n	80017ca <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80017c2:	4828      	ldr	r0, [pc, #160]	; (8001864 <SYSVIEW_AddTask+0xc8>)
 80017c4:	f001 f9e0 	bl	8002b88 <SEGGER_SYSVIEW_Warn>
    return;
 80017c8:	e044      	b.n	8001854 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80017ca:	4b25      	ldr	r3, [pc, #148]	; (8001860 <SYSVIEW_AddTask+0xc4>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4926      	ldr	r1, [pc, #152]	; (8001868 <SYSVIEW_AddTask+0xcc>)
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <SYSVIEW_AddTask+0xc4>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	4921      	ldr	r1, [pc, #132]	; (8001868 <SYSVIEW_AddTask+0xcc>)
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	3304      	adds	r3, #4
 80017f0:	68ba      	ldr	r2, [r7, #8]
 80017f2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80017f4:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <SYSVIEW_AddTask+0xc4>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	491b      	ldr	r1, [pc, #108]	; (8001868 <SYSVIEW_AddTask+0xcc>)
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	440b      	add	r3, r1
 8001804:	3308      	adds	r3, #8
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <SYSVIEW_AddTask+0xc4>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4916      	ldr	r1, [pc, #88]	; (8001868 <SYSVIEW_AddTask+0xcc>)
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	330c      	adds	r3, #12
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <SYSVIEW_AddTask+0xc4>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4910      	ldr	r1, [pc, #64]	; (8001868 <SYSVIEW_AddTask+0xcc>)
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	440b      	add	r3, r1
 8001830:	3310      	adds	r3, #16
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <SYSVIEW_AddTask+0xc4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	3301      	adds	r3, #1
 800183c:	4a08      	ldr	r2, [pc, #32]	; (8001860 <SYSVIEW_AddTask+0xc4>)
 800183e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f000 f87e 	bl	800194c <SYSVIEW_SendTaskInfo>
 8001850:	e000      	b.n	8001854 <SYSVIEW_AddTask+0xb8>
    return;
 8001852:	bf00      	nop

}
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	08003ba8 	.word	0x08003ba8
 8001860:	20003a5c 	.word	0x20003a5c
 8001864:	08003bb0 	.word	0x08003bb0
 8001868:	200039bc 	.word	0x200039bc

0800186c <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af02      	add	r7, sp, #8
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800187a:	2205      	movs	r2, #5
 800187c:	4930      	ldr	r1, [pc, #192]	; (8001940 <SYSVIEW_UpdateTask+0xd4>)
 800187e:	68b8      	ldr	r0, [r7, #8]
 8001880:	f001 fd40 	bl	8003304 <memcmp>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d056      	beq.n	8001938 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	e00d      	b.n	80018ac <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8001890:	492c      	ldr	r1, [pc, #176]	; (8001944 <SYSVIEW_UpdateTask+0xd8>)
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d008      	beq.n	80018b8 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3301      	adds	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	4b26      	ldr	r3, [pc, #152]	; (8001948 <SYSVIEW_UpdateTask+0xdc>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d3ec      	bcc.n	8001890 <SYSVIEW_UpdateTask+0x24>
 80018b6:	e000      	b.n	80018ba <SYSVIEW_UpdateTask+0x4e>
      break;
 80018b8:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 80018ba:	4b23      	ldr	r3, [pc, #140]	; (8001948 <SYSVIEW_UpdateTask+0xdc>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d230      	bcs.n	8001926 <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 80018c4:	491f      	ldr	r1, [pc, #124]	; (8001944 <SYSVIEW_UpdateTask+0xd8>)
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	3304      	adds	r3, #4
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 80018d8:	491a      	ldr	r1, [pc, #104]	; (8001944 <SYSVIEW_UpdateTask+0xd8>)
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	3308      	adds	r3, #8
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 80018ec:	4915      	ldr	r1, [pc, #84]	; (8001944 <SYSVIEW_UpdateTask+0xd8>)
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	330c      	adds	r3, #12
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8001900:	4910      	ldr	r1, [pc, #64]	; (8001944 <SYSVIEW_UpdateTask+0xd8>)
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	3310      	adds	r3, #16
 8001910:	6a3a      	ldr	r2, [r7, #32]
 8001912:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001914:	6a3b      	ldr	r3, [r7, #32]
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f000 f814 	bl	800194c <SYSVIEW_SendTaskInfo>
 8001924:	e009      	b.n	800193a <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	68b9      	ldr	r1, [r7, #8]
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f7ff ff33 	bl	800179c <SYSVIEW_AddTask>
 8001936:	e000      	b.n	800193a <SYSVIEW_UpdateTask+0xce>
    return;
 8001938:	bf00      	nop
  }
}
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	08003ba8 	.word	0x08003ba8
 8001944:	200039bc 	.word	0x200039bc
 8001948:	20003a5c 	.word	0x20003a5c

0800194c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	; 0x28
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	2214      	movs	r2, #20
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f001 fce8 	bl	8003338 <memset>
  TaskInfo.TaskID     = TaskID;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4618      	mov	r0, r3
 8001982:	f000 fd8d 	bl	80024a0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001986:	bf00      	nop
 8001988:	3728      	adds	r7, #40	; 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8001996:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <_DoInit+0x8c>)
 8001998:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2203      	movs	r2, #3
 800199e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2203      	movs	r2, #3
 80019a4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a1d      	ldr	r2, [pc, #116]	; (8001a20 <_DoInit+0x90>)
 80019aa:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a1d      	ldr	r2, [pc, #116]	; (8001a24 <_DoInit+0x94>)
 80019b0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019b8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a14      	ldr	r2, [pc, #80]	; (8001a20 <_DoInit+0x90>)
 80019d0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <_DoInit+0x98>)
 80019d6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2210      	movs	r2, #16
 80019dc:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3307      	adds	r3, #7
 80019f4:	4a0d      	ldr	r2, [pc, #52]	; (8001a2c <_DoInit+0x9c>)
 80019f6:	6810      	ldr	r0, [r2, #0]
 80019f8:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a0c      	ldr	r2, [pc, #48]	; (8001a30 <_DoInit+0xa0>)
 80019fe:	6810      	ldr	r0, [r2, #0]
 8001a00:	6018      	str	r0, [r3, #0]
 8001a02:	8891      	ldrh	r1, [r2, #4]
 8001a04:	7992      	ldrb	r2, [r2, #6]
 8001a06:	8099      	strh	r1, [r3, #4]
 8001a08:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	719a      	strb	r2, [r3, #6]
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20003f98 	.word	0x20003f98
 8001a20:	08003c00 	.word	0x08003c00
 8001a24:	20003a60 	.word	0x20003a60
 8001a28:	20003e60 	.word	0x20003e60
 8001a2c:	08003c0c 	.word	0x08003c0c
 8001a30:	08003c10 	.word	0x08003c10

08001a34 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	; 0x28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8001a40:	4b3c      	ldr	r3, [pc, #240]	; (8001b34 <SEGGER_RTT_ReadNoLock+0x100>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <SEGGER_RTT_ReadNoLock+0x18>
 8001a48:	f7ff ffa2 	bl	8001990 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	3360      	adds	r3, #96	; 0x60
 8001a58:	4a36      	ldr	r2, [pc, #216]	; (8001b34 <SEGGER_RTT_ReadNoLock+0x100>)
 8001a5a:	4413      	add	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8001a72:	6a3a      	ldr	r2, [r7, #32]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d92a      	bls.n	8001ad0 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	bf28      	it	cs
 8001a8c:	4613      	movcs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	6a3b      	ldr	r3, [r7, #32]
 8001a96:	4413      	add	r3, r2
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	69f8      	ldr	r0, [r7, #28]
 8001a9e:	f001 fc40 	bl	8003322 <memcpy>
    NumBytesRead += NumBytesRem;
 8001aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	4413      	add	r3, r2
 8001ab0:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001aba:	6a3a      	ldr	r2, [r7, #32]
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4413      	add	r3, r2
 8001ac0:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d101      	bne.n	8001ad0 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4293      	cmp	r3, r2
 8001ade:	bf28      	it	cs
 8001ae0:	4613      	movcs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d018      	beq.n	8001b1c <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	6a3b      	ldr	r3, [r7, #32]
 8001af0:	4413      	add	r3, r2
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4619      	mov	r1, r3
 8001af6:	69f8      	ldr	r0, [r7, #28]
 8001af8:	f001 fc13 	bl	8003322 <memcpy>
    NumBytesRead += NumBytesRem;
 8001afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4413      	add	r3, r2
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8001b04:	69fa      	ldr	r2, [r7, #28]
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4413      	add	r3, r2
 8001b0a:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001b14:	6a3a      	ldr	r2, [r7, #32]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	4413      	add	r3, r2
 8001b1a:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	6a3a      	ldr	r2, [r7, #32]
 8001b26:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3728      	adds	r7, #40	; 0x28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20003f98 	.word	0x20003f98

08001b38 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4413      	add	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4a3f      	ldr	r2, [pc, #252]	; (8001c54 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8001b56:	4413      	add	r3, r2
 8001b58:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d854      	bhi.n	8001c18 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	3b01      	subs	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d30f      	bcc.n	8001ba2 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	4413      	add	r3, r2
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f001 fbc7 	bl	8003322 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	441a      	add	r2, r3
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e054      	b.n	8001c4c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d34b      	bcc.n	8001c4a <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d90e      	bls.n	8001be2 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	4413      	add	r3, r2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f001 fba6 	bl	8003322 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	441a      	add	r2, r3
 8001bdc:	6a3b      	ldr	r3, [r7, #32]
 8001bde:	60da      	str	r2, [r3, #12]
 8001be0:	e018      	b.n	8001c14 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	4413      	add	r3, r2
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f001 fb97 	bl	8003322 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
 8001bf6:	6858      	ldr	r0, [r3, #4]
 8001bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	18d1      	adds	r1, r2, r3
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	461a      	mov	r2, r3
 8001c06:	f001 fb8c 	bl	8003322 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad2      	subs	r2, r2, r3
 8001c10:	6a3b      	ldr	r3, [r7, #32]
 8001c12:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e019      	b.n	8001c4c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8001c18:	69fa      	ldr	r2, [r7, #28]
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d30f      	bcc.n	8001c4a <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	4413      	add	r3, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c36:	4618      	mov	r0, r3
 8001c38:	f001 fb73 	bl	8003322 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	441a      	add	r2, r3
 8001c42:	6a3b      	ldr	r3, [r7, #32]
 8001c44:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3728      	adds	r7, #40	; 0x28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20003f98 	.word	0x20003f98

08001c58 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8001c58:	b480      	push	{r7}
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8001c68:	e002      	b.n	8001c70 <_EncodeStr+0x18>
    Len++;
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4413      	add	r3, r2
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1f6      	bne.n	8001c6a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d901      	bls.n	8001c88 <_EncodeStr+0x30>
    Len = Limit;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	2bfe      	cmp	r3, #254	; 0xfe
 8001c8c:	d806      	bhi.n	8001c9c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	60fa      	str	r2, [r7, #12]
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	701a      	strb	r2, [r3, #0]
 8001c9a:	e011      	b.n	8001cc0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	60fa      	str	r2, [r7, #12]
 8001ca2:	22ff      	movs	r2, #255	; 0xff
 8001ca4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	60fa      	str	r2, [r7, #12]
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1c5a      	adds	r2, r3, #1
 8001cb6:	60fa      	str	r2, [r7, #12]
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	0a12      	lsrs	r2, r2, #8
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8001cc4:	e00a      	b.n	8001cdc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	60fa      	str	r2, [r7, #12]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	1c51      	adds	r1, r2, #1
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	7812      	ldrb	r2, [r2, #0]
 8001cd4:	701a      	strb	r2, [r3, #0]
    n++;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d3f0      	bcc.n	8001cc6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	371c      	adds	r7, #28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3304      	adds	r3, #4
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr

08001d06 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001d0c:	1cfb      	adds	r3, r7, #3
 8001d0e:	2201      	movs	r2, #1
 8001d10:	4619      	mov	r1, r3
 8001d12:	2001      	movs	r0, #1
 8001d14:	f7ff fe8e 	bl	8001a34 <SEGGER_RTT_ReadNoLock>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	dd47      	ble.n	8001db2 <_HandleIncomingPacket+0xac>
    switch (Cmd) {
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d01a      	beq.n	8001d5e <_HandleIncomingPacket+0x58>
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	dc06      	bgt.n	8001d3a <_HandleIncomingPacket+0x34>
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d010      	beq.n	8001d52 <_HandleIncomingPacket+0x4c>
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	dc11      	bgt.n	8001d58 <_HandleIncomingPacket+0x52>
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d009      	beq.n	8001d4c <_HandleIncomingPacket+0x46>
 8001d38:	e02d      	b.n	8001d96 <_HandleIncomingPacket+0x90>
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	d015      	beq.n	8001d6a <_HandleIncomingPacket+0x64>
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	db10      	blt.n	8001d64 <_HandleIncomingPacket+0x5e>
 8001d42:	2b07      	cmp	r3, #7
 8001d44:	d014      	beq.n	8001d70 <_HandleIncomingPacket+0x6a>
 8001d46:	2b80      	cmp	r3, #128	; 0x80
 8001d48:	d015      	beq.n	8001d76 <_HandleIncomingPacket+0x70>
 8001d4a:	e024      	b.n	8001d96 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8001d4c:	f000 fa2c 	bl	80021a8 <SEGGER_SYSVIEW_Start>
      break;
 8001d50:	e02f      	b.n	8001db2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8001d52:	f000 fae5 	bl	8002320 <SEGGER_SYSVIEW_Stop>
      break;
 8001d56:	e02c      	b.n	8001db2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8001d58:	f000 fc9c 	bl	8002694 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8001d5c:	e029      	b.n	8001db2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8001d5e:	f000 fc85 	bl	800266c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8001d62:	e026      	b.n	8001db2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8001d64:	f000 fb02 	bl	800236c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8001d68:	e023      	b.n	8001db2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8001d6a:	f000 fecf 	bl	8002b0c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8001d6e:	e020      	b.n	8001db2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8001d70:	f000 feae 	bl	8002ad0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8001d74:	e01d      	b.n	8001db2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001d76:	1cfb      	adds	r3, r7, #3
 8001d78:	2201      	movs	r2, #1
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f7ff fe59 	bl	8001a34 <SEGGER_RTT_ReadNoLock>
 8001d82:	4603      	mov	r3, r0
 8001d84:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	dd0f      	ble.n	8001dac <_HandleIncomingPacket+0xa6>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 fe1e 	bl	80029d0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8001d94:	e00a      	b.n	8001dac <_HandleIncomingPacket+0xa6>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	b25b      	sxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	da08      	bge.n	8001db0 <_HandleIncomingPacket+0xaa>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001d9e:	1cfb      	adds	r3, r7, #3
 8001da0:	2201      	movs	r2, #1
 8001da2:	4619      	mov	r1, r3
 8001da4:	2001      	movs	r0, #1
 8001da6:	f7ff fe45 	bl	8001a34 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8001daa:	e001      	b.n	8001db0 <_HandleIncomingPacket+0xaa>
      break;
 8001dac:	bf00      	nop
 8001dae:	e000      	b.n	8001db2 <_HandleIncomingPacket+0xac>
      break;
 8001db0:	bf00      	nop
    }
  }
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08c      	sub	sp, #48	; 0x30
 8001dc0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	3301      	adds	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dd0:	4b30      	ldr	r3, [pc, #192]	; (8001e94 <_TrySendOverflowPacket+0xd8>)
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dd6:	e00b      	b.n	8001df0 <_TrySendOverflowPacket+0x34>
 8001dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001dde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	701a      	strb	r2, [r3, #0]
 8001dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dec:	09db      	lsrs	r3, r3, #7
 8001dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8001df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df2:	2b7f      	cmp	r3, #127	; 0x7f
 8001df4:	d8f0      	bhi.n	8001dd8 <_TrySendOverflowPacket+0x1c>
 8001df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001dfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	701a      	strb	r2, [r3, #0]
 8001e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e04:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001e06:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <_TrySendOverflowPacket+0xdc>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001e0c:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <_TrySendOverflowPacket+0xd8>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	623b      	str	r3, [r7, #32]
 8001e1e:	e00b      	b.n	8001e38 <_TrySendOverflowPacket+0x7c>
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	627a      	str	r2, [r7, #36]	; 0x24
 8001e26:	6a3a      	ldr	r2, [r7, #32]
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	6a3b      	ldr	r3, [r7, #32]
 8001e34:	09db      	lsrs	r3, r3, #7
 8001e36:	623b      	str	r3, [r7, #32]
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	2b7f      	cmp	r3, #127	; 0x7f
 8001e3c:	d8f0      	bhi.n	8001e20 <_TrySendOverflowPacket+0x64>
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	627a      	str	r2, [r7, #36]	; 0x24
 8001e44:	6a3a      	ldr	r2, [r7, #32]
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	701a      	strb	r2, [r3, #0]
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8001e4e:	69fa      	ldr	r2, [r7, #28]
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	461a      	mov	r2, r3
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	4619      	mov	r1, r3
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f7ff fe6c 	bl	8001b38 <SEGGER_RTT_WriteSkipNoLock>
 8001e60:	4603      	mov	r3, r0
 8001e62:	613b      	str	r3, [r7, #16]
  if (Status) {
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d009      	beq.n	8001e7e <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <_TrySendOverflowPacket+0xd8>)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <_TrySendOverflowPacket+0xd8>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <_TrySendOverflowPacket+0xd8>)
 8001e7a:	701a      	strb	r2, [r3, #0]
 8001e7c:	e004      	b.n	8001e88 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8001e7e:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <_TrySendOverflowPacket+0xd8>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	3301      	adds	r3, #1
 8001e84:	4a03      	ldr	r2, [pc, #12]	; (8001e94 <_TrySendOverflowPacket+0xd8>)
 8001e86:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8001e88:	693b      	ldr	r3, [r7, #16]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3730      	adds	r7, #48	; 0x30
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20003e70 	.word	0x20003e70
 8001e98:	e0001004 	.word	0xe0001004

08001e9c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08a      	sub	sp, #40	; 0x28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8001ea8:	4b62      	ldr	r3, [pc, #392]	; (8002034 <_SendPacket+0x198>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d010      	beq.n	8001ed2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8001eb0:	4b60      	ldr	r3, [pc, #384]	; (8002034 <_SendPacket+0x198>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 809f 	beq.w	8001ff8 <_SendPacket+0x15c>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8001eba:	4b5e      	ldr	r3, [pc, #376]	; (8002034 <_SendPacket+0x198>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d108      	bne.n	8001ed4 <_SendPacket+0x38>
    _TrySendOverflowPacket();
 8001ec2:	f7ff ff7b 	bl	8001dbc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8001ec6:	4b5b      	ldr	r3, [pc, #364]	; (8002034 <_SendPacket+0x198>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	f040 8096 	bne.w	8001ffc <_SendPacket+0x160>
 8001ed0:	e000      	b.n	8001ed4 <_SendPacket+0x38>
    goto Send;
 8001ed2:	bf00      	nop
Send:
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b1f      	cmp	r3, #31
 8001ed8:	d809      	bhi.n	8001eee <_SendPacket+0x52>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8001eda:	4b56      	ldr	r3, [pc, #344]	; (8002034 <_SendPacket+0x198>)
 8001edc:	69da      	ldr	r2, [r3, #28]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f040 8089 	bne.w	8002000 <_SendPacket+0x164>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b17      	cmp	r3, #23
 8001ef2:	d807      	bhi.n	8001f04 <_SendPacket+0x68>
    *--pStartPacket = EventId;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	701a      	strb	r2, [r3, #0]
 8001f02:	e03d      	b.n	8001f80 <_SendPacket+0xe4>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	2b7f      	cmp	r3, #127	; 0x7f
 8001f10:	d912      	bls.n	8001f38 <_SendPacket+0x9c>
      *--pStartPacket = (NumBytes >> 7);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	3b01      	subs	r3, #1
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	09db      	lsrs	r3, r3, #7
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	701a      	strb	r2, [r3, #0]
 8001f36:	e006      	b.n	8001f46 <_SendPacket+0xaa>
    } else {
      *--pStartPacket = NumBytes;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b7f      	cmp	r3, #127	; 0x7f
 8001f4a:	d912      	bls.n	8001f72 <_SendPacket+0xd6>
      *--pStartPacket = (EventId >> 7);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	09db      	lsrs	r3, r3, #7
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	701a      	strb	r2, [r3, #0]
 8001f70:	e006      	b.n	8001f80 <_SendPacket+0xe4>
    } else {
      *--pStartPacket = EventId;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	3b01      	subs	r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001f80:	4b2d      	ldr	r3, [pc, #180]	; (8002038 <_SendPacket+0x19c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001f86:	4b2b      	ldr	r3, [pc, #172]	; (8002034 <_SendPacket+0x198>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	623b      	str	r3, [r7, #32]
 8001f98:	e00b      	b.n	8001fb2 <_SendPacket+0x116>
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	627a      	str	r2, [r7, #36]	; 0x24
 8001fa0:	6a3a      	ldr	r2, [r7, #32]
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	701a      	strb	r2, [r3, #0]
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	09db      	lsrs	r3, r3, #7
 8001fb0:	623b      	str	r3, [r7, #32]
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	2b7f      	cmp	r3, #127	; 0x7f
 8001fb6:	d8f0      	bhi.n	8001f9a <_SendPacket+0xfe>
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	627a      	str	r2, [r7, #36]	; 0x24
 8001fbe:	6a3a      	ldr	r2, [r7, #32]
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	701a      	strb	r2, [r3, #0]
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68f9      	ldr	r1, [r7, #12]
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	f7ff fdb0 	bl	8001b38 <SEGGER_RTT_WriteSkipNoLock>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	613b      	str	r3, [r7, #16]
  if (Status) {
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <_SendPacket+0x14e>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001fe2:	4a14      	ldr	r2, [pc, #80]	; (8002034 <_SendPacket+0x198>)
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	60d3      	str	r3, [r2, #12]
 8001fe8:	e00b      	b.n	8002002 <_SendPacket+0x166>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8001fea:	4b12      	ldr	r3, [pc, #72]	; (8002034 <_SendPacket+0x198>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <_SendPacket+0x198>)
 8001ff4:	701a      	strb	r2, [r3, #0]
 8001ff6:	e004      	b.n	8002002 <_SendPacket+0x166>
    goto SendDone;
 8001ff8:	bf00      	nop
 8001ffa:	e002      	b.n	8002002 <_SendPacket+0x166>
      goto SendDone;
 8001ffc:	bf00      	nop
 8001ffe:	e000      	b.n	8002002 <_SendPacket+0x166>
      goto SendDone;
 8002000:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002002:	4b0e      	ldr	r3, [pc, #56]	; (800203c <_SendPacket+0x1a0>)
 8002004:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <_SendPacket+0x1a0>)
 800200a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200e:	429a      	cmp	r2, r3
 8002010:	d00b      	beq.n	800202a <_SendPacket+0x18e>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <_SendPacket+0x198>)
 8002014:	789b      	ldrb	r3, [r3, #2]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d107      	bne.n	800202a <_SendPacket+0x18e>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <_SendPacket+0x198>)
 800201c:	2201      	movs	r2, #1
 800201e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002020:	f7ff fe71 	bl	8001d06 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002024:	4b03      	ldr	r3, [pc, #12]	; (8002034 <_SendPacket+0x198>)
 8002026:	2200      	movs	r2, #0
 8002028:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800202a:	bf00      	nop
 800202c:	3728      	adds	r7, #40	; 0x28
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20003e70 	.word	0x20003e70
 8002038:	e0001004 	.word	0xe0001004
 800203c:	20003f98 	.word	0x20003f98

08002040 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002048:	f3ef 8311 	mrs	r3, BASEPRI
 800204c:	f04f 0120 	mov.w	r1, #32
 8002050:	f381 8811 	msr	BASEPRI, r1
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	4808      	ldr	r0, [pc, #32]	; (8002078 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002058:	f7ff fe4a 	bl	8001cf0 <_PreparePacket>
 800205c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	68b8      	ldr	r0, [r7, #8]
 8002064:	f7ff ff1a 	bl	8001e9c <_SendPacket>
  RECORD_END();
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f383 8811 	msr	BASEPRI, r3
}
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20003ea0 	.word	0x20003ea0

0800207c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002086:	f3ef 8311 	mrs	r3, BASEPRI
 800208a:	f04f 0120 	mov.w	r1, #32
 800208e:	f381 8811 	msr	BASEPRI, r1
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	4816      	ldr	r0, [pc, #88]	; (80020f0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8002096:	f7ff fe2b 	bl	8001cf0 <_PreparePacket>
 800209a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	61fb      	str	r3, [r7, #28]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	61bb      	str	r3, [r7, #24]
 80020a8:	e00b      	b.n	80020c2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	61fa      	str	r2, [r7, #28]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	701a      	strb	r2, [r3, #0]
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	09db      	lsrs	r3, r3, #7
 80020c0:	61bb      	str	r3, [r7, #24]
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	2b7f      	cmp	r3, #127	; 0x7f
 80020c6:	d8f0      	bhi.n	80020aa <SEGGER_SYSVIEW_RecordU32+0x2e>
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	61fa      	str	r2, [r7, #28]
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	701a      	strb	r2, [r3, #0]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	68f9      	ldr	r1, [r7, #12]
 80020dc:	6938      	ldr	r0, [r7, #16]
 80020de:	f7ff fedd 	bl	8001e9c <_SendPacket>
  RECORD_END();
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f383 8811 	msr	BASEPRI, r3
}
 80020e8:	bf00      	nop
 80020ea:	3720      	adds	r7, #32
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20003ea0 	.word	0x20003ea0

080020f4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08c      	sub	sp, #48	; 0x30
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002100:	f3ef 8311 	mrs	r3, BASEPRI
 8002104:	f04f 0120 	mov.w	r1, #32
 8002108:	f381 8811 	msr	BASEPRI, r1
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	4825      	ldr	r0, [pc, #148]	; (80021a4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002110:	f7ff fdee 	bl	8001cf0 <_PreparePacket>
 8002114:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
 8002122:	e00b      	b.n	800213c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	62fa      	str	r2, [r7, #44]	; 0x2c
 800212a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]
 8002136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002138:	09db      	lsrs	r3, r3, #7
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
 800213c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213e:	2b7f      	cmp	r3, #127	; 0x7f
 8002140:	d8f0      	bhi.n	8002124 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8002142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002144:	1c5a      	adds	r2, r3, #1
 8002146:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	701a      	strb	r2, [r3, #0]
 800214e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002150:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	623b      	str	r3, [r7, #32]
 800215a:	e00b      	b.n	8002174 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	627a      	str	r2, [r7, #36]	; 0x24
 8002162:	6a3a      	ldr	r2, [r7, #32]
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	09db      	lsrs	r3, r3, #7
 8002172:	623b      	str	r3, [r7, #32]
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	2b7f      	cmp	r3, #127	; 0x7f
 8002178:	d8f0      	bhi.n	800215c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	627a      	str	r2, [r7, #36]	; 0x24
 8002180:	6a3a      	ldr	r2, [r7, #32]
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	701a      	strb	r2, [r3, #0]
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	6979      	ldr	r1, [r7, #20]
 800218e:	69b8      	ldr	r0, [r7, #24]
 8002190:	f7ff fe84 	bl	8001e9c <_SendPacket>
  RECORD_END();
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f383 8811 	msr	BASEPRI, r3
}
 800219a:	bf00      	nop
 800219c:	3730      	adds	r7, #48	; 0x30
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20003ea0 	.word	0x20003ea0

080021a8 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08c      	sub	sp, #48	; 0x30
 80021ac:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 80021ae:	4b59      	ldr	r3, [pc, #356]	; (8002314 <SEGGER_SYSVIEW_Start+0x16c>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f040 80aa 	bne.w	800230c <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 80021b8:	4b56      	ldr	r3, [pc, #344]	; (8002314 <SEGGER_SYSVIEW_Start+0x16c>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80021be:	f3ef 8311 	mrs	r3, BASEPRI
 80021c2:	f04f 0120 	mov.w	r1, #32
 80021c6:	f381 8811 	msr	BASEPRI, r1
 80021ca:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80021cc:	220a      	movs	r2, #10
 80021ce:	4952      	ldr	r1, [pc, #328]	; (8002318 <SEGGER_SYSVIEW_Start+0x170>)
 80021d0:	2001      	movs	r0, #1
 80021d2:	f7ff fcb1 	bl	8001b38 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80021dc:	200a      	movs	r0, #10
 80021de:	f7ff ff2f 	bl	8002040 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80021e2:	f3ef 8311 	mrs	r3, BASEPRI
 80021e6:	f04f 0120 	mov.w	r1, #32
 80021ea:	f381 8811 	msr	BASEPRI, r1
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	484a      	ldr	r0, [pc, #296]	; (800231c <SEGGER_SYSVIEW_Start+0x174>)
 80021f2:	f7ff fd7d 	bl	8001cf0 <_PreparePacket>
 80021f6:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002200:	4b44      	ldr	r3, [pc, #272]	; (8002314 <SEGGER_SYSVIEW_Start+0x16c>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	62bb      	str	r3, [r7, #40]	; 0x28
 8002206:	e00b      	b.n	8002220 <SEGGER_SYSVIEW_Start+0x78>
 8002208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800220e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	701a      	strb	r2, [r3, #0]
 800221a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221c:	09db      	lsrs	r3, r3, #7
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002222:	2b7f      	cmp	r3, #127	; 0x7f
 8002224:	d8f0      	bhi.n	8002208 <SEGGER_SYSVIEW_Start+0x60>
 8002226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800222c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	701a      	strb	r2, [r3, #0]
 8002232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002234:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
 800223a:	4b36      	ldr	r3, [pc, #216]	; (8002314 <SEGGER_SYSVIEW_Start+0x16c>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	623b      	str	r3, [r7, #32]
 8002240:	e00b      	b.n	800225a <SEGGER_SYSVIEW_Start+0xb2>
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	1c5a      	adds	r2, r3, #1
 8002246:	627a      	str	r2, [r7, #36]	; 0x24
 8002248:	6a3a      	ldr	r2, [r7, #32]
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	701a      	strb	r2, [r3, #0]
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	09db      	lsrs	r3, r3, #7
 8002258:	623b      	str	r3, [r7, #32]
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	2b7f      	cmp	r3, #127	; 0x7f
 800225e:	d8f0      	bhi.n	8002242 <SEGGER_SYSVIEW_Start+0x9a>
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	627a      	str	r2, [r7, #36]	; 0x24
 8002266:	6a3a      	ldr	r2, [r7, #32]
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	701a      	strb	r2, [r3, #0]
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	61fb      	str	r3, [r7, #28]
 8002274:	4b27      	ldr	r3, [pc, #156]	; (8002314 <SEGGER_SYSVIEW_Start+0x16c>)
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	61bb      	str	r3, [r7, #24]
 800227a:	e00b      	b.n	8002294 <SEGGER_SYSVIEW_Start+0xec>
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	61fa      	str	r2, [r7, #28]
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	701a      	strb	r2, [r3, #0]
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	09db      	lsrs	r3, r3, #7
 8002292:	61bb      	str	r3, [r7, #24]
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	2b7f      	cmp	r3, #127	; 0x7f
 8002298:	d8f0      	bhi.n	800227c <SEGGER_SYSVIEW_Start+0xd4>
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	61fa      	str	r2, [r7, #28]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	701a      	strb	r2, [r3, #0]
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	2302      	movs	r3, #2
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	e00b      	b.n	80022cc <SEGGER_SYSVIEW_Start+0x124>
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	617a      	str	r2, [r7, #20]
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	701a      	strb	r2, [r3, #0]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	09db      	lsrs	r3, r3, #7
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	2b7f      	cmp	r3, #127	; 0x7f
 80022d0:	d8f0      	bhi.n	80022b4 <SEGGER_SYSVIEW_Start+0x10c>
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	617a      	str	r2, [r7, #20]
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	701a      	strb	r2, [r3, #0]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80022e2:	2218      	movs	r2, #24
 80022e4:	6839      	ldr	r1, [r7, #0]
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff fdd8 	bl	8001e9c <_SendPacket>
      RECORD_END();
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <SEGGER_SYSVIEW_Start+0x16c>)
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d002      	beq.n	8002300 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 80022fa:	4b06      	ldr	r3, [pc, #24]	; (8002314 <SEGGER_SYSVIEW_Start+0x16c>)
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002300:	f000 f9c8 	bl	8002694 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002304:	f000 f9b2 	bl	800266c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002308:	f000 fc00 	bl	8002b0c <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 800230c:	bf00      	nop
 800230e:	3730      	adds	r7, #48	; 0x30
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20003e70 	.word	0x20003e70
 8002318:	08003ca8 	.word	0x08003ca8
 800231c:	20003ea0 	.word	0x20003ea0

08002320 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002326:	f3ef 8311 	mrs	r3, BASEPRI
 800232a:	f04f 0120 	mov.w	r1, #32
 800232e:	f381 8811 	msr	BASEPRI, r1
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	480b      	ldr	r0, [pc, #44]	; (8002364 <SEGGER_SYSVIEW_Stop+0x44>)
 8002336:	f7ff fcdb 	bl	8001cf0 <_PreparePacket>
 800233a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800233c:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <SEGGER_SYSVIEW_Stop+0x48>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d007      	beq.n	8002354 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002344:	220b      	movs	r2, #11
 8002346:	6839      	ldr	r1, [r7, #0]
 8002348:	6838      	ldr	r0, [r7, #0]
 800234a:	f7ff fda7 	bl	8001e9c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <SEGGER_SYSVIEW_Stop+0x48>)
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f383 8811 	msr	BASEPRI, r3
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20003ea0 	.word	0x20003ea0
 8002368:	20003e70 	.word	0x20003e70

0800236c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800236c:	b580      	push	{r7, lr}
 800236e:	b08c      	sub	sp, #48	; 0x30
 8002370:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002372:	f3ef 8311 	mrs	r3, BASEPRI
 8002376:	f04f 0120 	mov.w	r1, #32
 800237a:	f381 8811 	msr	BASEPRI, r1
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	4845      	ldr	r0, [pc, #276]	; (8002498 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8002382:	f7ff fcb5 	bl	8001cf0 <_PreparePacket>
 8002386:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002390:	4b42      	ldr	r3, [pc, #264]	; (800249c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	62bb      	str	r3, [r7, #40]	; 0x28
 8002396:	e00b      	b.n	80023b0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800239e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]
 80023aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ac:	09db      	lsrs	r3, r3, #7
 80023ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80023b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b2:	2b7f      	cmp	r3, #127	; 0x7f
 80023b4:	d8f0      	bhi.n	8002398 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80023b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]
 80023c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ca:	4b34      	ldr	r3, [pc, #208]	; (800249c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	623b      	str	r3, [r7, #32]
 80023d0:	e00b      	b.n	80023ea <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	627a      	str	r2, [r7, #36]	; 0x24
 80023d8:	6a3a      	ldr	r2, [r7, #32]
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	701a      	strb	r2, [r3, #0]
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	09db      	lsrs	r3, r3, #7
 80023e8:	623b      	str	r3, [r7, #32]
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	2b7f      	cmp	r3, #127	; 0x7f
 80023ee:	d8f0      	bhi.n	80023d2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	627a      	str	r2, [r7, #36]	; 0x24
 80023f6:	6a3a      	ldr	r2, [r7, #32]
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	701a      	strb	r2, [r3, #0]
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	61fb      	str	r3, [r7, #28]
 8002404:	4b25      	ldr	r3, [pc, #148]	; (800249c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	e00b      	b.n	8002424 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	61fa      	str	r2, [r7, #28]
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	701a      	strb	r2, [r3, #0]
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	09db      	lsrs	r3, r3, #7
 8002422:	61bb      	str	r3, [r7, #24]
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2b7f      	cmp	r3, #127	; 0x7f
 8002428:	d8f0      	bhi.n	800240c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	61fa      	str	r2, [r7, #28]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	2302      	movs	r3, #2
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	e00b      	b.n	800245c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	617a      	str	r2, [r7, #20]
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	701a      	strb	r2, [r3, #0]
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	09db      	lsrs	r3, r3, #7
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	2b7f      	cmp	r3, #127	; 0x7f
 8002460:	d8f0      	bhi.n	8002444 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	617a      	str	r2, [r7, #20]
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	701a      	strb	r2, [r3, #0]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002472:	2218      	movs	r2, #24
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	68b8      	ldr	r0, [r7, #8]
 8002478:	f7ff fd10 	bl	8001e9c <_SendPacket>
  RECORD_END();
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800248a:	4b04      	ldr	r3, [pc, #16]	; (800249c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	4798      	blx	r3
  }
}
 8002490:	bf00      	nop
 8002492:	3730      	adds	r7, #48	; 0x30
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20003ea0 	.word	0x20003ea0
 800249c:	20003e70 	.word	0x20003e70

080024a0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b092      	sub	sp, #72	; 0x48
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80024a8:	f3ef 8311 	mrs	r3, BASEPRI
 80024ac:	f04f 0120 	mov.w	r1, #32
 80024b0:	f381 8811 	msr	BASEPRI, r1
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	486b      	ldr	r0, [pc, #428]	; (8002664 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80024b8:	f7ff fc1a 	bl	8001cf0 <_PreparePacket>
 80024bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	647b      	str	r3, [r7, #68]	; 0x44
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	4b67      	ldr	r3, [pc, #412]	; (8002668 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	089b      	lsrs	r3, r3, #2
 80024d2:	643b      	str	r3, [r7, #64]	; 0x40
 80024d4:	e00b      	b.n	80024ee <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 80024d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	647a      	str	r2, [r7, #68]	; 0x44
 80024dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	701a      	strb	r2, [r3, #0]
 80024e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024ea:	09db      	lsrs	r3, r3, #7
 80024ec:	643b      	str	r3, [r7, #64]	; 0x40
 80024ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024f0:	2b7f      	cmp	r3, #127	; 0x7f
 80024f2:	d8f0      	bhi.n	80024d6 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 80024f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	647a      	str	r2, [r7, #68]	; 0x44
 80024fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	701a      	strb	r2, [r3, #0]
 8002500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002502:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	63bb      	str	r3, [r7, #56]	; 0x38
 800250e:	e00b      	b.n	8002528 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8002510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002516:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	701a      	strb	r2, [r3, #0]
 8002522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002524:	09db      	lsrs	r3, r3, #7
 8002526:	63bb      	str	r3, [r7, #56]	; 0x38
 8002528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252a:	2b7f      	cmp	r3, #127	; 0x7f
 800252c:	d8f0      	bhi.n	8002510 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 800252e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002534:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800253c:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2220      	movs	r2, #32
 8002544:	4619      	mov	r1, r3
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f7ff fb86 	bl	8001c58 <_EncodeStr>
 800254c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800254e:	2209      	movs	r2, #9
 8002550:	68f9      	ldr	r1, [r7, #12]
 8002552:	6938      	ldr	r0, [r7, #16]
 8002554:	f7ff fca2 	bl	8001e9c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	637b      	str	r3, [r7, #52]	; 0x34
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4b40      	ldr	r3, [pc, #256]	; (8002668 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	089b      	lsrs	r3, r3, #2
 800256c:	633b      	str	r3, [r7, #48]	; 0x30
 800256e:	e00b      	b.n	8002588 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8002570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	637a      	str	r2, [r7, #52]	; 0x34
 8002576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	701a      	strb	r2, [r3, #0]
 8002582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002584:	09db      	lsrs	r3, r3, #7
 8002586:	633b      	str	r3, [r7, #48]	; 0x30
 8002588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258a:	2b7f      	cmp	r3, #127	; 0x7f
 800258c:	d8f0      	bhi.n	8002570 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 800258e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	637a      	str	r2, [r7, #52]	; 0x34
 8002594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	701a      	strb	r2, [r3, #0]
 800259a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80025a8:	e00b      	b.n	80025c2 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 80025aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	701a      	strb	r2, [r3, #0]
 80025bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025be:	09db      	lsrs	r3, r3, #7
 80025c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80025c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c4:	2b7f      	cmp	r3, #127	; 0x7f
 80025c6:	d8f0      	bhi.n	80025aa <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 80025c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	623b      	str	r3, [r7, #32]
 80025e2:	e00b      	b.n	80025fc <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	627a      	str	r2, [r7, #36]	; 0x24
 80025ea:	6a3a      	ldr	r2, [r7, #32]
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	701a      	strb	r2, [r3, #0]
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	09db      	lsrs	r3, r3, #7
 80025fa:	623b      	str	r3, [r7, #32]
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	2b7f      	cmp	r3, #127	; 0x7f
 8002600:	d8f0      	bhi.n	80025e4 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	627a      	str	r2, [r7, #36]	; 0x24
 8002608:	6a3a      	ldr	r2, [r7, #32]
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	701a      	strb	r2, [r3, #0]
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	61fb      	str	r3, [r7, #28]
 8002616:	2300      	movs	r3, #0
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	e00b      	b.n	8002634 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	61fa      	str	r2, [r7, #28]
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	09db      	lsrs	r3, r3, #7
 8002632:	61bb      	str	r3, [r7, #24]
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	2b7f      	cmp	r3, #127	; 0x7f
 8002638:	d8f0      	bhi.n	800261c <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	61fa      	str	r2, [r7, #28]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	701a      	strb	r2, [r3, #0]
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800264a:	2215      	movs	r2, #21
 800264c:	68f9      	ldr	r1, [r7, #12]
 800264e:	6938      	ldr	r0, [r7, #16]
 8002650:	f7ff fc24 	bl	8001e9c <_SendPacket>
  RECORD_END();
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f383 8811 	msr	BASEPRI, r3
}
 800265a:	bf00      	nop
 800265c:	3748      	adds	r7, #72	; 0x48
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20003ea0 	.word	0x20003ea0
 8002668:	20003e70 	.word	0x20003e70

0800266c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8002670:	4b07      	ldr	r3, [pc, #28]	; (8002690 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8002682:	4b03      	ldr	r3, [pc, #12]	; (8002690 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4798      	blx	r3
  }
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20003e70 	.word	0x20003e70

08002694 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8002694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800269a:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d015      	beq.n	80026ce <SEGGER_SYSVIEW_RecordSystime+0x3a>
 80026a2:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d010      	beq.n	80026ce <SEGGER_SYSVIEW_RecordSystime+0x3a>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80026ac:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4798      	blx	r3
 80026b4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80026b8:	6839      	ldr	r1, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80026ba:	e897 0018 	ldmia.w	r7, {r3, r4}
 80026be:	0025      	movs	r5, r4
 80026c0:	2600      	movs	r6, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80026c2:	462b      	mov	r3, r5
 80026c4:	461a      	mov	r2, r3
 80026c6:	200d      	movs	r0, #13
 80026c8:	f7ff fd14 	bl	80020f4 <SEGGER_SYSVIEW_RecordU32x2>
 80026cc:	e005      	b.n	80026da <SEGGER_SYSVIEW_RecordSystime+0x46>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <SEGGER_SYSVIEW_RecordSystime+0x54>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4619      	mov	r1, r3
 80026d4:	200c      	movs	r0, #12
 80026d6:	f7ff fcd1 	bl	800207c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20003e70 	.word	0x20003e70
 80026e8:	e0001004 	.word	0xe0001004

080026ec <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80026f2:	f3ef 8311 	mrs	r3, BASEPRI
 80026f6:	f04f 0120 	mov.w	r1, #32
 80026fa:	f381 8811 	msr	BASEPRI, r1
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	4819      	ldr	r0, [pc, #100]	; (8002768 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8002702:	f7ff faf5 	bl	8001cf0 <_PreparePacket>
 8002706:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800270c:	4b17      	ldr	r3, [pc, #92]	; (800276c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002714:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	e00b      	b.n	8002738 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	617a      	str	r2, [r7, #20]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	701a      	strb	r2, [r3, #0]
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	09db      	lsrs	r3, r3, #7
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	2b7f      	cmp	r3, #127	; 0x7f
 800273c:	d8f0      	bhi.n	8002720 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	617a      	str	r2, [r7, #20]
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800274e:	2202      	movs	r2, #2
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	68b8      	ldr	r0, [r7, #8]
 8002754:	f7ff fba2 	bl	8001e9c <_SendPacket>
  RECORD_END();
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f383 8811 	msr	BASEPRI, r3
}
 800275e:	bf00      	nop
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20003ea0 	.word	0x20003ea0
 800276c:	e000ed04 	.word	0xe000ed04

08002770 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002776:	f3ef 8311 	mrs	r3, BASEPRI
 800277a:	f04f 0120 	mov.w	r1, #32
 800277e:	f381 8811 	msr	BASEPRI, r1
 8002782:	607b      	str	r3, [r7, #4]
 8002784:	4807      	ldr	r0, [pc, #28]	; (80027a4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8002786:	f7ff fab3 	bl	8001cf0 <_PreparePacket>
 800278a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800278c:	2203      	movs	r2, #3
 800278e:	6839      	ldr	r1, [r7, #0]
 8002790:	6838      	ldr	r0, [r7, #0]
 8002792:	f7ff fb83 	bl	8001e9c <_SendPacket>
  RECORD_END();
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f383 8811 	msr	BASEPRI, r3
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20003ea0 	.word	0x20003ea0

080027a8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80027ae:	f3ef 8311 	mrs	r3, BASEPRI
 80027b2:	f04f 0120 	mov.w	r1, #32
 80027b6:	f381 8811 	msr	BASEPRI, r1
 80027ba:	607b      	str	r3, [r7, #4]
 80027bc:	4807      	ldr	r0, [pc, #28]	; (80027dc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80027be:	f7ff fa97 	bl	8001cf0 <_PreparePacket>
 80027c2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80027c4:	2212      	movs	r2, #18
 80027c6:	6839      	ldr	r1, [r7, #0]
 80027c8:	6838      	ldr	r0, [r7, #0]
 80027ca:	f7ff fb67 	bl	8001e9c <_SendPacket>
  RECORD_END();
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f383 8811 	msr	BASEPRI, r3
}
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20003ea0 	.word	0x20003ea0

080027e0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80027e6:	f3ef 8311 	mrs	r3, BASEPRI
 80027ea:	f04f 0120 	mov.w	r1, #32
 80027ee:	f381 8811 	msr	BASEPRI, r1
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	4807      	ldr	r0, [pc, #28]	; (8002814 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80027f6:	f7ff fa7b 	bl	8001cf0 <_PreparePacket>
 80027fa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80027fc:	2211      	movs	r2, #17
 80027fe:	6839      	ldr	r1, [r7, #0]
 8002800:	6838      	ldr	r0, [r7, #0]
 8002802:	f7ff fb4b 	bl	8001e9c <_SendPacket>
  RECORD_END();
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f383 8811 	msr	BASEPRI, r3
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20003ea0 	.word	0x20003ea0

08002818 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002820:	f3ef 8311 	mrs	r3, BASEPRI
 8002824:	f04f 0120 	mov.w	r1, #32
 8002828:	f381 8811 	msr	BASEPRI, r1
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	481a      	ldr	r0, [pc, #104]	; (8002898 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8002830:	f7ff fa5e 	bl	8001cf0 <_PreparePacket>
 8002834:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800283a:	4b18      	ldr	r3, [pc, #96]	; (800289c <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	089b      	lsrs	r3, r3, #2
 8002844:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	e00b      	b.n	8002868 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	61fa      	str	r2, [r7, #28]
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	09db      	lsrs	r3, r3, #7
 8002866:	61bb      	str	r3, [r7, #24]
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	2b7f      	cmp	r3, #127	; 0x7f
 800286c:	d8f0      	bhi.n	8002850 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	61fa      	str	r2, [r7, #28]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800287e:	2208      	movs	r2, #8
 8002880:	68f9      	ldr	r1, [r7, #12]
 8002882:	6938      	ldr	r0, [r7, #16]
 8002884:	f7ff fb0a 	bl	8001e9c <_SendPacket>
  RECORD_END();
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f383 8811 	msr	BASEPRI, r3
}
 800288e:	bf00      	nop
 8002890:	3720      	adds	r7, #32
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20003ea0 	.word	0x20003ea0
 800289c:	20003e70 	.word	0x20003e70

080028a0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80028a8:	f3ef 8311 	mrs	r3, BASEPRI
 80028ac:	f04f 0120 	mov.w	r1, #32
 80028b0:	f381 8811 	msr	BASEPRI, r1
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	481a      	ldr	r0, [pc, #104]	; (8002920 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80028b8:	f7ff fa1a 	bl	8001cf0 <_PreparePacket>
 80028bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80028c2:	4b18      	ldr	r3, [pc, #96]	; (8002924 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	089b      	lsrs	r3, r3, #2
 80028cc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	61fb      	str	r3, [r7, #28]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	61bb      	str	r3, [r7, #24]
 80028d6:	e00b      	b.n	80028f0 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	61fa      	str	r2, [r7, #28]
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	09db      	lsrs	r3, r3, #7
 80028ee:	61bb      	str	r3, [r7, #24]
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	2b7f      	cmp	r3, #127	; 0x7f
 80028f4:	d8f0      	bhi.n	80028d8 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	61fa      	str	r2, [r7, #28]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8002906:	2204      	movs	r2, #4
 8002908:	68f9      	ldr	r1, [r7, #12]
 800290a:	6938      	ldr	r0, [r7, #16]
 800290c:	f7ff fac6 	bl	8001e9c <_SendPacket>
  RECORD_END();
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f383 8811 	msr	BASEPRI, r3
}
 8002916:	bf00      	nop
 8002918:	3720      	adds	r7, #32
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20003ea0 	.word	0x20003ea0
 8002924:	20003e70 	.word	0x20003e70

08002928 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002930:	f3ef 8311 	mrs	r3, BASEPRI
 8002934:	f04f 0120 	mov.w	r1, #32
 8002938:	f381 8811 	msr	BASEPRI, r1
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	481a      	ldr	r0, [pc, #104]	; (80029a8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8002940:	f7ff f9d6 	bl	8001cf0 <_PreparePacket>
 8002944:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800294a:	4b18      	ldr	r3, [pc, #96]	; (80029ac <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	089b      	lsrs	r3, r3, #2
 8002954:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	61fb      	str	r3, [r7, #28]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	61bb      	str	r3, [r7, #24]
 800295e:	e00b      	b.n	8002978 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	61fa      	str	r2, [r7, #28]
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	09db      	lsrs	r3, r3, #7
 8002976:	61bb      	str	r3, [r7, #24]
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	2b7f      	cmp	r3, #127	; 0x7f
 800297c:	d8f0      	bhi.n	8002960 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	61fa      	str	r2, [r7, #28]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800298e:	2206      	movs	r2, #6
 8002990:	68f9      	ldr	r1, [r7, #12]
 8002992:	6938      	ldr	r0, [r7, #16]
 8002994:	f7ff fa82 	bl	8001e9c <_SendPacket>
  RECORD_END();
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f383 8811 	msr	BASEPRI, r3
}
 800299e:	bf00      	nop
 80029a0:	3720      	adds	r7, #32
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20003ea0 	.word	0x20003ea0
 80029ac:	20003e70 	.word	0x20003e70

080029b0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80029b8:	4b04      	ldr	r3, [pc, #16]	; (80029cc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	089b      	lsrs	r3, r3, #2
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	20003e70 	.word	0x20003e70

080029d0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08c      	sub	sp, #48	; 0x30
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80029da:	4b3b      	ldr	r3, [pc, #236]	; (8002ac8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d06d      	beq.n	8002abe <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80029e2:	4b39      	ldr	r3, [pc, #228]	; (8002ac8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80029e8:	2300      	movs	r3, #0
 80029ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ec:	e008      	b.n	8002a00 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80029ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80029f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d007      	beq.n	8002a0a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	3301      	adds	r3, #1
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a00:	79fa      	ldrb	r2, [r7, #7]
 8002a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d8f2      	bhi.n	80029ee <SEGGER_SYSVIEW_SendModule+0x1e>
 8002a08:	e000      	b.n	8002a0c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8002a0a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8002a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d055      	beq.n	8002abe <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002a12:	f3ef 8311 	mrs	r3, BASEPRI
 8002a16:	f04f 0120 	mov.w	r1, #32
 8002a1a:	f381 8811 	msr	BASEPRI, r1
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	482a      	ldr	r0, [pc, #168]	; (8002acc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8002a22:	f7ff f965 	bl	8001cf0 <_PreparePacket>
 8002a26:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	623b      	str	r3, [r7, #32]
 8002a34:	e00b      	b.n	8002a4e <SEGGER_SYSVIEW_SendModule+0x7e>
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	627a      	str	r2, [r7, #36]	; 0x24
 8002a3c:	6a3a      	ldr	r2, [r7, #32]
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	701a      	strb	r2, [r3, #0]
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	09db      	lsrs	r3, r3, #7
 8002a4c:	623b      	str	r3, [r7, #32]
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	2b7f      	cmp	r3, #127	; 0x7f
 8002a52:	d8f0      	bhi.n	8002a36 <SEGGER_SYSVIEW_SendModule+0x66>
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	627a      	str	r2, [r7, #36]	; 0x24
 8002a5a:	6a3a      	ldr	r2, [r7, #32]
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	701a      	strb	r2, [r3, #0]
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	61fb      	str	r3, [r7, #28]
 8002a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	e00b      	b.n	8002a88 <SEGGER_SYSVIEW_SendModule+0xb8>
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	61fa      	str	r2, [r7, #28]
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	09db      	lsrs	r3, r3, #7
 8002a86:	61bb      	str	r3, [r7, #24]
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	2b7f      	cmp	r3, #127	; 0x7f
 8002a8c:	d8f0      	bhi.n	8002a70 <SEGGER_SYSVIEW_SendModule+0xa0>
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	61fa      	str	r2, [r7, #28]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2280      	movs	r2, #128	; 0x80
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f7ff f8d6 	bl	8001c58 <_EncodeStr>
 8002aac:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8002aae:	2216      	movs	r2, #22
 8002ab0:	68f9      	ldr	r1, [r7, #12]
 8002ab2:	6938      	ldr	r0, [r7, #16]
 8002ab4:	f7ff f9f2 	bl	8001e9c <_SendPacket>
      RECORD_END();
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8002abe:	bf00      	nop
 8002ac0:	3730      	adds	r7, #48	; 0x30
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20003e98 	.word	0x20003e98
 8002acc:	20003ea0 	.word	0x20003ea0

08002ad0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8002ad6:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00f      	beq.n	8002afe <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8002ade:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f2      	bne.n	8002ae4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20003e98 	.word	0x20003e98

08002b0c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8002b12:	f3ef 8311 	mrs	r3, BASEPRI
 8002b16:	f04f 0120 	mov.w	r1, #32
 8002b1a:	f381 8811 	msr	BASEPRI, r1
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	4817      	ldr	r0, [pc, #92]	; (8002b80 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8002b22:	f7ff f8e5 	bl	8001cf0 <_PreparePacket>
 8002b26:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	e00b      	b.n	8002b50 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	617a      	str	r2, [r7, #20]
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	701a      	strb	r2, [r3, #0]
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	09db      	lsrs	r3, r3, #7
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	2b7f      	cmp	r3, #127	; 0x7f
 8002b54:	d8f0      	bhi.n	8002b38 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	617a      	str	r2, [r7, #20]
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8002b66:	221b      	movs	r2, #27
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	68b8      	ldr	r0, [r7, #8]
 8002b6c:	f7ff f996 	bl	8001e9c <_SendPacket>
  RECORD_END();
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f383 8811 	msr	BASEPRI, r3
}
 8002b76:	bf00      	nop
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20003ea0 	.word	0x20003ea0
 8002b84:	20003e9c 	.word	0x20003e9c

08002b88 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08a      	sub	sp, #40	; 0x28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002b90:	f3ef 8311 	mrs	r3, BASEPRI
 8002b94:	f04f 0120 	mov.w	r1, #32
 8002b98:	f381 8811 	msr	BASEPRI, r1
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	4827      	ldr	r0, [pc, #156]	; (8002c3c <SEGGER_SYSVIEW_Warn+0xb4>)
 8002ba0:	f7ff f8a6 	bl	8001cf0 <_PreparePacket>
 8002ba4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002ba6:	2280      	movs	r2, #128	; 0x80
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	6938      	ldr	r0, [r7, #16]
 8002bac:	f7ff f854 	bl	8001c58 <_EncodeStr>
 8002bb0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	623b      	str	r3, [r7, #32]
 8002bba:	e00b      	b.n	8002bd4 <SEGGER_SYSVIEW_Warn+0x4c>
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	627a      	str	r2, [r7, #36]	; 0x24
 8002bc2:	6a3a      	ldr	r2, [r7, #32]
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	701a      	strb	r2, [r3, #0]
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	09db      	lsrs	r3, r3, #7
 8002bd2:	623b      	str	r3, [r7, #32]
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	2b7f      	cmp	r3, #127	; 0x7f
 8002bd8:	d8f0      	bhi.n	8002bbc <SEGGER_SYSVIEW_Warn+0x34>
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	627a      	str	r2, [r7, #36]	; 0x24
 8002be0:	6a3a      	ldr	r2, [r7, #32]
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	61fb      	str	r3, [r7, #28]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61bb      	str	r3, [r7, #24]
 8002bf2:	e00b      	b.n	8002c0c <SEGGER_SYSVIEW_Warn+0x84>
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	61fa      	str	r2, [r7, #28]
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	701a      	strb	r2, [r3, #0]
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	09db      	lsrs	r3, r3, #7
 8002c0a:	61bb      	str	r3, [r7, #24]
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	2b7f      	cmp	r3, #127	; 0x7f
 8002c10:	d8f0      	bhi.n	8002bf4 <SEGGER_SYSVIEW_Warn+0x6c>
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	61fa      	str	r2, [r7, #28]
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8002c22:	221a      	movs	r2, #26
 8002c24:	68f9      	ldr	r1, [r7, #12]
 8002c26:	6938      	ldr	r0, [r7, #16]
 8002c28:	f7ff f938 	bl	8001e9c <_SendPacket>
  RECORD_END();
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f383 8811 	msr	BASEPRI, r3
}
 8002c32:	bf00      	nop
 8002c34:	3728      	adds	r7, #40	; 0x28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20003ea0 	.word	0x20003ea0

08002c40 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8002c4a:	4908      	ldr	r1, [pc, #32]	; (8002c6c <NVIC_EnableIRQ+0x2c>)
 8002c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	79fa      	ldrb	r2, [r7, #7]
 8002c54:	f002 021f 	and.w	r2, r2, #31
 8002c58:	2001      	movs	r0, #1
 8002c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr
 8002c6c:	e000e100 	.word	0xe000e100

08002c70 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	6039      	str	r1, [r7, #0]
 8002c7a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8002c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	da0b      	bge.n	8002c9c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002c84:	490d      	ldr	r1, [pc, #52]	; (8002cbc <NVIC_SetPriority+0x4c>)
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	f003 030f 	and.w	r3, r3, #15
 8002c8c:	3b04      	subs	r3, #4
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	0112      	lsls	r2, r2, #4
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	440b      	add	r3, r1
 8002c98:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8002c9a:	e009      	b.n	8002cb0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002c9c:	4908      	ldr	r1, [pc, #32]	; (8002cc0 <NVIC_SetPriority+0x50>)
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	0112      	lsls	r2, r2, #4
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	440b      	add	r3, r1
 8002cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	e000ed00 	.word	0xe000ed00
 8002cc0:	e000e100 	.word	0xe000e100

08002cc4 <main>:
TaskHandle_t xTaskHandle1=NULL;
TaskHandle_t xTaskHandle2=NULL ;
char usr_msg[200];
/*****************************Main Function****************************/
int main(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af02      	add	r7, sp, #8
	// Initializations
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8002cca:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002cce:	f7fd fa47 	bl	8000160 <NVIC_PriorityGroupConfig>
	prvSetupHardware();
 8002cd2:	f000 f907 	bl	8002ee4 <prvSetupHardware>


	printmsg("This Task Switching Priority Project\r\n");
 8002cd6:	480e      	ldr	r0, [pc, #56]	; (8002d10 <main+0x4c>)
 8002cd8:	f000 f90c 	bl	8002ef4 <printmsg>

	// Create Task 1 low priority --> 2
	xTaskCreate(vTask1_Handler,"Task-1",300,NULL,2,&xTaskHandle1);
 8002cdc:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <main+0x50>)
 8002cde:	9301      	str	r3, [sp, #4]
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cea:	490b      	ldr	r1, [pc, #44]	; (8002d18 <main+0x54>)
 8002cec:	480b      	ldr	r0, [pc, #44]	; (8002d1c <main+0x58>)
 8002cee:	f7fe f899 	bl	8000e24 <xTaskCreate>

	// Create Task 2 high Priority --> 3
	xTaskCreate(vTask2_Handler,"Task-2",300,NULL,3,&xTaskHandle2);
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <main+0x5c>)
 8002cf4:	9301      	str	r3, [sp, #4]
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d00:	4908      	ldr	r1, [pc, #32]	; (8002d24 <main+0x60>)
 8002d02:	4809      	ldr	r0, [pc, #36]	; (8002d28 <main+0x64>)
 8002d04:	f7fe f88e 	bl	8000e24 <xTaskCreate>

	//Start Scheduler
	vTaskStartScheduler();
 8002d08:	f7fe faa0 	bl	800124c <vTaskStartScheduler>

	while(1);
 8002d0c:	e7fe      	b.n	8002d0c <main+0x48>
 8002d0e:	bf00      	nop
 8002d10:	08003c18 	.word	0x08003c18
 8002d14:	20003f84 	.word	0x20003f84
 8002d18:	08003c40 	.word	0x08003c40
 8002d1c:	08002d2d 	.word	0x08002d2d
 8002d20:	20003f88 	.word	0x20003f88
 8002d24:	08003c48 	.word	0x08003c48
 8002d28:	08002dfd 	.word	0x08002dfd

08002d2c <vTask1_Handler>:
}


/***************************** Task Handler Definition****************************/
void vTask1_Handler (void *param)
{
 8002d2c:	b5b0      	push	{r4, r5, r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
	UBaseType_t p1 , p2 ;
	//Low Priority Task will run only when Task 2 is Deleted
	sprintf(usr_msg,"Task-1 is Running\r\n");
 8002d34:	4a29      	ldr	r2, [pc, #164]	; (8002ddc <vTask1_Handler+0xb0>)
 8002d36:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <vTask1_Handler+0xb4>)
 8002d38:	4615      	mov	r5, r2
 8002d3a:	461c      	mov	r4, r3
 8002d3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d3e:	6028      	str	r0, [r5, #0]
 8002d40:	6069      	str	r1, [r5, #4]
 8002d42:	60aa      	str	r2, [r5, #8]
 8002d44:	60eb      	str	r3, [r5, #12]
 8002d46:	6820      	ldr	r0, [r4, #0]
 8002d48:	6128      	str	r0, [r5, #16]
	printmsg(usr_msg);
 8002d4a:	4824      	ldr	r0, [pc, #144]	; (8002ddc <vTask1_Handler+0xb0>)
 8002d4c:	f000 f8d2 	bl	8002ef4 <printmsg>

	// Print Priority of Task 1
	sprintf(usr_msg,"Task-1 Priority %ld\r\n",uxTaskPriorityGet(xTaskHandle1));
 8002d50:	4b24      	ldr	r3, [pc, #144]	; (8002de4 <vTask1_Handler+0xb8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fe f9ad 	bl	80010b4 <uxTaskPriorityGet>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4922      	ldr	r1, [pc, #136]	; (8002de8 <vTask1_Handler+0xbc>)
 8002d60:	481e      	ldr	r0, [pc, #120]	; (8002ddc <vTask1_Handler+0xb0>)
 8002d62:	f000 faf1 	bl	8003348 <siprintf>
	printmsg(usr_msg);
 8002d66:	481d      	ldr	r0, [pc, #116]	; (8002ddc <vTask1_Handler+0xb0>)
 8002d68:	f000 f8c4 	bl	8002ef4 <printmsg>

	// Print Priority of Task 1
	sprintf(usr_msg,"Task-2 Priority %ld\r\n",uxTaskPriorityGet(xTaskHandle2));
 8002d6c:	4b1f      	ldr	r3, [pc, #124]	; (8002dec <vTask1_Handler+0xc0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fe f99f 	bl	80010b4 <uxTaskPriorityGet>
 8002d76:	4603      	mov	r3, r0
 8002d78:	461a      	mov	r2, r3
 8002d7a:	491d      	ldr	r1, [pc, #116]	; (8002df0 <vTask1_Handler+0xc4>)
 8002d7c:	4817      	ldr	r0, [pc, #92]	; (8002ddc <vTask1_Handler+0xb0>)
 8002d7e:	f000 fae3 	bl	8003348 <siprintf>
	printmsg(usr_msg);
 8002d82:	4816      	ldr	r0, [pc, #88]	; (8002ddc <vTask1_Handler+0xb0>)
 8002d84:	f000 f8b6 	bl	8002ef4 <printmsg>
	while(1)
	{
		if(switching_priority_flag)
 8002d88:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <vTask1_Handler+0xc8>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01b      	beq.n	8002dc8 <vTask1_Handler+0x9c>
		{
			// Button is Pressed
			switching_priority_flag=FALSE ;
 8002d90:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <vTask1_Handler+0xc8>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	701a      	strb	r2, [r3, #0]
			//Get the Priority of The 2 Tasks in Variables p1,p2
			p1 = uxTaskPriorityGet(xTaskHandle1);
 8002d96:	4b13      	ldr	r3, [pc, #76]	; (8002de4 <vTask1_Handler+0xb8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe f98a 	bl	80010b4 <uxTaskPriorityGet>
 8002da0:	60f8      	str	r0, [r7, #12]
			p2 = uxTaskPriorityGet(xTaskHandle2);
 8002da2:	4b12      	ldr	r3, [pc, #72]	; (8002dec <vTask1_Handler+0xc0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fe f984 	bl	80010b4 <uxTaskPriorityGet>
 8002dac:	60b8      	str	r0, [r7, #8]

			//Switching Priority of The 2 Tasks
			vTaskPrioritySet(xTaskHandle1,p2);
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <vTask1_Handler+0xb8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68b9      	ldr	r1, [r7, #8]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fe f997 	bl	80010e8 <vTaskPrioritySet>
			vTaskPrioritySet(xTaskHandle2,p1);
 8002dba:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <vTask1_Handler+0xc0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68f9      	ldr	r1, [r7, #12]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fe f991 	bl	80010e8 <vTaskPrioritySet>
 8002dc6:	e7df      	b.n	8002d88 <vTask1_Handler+0x5c>
		else
		{
			// Button is Not Pressed

			// LED is Toggled every 100 ms
			RTOS_Delay(100);
 8002dc8:	2064      	movs	r0, #100	; 0x64
 8002dca:	f000 f93f 	bl	800304c <RTOS_Delay>
			GPIO_ToggleBit(GPIOC,GPIO_Pin_13);
 8002dce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dd2:	4809      	ldr	r0, [pc, #36]	; (8002df8 <vTask1_Handler+0xcc>)
 8002dd4:	f7fd fb12 	bl	80003fc <GPIO_ToggleBit>
		if(switching_priority_flag)
 8002dd8:	e7d6      	b.n	8002d88 <vTask1_Handler+0x5c>
 8002dda:	bf00      	nop
 8002ddc:	20004040 	.word	0x20004040
 8002de0:	08003c50 	.word	0x08003c50
 8002de4:	20003f84 	.word	0x20003f84
 8002de8:	08003c64 	.word	0x08003c64
 8002dec:	20003f88 	.word	0x20003f88
 8002df0:	08003c7c 	.word	0x08003c7c
 8002df4:	20003f83 	.word	0x20003f83
 8002df8:	40011000 	.word	0x40011000

08002dfc <vTask2_Handler>:
		}
	}
}

void vTask2_Handler (void *param)
{
 8002dfc:	b5b0      	push	{r4, r5, r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
	UBaseType_t p1 , p2 ;
	//Low Priority Task will run only when Task 2 is Deleted
	sprintf(usr_msg,"Task-2 is Running\r\n");
 8002e04:	4a29      	ldr	r2, [pc, #164]	; (8002eac <vTask2_Handler+0xb0>)
 8002e06:	4b2a      	ldr	r3, [pc, #168]	; (8002eb0 <vTask2_Handler+0xb4>)
 8002e08:	4615      	mov	r5, r2
 8002e0a:	461c      	mov	r4, r3
 8002e0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e0e:	6028      	str	r0, [r5, #0]
 8002e10:	6069      	str	r1, [r5, #4]
 8002e12:	60aa      	str	r2, [r5, #8]
 8002e14:	60eb      	str	r3, [r5, #12]
 8002e16:	6820      	ldr	r0, [r4, #0]
 8002e18:	6128      	str	r0, [r5, #16]
	printmsg(usr_msg);
 8002e1a:	4824      	ldr	r0, [pc, #144]	; (8002eac <vTask2_Handler+0xb0>)
 8002e1c:	f000 f86a 	bl	8002ef4 <printmsg>

	// Print Priority of Task 1
	sprintf(usr_msg,"Task-1 Priority %ld\r\n",uxTaskPriorityGet(xTaskHandle1));
 8002e20:	4b24      	ldr	r3, [pc, #144]	; (8002eb4 <vTask2_Handler+0xb8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fe f945 	bl	80010b4 <uxTaskPriorityGet>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4922      	ldr	r1, [pc, #136]	; (8002eb8 <vTask2_Handler+0xbc>)
 8002e30:	481e      	ldr	r0, [pc, #120]	; (8002eac <vTask2_Handler+0xb0>)
 8002e32:	f000 fa89 	bl	8003348 <siprintf>
	printmsg(usr_msg);
 8002e36:	481d      	ldr	r0, [pc, #116]	; (8002eac <vTask2_Handler+0xb0>)
 8002e38:	f000 f85c 	bl	8002ef4 <printmsg>

	// Print Priority of Task 1
	sprintf(usr_msg,"Task-2 Priority %ld\r\n",uxTaskPriorityGet(xTaskHandle2));
 8002e3c:	4b1f      	ldr	r3, [pc, #124]	; (8002ebc <vTask2_Handler+0xc0>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fe f937 	bl	80010b4 <uxTaskPriorityGet>
 8002e46:	4603      	mov	r3, r0
 8002e48:	461a      	mov	r2, r3
 8002e4a:	491d      	ldr	r1, [pc, #116]	; (8002ec0 <vTask2_Handler+0xc4>)
 8002e4c:	4817      	ldr	r0, [pc, #92]	; (8002eac <vTask2_Handler+0xb0>)
 8002e4e:	f000 fa7b 	bl	8003348 <siprintf>
	printmsg(usr_msg);
 8002e52:	4816      	ldr	r0, [pc, #88]	; (8002eac <vTask2_Handler+0xb0>)
 8002e54:	f000 f84e 	bl	8002ef4 <printmsg>
	while(1)
	{
		if(switching_priority_flag)
 8002e58:	4b1a      	ldr	r3, [pc, #104]	; (8002ec4 <vTask2_Handler+0xc8>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01b      	beq.n	8002e98 <vTask2_Handler+0x9c>
		{
			// Button is Pressed
			switching_priority_flag=FALSE ;
 8002e60:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <vTask2_Handler+0xc8>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
			//Get the Priority of The 2 Tasks in Variables p1,p2
			p1 = uxTaskPriorityGet(xTaskHandle1);
 8002e66:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <vTask2_Handler+0xb8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fe f922 	bl	80010b4 <uxTaskPriorityGet>
 8002e70:	60f8      	str	r0, [r7, #12]
			p2 = uxTaskPriorityGet(xTaskHandle2);
 8002e72:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <vTask2_Handler+0xc0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fe f91c 	bl	80010b4 <uxTaskPriorityGet>
 8002e7c:	60b8      	str	r0, [r7, #8]

			//Switching Priority of The 2 Tasks
			vTaskPrioritySet(xTaskHandle1,p2);
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <vTask2_Handler+0xb8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68b9      	ldr	r1, [r7, #8]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fe f92f 	bl	80010e8 <vTaskPrioritySet>
			vTaskPrioritySet(xTaskHandle2,p1);
 8002e8a:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <vTask2_Handler+0xc0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68f9      	ldr	r1, [r7, #12]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fe f929 	bl	80010e8 <vTaskPrioritySet>
 8002e96:	e7df      	b.n	8002e58 <vTask2_Handler+0x5c>
		else
		{
			// Button is Not Pressed

			// LED is Toggled every 1 second
			RTOS_Delay(1000);
 8002e98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e9c:	f000 f8d6 	bl	800304c <RTOS_Delay>
			GPIO_ToggleBit(GPIOC,GPIO_Pin_13);
 8002ea0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ea4:	4808      	ldr	r0, [pc, #32]	; (8002ec8 <vTask2_Handler+0xcc>)
 8002ea6:	f7fd faa9 	bl	80003fc <GPIO_ToggleBit>
		if(switching_priority_flag)
 8002eaa:	e7d5      	b.n	8002e58 <vTask2_Handler+0x5c>
 8002eac:	20004040 	.word	0x20004040
 8002eb0:	08003c94 	.word	0x08003c94
 8002eb4:	20003f84 	.word	0x20003f84
 8002eb8:	08003c64 	.word	0x08003c64
 8002ebc:	20003f88 	.word	0x20003f88
 8002ec0:	08003c7c 	.word	0x08003c7c
 8002ec4:	20003f83 	.word	0x20003f83
 8002ec8:	40011000 	.word	0x40011000

08002ecc <EXTI9_5_IRQHandler>:
		}
	}
}

void EXTI9_5_IRQHandler()
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
	/*
	*1.Clear Interrupt Pending Bit of the EXTI Line
	* this bit is indication to the NVIC that interrupt is happened
	* then when interrupt Handler Called it must be Cleared
	*/
	EXTI_ClearITPendingBit(EXTI_Line5);
 8002ed0:	2020      	movs	r0, #32
 8002ed2:	f7fd f9c9 	bl	8000268 <EXTI_ClearITPendingBit>

	// Switching Priority Between 2 tasks
	switching_priority_flag=TRUE ;
 8002ed6:	4b02      	ldr	r3, [pc, #8]	; (8002ee0 <EXTI9_5_IRQHandler+0x14>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	701a      	strb	r2, [r3, #0]

	//traceISR_ENTER(); // for system View Tracing
}
 8002edc:	bf00      	nop
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20003f83 	.word	0x20003f83

08002ee4 <prvSetupHardware>:
/*****************************FUNCTION Definition****************************/

static void prvSetupHardware(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
	//Setup GPIO
	prvGPIOSetup();
 8002ee8:	f000 f86c 	bl	8002fc4 <prvGPIOSetup>

	//setup UART_1
	prvUARTSetup();
 8002eec:	f000 f82a 	bl	8002f44 <prvUARTSetup>
}
 8002ef0:	bf00      	nop
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <printmsg>:

void printmsg(char *msg)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i<strlen(msg) ; i++)
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	e013      	b.n	8002f2a <printmsg+0x36>
	{
		//polling to check that the Date Register is Empty
		while(USART_GetFlagStatus(USART1, USART_FLAG_TXE)!=SET);
 8002f02:	bf00      	nop
 8002f04:	2180      	movs	r1, #128	; 0x80
 8002f06:	480e      	ldr	r0, [pc, #56]	; (8002f40 <printmsg+0x4c>)
 8002f08:	f7fd fc42 	bl	8000790 <USART_GetFlagStatus>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d1f8      	bne.n	8002f04 <printmsg+0x10>
		//put our mesg in the UART Data Register
		USART_SendData(USART1,msg[i]);
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4413      	add	r3, r2
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4808      	ldr	r0, [pc, #32]	; (8002f40 <printmsg+0x4c>)
 8002f20:	f7fd fc25 	bl	800076e <USART_SendData>
	for(uint32_t i=0 ; i<strlen(msg) ; i++)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	3301      	adds	r3, #1
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fd f910 	bl	8000150 <strlen>
 8002f30:	4602      	mov	r2, r0
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d8e4      	bhi.n	8002f02 <printmsg+0xe>
	}

}
 8002f38:	bf00      	nop
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40013800 	.word	0x40013800

08002f44 <prvUARTSetup>:

void prvUARTSetup()
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
    USART_InitTypeDef usart1_init_struct;
    /* Bit configuration structure for GPIOA PIN9 and PIN10 */
    GPIO_InitTypeDef gpioa_init_struct;

    /* Enalbe clock for USART1, AFIO and GPIOA */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_AFIO |
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	f244 0005 	movw	r0, #16389	; 0x4005
 8002f50:	f7fd fb16 	bl	8000580 <RCC_APB2PeriphClockCmd>
                           RCC_APB2Periph_GPIOA, ENABLE);

    /* GPIOA PIN9 alternative function Tx */
    gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
 8002f54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f58:	80bb      	strh	r3, [r7, #4]
    gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	71bb      	strb	r3, [r7, #6]
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
 8002f5e:	2318      	movs	r3, #24
 8002f60:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &gpioa_init_struct);
 8002f62:	1d3b      	adds	r3, r7, #4
 8002f64:	4619      	mov	r1, r3
 8002f66:	4815      	ldr	r0, [pc, #84]	; (8002fbc <prvUARTSetup+0x78>)
 8002f68:	f7fd f98c 	bl	8000284 <GPIO_Init>
    /* GPIOA PIN9 alternative function Rx */
    gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
 8002f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f70:	80bb      	strh	r3, [r7, #4]
    gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 8002f72:	2303      	movs	r3, #3
 8002f74:	71bb      	strb	r3, [r7, #6]
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8002f76:	2304      	movs	r3, #4
 8002f78:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &gpioa_init_struct);
 8002f7a:	1d3b      	adds	r3, r7, #4
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	480f      	ldr	r0, [pc, #60]	; (8002fbc <prvUARTSetup+0x78>)
 8002f80:	f7fd f980 	bl	8000284 <GPIO_Init>

    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);
 8002f84:	2101      	movs	r1, #1
 8002f86:	480e      	ldr	r0, [pc, #56]	; (8002fc0 <prvUARTSetup+0x7c>)
 8002f88:	f7fd fbd2 	bl	8000730 <USART_Cmd>
    /* Baud rate 9600, 8-bit data, One stop bit
     * No parity, Do both Rx and Tx, No HW flow control
     */
    usart1_init_struct.USART_BaudRate = 115200;
 8002f8c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002f90:	60bb      	str	r3, [r7, #8]
    usart1_init_struct.USART_WordLength = USART_WordLength_8b;
 8002f92:	2300      	movs	r3, #0
 8002f94:	81bb      	strh	r3, [r7, #12]
    usart1_init_struct.USART_StopBits = USART_StopBits_1;
 8002f96:	2300      	movs	r3, #0
 8002f98:	81fb      	strh	r3, [r7, #14]
    usart1_init_struct.USART_Parity = USART_Parity_No ;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	823b      	strh	r3, [r7, #16]
    usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002f9e:	230c      	movs	r3, #12
 8002fa0:	827b      	strh	r3, [r7, #18]
    usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	82bb      	strh	r3, [r7, #20]
    USART_Init(USART1,&usart1_init_struct);
 8002fa6:	f107 0308 	add.w	r3, r7, #8
 8002faa:	4619      	mov	r1, r3
 8002fac:	4804      	ldr	r0, [pc, #16]	; (8002fc0 <prvUARTSetup+0x7c>)
 8002fae:	f7fd fb05 	bl	80005bc <USART_Init>
}
 8002fb2:	bf00      	nop
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40010800 	.word	0x40010800
 8002fc0:	40013800 	.word	0x40013800

08002fc4 <prvGPIOSetup>:

void prvGPIOSetup(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
	//Enable The clok for GPIOA , GPIOC
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
 8002fca:	2101      	movs	r1, #1
 8002fcc:	2004      	movs	r0, #4
 8002fce:	f7fd fad7 	bl	8000580 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC,ENABLE);
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	2010      	movs	r0, #16
 8002fd6:	f7fd fad3 	bl	8000580 <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef led_init , Button_init ;
	EXTI_InitTypeDef EXTI_initStruct;

	//initialize the LED PC13
	led_init.GPIO_Mode = GPIO_Mode_Out_PP ;
 8002fda:	2310      	movs	r3, #16
 8002fdc:	73fb      	strb	r3, [r7, #15]
	led_init.GPIO_Pin = GPIO_Pin_13 ;
 8002fde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fe2:	81bb      	strh	r3, [r7, #12]
	led_init.GPIO_Speed = GPIO_Speed_2MHz ;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	73bb      	strb	r3, [r7, #14]
	GPIO_Init(GPIOC,&led_init);
 8002fe8:	f107 030c 	add.w	r3, r7, #12
 8002fec:	4619      	mov	r1, r3
 8002fee:	4814      	ldr	r0, [pc, #80]	; (8003040 <prvGPIOSetup+0x7c>)
 8002ff0:	f7fd f948 	bl	8000284 <GPIO_Init>

	//initialize the Button PA5
	Button_init.GPIO_Mode = GPIO_Mode_IPD ; // input pull down
 8002ff4:	2328      	movs	r3, #40	; 0x28
 8002ff6:	72fb      	strb	r3, [r7, #11]
	Button_init.GPIO_Pin = GPIO_Pin_5 ;
 8002ff8:	2320      	movs	r3, #32
 8002ffa:	813b      	strh	r3, [r7, #8]
	Button_init.GPIO_Speed = GPIO_Speed_2MHz ;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOA,&Button_init);
 8003000:	f107 0308 	add.w	r3, r7, #8
 8003004:	4619      	mov	r1, r3
 8003006:	480f      	ldr	r0, [pc, #60]	; (8003044 <prvGPIOSetup+0x80>)
 8003008:	f7fd f93c 	bl	8000284 <GPIO_Init>
	//Interrupt Configuration for the Button (PA5)

	//1. System Configuration for EXTI Line (AFIO Settings)
	//Multiplexor select line 0(PA5)
	//check Reference Manual section External interrupt configuration register
	AFIO->EXTICR[4]=AFIO_EXTICR2_EXTI5_PA;
 800300c:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <prvGPIOSetup+0x84>)
 800300e:	2200      	movs	r2, #0
 8003010:	619a      	str	r2, [r3, #24]

	//2.EXTI Line init Struct Configuration settings
	EXTI_initStruct.EXTI_Line = EXTI_Line5 ;
 8003012:	2320      	movs	r3, #32
 8003014:	603b      	str	r3, [r7, #0]
	EXTI_initStruct.EXTI_Mode = EXTI_Mode_Interrupt ;
 8003016:	2300      	movs	r3, #0
 8003018:	713b      	strb	r3, [r7, #4]
	EXTI_initStruct.EXTI_Trigger = EXTI_Trigger_Rising ;
 800301a:	2308      	movs	r3, #8
 800301c:	717b      	strb	r3, [r7, #5]
	EXTI_initStruct.EXTI_LineCmd = ENABLE ;// unmask the interrupt
 800301e:	2301      	movs	r3, #1
 8003020:	71bb      	strb	r3, [r7, #6]
	EXTI_Init(&EXTI_initStruct);
 8003022:	463b      	mov	r3, r7
 8003024:	4618      	mov	r0, r3
 8003026:	f7fd f8ad 	bl	8000184 <EXTI_Init>

	//3. NVIC Settings (IRQ Settings for the Selected EXTI Line)
	NVIC_SetPriority(EXTI9_5_IRQn,5);
 800302a:	2105      	movs	r1, #5
 800302c:	2017      	movs	r0, #23
 800302e:	f7ff fe1f 	bl	8002c70 <NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003032:	2017      	movs	r0, #23
 8003034:	f7ff fe04 	bl	8002c40 <NVIC_EnableIRQ>
}
 8003038:	bf00      	nop
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40011000 	.word	0x40011000
 8003044:	40010800 	.word	0x40010800
 8003048:	40010000 	.word	0x40010000

0800304c <RTOS_Delay>:

void RTOS_Delay(uint32_t delay_in_ms)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
	// get the Global tick count value which is incremented by systic every 1ms
	uint32_t current_tick_count = xTaskGetTickCount();
 8003054:	f7fe f9e0 	bl	8001418 <xTaskGetTickCount>
 8003058:	60f8      	str	r0, [r7, #12]

	//configTICK_RATE_HZ/1000 will give us 1 (1ms)
	// Multiply 1 * delay_in_ms will get amount of delay in ms
	uint32_t delay_in_ticks = (delay_in_ms * configTICK_RATE_HZ)/1000 ;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003060:	fb02 f303 	mul.w	r3, r2, r3
 8003064:	4a08      	ldr	r2, [pc, #32]	; (8003088 <RTOS_Delay+0x3c>)
 8003066:	fba2 2303 	umull	r2, r3, r2, r3
 800306a:	099b      	lsrs	r3, r3, #6
 800306c:	60bb      	str	r3, [r7, #8]
	while(xTaskGetTickCount() < (current_tick_count + delay_in_ticks)) ;
 800306e:	bf00      	nop
 8003070:	f7fe f9d2 	bl	8001418 <xTaskGetTickCount>
 8003074:	4601      	mov	r1, r0
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4413      	add	r3, r2
 800307c:	4299      	cmp	r1, r3
 800307e:	d3f7      	bcc.n	8003070 <RTOS_Delay+0x24>
}
 8003080:	bf00      	nop
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	10624dd3 	.word	0x10624dd3

0800308c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800308c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003090:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003092:	e003      	b.n	800309c <LoopCopyDataInit>

08003094 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003094:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8003096:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003098:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800309a:	3104      	adds	r1, #4

0800309c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800309c:	480b      	ldr	r0, [pc, #44]	; (80030cc <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800309e:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80030a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80030a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80030a4:	d3f6      	bcc.n	8003094 <CopyDataInit>
	ldr	r2, =_sbss
 80030a6:	4a0b      	ldr	r2, [pc, #44]	; (80030d4 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80030a8:	e002      	b.n	80030b0 <LoopFillZerobss>

080030aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80030aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80030ac:	f842 3b04 	str.w	r3, [r2], #4

080030b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80030b0:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80030b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80030b4:	d3f9      	bcc.n	80030aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80030b6:	f000 f847 	bl	8003148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030ba:	f000 f8ff 	bl	80032bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030be:	f7ff fe01 	bl	8002cc4 <main>
	bx	lr
 80030c2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80030c4:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 80030c8:	08003cf0 	.word	0x08003cf0
	ldr	r0, =_sdata
 80030cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80030d0:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 80030d4:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 80030d8:	2000410c 	.word	0x2000410c

080030dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030dc:	e7fe      	b.n	80030dc <ADC1_2_IRQHandler>
	...

080030e0 <_sbrk>:
  /* Implement your write code here, this is used by puts and printf for example */
  return len;
}

caddr_t _sbrk(int32_t incr)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  extern uint32_t _Min_Heap_Size; /* _Min_Heap_Size symbol defined in the linker script. */
  extern uint8_t end asm("end");
  const uint8_t *max_heap = (uint8_t*)((uint32_t)&end + (uint32_t)&_Min_Heap_Size);
 80030e8:	4a13      	ldr	r2, [pc, #76]	; (8003138 <_sbrk+0x58>)
 80030ea:	4b14      	ldr	r3, [pc, #80]	; (800313c <_sbrk+0x5c>)
 80030ec:	4413      	add	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]
  static uint8_t *heap_end;
  uint8_t *prev_heap_end;

  if (heap_end == 0)
 80030f0:	4b13      	ldr	r3, [pc, #76]	; (8003140 <_sbrk+0x60>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d102      	bne.n	80030fe <_sbrk+0x1e>
    heap_end = &end;
 80030f8:	4b11      	ldr	r3, [pc, #68]	; (8003140 <_sbrk+0x60>)
 80030fa:	4a0f      	ldr	r2, [pc, #60]	; (8003138 <_sbrk+0x58>)
 80030fc:	601a      	str	r2, [r3, #0]

  prev_heap_end = heap_end;
 80030fe:	4b10      	ldr	r3, [pc, #64]	; (8003140 <_sbrk+0x60>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	60bb      	str	r3, [r7, #8]
  if (heap_end + incr > max_heap)
 8003104:	4b0e      	ldr	r3, [pc, #56]	; (8003140 <_sbrk+0x60>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	441a      	add	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	429a      	cmp	r2, r3
 8003110:	d905      	bls.n	800311e <_sbrk+0x3e>
  {
//    write(1, "Heap and stack collision\n", 25);
//    abort();
    errno = ENOMEM;
 8003112:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <_sbrk+0x64>)
 8003114:	220c      	movs	r2, #12
 8003116:	601a      	str	r2, [r3, #0]
    return (caddr_t) -1;
 8003118:	f04f 33ff 	mov.w	r3, #4294967295
 800311c:	e006      	b.n	800312c <_sbrk+0x4c>
  }

  heap_end += incr;
 800311e:	4b08      	ldr	r3, [pc, #32]	; (8003140 <_sbrk+0x60>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4413      	add	r3, r2
 8003126:	4a06      	ldr	r2, [pc, #24]	; (8003140 <_sbrk+0x60>)
 8003128:	6013      	str	r3, [r2, #0]

  return (caddr_t) prev_heap_end;
 800312a:	68bb      	ldr	r3, [r7, #8]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	2000410c 	.word	0x2000410c
 800313c:	00000000 	.word	0x00000000
 8003140:	20003f8c 	.word	0x20003f8c
 8003144:	20004108 	.word	0x20004108

08003148 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800314c:	4a15      	ldr	r2, [pc, #84]	; (80031a4 <SystemInit+0x5c>)
 800314e:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <SystemInit+0x5c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8003158:	4912      	ldr	r1, [pc, #72]	; (80031a4 <SystemInit+0x5c>)
 800315a:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <SystemInit+0x5c>)
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	4b12      	ldr	r3, [pc, #72]	; (80031a8 <SystemInit+0x60>)
 8003160:	4013      	ands	r3, r2
 8003162:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003164:	4a0f      	ldr	r2, [pc, #60]	; (80031a4 <SystemInit+0x5c>)
 8003166:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <SystemInit+0x5c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800316e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003172:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003174:	4a0b      	ldr	r2, [pc, #44]	; (80031a4 <SystemInit+0x5c>)
 8003176:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <SystemInit+0x5c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800317e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8003180:	4a08      	ldr	r2, [pc, #32]	; (80031a4 <SystemInit+0x5c>)
 8003182:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <SystemInit+0x5c>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800318a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800318c:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <SystemInit+0x5c>)
 800318e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003192:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8003194:	f000 f80c 	bl	80031b0 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003198:	4b04      	ldr	r3, [pc, #16]	; (80031ac <SystemInit+0x64>)
 800319a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800319e:	609a      	str	r2, [r3, #8]
#endif 
}
 80031a0:	bf00      	nop
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40021000 	.word	0x40021000
 80031a8:	f8ff0000 	.word	0xf8ff0000
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80031b4:	f000 f802 	bl	80031bc <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80031b8:	bf00      	nop
 80031ba:	bd80      	pop	{r7, pc}

080031bc <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	607b      	str	r3, [r7, #4]
 80031c6:	2300      	movs	r3, #0
 80031c8:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80031ca:	4a3a      	ldr	r2, [pc, #232]	; (80032b4 <SetSysClockTo72+0xf8>)
 80031cc:	4b39      	ldr	r3, [pc, #228]	; (80032b4 <SetSysClockTo72+0xf8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80031d6:	4b37      	ldr	r3, [pc, #220]	; (80032b4 <SetSysClockTo72+0xf8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3301      	adds	r3, #1
 80031e4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d103      	bne.n	80031f4 <SetSysClockTo72+0x38>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80031f2:	d1f0      	bne.n	80031d6 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80031f4:	4b2f      	ldr	r3, [pc, #188]	; (80032b4 <SetSysClockTo72+0xf8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003200:	2301      	movs	r3, #1
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	e001      	b.n	800320a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003206:	2300      	movs	r3, #0
 8003208:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d14b      	bne.n	80032a8 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8003210:	4a29      	ldr	r2, [pc, #164]	; (80032b8 <SetSysClockTo72+0xfc>)
 8003212:	4b29      	ldr	r3, [pc, #164]	; (80032b8 <SetSysClockTo72+0xfc>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f043 0310 	orr.w	r3, r3, #16
 800321a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800321c:	4a26      	ldr	r2, [pc, #152]	; (80032b8 <SetSysClockTo72+0xfc>)
 800321e:	4b26      	ldr	r3, [pc, #152]	; (80032b8 <SetSysClockTo72+0xfc>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 0303 	bic.w	r3, r3, #3
 8003226:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8003228:	4a23      	ldr	r2, [pc, #140]	; (80032b8 <SetSysClockTo72+0xfc>)
 800322a:	4b23      	ldr	r3, [pc, #140]	; (80032b8 <SetSysClockTo72+0xfc>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f043 0302 	orr.w	r3, r3, #2
 8003232:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8003234:	4a1f      	ldr	r2, [pc, #124]	; (80032b4 <SetSysClockTo72+0xf8>)
 8003236:	4b1f      	ldr	r3, [pc, #124]	; (80032b4 <SetSysClockTo72+0xf8>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800323c:	4a1d      	ldr	r2, [pc, #116]	; (80032b4 <SetSysClockTo72+0xf8>)
 800323e:	4b1d      	ldr	r3, [pc, #116]	; (80032b4 <SetSysClockTo72+0xf8>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8003244:	4a1b      	ldr	r2, [pc, #108]	; (80032b4 <SetSysClockTo72+0xf8>)
 8003246:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <SetSysClockTo72+0xf8>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800324e:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8003250:	4a18      	ldr	r2, [pc, #96]	; (80032b4 <SetSysClockTo72+0xf8>)
 8003252:	4b18      	ldr	r3, [pc, #96]	; (80032b4 <SetSysClockTo72+0xf8>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800325a:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 800325c:	4a15      	ldr	r2, [pc, #84]	; (80032b4 <SetSysClockTo72+0xf8>)
 800325e:	4b15      	ldr	r3, [pc, #84]	; (80032b4 <SetSysClockTo72+0xf8>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8003266:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003268:	4a12      	ldr	r2, [pc, #72]	; (80032b4 <SetSysClockTo72+0xf8>)
 800326a:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <SetSysClockTo72+0xf8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003272:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003274:	bf00      	nop
 8003276:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <SetSysClockTo72+0xf8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f9      	beq.n	8003276 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003282:	4a0c      	ldr	r2, [pc, #48]	; (80032b4 <SetSysClockTo72+0xf8>)
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <SetSysClockTo72+0xf8>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f023 0303 	bic.w	r3, r3, #3
 800328c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800328e:	4a09      	ldr	r2, [pc, #36]	; (80032b4 <SetSysClockTo72+0xf8>)
 8003290:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <SetSysClockTo72+0xf8>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f043 0302 	orr.w	r3, r3, #2
 8003298:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800329a:	bf00      	nop
 800329c:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <SetSysClockTo72+0xf8>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 030c 	and.w	r3, r3, #12
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d1f9      	bne.n	800329c <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40022000 	.word	0x40022000

080032bc <__libc_init_array>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	2500      	movs	r5, #0
 80032c0:	4e0c      	ldr	r6, [pc, #48]	; (80032f4 <__libc_init_array+0x38>)
 80032c2:	4c0d      	ldr	r4, [pc, #52]	; (80032f8 <__libc_init_array+0x3c>)
 80032c4:	1ba4      	subs	r4, r4, r6
 80032c6:	10a4      	asrs	r4, r4, #2
 80032c8:	42a5      	cmp	r5, r4
 80032ca:	d109      	bne.n	80032e0 <__libc_init_array+0x24>
 80032cc:	f000 fc5c 	bl	8003b88 <_init>
 80032d0:	2500      	movs	r5, #0
 80032d2:	4e0a      	ldr	r6, [pc, #40]	; (80032fc <__libc_init_array+0x40>)
 80032d4:	4c0a      	ldr	r4, [pc, #40]	; (8003300 <__libc_init_array+0x44>)
 80032d6:	1ba4      	subs	r4, r4, r6
 80032d8:	10a4      	asrs	r4, r4, #2
 80032da:	42a5      	cmp	r5, r4
 80032dc:	d105      	bne.n	80032ea <__libc_init_array+0x2e>
 80032de:	bd70      	pop	{r4, r5, r6, pc}
 80032e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032e4:	4798      	blx	r3
 80032e6:	3501      	adds	r5, #1
 80032e8:	e7ee      	b.n	80032c8 <__libc_init_array+0xc>
 80032ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032ee:	4798      	blx	r3
 80032f0:	3501      	adds	r5, #1
 80032f2:	e7f2      	b.n	80032da <__libc_init_array+0x1e>
 80032f4:	08003ce8 	.word	0x08003ce8
 80032f8:	08003ce8 	.word	0x08003ce8
 80032fc:	08003ce8 	.word	0x08003ce8
 8003300:	08003cec 	.word	0x08003cec

08003304 <memcmp>:
 8003304:	b510      	push	{r4, lr}
 8003306:	3901      	subs	r1, #1
 8003308:	4402      	add	r2, r0
 800330a:	4290      	cmp	r0, r2
 800330c:	d101      	bne.n	8003312 <memcmp+0xe>
 800330e:	2000      	movs	r0, #0
 8003310:	bd10      	pop	{r4, pc}
 8003312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003316:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800331a:	42a3      	cmp	r3, r4
 800331c:	d0f5      	beq.n	800330a <memcmp+0x6>
 800331e:	1b18      	subs	r0, r3, r4
 8003320:	bd10      	pop	{r4, pc}

08003322 <memcpy>:
 8003322:	b510      	push	{r4, lr}
 8003324:	1e43      	subs	r3, r0, #1
 8003326:	440a      	add	r2, r1
 8003328:	4291      	cmp	r1, r2
 800332a:	d100      	bne.n	800332e <memcpy+0xc>
 800332c:	bd10      	pop	{r4, pc}
 800332e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003332:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003336:	e7f7      	b.n	8003328 <memcpy+0x6>

08003338 <memset>:
 8003338:	4603      	mov	r3, r0
 800333a:	4402      	add	r2, r0
 800333c:	4293      	cmp	r3, r2
 800333e:	d100      	bne.n	8003342 <memset+0xa>
 8003340:	4770      	bx	lr
 8003342:	f803 1b01 	strb.w	r1, [r3], #1
 8003346:	e7f9      	b.n	800333c <memset+0x4>

08003348 <siprintf>:
 8003348:	b40e      	push	{r1, r2, r3}
 800334a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800334e:	b500      	push	{lr}
 8003350:	b09c      	sub	sp, #112	; 0x70
 8003352:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003356:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800335a:	9104      	str	r1, [sp, #16]
 800335c:	9107      	str	r1, [sp, #28]
 800335e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003362:	ab1d      	add	r3, sp, #116	; 0x74
 8003364:	9002      	str	r0, [sp, #8]
 8003366:	9006      	str	r0, [sp, #24]
 8003368:	4808      	ldr	r0, [pc, #32]	; (800338c <siprintf+0x44>)
 800336a:	f853 2b04 	ldr.w	r2, [r3], #4
 800336e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003372:	6800      	ldr	r0, [r0, #0]
 8003374:	a902      	add	r1, sp, #8
 8003376:	9301      	str	r3, [sp, #4]
 8003378:	f000 f910 	bl	800359c <_svfiprintf_r>
 800337c:	2200      	movs	r2, #0
 800337e:	9b02      	ldr	r3, [sp, #8]
 8003380:	701a      	strb	r2, [r3, #0]
 8003382:	b01c      	add	sp, #112	; 0x70
 8003384:	f85d eb04 	ldr.w	lr, [sp], #4
 8003388:	b003      	add	sp, #12
 800338a:	4770      	bx	lr
 800338c:	20000018 	.word	0x20000018

08003390 <_free_r>:
 8003390:	b538      	push	{r3, r4, r5, lr}
 8003392:	4605      	mov	r5, r0
 8003394:	2900      	cmp	r1, #0
 8003396:	d043      	beq.n	8003420 <_free_r+0x90>
 8003398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800339c:	1f0c      	subs	r4, r1, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	bfb8      	it	lt
 80033a2:	18e4      	addlt	r4, r4, r3
 80033a4:	f000 fbbe 	bl	8003b24 <__malloc_lock>
 80033a8:	4a1e      	ldr	r2, [pc, #120]	; (8003424 <_free_r+0x94>)
 80033aa:	6813      	ldr	r3, [r2, #0]
 80033ac:	4610      	mov	r0, r2
 80033ae:	b933      	cbnz	r3, 80033be <_free_r+0x2e>
 80033b0:	6063      	str	r3, [r4, #4]
 80033b2:	6014      	str	r4, [r2, #0]
 80033b4:	4628      	mov	r0, r5
 80033b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033ba:	f000 bbb4 	b.w	8003b26 <__malloc_unlock>
 80033be:	42a3      	cmp	r3, r4
 80033c0:	d90b      	bls.n	80033da <_free_r+0x4a>
 80033c2:	6821      	ldr	r1, [r4, #0]
 80033c4:	1862      	adds	r2, r4, r1
 80033c6:	4293      	cmp	r3, r2
 80033c8:	bf01      	itttt	eq
 80033ca:	681a      	ldreq	r2, [r3, #0]
 80033cc:	685b      	ldreq	r3, [r3, #4]
 80033ce:	1852      	addeq	r2, r2, r1
 80033d0:	6022      	streq	r2, [r4, #0]
 80033d2:	6063      	str	r3, [r4, #4]
 80033d4:	6004      	str	r4, [r0, #0]
 80033d6:	e7ed      	b.n	80033b4 <_free_r+0x24>
 80033d8:	4613      	mov	r3, r2
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	b10a      	cbz	r2, 80033e2 <_free_r+0x52>
 80033de:	42a2      	cmp	r2, r4
 80033e0:	d9fa      	bls.n	80033d8 <_free_r+0x48>
 80033e2:	6819      	ldr	r1, [r3, #0]
 80033e4:	1858      	adds	r0, r3, r1
 80033e6:	42a0      	cmp	r0, r4
 80033e8:	d10b      	bne.n	8003402 <_free_r+0x72>
 80033ea:	6820      	ldr	r0, [r4, #0]
 80033ec:	4401      	add	r1, r0
 80033ee:	1858      	adds	r0, r3, r1
 80033f0:	4282      	cmp	r2, r0
 80033f2:	6019      	str	r1, [r3, #0]
 80033f4:	d1de      	bne.n	80033b4 <_free_r+0x24>
 80033f6:	6810      	ldr	r0, [r2, #0]
 80033f8:	6852      	ldr	r2, [r2, #4]
 80033fa:	4401      	add	r1, r0
 80033fc:	6019      	str	r1, [r3, #0]
 80033fe:	605a      	str	r2, [r3, #4]
 8003400:	e7d8      	b.n	80033b4 <_free_r+0x24>
 8003402:	d902      	bls.n	800340a <_free_r+0x7a>
 8003404:	230c      	movs	r3, #12
 8003406:	602b      	str	r3, [r5, #0]
 8003408:	e7d4      	b.n	80033b4 <_free_r+0x24>
 800340a:	6820      	ldr	r0, [r4, #0]
 800340c:	1821      	adds	r1, r4, r0
 800340e:	428a      	cmp	r2, r1
 8003410:	bf01      	itttt	eq
 8003412:	6811      	ldreq	r1, [r2, #0]
 8003414:	6852      	ldreq	r2, [r2, #4]
 8003416:	1809      	addeq	r1, r1, r0
 8003418:	6021      	streq	r1, [r4, #0]
 800341a:	6062      	str	r2, [r4, #4]
 800341c:	605c      	str	r4, [r3, #4]
 800341e:	e7c9      	b.n	80033b4 <_free_r+0x24>
 8003420:	bd38      	pop	{r3, r4, r5, pc}
 8003422:	bf00      	nop
 8003424:	20003f90 	.word	0x20003f90

08003428 <_malloc_r>:
 8003428:	b570      	push	{r4, r5, r6, lr}
 800342a:	1ccd      	adds	r5, r1, #3
 800342c:	f025 0503 	bic.w	r5, r5, #3
 8003430:	3508      	adds	r5, #8
 8003432:	2d0c      	cmp	r5, #12
 8003434:	bf38      	it	cc
 8003436:	250c      	movcc	r5, #12
 8003438:	2d00      	cmp	r5, #0
 800343a:	4606      	mov	r6, r0
 800343c:	db01      	blt.n	8003442 <_malloc_r+0x1a>
 800343e:	42a9      	cmp	r1, r5
 8003440:	d903      	bls.n	800344a <_malloc_r+0x22>
 8003442:	230c      	movs	r3, #12
 8003444:	6033      	str	r3, [r6, #0]
 8003446:	2000      	movs	r0, #0
 8003448:	bd70      	pop	{r4, r5, r6, pc}
 800344a:	f000 fb6b 	bl	8003b24 <__malloc_lock>
 800344e:	4a23      	ldr	r2, [pc, #140]	; (80034dc <_malloc_r+0xb4>)
 8003450:	6814      	ldr	r4, [r2, #0]
 8003452:	4621      	mov	r1, r4
 8003454:	b991      	cbnz	r1, 800347c <_malloc_r+0x54>
 8003456:	4c22      	ldr	r4, [pc, #136]	; (80034e0 <_malloc_r+0xb8>)
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	b91b      	cbnz	r3, 8003464 <_malloc_r+0x3c>
 800345c:	4630      	mov	r0, r6
 800345e:	f000 fb29 	bl	8003ab4 <_sbrk_r>
 8003462:	6020      	str	r0, [r4, #0]
 8003464:	4629      	mov	r1, r5
 8003466:	4630      	mov	r0, r6
 8003468:	f000 fb24 	bl	8003ab4 <_sbrk_r>
 800346c:	1c43      	adds	r3, r0, #1
 800346e:	d126      	bne.n	80034be <_malloc_r+0x96>
 8003470:	230c      	movs	r3, #12
 8003472:	4630      	mov	r0, r6
 8003474:	6033      	str	r3, [r6, #0]
 8003476:	f000 fb56 	bl	8003b26 <__malloc_unlock>
 800347a:	e7e4      	b.n	8003446 <_malloc_r+0x1e>
 800347c:	680b      	ldr	r3, [r1, #0]
 800347e:	1b5b      	subs	r3, r3, r5
 8003480:	d41a      	bmi.n	80034b8 <_malloc_r+0x90>
 8003482:	2b0b      	cmp	r3, #11
 8003484:	d90f      	bls.n	80034a6 <_malloc_r+0x7e>
 8003486:	600b      	str	r3, [r1, #0]
 8003488:	18cc      	adds	r4, r1, r3
 800348a:	50cd      	str	r5, [r1, r3]
 800348c:	4630      	mov	r0, r6
 800348e:	f000 fb4a 	bl	8003b26 <__malloc_unlock>
 8003492:	f104 000b 	add.w	r0, r4, #11
 8003496:	1d23      	adds	r3, r4, #4
 8003498:	f020 0007 	bic.w	r0, r0, #7
 800349c:	1ac3      	subs	r3, r0, r3
 800349e:	d01b      	beq.n	80034d8 <_malloc_r+0xb0>
 80034a0:	425a      	negs	r2, r3
 80034a2:	50e2      	str	r2, [r4, r3]
 80034a4:	bd70      	pop	{r4, r5, r6, pc}
 80034a6:	428c      	cmp	r4, r1
 80034a8:	bf0b      	itete	eq
 80034aa:	6863      	ldreq	r3, [r4, #4]
 80034ac:	684b      	ldrne	r3, [r1, #4]
 80034ae:	6013      	streq	r3, [r2, #0]
 80034b0:	6063      	strne	r3, [r4, #4]
 80034b2:	bf18      	it	ne
 80034b4:	460c      	movne	r4, r1
 80034b6:	e7e9      	b.n	800348c <_malloc_r+0x64>
 80034b8:	460c      	mov	r4, r1
 80034ba:	6849      	ldr	r1, [r1, #4]
 80034bc:	e7ca      	b.n	8003454 <_malloc_r+0x2c>
 80034be:	1cc4      	adds	r4, r0, #3
 80034c0:	f024 0403 	bic.w	r4, r4, #3
 80034c4:	42a0      	cmp	r0, r4
 80034c6:	d005      	beq.n	80034d4 <_malloc_r+0xac>
 80034c8:	1a21      	subs	r1, r4, r0
 80034ca:	4630      	mov	r0, r6
 80034cc:	f000 faf2 	bl	8003ab4 <_sbrk_r>
 80034d0:	3001      	adds	r0, #1
 80034d2:	d0cd      	beq.n	8003470 <_malloc_r+0x48>
 80034d4:	6025      	str	r5, [r4, #0]
 80034d6:	e7d9      	b.n	800348c <_malloc_r+0x64>
 80034d8:	bd70      	pop	{r4, r5, r6, pc}
 80034da:	bf00      	nop
 80034dc:	20003f90 	.word	0x20003f90
 80034e0:	20003f94 	.word	0x20003f94

080034e4 <__ssputs_r>:
 80034e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034e8:	688e      	ldr	r6, [r1, #8]
 80034ea:	4682      	mov	sl, r0
 80034ec:	429e      	cmp	r6, r3
 80034ee:	460c      	mov	r4, r1
 80034f0:	4691      	mov	r9, r2
 80034f2:	4698      	mov	r8, r3
 80034f4:	d835      	bhi.n	8003562 <__ssputs_r+0x7e>
 80034f6:	898a      	ldrh	r2, [r1, #12]
 80034f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034fc:	d031      	beq.n	8003562 <__ssputs_r+0x7e>
 80034fe:	2302      	movs	r3, #2
 8003500:	6825      	ldr	r5, [r4, #0]
 8003502:	6909      	ldr	r1, [r1, #16]
 8003504:	1a6f      	subs	r7, r5, r1
 8003506:	6965      	ldr	r5, [r4, #20]
 8003508:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800350c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003510:	f108 0301 	add.w	r3, r8, #1
 8003514:	443b      	add	r3, r7
 8003516:	429d      	cmp	r5, r3
 8003518:	bf38      	it	cc
 800351a:	461d      	movcc	r5, r3
 800351c:	0553      	lsls	r3, r2, #21
 800351e:	d531      	bpl.n	8003584 <__ssputs_r+0xa0>
 8003520:	4629      	mov	r1, r5
 8003522:	f7ff ff81 	bl	8003428 <_malloc_r>
 8003526:	4606      	mov	r6, r0
 8003528:	b950      	cbnz	r0, 8003540 <__ssputs_r+0x5c>
 800352a:	230c      	movs	r3, #12
 800352c:	f8ca 3000 	str.w	r3, [sl]
 8003530:	89a3      	ldrh	r3, [r4, #12]
 8003532:	f04f 30ff 	mov.w	r0, #4294967295
 8003536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800353a:	81a3      	strh	r3, [r4, #12]
 800353c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003540:	463a      	mov	r2, r7
 8003542:	6921      	ldr	r1, [r4, #16]
 8003544:	f7ff feed 	bl	8003322 <memcpy>
 8003548:	89a3      	ldrh	r3, [r4, #12]
 800354a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800354e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003552:	81a3      	strh	r3, [r4, #12]
 8003554:	6126      	str	r6, [r4, #16]
 8003556:	443e      	add	r6, r7
 8003558:	6026      	str	r6, [r4, #0]
 800355a:	4646      	mov	r6, r8
 800355c:	6165      	str	r5, [r4, #20]
 800355e:	1bed      	subs	r5, r5, r7
 8003560:	60a5      	str	r5, [r4, #8]
 8003562:	4546      	cmp	r6, r8
 8003564:	bf28      	it	cs
 8003566:	4646      	movcs	r6, r8
 8003568:	4649      	mov	r1, r9
 800356a:	4632      	mov	r2, r6
 800356c:	6820      	ldr	r0, [r4, #0]
 800356e:	f000 fabf 	bl	8003af0 <memmove>
 8003572:	68a3      	ldr	r3, [r4, #8]
 8003574:	2000      	movs	r0, #0
 8003576:	1b9b      	subs	r3, r3, r6
 8003578:	60a3      	str	r3, [r4, #8]
 800357a:	6823      	ldr	r3, [r4, #0]
 800357c:	441e      	add	r6, r3
 800357e:	6026      	str	r6, [r4, #0]
 8003580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003584:	462a      	mov	r2, r5
 8003586:	f000 facf 	bl	8003b28 <_realloc_r>
 800358a:	4606      	mov	r6, r0
 800358c:	2800      	cmp	r0, #0
 800358e:	d1e1      	bne.n	8003554 <__ssputs_r+0x70>
 8003590:	6921      	ldr	r1, [r4, #16]
 8003592:	4650      	mov	r0, sl
 8003594:	f7ff fefc 	bl	8003390 <_free_r>
 8003598:	e7c7      	b.n	800352a <__ssputs_r+0x46>
	...

0800359c <_svfiprintf_r>:
 800359c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035a0:	b09d      	sub	sp, #116	; 0x74
 80035a2:	9303      	str	r3, [sp, #12]
 80035a4:	898b      	ldrh	r3, [r1, #12]
 80035a6:	4680      	mov	r8, r0
 80035a8:	061c      	lsls	r4, r3, #24
 80035aa:	460d      	mov	r5, r1
 80035ac:	4616      	mov	r6, r2
 80035ae:	d50f      	bpl.n	80035d0 <_svfiprintf_r+0x34>
 80035b0:	690b      	ldr	r3, [r1, #16]
 80035b2:	b96b      	cbnz	r3, 80035d0 <_svfiprintf_r+0x34>
 80035b4:	2140      	movs	r1, #64	; 0x40
 80035b6:	f7ff ff37 	bl	8003428 <_malloc_r>
 80035ba:	6028      	str	r0, [r5, #0]
 80035bc:	6128      	str	r0, [r5, #16]
 80035be:	b928      	cbnz	r0, 80035cc <_svfiprintf_r+0x30>
 80035c0:	230c      	movs	r3, #12
 80035c2:	f8c8 3000 	str.w	r3, [r8]
 80035c6:	f04f 30ff 	mov.w	r0, #4294967295
 80035ca:	e0c4      	b.n	8003756 <_svfiprintf_r+0x1ba>
 80035cc:	2340      	movs	r3, #64	; 0x40
 80035ce:	616b      	str	r3, [r5, #20]
 80035d0:	2300      	movs	r3, #0
 80035d2:	9309      	str	r3, [sp, #36]	; 0x24
 80035d4:	2320      	movs	r3, #32
 80035d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035da:	2330      	movs	r3, #48	; 0x30
 80035dc:	f04f 0b01 	mov.w	fp, #1
 80035e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035e4:	4637      	mov	r7, r6
 80035e6:	463c      	mov	r4, r7
 80035e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d13c      	bne.n	800366a <_svfiprintf_r+0xce>
 80035f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80035f4:	d00b      	beq.n	800360e <_svfiprintf_r+0x72>
 80035f6:	4653      	mov	r3, sl
 80035f8:	4632      	mov	r2, r6
 80035fa:	4629      	mov	r1, r5
 80035fc:	4640      	mov	r0, r8
 80035fe:	f7ff ff71 	bl	80034e4 <__ssputs_r>
 8003602:	3001      	adds	r0, #1
 8003604:	f000 80a2 	beq.w	800374c <_svfiprintf_r+0x1b0>
 8003608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800360a:	4453      	add	r3, sl
 800360c:	9309      	str	r3, [sp, #36]	; 0x24
 800360e:	783b      	ldrb	r3, [r7, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 809b 	beq.w	800374c <_svfiprintf_r+0x1b0>
 8003616:	2300      	movs	r3, #0
 8003618:	f04f 32ff 	mov.w	r2, #4294967295
 800361c:	9304      	str	r3, [sp, #16]
 800361e:	9307      	str	r3, [sp, #28]
 8003620:	9205      	str	r2, [sp, #20]
 8003622:	9306      	str	r3, [sp, #24]
 8003624:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003628:	931a      	str	r3, [sp, #104]	; 0x68
 800362a:	2205      	movs	r2, #5
 800362c:	7821      	ldrb	r1, [r4, #0]
 800362e:	4850      	ldr	r0, [pc, #320]	; (8003770 <_svfiprintf_r+0x1d4>)
 8003630:	f000 fa50 	bl	8003ad4 <memchr>
 8003634:	1c67      	adds	r7, r4, #1
 8003636:	9b04      	ldr	r3, [sp, #16]
 8003638:	b9d8      	cbnz	r0, 8003672 <_svfiprintf_r+0xd6>
 800363a:	06d9      	lsls	r1, r3, #27
 800363c:	bf44      	itt	mi
 800363e:	2220      	movmi	r2, #32
 8003640:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003644:	071a      	lsls	r2, r3, #28
 8003646:	bf44      	itt	mi
 8003648:	222b      	movmi	r2, #43	; 0x2b
 800364a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800364e:	7822      	ldrb	r2, [r4, #0]
 8003650:	2a2a      	cmp	r2, #42	; 0x2a
 8003652:	d016      	beq.n	8003682 <_svfiprintf_r+0xe6>
 8003654:	2100      	movs	r1, #0
 8003656:	200a      	movs	r0, #10
 8003658:	9a07      	ldr	r2, [sp, #28]
 800365a:	4627      	mov	r7, r4
 800365c:	783b      	ldrb	r3, [r7, #0]
 800365e:	3401      	adds	r4, #1
 8003660:	3b30      	subs	r3, #48	; 0x30
 8003662:	2b09      	cmp	r3, #9
 8003664:	d950      	bls.n	8003708 <_svfiprintf_r+0x16c>
 8003666:	b1c9      	cbz	r1, 800369c <_svfiprintf_r+0x100>
 8003668:	e011      	b.n	800368e <_svfiprintf_r+0xf2>
 800366a:	2b25      	cmp	r3, #37	; 0x25
 800366c:	d0c0      	beq.n	80035f0 <_svfiprintf_r+0x54>
 800366e:	4627      	mov	r7, r4
 8003670:	e7b9      	b.n	80035e6 <_svfiprintf_r+0x4a>
 8003672:	4a3f      	ldr	r2, [pc, #252]	; (8003770 <_svfiprintf_r+0x1d4>)
 8003674:	463c      	mov	r4, r7
 8003676:	1a80      	subs	r0, r0, r2
 8003678:	fa0b f000 	lsl.w	r0, fp, r0
 800367c:	4318      	orrs	r0, r3
 800367e:	9004      	str	r0, [sp, #16]
 8003680:	e7d3      	b.n	800362a <_svfiprintf_r+0x8e>
 8003682:	9a03      	ldr	r2, [sp, #12]
 8003684:	1d11      	adds	r1, r2, #4
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	9103      	str	r1, [sp, #12]
 800368a:	2a00      	cmp	r2, #0
 800368c:	db01      	blt.n	8003692 <_svfiprintf_r+0xf6>
 800368e:	9207      	str	r2, [sp, #28]
 8003690:	e004      	b.n	800369c <_svfiprintf_r+0x100>
 8003692:	4252      	negs	r2, r2
 8003694:	f043 0302 	orr.w	r3, r3, #2
 8003698:	9207      	str	r2, [sp, #28]
 800369a:	9304      	str	r3, [sp, #16]
 800369c:	783b      	ldrb	r3, [r7, #0]
 800369e:	2b2e      	cmp	r3, #46	; 0x2e
 80036a0:	d10d      	bne.n	80036be <_svfiprintf_r+0x122>
 80036a2:	787b      	ldrb	r3, [r7, #1]
 80036a4:	1c79      	adds	r1, r7, #1
 80036a6:	2b2a      	cmp	r3, #42	; 0x2a
 80036a8:	d132      	bne.n	8003710 <_svfiprintf_r+0x174>
 80036aa:	9b03      	ldr	r3, [sp, #12]
 80036ac:	3702      	adds	r7, #2
 80036ae:	1d1a      	adds	r2, r3, #4
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	9203      	str	r2, [sp, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bfb8      	it	lt
 80036b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80036bc:	9305      	str	r3, [sp, #20]
 80036be:	4c2d      	ldr	r4, [pc, #180]	; (8003774 <_svfiprintf_r+0x1d8>)
 80036c0:	2203      	movs	r2, #3
 80036c2:	7839      	ldrb	r1, [r7, #0]
 80036c4:	4620      	mov	r0, r4
 80036c6:	f000 fa05 	bl	8003ad4 <memchr>
 80036ca:	b138      	cbz	r0, 80036dc <_svfiprintf_r+0x140>
 80036cc:	2340      	movs	r3, #64	; 0x40
 80036ce:	1b00      	subs	r0, r0, r4
 80036d0:	fa03 f000 	lsl.w	r0, r3, r0
 80036d4:	9b04      	ldr	r3, [sp, #16]
 80036d6:	3701      	adds	r7, #1
 80036d8:	4303      	orrs	r3, r0
 80036da:	9304      	str	r3, [sp, #16]
 80036dc:	7839      	ldrb	r1, [r7, #0]
 80036de:	2206      	movs	r2, #6
 80036e0:	4825      	ldr	r0, [pc, #148]	; (8003778 <_svfiprintf_r+0x1dc>)
 80036e2:	1c7e      	adds	r6, r7, #1
 80036e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036e8:	f000 f9f4 	bl	8003ad4 <memchr>
 80036ec:	2800      	cmp	r0, #0
 80036ee:	d035      	beq.n	800375c <_svfiprintf_r+0x1c0>
 80036f0:	4b22      	ldr	r3, [pc, #136]	; (800377c <_svfiprintf_r+0x1e0>)
 80036f2:	b9fb      	cbnz	r3, 8003734 <_svfiprintf_r+0x198>
 80036f4:	9b03      	ldr	r3, [sp, #12]
 80036f6:	3307      	adds	r3, #7
 80036f8:	f023 0307 	bic.w	r3, r3, #7
 80036fc:	3308      	adds	r3, #8
 80036fe:	9303      	str	r3, [sp, #12]
 8003700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003702:	444b      	add	r3, r9
 8003704:	9309      	str	r3, [sp, #36]	; 0x24
 8003706:	e76d      	b.n	80035e4 <_svfiprintf_r+0x48>
 8003708:	fb00 3202 	mla	r2, r0, r2, r3
 800370c:	2101      	movs	r1, #1
 800370e:	e7a4      	b.n	800365a <_svfiprintf_r+0xbe>
 8003710:	2300      	movs	r3, #0
 8003712:	240a      	movs	r4, #10
 8003714:	4618      	mov	r0, r3
 8003716:	9305      	str	r3, [sp, #20]
 8003718:	460f      	mov	r7, r1
 800371a:	783a      	ldrb	r2, [r7, #0]
 800371c:	3101      	adds	r1, #1
 800371e:	3a30      	subs	r2, #48	; 0x30
 8003720:	2a09      	cmp	r2, #9
 8003722:	d903      	bls.n	800372c <_svfiprintf_r+0x190>
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0ca      	beq.n	80036be <_svfiprintf_r+0x122>
 8003728:	9005      	str	r0, [sp, #20]
 800372a:	e7c8      	b.n	80036be <_svfiprintf_r+0x122>
 800372c:	fb04 2000 	mla	r0, r4, r0, r2
 8003730:	2301      	movs	r3, #1
 8003732:	e7f1      	b.n	8003718 <_svfiprintf_r+0x17c>
 8003734:	ab03      	add	r3, sp, #12
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	462a      	mov	r2, r5
 800373a:	4b11      	ldr	r3, [pc, #68]	; (8003780 <_svfiprintf_r+0x1e4>)
 800373c:	a904      	add	r1, sp, #16
 800373e:	4640      	mov	r0, r8
 8003740:	f3af 8000 	nop.w
 8003744:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003748:	4681      	mov	r9, r0
 800374a:	d1d9      	bne.n	8003700 <_svfiprintf_r+0x164>
 800374c:	89ab      	ldrh	r3, [r5, #12]
 800374e:	065b      	lsls	r3, r3, #25
 8003750:	f53f af39 	bmi.w	80035c6 <_svfiprintf_r+0x2a>
 8003754:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003756:	b01d      	add	sp, #116	; 0x74
 8003758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800375c:	ab03      	add	r3, sp, #12
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	462a      	mov	r2, r5
 8003762:	4b07      	ldr	r3, [pc, #28]	; (8003780 <_svfiprintf_r+0x1e4>)
 8003764:	a904      	add	r1, sp, #16
 8003766:	4640      	mov	r0, r8
 8003768:	f000 f884 	bl	8003874 <_printf_i>
 800376c:	e7ea      	b.n	8003744 <_svfiprintf_r+0x1a8>
 800376e:	bf00      	nop
 8003770:	08003cb2 	.word	0x08003cb2
 8003774:	08003cb8 	.word	0x08003cb8
 8003778:	08003cbc 	.word	0x08003cbc
 800377c:	00000000 	.word	0x00000000
 8003780:	080034e5 	.word	0x080034e5

08003784 <_printf_common>:
 8003784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003788:	4691      	mov	r9, r2
 800378a:	461f      	mov	r7, r3
 800378c:	688a      	ldr	r2, [r1, #8]
 800378e:	690b      	ldr	r3, [r1, #16]
 8003790:	4606      	mov	r6, r0
 8003792:	4293      	cmp	r3, r2
 8003794:	bfb8      	it	lt
 8003796:	4613      	movlt	r3, r2
 8003798:	f8c9 3000 	str.w	r3, [r9]
 800379c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037a0:	460c      	mov	r4, r1
 80037a2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037a6:	b112      	cbz	r2, 80037ae <_printf_common+0x2a>
 80037a8:	3301      	adds	r3, #1
 80037aa:	f8c9 3000 	str.w	r3, [r9]
 80037ae:	6823      	ldr	r3, [r4, #0]
 80037b0:	0699      	lsls	r1, r3, #26
 80037b2:	bf42      	ittt	mi
 80037b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80037b8:	3302      	addmi	r3, #2
 80037ba:	f8c9 3000 	strmi.w	r3, [r9]
 80037be:	6825      	ldr	r5, [r4, #0]
 80037c0:	f015 0506 	ands.w	r5, r5, #6
 80037c4:	d107      	bne.n	80037d6 <_printf_common+0x52>
 80037c6:	f104 0a19 	add.w	sl, r4, #25
 80037ca:	68e3      	ldr	r3, [r4, #12]
 80037cc:	f8d9 2000 	ldr.w	r2, [r9]
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	429d      	cmp	r5, r3
 80037d4:	db2a      	blt.n	800382c <_printf_common+0xa8>
 80037d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80037da:	6822      	ldr	r2, [r4, #0]
 80037dc:	3300      	adds	r3, #0
 80037de:	bf18      	it	ne
 80037e0:	2301      	movne	r3, #1
 80037e2:	0692      	lsls	r2, r2, #26
 80037e4:	d42f      	bmi.n	8003846 <_printf_common+0xc2>
 80037e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037ea:	4639      	mov	r1, r7
 80037ec:	4630      	mov	r0, r6
 80037ee:	47c0      	blx	r8
 80037f0:	3001      	adds	r0, #1
 80037f2:	d022      	beq.n	800383a <_printf_common+0xb6>
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	68e5      	ldr	r5, [r4, #12]
 80037f8:	f003 0306 	and.w	r3, r3, #6
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	bf18      	it	ne
 8003800:	2500      	movne	r5, #0
 8003802:	f8d9 2000 	ldr.w	r2, [r9]
 8003806:	f04f 0900 	mov.w	r9, #0
 800380a:	bf08      	it	eq
 800380c:	1aad      	subeq	r5, r5, r2
 800380e:	68a3      	ldr	r3, [r4, #8]
 8003810:	6922      	ldr	r2, [r4, #16]
 8003812:	bf08      	it	eq
 8003814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003818:	4293      	cmp	r3, r2
 800381a:	bfc4      	itt	gt
 800381c:	1a9b      	subgt	r3, r3, r2
 800381e:	18ed      	addgt	r5, r5, r3
 8003820:	341a      	adds	r4, #26
 8003822:	454d      	cmp	r5, r9
 8003824:	d11b      	bne.n	800385e <_printf_common+0xda>
 8003826:	2000      	movs	r0, #0
 8003828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800382c:	2301      	movs	r3, #1
 800382e:	4652      	mov	r2, sl
 8003830:	4639      	mov	r1, r7
 8003832:	4630      	mov	r0, r6
 8003834:	47c0      	blx	r8
 8003836:	3001      	adds	r0, #1
 8003838:	d103      	bne.n	8003842 <_printf_common+0xbe>
 800383a:	f04f 30ff 	mov.w	r0, #4294967295
 800383e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003842:	3501      	adds	r5, #1
 8003844:	e7c1      	b.n	80037ca <_printf_common+0x46>
 8003846:	2030      	movs	r0, #48	; 0x30
 8003848:	18e1      	adds	r1, r4, r3
 800384a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003854:	4422      	add	r2, r4
 8003856:	3302      	adds	r3, #2
 8003858:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800385c:	e7c3      	b.n	80037e6 <_printf_common+0x62>
 800385e:	2301      	movs	r3, #1
 8003860:	4622      	mov	r2, r4
 8003862:	4639      	mov	r1, r7
 8003864:	4630      	mov	r0, r6
 8003866:	47c0      	blx	r8
 8003868:	3001      	adds	r0, #1
 800386a:	d0e6      	beq.n	800383a <_printf_common+0xb6>
 800386c:	f109 0901 	add.w	r9, r9, #1
 8003870:	e7d7      	b.n	8003822 <_printf_common+0x9e>
	...

08003874 <_printf_i>:
 8003874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003878:	4617      	mov	r7, r2
 800387a:	7e0a      	ldrb	r2, [r1, #24]
 800387c:	b085      	sub	sp, #20
 800387e:	2a6e      	cmp	r2, #110	; 0x6e
 8003880:	4698      	mov	r8, r3
 8003882:	4606      	mov	r6, r0
 8003884:	460c      	mov	r4, r1
 8003886:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003888:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800388c:	f000 80bc 	beq.w	8003a08 <_printf_i+0x194>
 8003890:	d81a      	bhi.n	80038c8 <_printf_i+0x54>
 8003892:	2a63      	cmp	r2, #99	; 0x63
 8003894:	d02e      	beq.n	80038f4 <_printf_i+0x80>
 8003896:	d80a      	bhi.n	80038ae <_printf_i+0x3a>
 8003898:	2a00      	cmp	r2, #0
 800389a:	f000 80c8 	beq.w	8003a2e <_printf_i+0x1ba>
 800389e:	2a58      	cmp	r2, #88	; 0x58
 80038a0:	f000 808a 	beq.w	80039b8 <_printf_i+0x144>
 80038a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038a8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80038ac:	e02a      	b.n	8003904 <_printf_i+0x90>
 80038ae:	2a64      	cmp	r2, #100	; 0x64
 80038b0:	d001      	beq.n	80038b6 <_printf_i+0x42>
 80038b2:	2a69      	cmp	r2, #105	; 0x69
 80038b4:	d1f6      	bne.n	80038a4 <_printf_i+0x30>
 80038b6:	6821      	ldr	r1, [r4, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	f011 0f80 	tst.w	r1, #128	; 0x80
 80038be:	d023      	beq.n	8003908 <_printf_i+0x94>
 80038c0:	1d11      	adds	r1, r2, #4
 80038c2:	6019      	str	r1, [r3, #0]
 80038c4:	6813      	ldr	r3, [r2, #0]
 80038c6:	e027      	b.n	8003918 <_printf_i+0xa4>
 80038c8:	2a73      	cmp	r2, #115	; 0x73
 80038ca:	f000 80b4 	beq.w	8003a36 <_printf_i+0x1c2>
 80038ce:	d808      	bhi.n	80038e2 <_printf_i+0x6e>
 80038d0:	2a6f      	cmp	r2, #111	; 0x6f
 80038d2:	d02a      	beq.n	800392a <_printf_i+0xb6>
 80038d4:	2a70      	cmp	r2, #112	; 0x70
 80038d6:	d1e5      	bne.n	80038a4 <_printf_i+0x30>
 80038d8:	680a      	ldr	r2, [r1, #0]
 80038da:	f042 0220 	orr.w	r2, r2, #32
 80038de:	600a      	str	r2, [r1, #0]
 80038e0:	e003      	b.n	80038ea <_printf_i+0x76>
 80038e2:	2a75      	cmp	r2, #117	; 0x75
 80038e4:	d021      	beq.n	800392a <_printf_i+0xb6>
 80038e6:	2a78      	cmp	r2, #120	; 0x78
 80038e8:	d1dc      	bne.n	80038a4 <_printf_i+0x30>
 80038ea:	2278      	movs	r2, #120	; 0x78
 80038ec:	496f      	ldr	r1, [pc, #444]	; (8003aac <_printf_i+0x238>)
 80038ee:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80038f2:	e064      	b.n	80039be <_printf_i+0x14a>
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80038fa:	1d11      	adds	r1, r2, #4
 80038fc:	6019      	str	r1, [r3, #0]
 80038fe:	6813      	ldr	r3, [r2, #0]
 8003900:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003904:	2301      	movs	r3, #1
 8003906:	e0a3      	b.n	8003a50 <_printf_i+0x1dc>
 8003908:	f011 0f40 	tst.w	r1, #64	; 0x40
 800390c:	f102 0104 	add.w	r1, r2, #4
 8003910:	6019      	str	r1, [r3, #0]
 8003912:	d0d7      	beq.n	80038c4 <_printf_i+0x50>
 8003914:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003918:	2b00      	cmp	r3, #0
 800391a:	da03      	bge.n	8003924 <_printf_i+0xb0>
 800391c:	222d      	movs	r2, #45	; 0x2d
 800391e:	425b      	negs	r3, r3
 8003920:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003924:	4962      	ldr	r1, [pc, #392]	; (8003ab0 <_printf_i+0x23c>)
 8003926:	220a      	movs	r2, #10
 8003928:	e017      	b.n	800395a <_printf_i+0xe6>
 800392a:	6820      	ldr	r0, [r4, #0]
 800392c:	6819      	ldr	r1, [r3, #0]
 800392e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003932:	d003      	beq.n	800393c <_printf_i+0xc8>
 8003934:	1d08      	adds	r0, r1, #4
 8003936:	6018      	str	r0, [r3, #0]
 8003938:	680b      	ldr	r3, [r1, #0]
 800393a:	e006      	b.n	800394a <_printf_i+0xd6>
 800393c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003940:	f101 0004 	add.w	r0, r1, #4
 8003944:	6018      	str	r0, [r3, #0]
 8003946:	d0f7      	beq.n	8003938 <_printf_i+0xc4>
 8003948:	880b      	ldrh	r3, [r1, #0]
 800394a:	2a6f      	cmp	r2, #111	; 0x6f
 800394c:	bf14      	ite	ne
 800394e:	220a      	movne	r2, #10
 8003950:	2208      	moveq	r2, #8
 8003952:	4957      	ldr	r1, [pc, #348]	; (8003ab0 <_printf_i+0x23c>)
 8003954:	2000      	movs	r0, #0
 8003956:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800395a:	6865      	ldr	r5, [r4, #4]
 800395c:	2d00      	cmp	r5, #0
 800395e:	60a5      	str	r5, [r4, #8]
 8003960:	f2c0 809c 	blt.w	8003a9c <_printf_i+0x228>
 8003964:	6820      	ldr	r0, [r4, #0]
 8003966:	f020 0004 	bic.w	r0, r0, #4
 800396a:	6020      	str	r0, [r4, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d13f      	bne.n	80039f0 <_printf_i+0x17c>
 8003970:	2d00      	cmp	r5, #0
 8003972:	f040 8095 	bne.w	8003aa0 <_printf_i+0x22c>
 8003976:	4675      	mov	r5, lr
 8003978:	2a08      	cmp	r2, #8
 800397a:	d10b      	bne.n	8003994 <_printf_i+0x120>
 800397c:	6823      	ldr	r3, [r4, #0]
 800397e:	07da      	lsls	r2, r3, #31
 8003980:	d508      	bpl.n	8003994 <_printf_i+0x120>
 8003982:	6923      	ldr	r3, [r4, #16]
 8003984:	6862      	ldr	r2, [r4, #4]
 8003986:	429a      	cmp	r2, r3
 8003988:	bfde      	ittt	le
 800398a:	2330      	movle	r3, #48	; 0x30
 800398c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003990:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003994:	ebae 0305 	sub.w	r3, lr, r5
 8003998:	6123      	str	r3, [r4, #16]
 800399a:	f8cd 8000 	str.w	r8, [sp]
 800399e:	463b      	mov	r3, r7
 80039a0:	aa03      	add	r2, sp, #12
 80039a2:	4621      	mov	r1, r4
 80039a4:	4630      	mov	r0, r6
 80039a6:	f7ff feed 	bl	8003784 <_printf_common>
 80039aa:	3001      	adds	r0, #1
 80039ac:	d155      	bne.n	8003a5a <_printf_i+0x1e6>
 80039ae:	f04f 30ff 	mov.w	r0, #4294967295
 80039b2:	b005      	add	sp, #20
 80039b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039b8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80039bc:	493c      	ldr	r1, [pc, #240]	; (8003ab0 <_printf_i+0x23c>)
 80039be:	6822      	ldr	r2, [r4, #0]
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80039c6:	f100 0504 	add.w	r5, r0, #4
 80039ca:	601d      	str	r5, [r3, #0]
 80039cc:	d001      	beq.n	80039d2 <_printf_i+0x15e>
 80039ce:	6803      	ldr	r3, [r0, #0]
 80039d0:	e002      	b.n	80039d8 <_printf_i+0x164>
 80039d2:	0655      	lsls	r5, r2, #25
 80039d4:	d5fb      	bpl.n	80039ce <_printf_i+0x15a>
 80039d6:	8803      	ldrh	r3, [r0, #0]
 80039d8:	07d0      	lsls	r0, r2, #31
 80039da:	bf44      	itt	mi
 80039dc:	f042 0220 	orrmi.w	r2, r2, #32
 80039e0:	6022      	strmi	r2, [r4, #0]
 80039e2:	b91b      	cbnz	r3, 80039ec <_printf_i+0x178>
 80039e4:	6822      	ldr	r2, [r4, #0]
 80039e6:	f022 0220 	bic.w	r2, r2, #32
 80039ea:	6022      	str	r2, [r4, #0]
 80039ec:	2210      	movs	r2, #16
 80039ee:	e7b1      	b.n	8003954 <_printf_i+0xe0>
 80039f0:	4675      	mov	r5, lr
 80039f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80039f6:	fb02 3310 	mls	r3, r2, r0, r3
 80039fa:	5ccb      	ldrb	r3, [r1, r3]
 80039fc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003a00:	4603      	mov	r3, r0
 8003a02:	2800      	cmp	r0, #0
 8003a04:	d1f5      	bne.n	80039f2 <_printf_i+0x17e>
 8003a06:	e7b7      	b.n	8003978 <_printf_i+0x104>
 8003a08:	6808      	ldr	r0, [r1, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003a10:	6949      	ldr	r1, [r1, #20]
 8003a12:	d004      	beq.n	8003a1e <_printf_i+0x1aa>
 8003a14:	1d10      	adds	r0, r2, #4
 8003a16:	6018      	str	r0, [r3, #0]
 8003a18:	6813      	ldr	r3, [r2, #0]
 8003a1a:	6019      	str	r1, [r3, #0]
 8003a1c:	e007      	b.n	8003a2e <_printf_i+0x1ba>
 8003a1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a22:	f102 0004 	add.w	r0, r2, #4
 8003a26:	6018      	str	r0, [r3, #0]
 8003a28:	6813      	ldr	r3, [r2, #0]
 8003a2a:	d0f6      	beq.n	8003a1a <_printf_i+0x1a6>
 8003a2c:	8019      	strh	r1, [r3, #0]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	4675      	mov	r5, lr
 8003a32:	6123      	str	r3, [r4, #16]
 8003a34:	e7b1      	b.n	800399a <_printf_i+0x126>
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	1d11      	adds	r1, r2, #4
 8003a3a:	6019      	str	r1, [r3, #0]
 8003a3c:	6815      	ldr	r5, [r2, #0]
 8003a3e:	2100      	movs	r1, #0
 8003a40:	6862      	ldr	r2, [r4, #4]
 8003a42:	4628      	mov	r0, r5
 8003a44:	f000 f846 	bl	8003ad4 <memchr>
 8003a48:	b108      	cbz	r0, 8003a4e <_printf_i+0x1da>
 8003a4a:	1b40      	subs	r0, r0, r5
 8003a4c:	6060      	str	r0, [r4, #4]
 8003a4e:	6863      	ldr	r3, [r4, #4]
 8003a50:	6123      	str	r3, [r4, #16]
 8003a52:	2300      	movs	r3, #0
 8003a54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a58:	e79f      	b.n	800399a <_printf_i+0x126>
 8003a5a:	6923      	ldr	r3, [r4, #16]
 8003a5c:	462a      	mov	r2, r5
 8003a5e:	4639      	mov	r1, r7
 8003a60:	4630      	mov	r0, r6
 8003a62:	47c0      	blx	r8
 8003a64:	3001      	adds	r0, #1
 8003a66:	d0a2      	beq.n	80039ae <_printf_i+0x13a>
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	079b      	lsls	r3, r3, #30
 8003a6c:	d507      	bpl.n	8003a7e <_printf_i+0x20a>
 8003a6e:	2500      	movs	r5, #0
 8003a70:	f104 0919 	add.w	r9, r4, #25
 8003a74:	68e3      	ldr	r3, [r4, #12]
 8003a76:	9a03      	ldr	r2, [sp, #12]
 8003a78:	1a9b      	subs	r3, r3, r2
 8003a7a:	429d      	cmp	r5, r3
 8003a7c:	db05      	blt.n	8003a8a <_printf_i+0x216>
 8003a7e:	68e0      	ldr	r0, [r4, #12]
 8003a80:	9b03      	ldr	r3, [sp, #12]
 8003a82:	4298      	cmp	r0, r3
 8003a84:	bfb8      	it	lt
 8003a86:	4618      	movlt	r0, r3
 8003a88:	e793      	b.n	80039b2 <_printf_i+0x13e>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	464a      	mov	r2, r9
 8003a8e:	4639      	mov	r1, r7
 8003a90:	4630      	mov	r0, r6
 8003a92:	47c0      	blx	r8
 8003a94:	3001      	adds	r0, #1
 8003a96:	d08a      	beq.n	80039ae <_printf_i+0x13a>
 8003a98:	3501      	adds	r5, #1
 8003a9a:	e7eb      	b.n	8003a74 <_printf_i+0x200>
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1a7      	bne.n	80039f0 <_printf_i+0x17c>
 8003aa0:	780b      	ldrb	r3, [r1, #0]
 8003aa2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003aa6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003aaa:	e765      	b.n	8003978 <_printf_i+0x104>
 8003aac:	08003cd4 	.word	0x08003cd4
 8003ab0:	08003cc3 	.word	0x08003cc3

08003ab4 <_sbrk_r>:
 8003ab4:	b538      	push	{r3, r4, r5, lr}
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	4c05      	ldr	r4, [pc, #20]	; (8003ad0 <_sbrk_r+0x1c>)
 8003aba:	4605      	mov	r5, r0
 8003abc:	4608      	mov	r0, r1
 8003abe:	6023      	str	r3, [r4, #0]
 8003ac0:	f7ff fb0e 	bl	80030e0 <_sbrk>
 8003ac4:	1c43      	adds	r3, r0, #1
 8003ac6:	d102      	bne.n	8003ace <_sbrk_r+0x1a>
 8003ac8:	6823      	ldr	r3, [r4, #0]
 8003aca:	b103      	cbz	r3, 8003ace <_sbrk_r+0x1a>
 8003acc:	602b      	str	r3, [r5, #0]
 8003ace:	bd38      	pop	{r3, r4, r5, pc}
 8003ad0:	20004108 	.word	0x20004108

08003ad4 <memchr>:
 8003ad4:	b510      	push	{r4, lr}
 8003ad6:	b2c9      	uxtb	r1, r1
 8003ad8:	4402      	add	r2, r0
 8003ada:	4290      	cmp	r0, r2
 8003adc:	4603      	mov	r3, r0
 8003ade:	d101      	bne.n	8003ae4 <memchr+0x10>
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	bd10      	pop	{r4, pc}
 8003ae4:	781c      	ldrb	r4, [r3, #0]
 8003ae6:	3001      	adds	r0, #1
 8003ae8:	428c      	cmp	r4, r1
 8003aea:	d1f6      	bne.n	8003ada <memchr+0x6>
 8003aec:	4618      	mov	r0, r3
 8003aee:	bd10      	pop	{r4, pc}

08003af0 <memmove>:
 8003af0:	4288      	cmp	r0, r1
 8003af2:	b510      	push	{r4, lr}
 8003af4:	eb01 0302 	add.w	r3, r1, r2
 8003af8:	d803      	bhi.n	8003b02 <memmove+0x12>
 8003afa:	1e42      	subs	r2, r0, #1
 8003afc:	4299      	cmp	r1, r3
 8003afe:	d10c      	bne.n	8003b1a <memmove+0x2a>
 8003b00:	bd10      	pop	{r4, pc}
 8003b02:	4298      	cmp	r0, r3
 8003b04:	d2f9      	bcs.n	8003afa <memmove+0xa>
 8003b06:	1881      	adds	r1, r0, r2
 8003b08:	1ad2      	subs	r2, r2, r3
 8003b0a:	42d3      	cmn	r3, r2
 8003b0c:	d100      	bne.n	8003b10 <memmove+0x20>
 8003b0e:	bd10      	pop	{r4, pc}
 8003b10:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b14:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003b18:	e7f7      	b.n	8003b0a <memmove+0x1a>
 8003b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b1e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003b22:	e7eb      	b.n	8003afc <memmove+0xc>

08003b24 <__malloc_lock>:
 8003b24:	4770      	bx	lr

08003b26 <__malloc_unlock>:
 8003b26:	4770      	bx	lr

08003b28 <_realloc_r>:
 8003b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2a:	4607      	mov	r7, r0
 8003b2c:	4614      	mov	r4, r2
 8003b2e:	460e      	mov	r6, r1
 8003b30:	b921      	cbnz	r1, 8003b3c <_realloc_r+0x14>
 8003b32:	4611      	mov	r1, r2
 8003b34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b38:	f7ff bc76 	b.w	8003428 <_malloc_r>
 8003b3c:	b922      	cbnz	r2, 8003b48 <_realloc_r+0x20>
 8003b3e:	f7ff fc27 	bl	8003390 <_free_r>
 8003b42:	4625      	mov	r5, r4
 8003b44:	4628      	mov	r0, r5
 8003b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b48:	f000 f814 	bl	8003b74 <_malloc_usable_size_r>
 8003b4c:	4284      	cmp	r4, r0
 8003b4e:	d90f      	bls.n	8003b70 <_realloc_r+0x48>
 8003b50:	4621      	mov	r1, r4
 8003b52:	4638      	mov	r0, r7
 8003b54:	f7ff fc68 	bl	8003428 <_malloc_r>
 8003b58:	4605      	mov	r5, r0
 8003b5a:	2800      	cmp	r0, #0
 8003b5c:	d0f2      	beq.n	8003b44 <_realloc_r+0x1c>
 8003b5e:	4631      	mov	r1, r6
 8003b60:	4622      	mov	r2, r4
 8003b62:	f7ff fbde 	bl	8003322 <memcpy>
 8003b66:	4631      	mov	r1, r6
 8003b68:	4638      	mov	r0, r7
 8003b6a:	f7ff fc11 	bl	8003390 <_free_r>
 8003b6e:	e7e9      	b.n	8003b44 <_realloc_r+0x1c>
 8003b70:	4635      	mov	r5, r6
 8003b72:	e7e7      	b.n	8003b44 <_realloc_r+0x1c>

08003b74 <_malloc_usable_size_r>:
 8003b74:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	f1a0 0004 	sub.w	r0, r0, #4
 8003b7e:	bfbc      	itt	lt
 8003b80:	580b      	ldrlt	r3, [r1, r0]
 8003b82:	18c0      	addlt	r0, r0, r3
 8003b84:	4770      	bx	lr
	...

08003b88 <_init>:
 8003b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8a:	bf00      	nop
 8003b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b8e:	bc08      	pop	{r3}
 8003b90:	469e      	mov	lr, r3
 8003b92:	4770      	bx	lr

08003b94 <_fini>:
 8003b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b96:	bf00      	nop
 8003b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9a:	bc08      	pop	{r3}
 8003b9c:	469e      	mov	lr, r3
 8003b9e:	4770      	bx	lr
