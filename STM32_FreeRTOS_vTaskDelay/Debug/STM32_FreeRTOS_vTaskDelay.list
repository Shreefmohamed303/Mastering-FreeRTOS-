
STM32_FreeRTOS_vTaskDelay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003728  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08003838  08003838  00013838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800393c  0800393c  0001393c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003940  08003940  00013940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  20000000  08003944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004090  2000007c  080039c0  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  2000410c  080039c0  0002410c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d778  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001d69  00000000  00000000  0002d81d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b00  00000000  00000000  0002f588  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a18  00000000  00000000  00030088  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000054cb  00000000  00000000  00030aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003a9e  00000000  00000000  00035f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00039a09  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000031cc  00000000  00000000  00039a88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003820 	.word	0x08003820

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08003820 	.word	0x08003820

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000160:	b480      	push	{r7}
 8000162:	b083      	sub	sp, #12
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000168:	4a05      	ldr	r2, [pc, #20]	; (8000180 <NVIC_PriorityGroupConfig+0x20>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000174:	60d3      	str	r3, [r2, #12]
}
 8000176:	bf00      	nop
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	e000ed00 	.word	0xe000ed00

08000184 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000184:	b480      	push	{r7}
 8000186:	b089      	sub	sp, #36	; 0x24
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800018e:	2300      	movs	r3, #0
 8000190:	61fb      	str	r3, [r7, #28]
 8000192:	2300      	movs	r3, #0
 8000194:	613b      	str	r3, [r7, #16]
 8000196:	2300      	movs	r3, #0
 8000198:	61bb      	str	r3, [r7, #24]
 800019a:	2300      	movs	r3, #0
 800019c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800019e:	2300      	movs	r3, #0
 80001a0:	617b      	str	r3, [r7, #20]
 80001a2:	2300      	movs	r3, #0
 80001a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80001a6:	683b      	ldr	r3, [r7, #0]
 80001a8:	78db      	ldrb	r3, [r3, #3]
 80001aa:	f003 030f 	and.w	r3, r3, #15
 80001ae:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	78db      	ldrb	r3, [r3, #3]
 80001b4:	f003 0310 	and.w	r3, r3, #16
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d005      	beq.n	80001c8 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80001bc:	683b      	ldr	r3, [r7, #0]
 80001be:	789b      	ldrb	r3, [r3, #2]
 80001c0:	461a      	mov	r2, r3
 80001c2:	69fb      	ldr	r3, [r7, #28]
 80001c4:	4313      	orrs	r3, r2
 80001c6:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80001c8:	683b      	ldr	r3, [r7, #0]
 80001ca:	881b      	ldrh	r3, [r3, #0]
 80001cc:	b2db      	uxtb	r3, r3
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d044      	beq.n	800025c <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80001d8:	2300      	movs	r3, #0
 80001da:	61bb      	str	r3, [r7, #24]
 80001dc:	e038      	b.n	8000250 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80001de:	2201      	movs	r2, #1
 80001e0:	69bb      	ldr	r3, [r7, #24]
 80001e2:	fa02 f303 	lsl.w	r3, r2, r3
 80001e6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	881b      	ldrh	r3, [r3, #0]
 80001ec:	461a      	mov	r2, r3
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	4013      	ands	r3, r2
 80001f2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80001f4:	693a      	ldr	r2, [r7, #16]
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	429a      	cmp	r2, r3
 80001fa:	d126      	bne.n	800024a <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80001fc:	69bb      	ldr	r3, [r7, #24]
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000202:	220f      	movs	r2, #15
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	fa02 f303 	lsl.w	r3, r2, r3
 800020a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800020c:	68bb      	ldr	r3, [r7, #8]
 800020e:	43db      	mvns	r3, r3
 8000210:	697a      	ldr	r2, [r7, #20]
 8000212:	4013      	ands	r3, r2
 8000214:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000216:	69fa      	ldr	r2, [r7, #28]
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	fa02 f303 	lsl.w	r3, r2, r3
 800021e:	697a      	ldr	r2, [r7, #20]
 8000220:	4313      	orrs	r3, r2
 8000222:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	78db      	ldrb	r3, [r3, #3]
 8000228:	2b28      	cmp	r3, #40	; 0x28
 800022a:	d105      	bne.n	8000238 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800022c:	2201      	movs	r2, #1
 800022e:	69bb      	ldr	r3, [r7, #24]
 8000230:	409a      	lsls	r2, r3
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	615a      	str	r2, [r3, #20]
 8000236:	e008      	b.n	800024a <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	78db      	ldrb	r3, [r3, #3]
 800023c:	2b48      	cmp	r3, #72	; 0x48
 800023e:	d104      	bne.n	800024a <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000240:	2201      	movs	r2, #1
 8000242:	69bb      	ldr	r3, [r7, #24]
 8000244:	409a      	lsls	r2, r3
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800024a:	69bb      	ldr	r3, [r7, #24]
 800024c:	3301      	adds	r3, #1
 800024e:	61bb      	str	r3, [r7, #24]
 8000250:	69bb      	ldr	r3, [r7, #24]
 8000252:	2b07      	cmp	r3, #7
 8000254:	d9c3      	bls.n	80001de <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	697a      	ldr	r2, [r7, #20]
 800025a:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	2bff      	cmp	r3, #255	; 0xff
 8000262:	d946      	bls.n	80002f2 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800026a:	2300      	movs	r3, #0
 800026c:	61bb      	str	r3, [r7, #24]
 800026e:	e03a      	b.n	80002e6 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000270:	69bb      	ldr	r3, [r7, #24]
 8000272:	3308      	adds	r3, #8
 8000274:	2201      	movs	r2, #1
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	881b      	ldrh	r3, [r3, #0]
 8000280:	461a      	mov	r2, r3
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	4013      	ands	r3, r2
 8000286:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000288:	693a      	ldr	r2, [r7, #16]
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	429a      	cmp	r2, r3
 800028e:	d127      	bne.n	80002e0 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000290:	69bb      	ldr	r3, [r7, #24]
 8000292:	009b      	lsls	r3, r3, #2
 8000294:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000296:	220f      	movs	r2, #15
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	fa02 f303 	lsl.w	r3, r2, r3
 800029e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	43db      	mvns	r3, r3
 80002a4:	697a      	ldr	r2, [r7, #20]
 80002a6:	4013      	ands	r3, r2
 80002a8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80002aa:	69fa      	ldr	r2, [r7, #28]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	697a      	ldr	r2, [r7, #20]
 80002b4:	4313      	orrs	r3, r2
 80002b6:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	78db      	ldrb	r3, [r3, #3]
 80002bc:	2b28      	cmp	r3, #40	; 0x28
 80002be:	d105      	bne.n	80002cc <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80002c0:	69bb      	ldr	r3, [r7, #24]
 80002c2:	3308      	adds	r3, #8
 80002c4:	2201      	movs	r2, #1
 80002c6:	409a      	lsls	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	78db      	ldrb	r3, [r3, #3]
 80002d0:	2b48      	cmp	r3, #72	; 0x48
 80002d2:	d105      	bne.n	80002e0 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80002d4:	69bb      	ldr	r3, [r7, #24]
 80002d6:	3308      	adds	r3, #8
 80002d8:	2201      	movs	r2, #1
 80002da:	409a      	lsls	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002e0:	69bb      	ldr	r3, [r7, #24]
 80002e2:	3301      	adds	r3, #1
 80002e4:	61bb      	str	r3, [r7, #24]
 80002e6:	69bb      	ldr	r3, [r7, #24]
 80002e8:	2b07      	cmp	r3, #7
 80002ea:	d9c1      	bls.n	8000270 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	697a      	ldr	r2, [r7, #20]
 80002f0:	605a      	str	r2, [r3, #4]
  }
}
 80002f2:	bf00      	nop
 80002f4:	3724      	adds	r7, #36	; 0x24
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr

080002fc <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	460b      	mov	r3, r1
 8000306:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000308:	2300      	movs	r3, #0
 800030a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	68da      	ldr	r2, [r3, #12]
 8000310:	887b      	ldrh	r3, [r7, #2]
 8000312:	4013      	ands	r3, r2
 8000314:	2b00      	cmp	r3, #0
 8000316:	d002      	beq.n	800031e <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000318:	2301      	movs	r3, #1
 800031a:	73fb      	strb	r3, [r7, #15]
 800031c:	e001      	b.n	8000322 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800031e:	2300      	movs	r3, #0
 8000320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000322:	7bfb      	ldrb	r3, [r7, #15]
}
 8000324:	4618      	mov	r0, r3
 8000326:	3714      	adds	r7, #20
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr

0800032e <GPIO_ToggleBit>:
  
  GPIOx->ODR = PortVal;
}

void GPIO_ToggleBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800032e:	b480      	push	{r7}
 8000330:	b083      	sub	sp, #12
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
 8000336:	460b      	mov	r3, r1
 8000338:	807b      	strh	r3, [r7, #2]

	/* Check the parameters */
	assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

	GPIOx->ODR ^= GPIO_Pin;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	68da      	ldr	r2, [r3, #12]
 800033e:	887b      	ldrh	r3, [r7, #2]
 8000340:	405a      	eors	r2, r3
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	60da      	str	r2, [r3, #12]

}
 8000346:	bf00      	nop
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr

08000350 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000350:	b480      	push	{r7}
 8000352:	b087      	sub	sp, #28
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	617b      	str	r3, [r7, #20]
 800035c:	2300      	movs	r3, #0
 800035e:	613b      	str	r3, [r7, #16]
 8000360:	2300      	movs	r3, #0
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	2300      	movs	r3, #0
 8000366:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000368:	4b4c      	ldr	r3, [pc, #304]	; (800049c <RCC_GetClocksFreq+0x14c>)
 800036a:	685b      	ldr	r3, [r3, #4]
 800036c:	f003 030c 	and.w	r3, r3, #12
 8000370:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	2b04      	cmp	r3, #4
 8000376:	d007      	beq.n	8000388 <RCC_GetClocksFreq+0x38>
 8000378:	2b08      	cmp	r3, #8
 800037a:	d009      	beq.n	8000390 <RCC_GetClocksFreq+0x40>
 800037c:	2b00      	cmp	r3, #0
 800037e:	d133      	bne.n	80003e8 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a47      	ldr	r2, [pc, #284]	; (80004a0 <RCC_GetClocksFreq+0x150>)
 8000384:	601a      	str	r2, [r3, #0]
      break;
 8000386:	e033      	b.n	80003f0 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4a45      	ldr	r2, [pc, #276]	; (80004a0 <RCC_GetClocksFreq+0x150>)
 800038c:	601a      	str	r2, [r3, #0]
      break;
 800038e:	e02f      	b.n	80003f0 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000390:	4b42      	ldr	r3, [pc, #264]	; (800049c <RCC_GetClocksFreq+0x14c>)
 8000392:	685b      	ldr	r3, [r3, #4]
 8000394:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000398:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800039a:	4b40      	ldr	r3, [pc, #256]	; (800049c <RCC_GetClocksFreq+0x14c>)
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003a2:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80003a4:	693b      	ldr	r3, [r7, #16]
 80003a6:	0c9b      	lsrs	r3, r3, #18
 80003a8:	3302      	adds	r3, #2
 80003aa:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d106      	bne.n	80003c0 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80003b2:	693b      	ldr	r3, [r7, #16]
 80003b4:	4a3b      	ldr	r2, [pc, #236]	; (80004a4 <RCC_GetClocksFreq+0x154>)
 80003b6:	fb02 f203 	mul.w	r2, r2, r3
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80003be:	e017      	b.n	80003f0 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80003c0:	4b36      	ldr	r3, [pc, #216]	; (800049c <RCC_GetClocksFreq+0x14c>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d006      	beq.n	80003da <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80003cc:	693b      	ldr	r3, [r7, #16]
 80003ce:	4a35      	ldr	r2, [pc, #212]	; (80004a4 <RCC_GetClocksFreq+0x154>)
 80003d0:	fb02 f203 	mul.w	r2, r2, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	601a      	str	r2, [r3, #0]
      break;
 80003d8:	e00a      	b.n	80003f0 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80003da:	693b      	ldr	r3, [r7, #16]
 80003dc:	4a30      	ldr	r2, [pc, #192]	; (80004a0 <RCC_GetClocksFreq+0x150>)
 80003de:	fb02 f203 	mul.w	r2, r2, r3
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	601a      	str	r2, [r3, #0]
      break;
 80003e6:	e003      	b.n	80003f0 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a2d      	ldr	r2, [pc, #180]	; (80004a0 <RCC_GetClocksFreq+0x150>)
 80003ec:	601a      	str	r2, [r3, #0]
      break;
 80003ee:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80003f0:	4b2a      	ldr	r3, [pc, #168]	; (800049c <RCC_GetClocksFreq+0x14c>)
 80003f2:	685b      	ldr	r3, [r3, #4]
 80003f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80003f8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80003fa:	697b      	ldr	r3, [r7, #20]
 80003fc:	091b      	lsrs	r3, r3, #4
 80003fe:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000400:	4a29      	ldr	r2, [pc, #164]	; (80004a8 <RCC_GetClocksFreq+0x158>)
 8000402:	697b      	ldr	r3, [r7, #20]
 8000404:	4413      	add	r3, r2
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	b2db      	uxtb	r3, r3
 800040a:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	40da      	lsrs	r2, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000418:	4b20      	ldr	r3, [pc, #128]	; (800049c <RCC_GetClocksFreq+0x14c>)
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000420:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	0a1b      	lsrs	r3, r3, #8
 8000426:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000428:	4a1f      	ldr	r2, [pc, #124]	; (80004a8 <RCC_GetClocksFreq+0x158>)
 800042a:	697b      	ldr	r3, [r7, #20]
 800042c:	4413      	add	r3, r2
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	b2db      	uxtb	r3, r3
 8000432:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	685a      	ldr	r2, [r3, #4]
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	40da      	lsrs	r2, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000440:	4b16      	ldr	r3, [pc, #88]	; (800049c <RCC_GetClocksFreq+0x14c>)
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000448:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	0adb      	lsrs	r3, r3, #11
 800044e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000450:	4a15      	ldr	r2, [pc, #84]	; (80004a8 <RCC_GetClocksFreq+0x158>)
 8000452:	697b      	ldr	r3, [r7, #20]
 8000454:	4413      	add	r3, r2
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	b2db      	uxtb	r3, r3
 800045a:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	685a      	ldr	r2, [r3, #4]
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	40da      	lsrs	r2, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000468:	4b0c      	ldr	r3, [pc, #48]	; (800049c <RCC_GetClocksFreq+0x14c>)
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000470:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8000472:	697b      	ldr	r3, [r7, #20]
 8000474:	0b9b      	lsrs	r3, r3, #14
 8000476:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000478:	4a0c      	ldr	r2, [pc, #48]	; (80004ac <RCC_GetClocksFreq+0x15c>)
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	4413      	add	r3, r2
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	68da      	ldr	r2, [r3, #12]
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	fbb2 f2f3 	udiv	r2, r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	611a      	str	r2, [r3, #16]
}
 8000492:	bf00      	nop
 8000494:	371c      	adds	r7, #28
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	40021000 	.word	0x40021000
 80004a0:	007a1200 	.word	0x007a1200
 80004a4:	003d0900 	.word	0x003d0900
 80004a8:	20000000 	.word	0x20000000
 80004ac:	20000010 	.word	0x20000010

080004b0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	460b      	mov	r3, r1
 80004ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80004bc:	78fb      	ldrb	r3, [r7, #3]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d006      	beq.n	80004d0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80004c2:	4909      	ldr	r1, [pc, #36]	; (80004e8 <RCC_APB2PeriphClockCmd+0x38>)
 80004c4:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <RCC_APB2PeriphClockCmd+0x38>)
 80004c6:	699a      	ldr	r2, [r3, #24]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4313      	orrs	r3, r2
 80004cc:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80004ce:	e006      	b.n	80004de <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80004d0:	4905      	ldr	r1, [pc, #20]	; (80004e8 <RCC_APB2PeriphClockCmd+0x38>)
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <RCC_APB2PeriphClockCmd+0x38>)
 80004d4:	699a      	ldr	r2, [r3, #24]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	43db      	mvns	r3, r3
 80004da:	4013      	ands	r3, r2
 80004dc:	618b      	str	r3, [r1, #24]
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	40021000 	.word	0x40021000

080004ec <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b08c      	sub	sp, #48	; 0x30
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80004f6:	2300      	movs	r3, #0
 80004f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004fa:	2300      	movs	r3, #0
 80004fc:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 80004fe:	2300      	movs	r3, #0
 8000500:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8000502:	2300      	movs	r3, #0
 8000504:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	8a1b      	ldrh	r3, [r3, #16]
 8000512:	b29b      	uxth	r3, r3
 8000514:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8000516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000518:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800051c:	4013      	ands	r3, r2
 800051e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	88db      	ldrh	r3, [r3, #6]
 8000524:	461a      	mov	r2, r3
 8000526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000528:	4313      	orrs	r3, r2
 800052a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800052c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800052e:	b29a      	uxth	r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	899b      	ldrh	r3, [r3, #12]
 8000538:	b29b      	uxth	r3, r3
 800053a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 800053c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800053e:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8000542:	4013      	ands	r3, r2
 8000544:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	889a      	ldrh	r2, [r3, #4]
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	891b      	ldrh	r3, [r3, #8]
 800054e:	4313      	orrs	r3, r2
 8000550:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000556:	4313      	orrs	r3, r2
 8000558:	b29b      	uxth	r3, r3
 800055a:	461a      	mov	r2, r3
 800055c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800055e:	4313      	orrs	r3, r2
 8000560:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000564:	b29a      	uxth	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	8a9b      	ldrh	r3, [r3, #20]
 800056e:	b29b      	uxth	r3, r3
 8000570:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8000572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000574:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000578:	4013      	ands	r3, r2
 800057a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	899b      	ldrh	r3, [r3, #12]
 8000580:	461a      	mov	r2, r3
 8000582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000584:	4313      	orrs	r3, r2
 8000586:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800058a:	b29a      	uxth	r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff fedb 	bl	8000350 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 800059a:	69fb      	ldr	r3, [r7, #28]
 800059c:	4a2e      	ldr	r2, [pc, #184]	; (8000658 <USART_Init+0x16c>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d102      	bne.n	80005a8 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80005a6:	e001      	b.n	80005ac <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80005a8:	693b      	ldr	r3, [r7, #16]
 80005aa:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	899b      	ldrh	r3, [r3, #12]
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	b21b      	sxth	r3, r3
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	da0c      	bge.n	80005d2 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80005b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005ba:	4613      	mov	r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	009a      	lsls	r2, r3, #2
 80005c2:	441a      	add	r2, r3
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ce:	627b      	str	r3, [r7, #36]	; 0x24
 80005d0:	e00b      	b.n	80005ea <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80005d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005d4:	4613      	mov	r3, r2
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	4413      	add	r3, r2
 80005da:	009a      	lsls	r2, r3, #2
 80005dc:	441a      	add	r2, r3
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 80005ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ec:	4a1b      	ldr	r2, [pc, #108]	; (800065c <USART_Init+0x170>)
 80005ee:	fba2 2303 	umull	r2, r3, r2, r3
 80005f2:	095b      	lsrs	r3, r3, #5
 80005f4:	011b      	lsls	r3, r3, #4
 80005f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80005f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005fa:	091b      	lsrs	r3, r3, #4
 80005fc:	2264      	movs	r2, #100	; 0x64
 80005fe:	fb02 f303 	mul.w	r3, r2, r3
 8000602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	899b      	ldrh	r3, [r3, #12]
 800060c:	b29b      	uxth	r3, r3
 800060e:	b21b      	sxth	r3, r3
 8000610:	2b00      	cmp	r3, #0
 8000612:	da0c      	bge.n	800062e <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000614:	6a3b      	ldr	r3, [r7, #32]
 8000616:	00db      	lsls	r3, r3, #3
 8000618:	3332      	adds	r3, #50	; 0x32
 800061a:	4a10      	ldr	r2, [pc, #64]	; (800065c <USART_Init+0x170>)
 800061c:	fba2 2303 	umull	r2, r3, r2, r3
 8000620:	095b      	lsrs	r3, r3, #5
 8000622:	f003 0307 	and.w	r3, r3, #7
 8000626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000628:	4313      	orrs	r3, r2
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800062c:	e00b      	b.n	8000646 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800062e:	6a3b      	ldr	r3, [r7, #32]
 8000630:	011b      	lsls	r3, r3, #4
 8000632:	3332      	adds	r3, #50	; 0x32
 8000634:	4a09      	ldr	r2, [pc, #36]	; (800065c <USART_Init+0x170>)
 8000636:	fba2 2303 	umull	r2, r3, r2, r3
 800063a:	095b      	lsrs	r3, r3, #5
 800063c:	f003 030f 	and.w	r3, r3, #15
 8000640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000642:	4313      	orrs	r3, r2
 8000644:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000648:	b29a      	uxth	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	811a      	strh	r2, [r3, #8]
}
 800064e:	bf00      	nop
 8000650:	3730      	adds	r7, #48	; 0x30
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40013800 	.word	0x40013800
 800065c:	51eb851f 	.word	0x51eb851f

08000660 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	460b      	mov	r3, r1
 800066a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800066c:	78fb      	ldrb	r3, [r7, #3]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d008      	beq.n	8000684 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	899b      	ldrh	r3, [r3, #12]
 8000676:	b29b      	uxth	r3, r3
 8000678:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800067c:	b29a      	uxth	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8000682:	e007      	b.n	8000694 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	899b      	ldrh	r3, [r3, #12]
 8000688:	b29b      	uxth	r3, r3
 800068a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800068e:	b29a      	uxth	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	819a      	strh	r2, [r3, #12]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr

0800069e <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
 80006a6:	460b      	mov	r3, r1
 80006a8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80006aa:	887b      	ldrh	r3, [r7, #2]
 80006ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	809a      	strh	r2, [r3, #4]
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80006cc:	2300      	movs	r3, #0
 80006ce:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	b29a      	uxth	r2, r3
 80006d6:	887b      	ldrh	r3, [r7, #2]
 80006d8:	4013      	ands	r3, r2
 80006da:	b29b      	uxth	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d002      	beq.n	80006e6 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80006e0:	2301      	movs	r3, #1
 80006e2:	73fb      	strb	r3, [r7, #15]
 80006e4:	e001      	b.n	80006ea <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80006e6:	2300      	movs	r3, #0
 80006e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr

080006f6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f103 0208 	add.w	r2, r3, #8
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f04f 32ff 	mov.w	r2, #4294967295
 800070e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f103 0208 	add.w	r2, r3, #8
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	f103 0208 	add.w	r2, r3, #8
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	689a      	ldr	r2, [r3, #8]
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	683a      	ldr	r2, [r7, #0]
 8000776:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	1c5a      	adds	r2, r3, #1
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	601a      	str	r2, [r3, #0]
}
 8000788:	bf00      	nop
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr

08000792 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000792:	b480      	push	{r7}
 8000794:	b085      	sub	sp, #20
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
 800079a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007a8:	d103      	bne.n	80007b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	691b      	ldr	r3, [r3, #16]
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	e00c      	b.n	80007cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	3308      	adds	r3, #8
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	e002      	b.n	80007c0 <vListInsert+0x2e>
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d9f6      	bls.n	80007ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	685a      	ldr	r2, [r3, #4]
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	683a      	ldr	r2, [r7, #0]
 80007da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	683a      	ldr	r2, [r7, #0]
 80007e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	1c5a      	adds	r2, r3, #1
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	601a      	str	r2, [r3, #0]
}
 80007f8:	bf00      	nop
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr

08000802 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000802:	b480      	push	{r7}
 8000804:	b085      	sub	sp, #20
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	691b      	ldr	r3, [r3, #16]
 800080e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	6892      	ldr	r2, [r2, #8]
 8000818:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	6852      	ldr	r2, [r2, #4]
 8000822:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	685a      	ldr	r2, [r3, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	429a      	cmp	r2, r3
 800082c:	d103      	bne.n	8000836 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	689a      	ldr	r2, [r3, #8]
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	1e5a      	subs	r2, r3, #1
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	681b      	ldr	r3, [r3, #0]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	3b04      	subs	r3, #4
 8000864:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800086c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3b04      	subs	r3, #4
 8000872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	f023 0201 	bic.w	r2, r3, #1
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	3b04      	subs	r3, #4
 8000882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000884:	4a08      	ldr	r2, [pc, #32]	; (80008a8 <pxPortInitialiseStack+0x54>)
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	3b14      	subs	r3, #20
 800088e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	3b20      	subs	r3, #32
 800089a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800089c:	68fb      	ldr	r3, [r7, #12]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	080008ad 	.word	0x080008ad

080008ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80008b6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80008ba:	f383 8811 	msr	BASEPRI, r3
 80008be:	f3bf 8f6f 	isb	sy
 80008c2:	f3bf 8f4f 	dsb	sy
 80008c6:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80008c8:	bf00      	nop
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d0fc      	beq.n	80008ca <prvTaskExitError+0x1e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	0000      	movs	r0, r0
 80008dc:	0000      	movs	r0, r0
	...

080008e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <pxCurrentTCBConst2>)
 80008e2:	6819      	ldr	r1, [r3, #0]
 80008e4:	6808      	ldr	r0, [r1, #0]
 80008e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80008ea:	f380 8809 	msr	PSP, r0
 80008ee:	f3bf 8f6f 	isb	sy
 80008f2:	f04f 0000 	mov.w	r0, #0
 80008f6:	f380 8811 	msr	BASEPRI, r0
 80008fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80008fe:	4770      	bx	lr

08000900 <pxCurrentTCBConst2>:
 8000900:	200038b8 	.word	0x200038b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000904:	bf00      	nop
 8000906:	bf00      	nop

08000908 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000908:	4806      	ldr	r0, [pc, #24]	; (8000924 <prvPortStartFirstTask+0x1c>)
 800090a:	6800      	ldr	r0, [r0, #0]
 800090c:	6800      	ldr	r0, [r0, #0]
 800090e:	f380 8808 	msr	MSP, r0
 8000912:	b662      	cpsie	i
 8000914:	b661      	cpsie	f
 8000916:	f3bf 8f4f 	dsb	sy
 800091a:	f3bf 8f6f 	isb	sy
 800091e:	df00      	svc	0
 8000920:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000922:	bf00      	nop
 8000924:	e000ed08 	.word	0xe000ed08

08000928 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800092c:	4a0c      	ldr	r2, [pc, #48]	; (8000960 <xPortStartScheduler+0x38>)
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <xPortStartScheduler+0x38>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000936:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000938:	4a09      	ldr	r2, [pc, #36]	; (8000960 <xPortStartScheduler+0x38>)
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <xPortStartScheduler+0x38>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000942:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000944:	f000 f890 	bl	8000a68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <xPortStartScheduler+0x3c>)
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800094e:	f7ff ffdb 	bl	8000908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000952:	f000 fd39 	bl	80013c8 <vTaskSwitchContext>
	prvTaskExitError();
 8000956:	f7ff ffa9 	bl	80008ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800095a:	2300      	movs	r3, #0
}
 800095c:	4618      	mov	r0, r3
 800095e:	bd80      	pop	{r7, pc}
 8000960:	e000ed20 	.word	0xe000ed20
 8000964:	20000014 	.word	0x20000014

08000968 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000972:	f383 8811 	msr	BASEPRI, r3
 8000976:	f3bf 8f6f 	isb	sy
 800097a:	f3bf 8f4f 	dsb	sy
 800097e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000980:	4b04      	ldr	r3, [pc, #16]	; (8000994 <vPortEnterCritical+0x2c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	3301      	adds	r3, #1
 8000986:	4a03      	ldr	r2, [pc, #12]	; (8000994 <vPortEnterCritical+0x2c>)
 8000988:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	20000014 	.word	0x20000014

08000998 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <vPortExitCritical+0x2c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <vPortExitCritical+0x2c>)
 80009a6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <vPortExitCritical+0x2c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d104      	bne.n	80009ba <vPortExitCritical+0x22>
 80009b0:	2300      	movs	r3, #0
 80009b2:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	20000014 	.word	0x20000014
	...

080009d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80009d0:	f3ef 8009 	mrs	r0, PSP
 80009d4:	f3bf 8f6f 	isb	sy
 80009d8:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <pxCurrentTCBConst>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80009e0:	6010      	str	r0, [r2, #0]
 80009e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80009e6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80009ea:	f380 8811 	msr	BASEPRI, r0
 80009ee:	f000 fceb 	bl	80013c8 <vTaskSwitchContext>
 80009f2:	f04f 0000 	mov.w	r0, #0
 80009f6:	f380 8811 	msr	BASEPRI, r0
 80009fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80009fe:	6819      	ldr	r1, [r3, #0]
 8000a00:	6808      	ldr	r0, [r1, #0]
 8000a02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000a06:	f380 8809 	msr	PSP, r0
 8000a0a:	f3bf 8f6f 	isb	sy
 8000a0e:	4770      	bx	lr

08000a10 <pxCurrentTCBConst>:
 8000a10:	200038b8 	.word	0x200038b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000a14:	bf00      	nop
 8000a16:	bf00      	nop

08000a18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8000a1e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000a22:	f383 8811 	msr	BASEPRI, r3
 8000a26:	f3bf 8f6f 	isb	sy
 8000a2a:	f3bf 8f4f 	dsb	sy
 8000a2e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8000a30:	f001 fd82 	bl	8002538 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000a34:	f000 fc1c 	bl	8001270 <xTaskIncrementTick>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d006      	beq.n	8000a4c <SysTick_Handler+0x34>
		{
      traceISR_EXIT_TO_SCHEDULER();
 8000a3e:	f001 fdd9 	bl	80025f4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <SysTick_Handler+0x4c>)
 8000a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	e001      	b.n	8000a50 <SysTick_Handler+0x38>
		}
		else
		{
			traceISR_EXIT();
 8000a4c:	f001 fdb6 	bl	80025bc <SEGGER_SYSVIEW_RecordExitISR>
 8000a50:	2300      	movs	r3, #0
 8000a52:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	e000ed04 	.word	0xe000ed04

08000a68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000a6c:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <vPortSetupTimerInterrupt+0x24>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <vPortSetupTimerInterrupt+0x28>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <vPortSetupTimerInterrupt+0x2c>)
 8000a7a:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <vPortSetupTimerInterrupt+0x30>)
 8000a7c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000a7e:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <vPortSetupTimerInterrupt+0x24>)
 8000a80:	2207      	movs	r2, #7
 8000a82:	601a      	str	r2, [r3, #0]
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	e000e010 	.word	0xe000e010
 8000a90:	e000e018 	.word	0xe000e018
 8000a94:	e000e014 	.word	0xe000e014
 8000a98:	0001193f 	.word	0x0001193f

08000a9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8000aa8:	f000 fb42 	bl	8001130 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000aac:	4b42      	ldr	r3, [pc, #264]	; (8000bb8 <pvPortMalloc+0x11c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d101      	bne.n	8000ab8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8000ab4:	f000 f8cc 	bl	8000c50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000ab8:	4b40      	ldr	r3, [pc, #256]	; (8000bbc <pvPortMalloc+0x120>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d172      	bne.n	8000baa <pvPortMalloc+0x10e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d00d      	beq.n	8000ae6 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 8000aca:	2208      	movs	r2, #8
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4413      	add	r3, r2
 8000ad0:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f003 0307 	and.w	r3, r3, #7
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d004      	beq.n	8000ae6 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f023 0307 	bic.w	r3, r3, #7
 8000ae2:	3308      	adds	r3, #8
 8000ae4:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d05e      	beq.n	8000baa <pvPortMalloc+0x10e>
 8000aec:	4b34      	ldr	r3, [pc, #208]	; (8000bc0 <pvPortMalloc+0x124>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d859      	bhi.n	8000baa <pvPortMalloc+0x10e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000af6:	4b33      	ldr	r3, [pc, #204]	; (8000bc4 <pvPortMalloc+0x128>)
 8000af8:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8000afa:	4b32      	ldr	r3, [pc, #200]	; (8000bc4 <pvPortMalloc+0x128>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000b00:	e004      	b.n	8000b0c <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	685a      	ldr	r2, [r3, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d203      	bcs.n	8000b1e <pvPortMalloc+0x82>
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d1f1      	bne.n	8000b02 <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000b1e:	4b26      	ldr	r3, [pc, #152]	; (8000bb8 <pvPortMalloc+0x11c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	697a      	ldr	r2, [r7, #20]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d040      	beq.n	8000baa <pvPortMalloc+0x10e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2208      	movs	r2, #8
 8000b2e:	4413      	add	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	1ad2      	subs	r2, r2, r3
 8000b42:	2308      	movs	r3, #8
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d90f      	bls.n	8000b6a <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000b4a:	697a      	ldr	r2, [r7, #20]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4413      	add	r3, r2
 8000b50:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	685a      	ldr	r2, [r3, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	1ad2      	subs	r2, r2, r3
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000b64:	68b8      	ldr	r0, [r7, #8]
 8000b66:	f000 f8d5 	bl	8000d14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <pvPortMalloc+0x124>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <pvPortMalloc+0x124>)
 8000b76:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <pvPortMalloc+0x124>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <pvPortMalloc+0x12c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d203      	bcs.n	8000b8c <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <pvPortMalloc+0x124>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <pvPortMalloc+0x12c>)
 8000b8a:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	685a      	ldr	r2, [r3, #4]
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <pvPortMalloc+0x120>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	431a      	orrs	r2, r3
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <pvPortMalloc+0x130>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	4a09      	ldr	r2, [pc, #36]	; (8000bcc <pvPortMalloc+0x130>)
 8000ba8:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000baa:	f000 facf 	bl	800114c <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8000bae:	68fb      	ldr	r3, [r7, #12]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	200038a0 	.word	0x200038a0
 8000bbc:	200038b4 	.word	0x200038b4
 8000bc0:	200038a4 	.word	0x200038a4
 8000bc4:	20003898 	.word	0x20003898
 8000bc8:	200038a8 	.word	0x200038a8
 8000bcc:	200038ac 	.word	0x200038ac

08000bd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d02c      	beq.n	8000c3c <vPortFree+0x6c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000be2:	2308      	movs	r3, #8
 8000be4:	425b      	negs	r3, r3
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	4413      	add	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <vPortFree+0x74>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d01e      	beq.n	8000c3c <vPortFree+0x6c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d11a      	bne.n	8000c3c <vPortFree+0x6c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <vPortFree+0x74>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	401a      	ands	r2, r3
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000c16:	f000 fa8b 	bl	8001130 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	685a      	ldr	r2, [r3, #4]
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <vPortFree+0x78>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	4a08      	ldr	r2, [pc, #32]	; (8000c48 <vPortFree+0x78>)
 8000c26:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000c28:	68b8      	ldr	r0, [r7, #8]
 8000c2a:	f000 f873 	bl	8000d14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <vPortFree+0x7c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	3301      	adds	r3, #1
 8000c34:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <vPortFree+0x7c>)
 8000c36:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8000c38:	f000 fa88 	bl	800114c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200038b4 	.word	0x200038b4
 8000c48:	200038a4 	.word	0x200038a4
 8000c4c:	200038b0 	.word	0x200038b0

08000c50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000c56:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000c5c:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <prvHeapInit+0xac>)
 8000c5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d00c      	beq.n	8000c84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	3307      	adds	r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f023 0307 	bic.w	r3, r3, #7
 8000c76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000c78:	68ba      	ldr	r2, [r7, #8]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	4a1f      	ldr	r2, [pc, #124]	; (8000cfc <prvHeapInit+0xac>)
 8000c80:	4413      	add	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000c88:	4a1d      	ldr	r2, [pc, #116]	; (8000d00 <prvHeapInit+0xb0>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <prvHeapInit+0xb0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	4413      	add	r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000c9c:	2208      	movs	r2, #8
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	1a9b      	subs	r3, r3, r2
 8000ca2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f023 0307 	bic.w	r3, r3, #7
 8000caa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4a15      	ldr	r2, [pc, #84]	; (8000d04 <prvHeapInit+0xb4>)
 8000cb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <prvHeapInit+0xb4>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000cba:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <prvHeapInit+0xb4>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	1ad2      	subs	r2, r2, r3
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <prvHeapInit+0xb4>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <prvHeapInit+0xb8>)
 8000cde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <prvHeapInit+0xbc>)
 8000ce6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <prvHeapInit+0xc0>)
 8000cea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000cee:	601a      	str	r2, [r3, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000098 	.word	0x20000098
 8000d00:	20003898 	.word	0x20003898
 8000d04:	200038a0 	.word	0x200038a0
 8000d08:	200038a8 	.word	0x200038a8
 8000d0c:	200038a4 	.word	0x200038a4
 8000d10:	200038b4 	.word	0x200038b4

08000d14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000d1c:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <prvInsertBlockIntoFreeList+0xa8>)
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	e002      	b.n	8000d28 <prvInsertBlockIntoFreeList+0x14>
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d3f7      	bcc.n	8000d22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	441a      	add	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d108      	bne.n	8000d56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	685a      	ldr	r2, [r3, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	441a      	add	r2, r3
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	441a      	add	r2, r3
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d118      	bne.n	8000d9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <prvInsertBlockIntoFreeList+0xac>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d00d      	beq.n	8000d92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685a      	ldr	r2, [r3, #4]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	441a      	add	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	e008      	b.n	8000da4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <prvInsertBlockIntoFreeList+0xac>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	e003      	b.n	8000da4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d002      	beq.n	8000db2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000db2:	bf00      	nop
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	20003898 	.word	0x20003898
 8000dc0:	200038a0 	.word	0x200038a0

08000dc4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08c      	sub	sp, #48	; 0x30
 8000dc8:	af04      	add	r7, sp, #16
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000dd4:	88fb      	ldrh	r3, [r7, #6]
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fe5f 	bl	8000a9c <pvPortMalloc>
 8000dde:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d00e      	beq.n	8000e04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000de6:	2054      	movs	r0, #84	; 0x54
 8000de8:	f7ff fe58 	bl	8000a9c <pvPortMalloc>
 8000dec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d003      	beq.n	8000dfc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	631a      	str	r2, [r3, #48]	; 0x30
 8000dfa:	e005      	b.n	8000e08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000dfc:	6978      	ldr	r0, [r7, #20]
 8000dfe:	f7ff fee7 	bl	8000bd0 <vPortFree>
 8000e02:	e001      	b.n	8000e08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d013      	beq.n	8000e36 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000e0e:	88fa      	ldrh	r2, [r7, #6]
 8000e10:	2300      	movs	r3, #0
 8000e12:	9303      	str	r3, [sp, #12]
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	9302      	str	r3, [sp, #8]
 8000e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e1a:	9301      	str	r3, [sp, #4]
 8000e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	68b9      	ldr	r1, [r7, #8]
 8000e24:	68f8      	ldr	r0, [r7, #12]
 8000e26:	f000 f80e 	bl	8000e46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000e2a:	69f8      	ldr	r0, [r7, #28]
 8000e2c:	f000 f88a 	bl	8000f44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000e30:	2301      	movs	r3, #1
 8000e32:	61bb      	str	r3, [r7, #24]
 8000e34:	e002      	b.n	8000e3c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000e3c:	69bb      	ldr	r3, [r7, #24]
	}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3720      	adds	r7, #32
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b086      	sub	sp, #24
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	60f8      	str	r0, [r7, #12]
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e56:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	21a5      	movs	r1, #165	; 0xa5
 8000e60:	f002 f8b6 	bl	8002fd0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4413      	add	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	f023 0307 	bic.w	r3, r3, #7
 8000e7c:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d01f      	beq.n	8000ec4 <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	e012      	b.n	8000eb0 <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	4413      	add	r3, r2
 8000e90:	7819      	ldrb	r1, [r3, #0]
 8000e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	4413      	add	r3, r2
 8000e98:	3334      	adds	r3, #52	; 0x34
 8000e9a:	460a      	mov	r2, r1
 8000e9c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d006      	beq.n	8000eb8 <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	3301      	adds	r3, #1
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	2b0f      	cmp	r3, #15
 8000eb4:	d9e9      	bls.n	8000e8a <prvInitialiseNewTask+0x44>
 8000eb6:	e000      	b.n	8000eba <prvInitialiseNewTask+0x74>
			{
				break;
 8000eb8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000ec2:	e003      	b.n	8000ecc <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000ecc:	6a3b      	ldr	r3, [r7, #32]
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	d901      	bls.n	8000ed6 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed8:	6a3a      	ldr	r2, [r7, #32]
 8000eda:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ede:	6a3a      	ldr	r2, [r7, #32]
 8000ee0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8000ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eea:	3304      	adds	r3, #4
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fc21 	bl	8000734 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef4:	3318      	adds	r3, #24
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fc1c 	bl	8000734 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f00:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f02:	6a3b      	ldr	r3, [r7, #32]
 8000f04:	f1c3 0205 	rsb	r2, r3, #5
 8000f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f0a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f14:	2200      	movs	r2, #0
 8000f16:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	68f9      	ldr	r1, [r7, #12]
 8000f24:	6938      	ldr	r0, [r7, #16]
 8000f26:	f7ff fc95 	bl	8000854 <pxPortInitialiseStack>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f2e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8000f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d002      	beq.n	8000f3c <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f3a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000f3c:	bf00      	nop
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000f44:	b5b0      	push	{r4, r5, r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000f4c:	f7ff fd0c 	bl	8000968 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000f50:	4b39      	ldr	r3, [pc, #228]	; (8001038 <prvAddNewTaskToReadyList+0xf4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	3301      	adds	r3, #1
 8000f56:	4a38      	ldr	r2, [pc, #224]	; (8001038 <prvAddNewTaskToReadyList+0xf4>)
 8000f58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000f5a:	4b38      	ldr	r3, [pc, #224]	; (800103c <prvAddNewTaskToReadyList+0xf8>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d109      	bne.n	8000f76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000f62:	4a36      	ldr	r2, [pc, #216]	; (800103c <prvAddNewTaskToReadyList+0xf8>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000f68:	4b33      	ldr	r3, [pc, #204]	; (8001038 <prvAddNewTaskToReadyList+0xf4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d110      	bne.n	8000f92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000f70:	f000 fa96 	bl	80014a0 <prvInitialiseTaskLists>
 8000f74:	e00d      	b.n	8000f92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000f76:	4b32      	ldr	r3, [pc, #200]	; (8001040 <prvAddNewTaskToReadyList+0xfc>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d109      	bne.n	8000f92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000f7e:	4b2f      	ldr	r3, [pc, #188]	; (800103c <prvAddNewTaskToReadyList+0xf8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d802      	bhi.n	8000f92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000f8c:	4a2b      	ldr	r2, [pc, #172]	; (800103c <prvAddNewTaskToReadyList+0xf8>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000f92:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <prvAddNewTaskToReadyList+0x100>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	3301      	adds	r3, #1
 8000f98:	4a2a      	ldr	r2, [pc, #168]	; (8001044 <prvAddNewTaskToReadyList+0x100>)
 8000f9a:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d016      	beq.n	8000fd0 <prvAddNewTaskToReadyList+0x8c>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f001 fb5d 	bl	8002664 <SEGGER_SYSVIEW_OnTaskCreate>
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	461d      	mov	r5, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	461c      	mov	r4, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	1ae3      	subs	r3, r4, r3
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	462b      	mov	r3, r5
 8000fcc:	f000 fb7c 	bl	80016c8 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f001 fbce 	bl	8002774 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fdc:	2201      	movs	r2, #1
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	4b19      	ldr	r3, [pc, #100]	; (8001048 <prvAddNewTaskToReadyList+0x104>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	4a18      	ldr	r2, [pc, #96]	; (8001048 <prvAddNewTaskToReadyList+0x104>)
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fee:	4613      	mov	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4a15      	ldr	r2, [pc, #84]	; (800104c <prvAddNewTaskToReadyList+0x108>)
 8000ff8:	441a      	add	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	4619      	mov	r1, r3
 8001000:	4610      	mov	r0, r2
 8001002:	f7ff fba3 	bl	800074c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001006:	f7ff fcc7 	bl	8000998 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <prvAddNewTaskToReadyList+0xfc>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00e      	beq.n	8001030 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <prvAddNewTaskToReadyList+0xf8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101c:	429a      	cmp	r2, r3
 800101e:	d207      	bcs.n	8001030 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <prvAddNewTaskToReadyList+0x10c>)
 8001022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	f3bf 8f4f 	dsb	sy
 800102c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bdb0      	pop	{r4, r5, r7, pc}
 8001038:	20003990 	.word	0x20003990
 800103c:	200038b8 	.word	0x200038b8
 8001040:	2000399c 	.word	0x2000399c
 8001044:	200039ac 	.word	0x200039ac
 8001048:	20003998 	.word	0x20003998
 800104c:	200038bc 	.word	0x200038bc
 8001050:	e000ed04 	.word	0xe000ed04

08001054 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00c      	beq.n	8001080 <vTaskDelay+0x2c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 8001066:	f000 f863 	bl	8001130 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	2023      	movs	r0, #35	; 0x23
 800106e:	f000 ff2b 	bl	8001ec8 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001072:	2100      	movs	r1, #0
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 faaf 	bl	80015d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800107a:	f000 f867 	bl	800114c <xTaskResumeAll>
 800107e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d107      	bne.n	8001096 <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <vTaskDelay+0x4c>)
 8001088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	f3bf 8f4f 	dsb	sy
 8001092:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	e000ed04 	.word	0xe000ed04

080010a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <vTaskStartScheduler+0x70>)
 80010ac:	9301      	str	r3, [sp, #4]
 80010ae:	2300      	movs	r3, #0
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2300      	movs	r3, #0
 80010b4:	2280      	movs	r2, #128	; 0x80
 80010b6:	4918      	ldr	r1, [pc, #96]	; (8001118 <vTaskStartScheduler+0x74>)
 80010b8:	4818      	ldr	r0, [pc, #96]	; (800111c <vTaskStartScheduler+0x78>)
 80010ba:	f7ff fe83 	bl	8000dc4 <xTaskCreate>
 80010be:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d122      	bne.n	800110c <vTaskStartScheduler+0x68>
	__asm volatile
 80010c6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80010ca:	f383 8811 	msr	BASEPRI, r3
 80010ce:	f3bf 8f6f 	isb	sy
 80010d2:	f3bf 8f4f 	dsb	sy
 80010d6:	603b      	str	r3, [r7, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <vTaskStartScheduler+0x7c>)
 80010da:	f04f 32ff 	mov.w	r2, #4294967295
 80010de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80010e0:	4b10      	ldr	r3, [pc, #64]	; (8001124 <vTaskStartScheduler+0x80>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <vTaskStartScheduler+0x84>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <vTaskStartScheduler+0x88>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <vTaskStartScheduler+0x70>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d102      	bne.n	80010fe <vTaskStartScheduler+0x5a>
 80010f8:	f001 fa98 	bl	800262c <SEGGER_SYSVIEW_OnIdle>
 80010fc:	e004      	b.n	8001108 <vTaskStartScheduler+0x64>
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <vTaskStartScheduler+0x88>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f001 faf2 	bl	80026ec <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001108:	f7ff fc0e 	bl	8000928 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200039b4 	.word	0x200039b4
 8001118:	08003838 	.word	0x08003838
 800111c:	08001471 	.word	0x08001471
 8001120:	200039b0 	.word	0x200039b0
 8001124:	2000399c 	.word	0x2000399c
 8001128:	20003994 	.word	0x20003994
 800112c:	200038b8 	.word	0x200038b8

08001130 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <vTaskSuspendAll+0x18>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	4a03      	ldr	r2, [pc, #12]	; (8001148 <vTaskSuspendAll+0x18>)
 800113c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	200039b8 	.word	0x200039b8

0800114c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800115a:	f7ff fc05 	bl	8000968 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800115e:	4b3b      	ldr	r3, [pc, #236]	; (800124c <xTaskResumeAll+0x100>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	3b01      	subs	r3, #1
 8001164:	4a39      	ldr	r2, [pc, #228]	; (800124c <xTaskResumeAll+0x100>)
 8001166:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001168:	4b38      	ldr	r3, [pc, #224]	; (800124c <xTaskResumeAll+0x100>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d165      	bne.n	800123c <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001170:	4b37      	ldr	r3, [pc, #220]	; (8001250 <xTaskResumeAll+0x104>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d061      	beq.n	800123c <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001178:	e032      	b.n	80011e0 <xTaskResumeAll+0x94>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800117a:	4b36      	ldr	r3, [pc, #216]	; (8001254 <xTaskResumeAll+0x108>)
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	3318      	adds	r3, #24
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fb3b 	bl	8000802 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	3304      	adds	r3, #4
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fb36 	bl	8000802 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4618      	mov	r0, r3
 800119a:	f001 faeb 	bl	8002774 <SEGGER_SYSVIEW_OnTaskStartReady>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a2:	2201      	movs	r2, #1
 80011a4:	409a      	lsls	r2, r3
 80011a6:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <xTaskResumeAll+0x10c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	4a2a      	ldr	r2, [pc, #168]	; (8001258 <xTaskResumeAll+0x10c>)
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4a27      	ldr	r2, [pc, #156]	; (800125c <xTaskResumeAll+0x110>)
 80011be:	441a      	add	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	3304      	adds	r3, #4
 80011c4:	4619      	mov	r1, r3
 80011c6:	4610      	mov	r0, r2
 80011c8:	f7ff fac0 	bl	800074c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011d0:	4b23      	ldr	r3, [pc, #140]	; (8001260 <xTaskResumeAll+0x114>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d302      	bcc.n	80011e0 <xTaskResumeAll+0x94>
					{
						xYieldPending = pdTRUE;
 80011da:	4b22      	ldr	r3, [pc, #136]	; (8001264 <xTaskResumeAll+0x118>)
 80011dc:	2201      	movs	r2, #1
 80011de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80011e0:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <xTaskResumeAll+0x108>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1c8      	bne.n	800117a <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <xTaskResumeAll+0xa6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80011ee:	f000 f9d3 	bl	8001598 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80011f2:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <xTaskResumeAll+0x11c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d010      	beq.n	8001220 <xTaskResumeAll+0xd4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80011fe:	f000 f837 	bl	8001270 <xTaskIncrementTick>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d002      	beq.n	800120e <xTaskResumeAll+0xc2>
							{
								xYieldPending = pdTRUE;
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <xTaskResumeAll+0x118>)
 800120a:	2201      	movs	r2, #1
 800120c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3b01      	subs	r3, #1
 8001212:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f1      	bne.n	80011fe <xTaskResumeAll+0xb2>

						xPendedTicks = 0;
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <xTaskResumeAll+0x11c>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <xTaskResumeAll+0x118>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d009      	beq.n	800123c <xTaskResumeAll+0xf0>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001228:	2301      	movs	r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <xTaskResumeAll+0x120>)
 800122e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	f3bf 8f4f 	dsb	sy
 8001238:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800123c:	f7ff fbac 	bl	8000998 <vPortExitCritical>

	return xAlreadyYielded;
 8001240:	68bb      	ldr	r3, [r7, #8]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	200039b8 	.word	0x200039b8
 8001250:	20003990 	.word	0x20003990
 8001254:	20003950 	.word	0x20003950
 8001258:	20003998 	.word	0x20003998
 800125c:	200038bc 	.word	0x200038bc
 8001260:	200038b8 	.word	0x200038b8
 8001264:	200039a4 	.word	0x200039a4
 8001268:	200039a0 	.word	0x200039a0
 800126c:	e000ed04 	.word	0xe000ed04

08001270 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800127a:	4b48      	ldr	r3, [pc, #288]	; (800139c <xTaskIncrementTick+0x12c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	f040 8082 	bne.w	8001388 <xTaskIncrementTick+0x118>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001284:	4b46      	ldr	r3, [pc, #280]	; (80013a0 <xTaskIncrementTick+0x130>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800128c:	4a44      	ldr	r2, [pc, #272]	; (80013a0 <xTaskIncrementTick+0x130>)
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d110      	bne.n	80012ba <xTaskIncrementTick+0x4a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001298:	4b42      	ldr	r3, [pc, #264]	; (80013a4 <xTaskIncrementTick+0x134>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	4b42      	ldr	r3, [pc, #264]	; (80013a8 <xTaskIncrementTick+0x138>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a40      	ldr	r2, [pc, #256]	; (80013a4 <xTaskIncrementTick+0x134>)
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	4a40      	ldr	r2, [pc, #256]	; (80013a8 <xTaskIncrementTick+0x138>)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b3f      	ldr	r3, [pc, #252]	; (80013ac <xTaskIncrementTick+0x13c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	3301      	adds	r3, #1
 80012b2:	4a3e      	ldr	r2, [pc, #248]	; (80013ac <xTaskIncrementTick+0x13c>)
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	f000 f96f 	bl	8001598 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80012ba:	4b3d      	ldr	r3, [pc, #244]	; (80013b0 <xTaskIncrementTick+0x140>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d34c      	bcc.n	800135e <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80012c4:	4b37      	ldr	r3, [pc, #220]	; (80013a4 <xTaskIncrementTick+0x134>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d104      	bne.n	80012d8 <xTaskIncrementTick+0x68>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012ce:	4b38      	ldr	r3, [pc, #224]	; (80013b0 <xTaskIncrementTick+0x140>)
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295
 80012d4:	601a      	str	r2, [r3, #0]
					break;
 80012d6:	e042      	b.n	800135e <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80012d8:	4b32      	ldr	r3, [pc, #200]	; (80013a4 <xTaskIncrementTick+0x134>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d203      	bcs.n	80012f8 <xTaskIncrementTick+0x88>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80012f0:	4a2f      	ldr	r2, [pc, #188]	; (80013b0 <xTaskIncrementTick+0x140>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80012f6:	e032      	b.n	800135e <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	3304      	adds	r3, #4
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fa80 	bl	8000802 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001306:	2b00      	cmp	r3, #0
 8001308:	d004      	beq.n	8001314 <xTaskIncrementTick+0xa4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	3318      	adds	r3, #24
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fa77 	bl	8000802 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	4618      	mov	r0, r3
 8001318:	f001 fa2c 	bl	8002774 <SEGGER_SYSVIEW_OnTaskStartReady>
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001320:	2201      	movs	r2, #1
 8001322:	409a      	lsls	r2, r3
 8001324:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <xTaskIncrementTick+0x144>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4313      	orrs	r3, r2
 800132a:	4a22      	ldr	r2, [pc, #136]	; (80013b4 <xTaskIncrementTick+0x144>)
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001332:	4613      	mov	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4a1f      	ldr	r2, [pc, #124]	; (80013b8 <xTaskIncrementTick+0x148>)
 800133c:	441a      	add	r2, r3
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	3304      	adds	r3, #4
 8001342:	4619      	mov	r1, r3
 8001344:	4610      	mov	r0, r2
 8001346:	f7ff fa01 	bl	800074c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800134e:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <xTaskIncrementTick+0x14c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001354:	429a      	cmp	r2, r3
 8001356:	d3b5      	bcc.n	80012c4 <xTaskIncrementTick+0x54>
						{
							xSwitchRequired = pdTRUE;
 8001358:	2301      	movs	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800135c:	e7b2      	b.n	80012c4 <xTaskIncrementTick+0x54>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800135e:	4b17      	ldr	r3, [pc, #92]	; (80013bc <xTaskIncrementTick+0x14c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001364:	4914      	ldr	r1, [pc, #80]	; (80013b8 <xTaskIncrementTick+0x148>)
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	440b      	add	r3, r1
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d901      	bls.n	800137a <xTaskIncrementTick+0x10a>
			{
				xSwitchRequired = pdTRUE;
 8001376:	2301      	movs	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <xTaskIncrementTick+0x150>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d007      	beq.n	8001392 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8001382:	2301      	movs	r3, #1
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	e004      	b.n	8001392 <xTaskIncrementTick+0x122>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <xTaskIncrementTick+0x154>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <xTaskIncrementTick+0x154>)
 8001390:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001392:	697b      	ldr	r3, [r7, #20]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200039b8 	.word	0x200039b8
 80013a0:	20003994 	.word	0x20003994
 80013a4:	20003948 	.word	0x20003948
 80013a8:	2000394c 	.word	0x2000394c
 80013ac:	200039a8 	.word	0x200039a8
 80013b0:	200039b0 	.word	0x200039b0
 80013b4:	20003998 	.word	0x20003998
 80013b8:	200038bc 	.word	0x200038bc
 80013bc:	200038b8 	.word	0x200038b8
 80013c0:	200039a4 	.word	0x200039a4
 80013c4:	200039a0 	.word	0x200039a0

080013c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80013ce:	4b22      	ldr	r3, [pc, #136]	; (8001458 <vTaskSwitchContext+0x90>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80013d6:	4b21      	ldr	r3, [pc, #132]	; (800145c <vTaskSwitchContext+0x94>)
 80013d8:	2201      	movs	r2, #1
 80013da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80013dc:	e038      	b.n	8001450 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 80013de:	4b1f      	ldr	r3, [pc, #124]	; (800145c <vTaskSwitchContext+0x94>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013e4:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <vTaskSwitchContext+0x98>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	fab3 f383 	clz	r3, r3
 80013f0:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	f1c3 031f 	rsb	r3, r3, #31
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4a17      	ldr	r2, [pc, #92]	; (8001464 <vTaskSwitchContext+0x9c>)
 8001406:	4413      	add	r3, r2
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	3308      	adds	r3, #8
 800141c:	429a      	cmp	r2, r3
 800141e:	d104      	bne.n	800142a <vTaskSwitchContext+0x62>
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	4a0d      	ldr	r2, [pc, #52]	; (8001468 <vTaskSwitchContext+0xa0>)
 8001432:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <vTaskSwitchContext+0xa0>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <vTaskSwitchContext+0xa4>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	429a      	cmp	r2, r3
 800143e:	d102      	bne.n	8001446 <vTaskSwitchContext+0x7e>
 8001440:	f001 f8f4 	bl	800262c <SEGGER_SYSVIEW_OnIdle>
}
 8001444:	e004      	b.n	8001450 <vTaskSwitchContext+0x88>
		traceTASK_SWITCHED_IN();
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <vTaskSwitchContext+0xa0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f001 f94e 	bl	80026ec <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	200039b8 	.word	0x200039b8
 800145c:	200039a4 	.word	0x200039a4
 8001460:	20003998 	.word	0x20003998
 8001464:	200038bc 	.word	0x200038bc
 8001468:	200038b8 	.word	0x200038b8
 800146c:	200039b4 	.word	0x200039b4

08001470 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001478:	f000 f852 	bl	8001520 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <prvIdleTask+0x28>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d9f9      	bls.n	8001478 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <prvIdleTask+0x2c>)
 8001486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	f3bf 8f4f 	dsb	sy
 8001490:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001494:	e7f0      	b.n	8001478 <prvIdleTask+0x8>
 8001496:	bf00      	nop
 8001498:	200038bc 	.word	0x200038bc
 800149c:	e000ed04 	.word	0xe000ed04

080014a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	e00c      	b.n	80014c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4a12      	ldr	r2, [pc, #72]	; (8001500 <prvInitialiseTaskLists+0x60>)
 80014b8:	4413      	add	r3, r2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f91b 	bl	80006f6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3301      	adds	r3, #1
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d9ef      	bls.n	80014ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80014cc:	480d      	ldr	r0, [pc, #52]	; (8001504 <prvInitialiseTaskLists+0x64>)
 80014ce:	f7ff f912 	bl	80006f6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80014d2:	480d      	ldr	r0, [pc, #52]	; (8001508 <prvInitialiseTaskLists+0x68>)
 80014d4:	f7ff f90f 	bl	80006f6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80014d8:	480c      	ldr	r0, [pc, #48]	; (800150c <prvInitialiseTaskLists+0x6c>)
 80014da:	f7ff f90c 	bl	80006f6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80014de:	480c      	ldr	r0, [pc, #48]	; (8001510 <prvInitialiseTaskLists+0x70>)
 80014e0:	f7ff f909 	bl	80006f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80014e4:	480b      	ldr	r0, [pc, #44]	; (8001514 <prvInitialiseTaskLists+0x74>)
 80014e6:	f7ff f906 	bl	80006f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <prvInitialiseTaskLists+0x78>)
 80014ec:	4a05      	ldr	r2, [pc, #20]	; (8001504 <prvInitialiseTaskLists+0x64>)
 80014ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80014f0:	4b0a      	ldr	r3, [pc, #40]	; (800151c <prvInitialiseTaskLists+0x7c>)
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <prvInitialiseTaskLists+0x68>)
 80014f4:	601a      	str	r2, [r3, #0]
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200038bc 	.word	0x200038bc
 8001504:	20003920 	.word	0x20003920
 8001508:	20003934 	.word	0x20003934
 800150c:	20003950 	.word	0x20003950
 8001510:	20003964 	.word	0x20003964
 8001514:	2000397c 	.word	0x2000397c
 8001518:	20003948 	.word	0x20003948
 800151c:	2000394c 	.word	0x2000394c

08001520 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001526:	e019      	b.n	800155c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001528:	f7ff fa1e 	bl	8000968 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <prvCheckTasksWaitingTermination+0x4c>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3304      	adds	r3, #4
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f962 	bl	8000802 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <prvCheckTasksWaitingTermination+0x50>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	3b01      	subs	r3, #1
 8001544:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <prvCheckTasksWaitingTermination+0x50>)
 8001546:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001548:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <prvCheckTasksWaitingTermination+0x54>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	3b01      	subs	r3, #1
 800154e:	4a09      	ldr	r2, [pc, #36]	; (8001574 <prvCheckTasksWaitingTermination+0x54>)
 8001550:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001552:	f7ff fa21 	bl	8000998 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f80e 	bl	8001578 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <prvCheckTasksWaitingTermination+0x54>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1e1      	bne.n	8001528 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20003964 	.word	0x20003964
 8001570:	20003990 	.word	0x20003990
 8001574:	20003978 	.word	0x20003978

08001578 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fb23 	bl	8000bd0 <vPortFree>
			vPortFree( pxTCB );
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff fb20 	bl	8000bd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <prvResetNextTaskUnblockTime+0x38>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d104      	bne.n	80015b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <prvResetNextTaskUnblockTime+0x3c>)
 80015aa:	f04f 32ff 	mov.w	r2, #4294967295
 80015ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80015b0:	e008      	b.n	80015c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015b2:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <prvResetNextTaskUnblockTime+0x38>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <prvResetNextTaskUnblockTime+0x3c>)
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	20003948 	.word	0x20003948
 80015d4:	200039b0 	.word	0x200039b0

080015d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80015e2:	4b32      	ldr	r3, [pc, #200]	; (80016ac <prvAddCurrentTaskToDelayedList+0xd4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80015e8:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <prvAddCurrentTaskToDelayedList+0xd8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3304      	adds	r3, #4
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff f907 	bl	8000802 <uxListRemove>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10b      	bne.n	8001612 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80015fa:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <prvAddCurrentTaskToDelayedList+0xd8>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	2201      	movs	r2, #1
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43da      	mvns	r2, r3
 8001608:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <prvAddCurrentTaskToDelayedList+0xdc>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4013      	ands	r3, r2
 800160e:	4a29      	ldr	r2, [pc, #164]	; (80016b4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001610:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001618:	d110      	bne.n	800163c <prvAddCurrentTaskToDelayedList+0x64>
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00d      	beq.n	800163c <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001620:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	211b      	movs	r1, #27
 8001626:	4618      	mov	r0, r3
 8001628:	f001 f8e8 	bl	80027fc <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800162c:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	3304      	adds	r3, #4
 8001632:	4619      	mov	r1, r3
 8001634:	4820      	ldr	r0, [pc, #128]	; (80016b8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8001636:	f7ff f889 	bl	800074c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800163a:	e032      	b.n	80016a2 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800164c:	68ba      	ldr	r2, [r7, #8]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	429a      	cmp	r2, r3
 8001652:	d20f      	bcs.n	8001674 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2104      	movs	r1, #4
 800165a:	4618      	mov	r0, r3
 800165c:	f001 f8ce 	bl	80027fc <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001660:	4b16      	ldr	r3, [pc, #88]	; (80016bc <prvAddCurrentTaskToDelayedList+0xe4>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	3304      	adds	r3, #4
 800166a:	4619      	mov	r1, r3
 800166c:	4610      	mov	r0, r2
 800166e:	f7ff f890 	bl	8000792 <vListInsert>
}
 8001672:	e016      	b.n	80016a2 <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2104      	movs	r1, #4
 800167a:	4618      	mov	r0, r3
 800167c:	f001 f8be 	bl	80027fc <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	3304      	adds	r3, #4
 800168a:	4619      	mov	r1, r3
 800168c:	4610      	mov	r0, r2
 800168e:	f7ff f880 	bl	8000792 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <prvAddCurrentTaskToDelayedList+0xec>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	429a      	cmp	r2, r3
 800169a:	d202      	bcs.n	80016a2 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 800169c:	4a09      	ldr	r2, [pc, #36]	; (80016c4 <prvAddCurrentTaskToDelayedList+0xec>)
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	6013      	str	r3, [r2, #0]
}
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20003994 	.word	0x20003994
 80016b0:	200038b8 	.word	0x200038b8
 80016b4:	20003998 	.word	0x20003998
 80016b8:	2000397c 	.word	0x2000397c
 80016bc:	2000394c 	.word	0x2000394c
 80016c0:	20003948 	.word	0x20003948
 80016c4:	200039b0 	.word	0x200039b0

080016c8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af02      	add	r7, sp, #8
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
 80016d4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80016d6:	2205      	movs	r2, #5
 80016d8:	492b      	ldr	r1, [pc, #172]	; (8001788 <SYSVIEW_AddTask+0xc0>)
 80016da:	68b8      	ldr	r0, [r7, #8]
 80016dc:	f001 fc5e 	bl	8002f9c <memcmp>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d04b      	beq.n	800177e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80016e6:	4b29      	ldr	r3, [pc, #164]	; (800178c <SYSVIEW_AddTask+0xc4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b07      	cmp	r3, #7
 80016ec:	d903      	bls.n	80016f6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80016ee:	4828      	ldr	r0, [pc, #160]	; (8001790 <SYSVIEW_AddTask+0xc8>)
 80016f0:	f001 f9c0 	bl	8002a74 <SEGGER_SYSVIEW_Warn>
    return;
 80016f4:	e044      	b.n	8001780 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80016f6:	4b25      	ldr	r3, [pc, #148]	; (800178c <SYSVIEW_AddTask+0xc4>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	4926      	ldr	r1, [pc, #152]	; (8001794 <SYSVIEW_AddTask+0xcc>)
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <SYSVIEW_AddTask+0xc4>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4921      	ldr	r1, [pc, #132]	; (8001794 <SYSVIEW_AddTask+0xcc>)
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	3304      	adds	r3, #4
 800171c:	68ba      	ldr	r2, [r7, #8]
 800171e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <SYSVIEW_AddTask+0xc4>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	491b      	ldr	r1, [pc, #108]	; (8001794 <SYSVIEW_AddTask+0xcc>)
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	440b      	add	r3, r1
 8001730:	3308      	adds	r3, #8
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <SYSVIEW_AddTask+0xc4>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4916      	ldr	r1, [pc, #88]	; (8001794 <SYSVIEW_AddTask+0xcc>)
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	330c      	adds	r3, #12
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <SYSVIEW_AddTask+0xc4>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4910      	ldr	r1, [pc, #64]	; (8001794 <SYSVIEW_AddTask+0xcc>)
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	440b      	add	r3, r1
 800175c:	3310      	adds	r3, #16
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <SYSVIEW_AddTask+0xc4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	3301      	adds	r3, #1
 8001768:	4a08      	ldr	r2, [pc, #32]	; (800178c <SYSVIEW_AddTask+0xc4>)
 800176a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 f80e 	bl	8001798 <SYSVIEW_SendTaskInfo>
 800177c:	e000      	b.n	8001780 <SYSVIEW_AddTask+0xb8>
    return;
 800177e:	bf00      	nop

}
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	08003840 	.word	0x08003840
 800178c:	20003a5c 	.word	0x20003a5c
 8001790:	08003848 	.word	0x08003848
 8001794:	200039bc 	.word	0x200039bc

08001798 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	; 0x28
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
 80017a4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	2214      	movs	r2, #20
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f001 fc0e 	bl	8002fd0 <memset>
  TaskInfo.TaskID     = TaskID;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80017c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 fd8d 	bl	80022ec <SEGGER_SYSVIEW_SendTaskInfo>
}
 80017d2:	bf00      	nop
 80017d4:	3728      	adds	r7, #40	; 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 80017e2:	4b21      	ldr	r3, [pc, #132]	; (8001868 <_DoInit+0x8c>)
 80017e4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2203      	movs	r2, #3
 80017ea:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2203      	movs	r2, #3
 80017f0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a1d      	ldr	r2, [pc, #116]	; (800186c <_DoInit+0x90>)
 80017f6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a1d      	ldr	r2, [pc, #116]	; (8001870 <_DoInit+0x94>)
 80017fc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001804:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a14      	ldr	r2, [pc, #80]	; (800186c <_DoInit+0x90>)
 800181c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a14      	ldr	r2, [pc, #80]	; (8001874 <_DoInit+0x98>)
 8001822:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2210      	movs	r2, #16
 8001828:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3307      	adds	r3, #7
 8001840:	4a0d      	ldr	r2, [pc, #52]	; (8001878 <_DoInit+0x9c>)
 8001842:	6810      	ldr	r0, [r2, #0]
 8001844:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a0c      	ldr	r2, [pc, #48]	; (800187c <_DoInit+0xa0>)
 800184a:	6810      	ldr	r0, [r2, #0]
 800184c:	6018      	str	r0, [r3, #0]
 800184e:	8891      	ldrh	r1, [r2, #4]
 8001850:	7992      	ldrb	r2, [r2, #6]
 8001852:	8099      	strh	r1, [r3, #4]
 8001854:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2220      	movs	r2, #32
 800185a:	719a      	strb	r2, [r3, #6]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20003f98 	.word	0x20003f98
 800186c:	08003898 	.word	0x08003898
 8001870:	20003a60 	.word	0x20003a60
 8001874:	20003e60 	.word	0x20003e60
 8001878:	080038a4 	.word	0x080038a4
 800187c:	080038a8 	.word	0x080038a8

08001880 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	; 0x28
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 800188c:	4b3c      	ldr	r3, [pc, #240]	; (8001980 <SEGGER_RTT_ReadNoLock+0x100>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <SEGGER_RTT_ReadNoLock+0x18>
 8001894:	f7ff ffa2 	bl	80017dc <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	4613      	mov	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4413      	add	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	3360      	adds	r3, #96	; 0x60
 80018a4:	4a36      	ldr	r2, [pc, #216]	; (8001980 <SEGGER_RTT_ReadNoLock+0x100>)
 80018a6:	4413      	add	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80018be:	6a3a      	ldr	r2, [r7, #32]
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d92a      	bls.n	800191c <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4293      	cmp	r3, r2
 80018d6:	bf28      	it	cs
 80018d8:	4613      	movcs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	4413      	add	r3, r2
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4619      	mov	r1, r3
 80018e8:	69f8      	ldr	r0, [r7, #28]
 80018ea:	f001 fb66 	bl	8002fba <memcpy>
    NumBytesRead += NumBytesRem;
 80018ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	4413      	add	r3, r2
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80018f6:	69fa      	ldr	r2, [r7, #28]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4413      	add	r3, r2
 80018fc:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001906:	6a3a      	ldr	r2, [r7, #32]
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4413      	add	r3, r2
 800190c:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	429a      	cmp	r2, r3
 8001916:	d101      	bne.n	800191c <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8001918:	2300      	movs	r3, #0
 800191a:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4293      	cmp	r3, r2
 800192a:	bf28      	it	cs
 800192c:	4613      	movcs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d018      	beq.n	8001968 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	6a3b      	ldr	r3, [r7, #32]
 800193c:	4413      	add	r3, r2
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4619      	mov	r1, r3
 8001942:	69f8      	ldr	r0, [r7, #28]
 8001944:	f001 fb39 	bl	8002fba <memcpy>
    NumBytesRead += NumBytesRem;
 8001948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4413      	add	r3, r2
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4413      	add	r3, r2
 8001956:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001960:	6a3a      	ldr	r2, [r7, #32]
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	4413      	add	r3, r2
 8001966:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	6a3a      	ldr	r2, [r7, #32]
 8001972:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001976:	4618      	mov	r0, r3
 8001978:	3728      	adds	r7, #40	; 0x28
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20003f98 	.word	0x20003f98

08001984 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	4613      	mov	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4a3f      	ldr	r2, [pc, #252]	; (8001aa0 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 80019a2:	4413      	add	r3, r2
 80019a4:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 80019a6:	6a3b      	ldr	r3, [r7, #32]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d854      	bhi.n	8001a64 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 80019ba:	6a3b      	ldr	r3, [r7, #32]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	3b01      	subs	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d30f      	bcc.n	80019ee <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	4413      	add	r3, r2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019da:	4618      	mov	r0, r3
 80019dc:	f001 faed 	bl	8002fba <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	441a      	add	r2, r3
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e054      	b.n	8001a98 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	4413      	add	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d34b      	bcc.n	8001a96 <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d90e      	bls.n	8001a2e <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	4413      	add	r3, r2
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f001 facc 	bl	8002fba <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	441a      	add	r2, r3
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	e018      	b.n	8001a60 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	4413      	add	r3, r2
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f001 fabd 	bl	8002fba <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8001a40:	6a3b      	ldr	r3, [r7, #32]
 8001a42:	6858      	ldr	r0, [r3, #4]
 8001a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	18d1      	adds	r1, r2, r3
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	461a      	mov	r2, r3
 8001a52:	f001 fab2 	bl	8002fba <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad2      	subs	r2, r2, r3
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e019      	b.n	8001a98 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8001a64:	69fa      	ldr	r2, [r7, #28]
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d30f      	bcc.n	8001a96 <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a82:	4618      	mov	r0, r3
 8001a84:	f001 fa99 	bl	8002fba <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	441a      	add	r2, r3
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3728      	adds	r7, #40	; 0x28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20003f98 	.word	0x20003f98

08001aa4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8001aa4:	b480      	push	{r7}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8001ab4:	e002      	b.n	8001abc <_EncodeStr+0x18>
    Len++;
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f6      	bne.n	8001ab6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d901      	bls.n	8001ad4 <_EncodeStr+0x30>
    Len = Limit;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	2bfe      	cmp	r3, #254	; 0xfe
 8001ad8:	d806      	bhi.n	8001ae8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	60fa      	str	r2, [r7, #12]
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	701a      	strb	r2, [r3, #0]
 8001ae6:	e011      	b.n	8001b0c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	60fa      	str	r2, [r7, #12]
 8001aee:	22ff      	movs	r2, #255	; 0xff
 8001af0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	1c5a      	adds	r2, r3, #1
 8001af6:	60fa      	str	r2, [r7, #12]
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	60fa      	str	r2, [r7, #12]
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	0a12      	lsrs	r2, r2, #8
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8001b10:	e00a      	b.n	8001b28 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1c5a      	adds	r2, r3, #1
 8001b16:	60fa      	str	r2, [r7, #12]
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	1c51      	adds	r1, r2, #1
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	7812      	ldrb	r2, [r2, #0]
 8001b20:	701a      	strb	r2, [r3, #0]
    n++;
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	3301      	adds	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d3f0      	bcc.n	8001b12 <_EncodeStr+0x6e>
  }
  return pPayload;
 8001b30:	68fb      	ldr	r3, [r7, #12]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	371c      	adds	r7, #28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3304      	adds	r3, #4
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001b58:	1cfb      	adds	r3, r7, #3
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f7ff fe8e 	bl	8001880 <SEGGER_RTT_ReadNoLock>
 8001b64:	4603      	mov	r3, r0
 8001b66:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	dd47      	ble.n	8001bfe <_HandleIncomingPacket+0xac>
    switch (Cmd) {
 8001b6e:	78fb      	ldrb	r3, [r7, #3]
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d01a      	beq.n	8001baa <_HandleIncomingPacket+0x58>
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	dc06      	bgt.n	8001b86 <_HandleIncomingPacket+0x34>
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d010      	beq.n	8001b9e <_HandleIncomingPacket+0x4c>
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	dc11      	bgt.n	8001ba4 <_HandleIncomingPacket+0x52>
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d009      	beq.n	8001b98 <_HandleIncomingPacket+0x46>
 8001b84:	e02d      	b.n	8001be2 <_HandleIncomingPacket+0x90>
 8001b86:	2b06      	cmp	r3, #6
 8001b88:	d015      	beq.n	8001bb6 <_HandleIncomingPacket+0x64>
 8001b8a:	2b06      	cmp	r3, #6
 8001b8c:	db10      	blt.n	8001bb0 <_HandleIncomingPacket+0x5e>
 8001b8e:	2b07      	cmp	r3, #7
 8001b90:	d014      	beq.n	8001bbc <_HandleIncomingPacket+0x6a>
 8001b92:	2b80      	cmp	r3, #128	; 0x80
 8001b94:	d015      	beq.n	8001bc2 <_HandleIncomingPacket+0x70>
 8001b96:	e024      	b.n	8001be2 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8001b98:	f000 fa2c 	bl	8001ff4 <SEGGER_SYSVIEW_Start>
      break;
 8001b9c:	e02f      	b.n	8001bfe <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8001b9e:	f000 fae5 	bl	800216c <SEGGER_SYSVIEW_Stop>
      break;
 8001ba2:	e02c      	b.n	8001bfe <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8001ba4:	f000 fc9c 	bl	80024e0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8001ba8:	e029      	b.n	8001bfe <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8001baa:	f000 fc85 	bl	80024b8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8001bae:	e026      	b.n	8001bfe <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8001bb0:	f000 fb02 	bl	80021b8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8001bb4:	e023      	b.n	8001bfe <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8001bb6:	f000 ff1f 	bl	80029f8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8001bba:	e020      	b.n	8001bfe <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8001bbc:	f000 fefe 	bl	80029bc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8001bc0:	e01d      	b.n	8001bfe <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001bc2:	1cfb      	adds	r3, r7, #3
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f7ff fe59 	bl	8001880 <SEGGER_RTT_ReadNoLock>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	dd0f      	ble.n	8001bf8 <_HandleIncomingPacket+0xa6>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 fe6e 	bl	80028bc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8001be0:	e00a      	b.n	8001bf8 <_HandleIncomingPacket+0xa6>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	b25b      	sxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	da08      	bge.n	8001bfc <_HandleIncomingPacket+0xaa>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001bea:	1cfb      	adds	r3, r7, #3
 8001bec:	2201      	movs	r2, #1
 8001bee:	4619      	mov	r1, r3
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f7ff fe45 	bl	8001880 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8001bf6:	e001      	b.n	8001bfc <_HandleIncomingPacket+0xaa>
      break;
 8001bf8:	bf00      	nop
 8001bfa:	e000      	b.n	8001bfe <_HandleIncomingPacket+0xac>
      break;
 8001bfc:	bf00      	nop
    }
  }
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08c      	sub	sp, #48	; 0x30
 8001c0c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8001c0e:	2301      	movs	r3, #1
 8001c10:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	3301      	adds	r3, #1
 8001c16:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c1c:	4b30      	ldr	r3, [pc, #192]	; (8001ce0 <_TrySendOverflowPacket+0xd8>)
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c22:	e00b      	b.n	8001c3c <_TrySendOverflowPacket+0x34>
 8001c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]
 8001c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c38:	09db      	lsrs	r3, r3, #7
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3e:	2b7f      	cmp	r3, #127	; 0x7f
 8001c40:	d8f0      	bhi.n	8001c24 <_TrySendOverflowPacket+0x1c>
 8001c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	701a      	strb	r2, [r3, #0]
 8001c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c50:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001c52:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <_TrySendOverflowPacket+0xdc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001c58:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <_TrySendOverflowPacket+0xd8>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	623b      	str	r3, [r7, #32]
 8001c6a:	e00b      	b.n	8001c84 <_TrySendOverflowPacket+0x7c>
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	627a      	str	r2, [r7, #36]	; 0x24
 8001c72:	6a3a      	ldr	r2, [r7, #32]
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	701a      	strb	r2, [r3, #0]
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	09db      	lsrs	r3, r3, #7
 8001c82:	623b      	str	r3, [r7, #32]
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	2b7f      	cmp	r3, #127	; 0x7f
 8001c88:	d8f0      	bhi.n	8001c6c <_TrySendOverflowPacket+0x64>
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	627a      	str	r2, [r7, #36]	; 0x24
 8001c90:	6a3a      	ldr	r2, [r7, #32]
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	701a      	strb	r2, [r3, #0]
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8001c9a:	69fa      	ldr	r2, [r7, #28]
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f7ff fe6c 	bl	8001984 <SEGGER_RTT_WriteSkipNoLock>
 8001cac:	4603      	mov	r3, r0
 8001cae:	613b      	str	r3, [r7, #16]
  if (Status) {
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d009      	beq.n	8001cca <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <_TrySendOverflowPacket+0xd8>)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <_TrySendOverflowPacket+0xd8>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <_TrySendOverflowPacket+0xd8>)
 8001cc6:	701a      	strb	r2, [r3, #0]
 8001cc8:	e004      	b.n	8001cd4 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8001cca:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <_TrySendOverflowPacket+0xd8>)
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	4a03      	ldr	r2, [pc, #12]	; (8001ce0 <_TrySendOverflowPacket+0xd8>)
 8001cd2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8001cd4:	693b      	ldr	r3, [r7, #16]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3730      	adds	r7, #48	; 0x30
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20003e70 	.word	0x20003e70
 8001ce4:	e0001004 	.word	0xe0001004

08001ce8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8001cf4:	4b62      	ldr	r3, [pc, #392]	; (8001e80 <_SendPacket+0x198>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d010      	beq.n	8001d1e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8001cfc:	4b60      	ldr	r3, [pc, #384]	; (8001e80 <_SendPacket+0x198>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 809f 	beq.w	8001e44 <_SendPacket+0x15c>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8001d06:	4b5e      	ldr	r3, [pc, #376]	; (8001e80 <_SendPacket+0x198>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d108      	bne.n	8001d20 <_SendPacket+0x38>
    _TrySendOverflowPacket();
 8001d0e:	f7ff ff7b 	bl	8001c08 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8001d12:	4b5b      	ldr	r3, [pc, #364]	; (8001e80 <_SendPacket+0x198>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	f040 8096 	bne.w	8001e48 <_SendPacket+0x160>
 8001d1c:	e000      	b.n	8001d20 <_SendPacket+0x38>
    goto Send;
 8001d1e:	bf00      	nop
Send:
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b1f      	cmp	r3, #31
 8001d24:	d809      	bhi.n	8001d3a <_SendPacket+0x52>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8001d26:	4b56      	ldr	r3, [pc, #344]	; (8001e80 <_SendPacket+0x198>)
 8001d28:	69da      	ldr	r2, [r3, #28]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f040 8089 	bne.w	8001e4c <_SendPacket+0x164>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b17      	cmp	r3, #23
 8001d3e:	d807      	bhi.n	8001d50 <_SendPacket+0x68>
    *--pStartPacket = EventId;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	701a      	strb	r2, [r3, #0]
 8001d4e:	e03d      	b.n	8001dcc <_SendPacket+0xe4>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	2b7f      	cmp	r3, #127	; 0x7f
 8001d5c:	d912      	bls.n	8001d84 <_SendPacket+0x9c>
      *--pStartPacket = (NumBytes >> 7);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	09db      	lsrs	r3, r3, #7
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	701a      	strb	r2, [r3, #0]
 8001d82:	e006      	b.n	8001d92 <_SendPacket+0xaa>
    } else {
      *--pStartPacket = NumBytes;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b7f      	cmp	r3, #127	; 0x7f
 8001d96:	d912      	bls.n	8001dbe <_SendPacket+0xd6>
      *--pStartPacket = (EventId >> 7);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	09db      	lsrs	r3, r3, #7
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	e006      	b.n	8001dcc <_SendPacket+0xe4>
    } else {
      *--pStartPacket = EventId;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <_SendPacket+0x19c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001dd2:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <_SendPacket+0x198>)
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	623b      	str	r3, [r7, #32]
 8001de4:	e00b      	b.n	8001dfe <_SendPacket+0x116>
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	627a      	str	r2, [r7, #36]	; 0x24
 8001dec:	6a3a      	ldr	r2, [r7, #32]
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	701a      	strb	r2, [r3, #0]
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	09db      	lsrs	r3, r3, #7
 8001dfc:	623b      	str	r3, [r7, #32]
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	2b7f      	cmp	r3, #127	; 0x7f
 8001e02:	d8f0      	bhi.n	8001de6 <_SendPacket+0xfe>
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	1c5a      	adds	r2, r3, #1
 8001e08:	627a      	str	r2, [r7, #36]	; 0x24
 8001e0a:	6a3a      	ldr	r2, [r7, #32]
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	701a      	strb	r2, [r3, #0]
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	68f9      	ldr	r1, [r7, #12]
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f7ff fdb0 	bl	8001984 <SEGGER_RTT_WriteSkipNoLock>
 8001e24:	4603      	mov	r3, r0
 8001e26:	613b      	str	r3, [r7, #16]
  if (Status) {
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <_SendPacket+0x14e>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001e2e:	4a14      	ldr	r2, [pc, #80]	; (8001e80 <_SendPacket+0x198>)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	60d3      	str	r3, [r2, #12]
 8001e34:	e00b      	b.n	8001e4e <_SendPacket+0x166>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <_SendPacket+0x198>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <_SendPacket+0x198>)
 8001e40:	701a      	strb	r2, [r3, #0]
 8001e42:	e004      	b.n	8001e4e <_SendPacket+0x166>
    goto SendDone;
 8001e44:	bf00      	nop
 8001e46:	e002      	b.n	8001e4e <_SendPacket+0x166>
      goto SendDone;
 8001e48:	bf00      	nop
 8001e4a:	e000      	b.n	8001e4e <_SendPacket+0x166>
      goto SendDone;
 8001e4c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <_SendPacket+0x1a0>)
 8001e50:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <_SendPacket+0x1a0>)
 8001e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d00b      	beq.n	8001e76 <_SendPacket+0x18e>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <_SendPacket+0x198>)
 8001e60:	789b      	ldrb	r3, [r3, #2]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d107      	bne.n	8001e76 <_SendPacket+0x18e>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <_SendPacket+0x198>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8001e6c:	f7ff fe71 	bl	8001b52 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8001e70:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <_SendPacket+0x198>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8001e76:	bf00      	nop
 8001e78:	3728      	adds	r7, #40	; 0x28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20003e70 	.word	0x20003e70
 8001e84:	e0001004 	.word	0xe0001004
 8001e88:	20003f98 	.word	0x20003f98

08001e8c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001e94:	f3ef 8311 	mrs	r3, BASEPRI
 8001e98:	f04f 0120 	mov.w	r1, #32
 8001e9c:	f381 8811 	msr	BASEPRI, r1
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	4808      	ldr	r0, [pc, #32]	; (8001ec4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8001ea4:	f7ff fe4a 	bl	8001b3c <_PreparePacket>
 8001ea8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	68b9      	ldr	r1, [r7, #8]
 8001eae:	68b8      	ldr	r0, [r7, #8]
 8001eb0:	f7ff ff1a 	bl	8001ce8 <_SendPacket>
  RECORD_END();
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f383 8811 	msr	BASEPRI, r3
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20003ea0 	.word	0x20003ea0

08001ec8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8001ed2:	f3ef 8311 	mrs	r3, BASEPRI
 8001ed6:	f04f 0120 	mov.w	r1, #32
 8001eda:	f381 8811 	msr	BASEPRI, r1
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	4816      	ldr	r0, [pc, #88]	; (8001f3c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8001ee2:	f7ff fe2b 	bl	8001b3c <_PreparePacket>
 8001ee6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	61fb      	str	r3, [r7, #28]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	e00b      	b.n	8001f0e <SEGGER_SYSVIEW_RecordU32+0x46>
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	61fa      	str	r2, [r7, #28]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	701a      	strb	r2, [r3, #0]
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	09db      	lsrs	r3, r3, #7
 8001f0c:	61bb      	str	r3, [r7, #24]
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	2b7f      	cmp	r3, #127	; 0x7f
 8001f12:	d8f0      	bhi.n	8001ef6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	61fa      	str	r2, [r7, #28]
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	701a      	strb	r2, [r3, #0]
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	68f9      	ldr	r1, [r7, #12]
 8001f28:	6938      	ldr	r0, [r7, #16]
 8001f2a:	f7ff fedd 	bl	8001ce8 <_SendPacket>
  RECORD_END();
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f383 8811 	msr	BASEPRI, r3
}
 8001f34:	bf00      	nop
 8001f36:	3720      	adds	r7, #32
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20003ea0 	.word	0x20003ea0

08001f40 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08c      	sub	sp, #48	; 0x30
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001f4c:	f3ef 8311 	mrs	r3, BASEPRI
 8001f50:	f04f 0120 	mov.w	r1, #32
 8001f54:	f381 8811 	msr	BASEPRI, r1
 8001f58:	61fb      	str	r3, [r7, #28]
 8001f5a:	4825      	ldr	r0, [pc, #148]	; (8001ff0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8001f5c:	f7ff fdee 	bl	8001b3c <_PreparePacket>
 8001f60:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f6e:	e00b      	b.n	8001f88 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8001f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]
 8001f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f84:	09db      	lsrs	r3, r3, #7
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8a:	2b7f      	cmp	r3, #127	; 0x7f
 8001f8c:	d8f0      	bhi.n	8001f70 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8001f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f90:	1c5a      	adds	r2, r3, #1
 8001f92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	701a      	strb	r2, [r3, #0]
 8001f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	623b      	str	r3, [r7, #32]
 8001fa6:	e00b      	b.n	8001fc0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	627a      	str	r2, [r7, #36]	; 0x24
 8001fae:	6a3a      	ldr	r2, [r7, #32]
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	701a      	strb	r2, [r3, #0]
 8001fba:	6a3b      	ldr	r3, [r7, #32]
 8001fbc:	09db      	lsrs	r3, r3, #7
 8001fbe:	623b      	str	r3, [r7, #32]
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	2b7f      	cmp	r3, #127	; 0x7f
 8001fc4:	d8f0      	bhi.n	8001fa8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	627a      	str	r2, [r7, #36]	; 0x24
 8001fcc:	6a3a      	ldr	r2, [r7, #32]
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	701a      	strb	r2, [r3, #0]
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	6979      	ldr	r1, [r7, #20]
 8001fda:	69b8      	ldr	r0, [r7, #24]
 8001fdc:	f7ff fe84 	bl	8001ce8 <_SendPacket>
  RECORD_END();
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f383 8811 	msr	BASEPRI, r3
}
 8001fe6:	bf00      	nop
 8001fe8:	3730      	adds	r7, #48	; 0x30
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20003ea0 	.word	0x20003ea0

08001ff4 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08c      	sub	sp, #48	; 0x30
 8001ff8:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8001ffa:	4b59      	ldr	r3, [pc, #356]	; (8002160 <SEGGER_SYSVIEW_Start+0x16c>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f040 80aa 	bne.w	8002158 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8002004:	4b56      	ldr	r3, [pc, #344]	; (8002160 <SEGGER_SYSVIEW_Start+0x16c>)
 8002006:	2201      	movs	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800200a:	f3ef 8311 	mrs	r3, BASEPRI
 800200e:	f04f 0120 	mov.w	r1, #32
 8002012:	f381 8811 	msr	BASEPRI, r1
 8002016:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8002018:	220a      	movs	r2, #10
 800201a:	4952      	ldr	r1, [pc, #328]	; (8002164 <SEGGER_SYSVIEW_Start+0x170>)
 800201c:	2001      	movs	r0, #1
 800201e:	f7ff fcb1 	bl	8001984 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002028:	200a      	movs	r0, #10
 800202a:	f7ff ff2f 	bl	8001e8c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800202e:	f3ef 8311 	mrs	r3, BASEPRI
 8002032:	f04f 0120 	mov.w	r1, #32
 8002036:	f381 8811 	msr	BASEPRI, r1
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	484a      	ldr	r0, [pc, #296]	; (8002168 <SEGGER_SYSVIEW_Start+0x174>)
 800203e:	f7ff fd7d 	bl	8001b3c <_PreparePacket>
 8002042:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800204c:	4b44      	ldr	r3, [pc, #272]	; (8002160 <SEGGER_SYSVIEW_Start+0x16c>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	62bb      	str	r3, [r7, #40]	; 0x28
 8002052:	e00b      	b.n	800206c <SEGGER_SYSVIEW_Start+0x78>
 8002054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	62fa      	str	r2, [r7, #44]	; 0x2c
 800205a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	701a      	strb	r2, [r3, #0]
 8002066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002068:	09db      	lsrs	r3, r3, #7
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
 800206c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206e:	2b7f      	cmp	r3, #127	; 0x7f
 8002070:	d8f0      	bhi.n	8002054 <SEGGER_SYSVIEW_Start+0x60>
 8002072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002074:	1c5a      	adds	r2, r3, #1
 8002076:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	701a      	strb	r2, [r3, #0]
 800207e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002080:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
 8002086:	4b36      	ldr	r3, [pc, #216]	; (8002160 <SEGGER_SYSVIEW_Start+0x16c>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	623b      	str	r3, [r7, #32]
 800208c:	e00b      	b.n	80020a6 <SEGGER_SYSVIEW_Start+0xb2>
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	627a      	str	r2, [r7, #36]	; 0x24
 8002094:	6a3a      	ldr	r2, [r7, #32]
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	701a      	strb	r2, [r3, #0]
 80020a0:	6a3b      	ldr	r3, [r7, #32]
 80020a2:	09db      	lsrs	r3, r3, #7
 80020a4:	623b      	str	r3, [r7, #32]
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	2b7f      	cmp	r3, #127	; 0x7f
 80020aa:	d8f0      	bhi.n	800208e <SEGGER_SYSVIEW_Start+0x9a>
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	627a      	str	r2, [r7, #36]	; 0x24
 80020b2:	6a3a      	ldr	r2, [r7, #32]
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	701a      	strb	r2, [r3, #0]
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	61fb      	str	r3, [r7, #28]
 80020c0:	4b27      	ldr	r3, [pc, #156]	; (8002160 <SEGGER_SYSVIEW_Start+0x16c>)
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	61bb      	str	r3, [r7, #24]
 80020c6:	e00b      	b.n	80020e0 <SEGGER_SYSVIEW_Start+0xec>
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	61fa      	str	r2, [r7, #28]
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	701a      	strb	r2, [r3, #0]
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	09db      	lsrs	r3, r3, #7
 80020de:	61bb      	str	r3, [r7, #24]
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2b7f      	cmp	r3, #127	; 0x7f
 80020e4:	d8f0      	bhi.n	80020c8 <SEGGER_SYSVIEW_Start+0xd4>
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	61fa      	str	r2, [r7, #28]
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	701a      	strb	r2, [r3, #0]
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	2302      	movs	r3, #2
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	e00b      	b.n	8002118 <SEGGER_SYSVIEW_Start+0x124>
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	617a      	str	r2, [r7, #20]
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	09db      	lsrs	r3, r3, #7
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	2b7f      	cmp	r3, #127	; 0x7f
 800211c:	d8f0      	bhi.n	8002100 <SEGGER_SYSVIEW_Start+0x10c>
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	1c5a      	adds	r2, r3, #1
 8002122:	617a      	str	r2, [r7, #20]
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800212e:	2218      	movs	r2, #24
 8002130:	6839      	ldr	r1, [r7, #0]
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff fdd8 	bl	8001ce8 <_SendPacket>
      RECORD_END();
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <SEGGER_SYSVIEW_Start+0x16c>)
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	2b00      	cmp	r3, #0
 8002144:	d002      	beq.n	800214c <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <SEGGER_SYSVIEW_Start+0x16c>)
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800214c:	f000 f9c8 	bl	80024e0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002150:	f000 f9b2 	bl	80024b8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002154:	f000 fc50 	bl	80029f8 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8002158:	bf00      	nop
 800215a:	3730      	adds	r7, #48	; 0x30
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20003e70 	.word	0x20003e70
 8002164:	080038fc 	.word	0x080038fc
 8002168:	20003ea0 	.word	0x20003ea0

0800216c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002172:	f3ef 8311 	mrs	r3, BASEPRI
 8002176:	f04f 0120 	mov.w	r1, #32
 800217a:	f381 8811 	msr	BASEPRI, r1
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	480b      	ldr	r0, [pc, #44]	; (80021b0 <SEGGER_SYSVIEW_Stop+0x44>)
 8002182:	f7ff fcdb 	bl	8001b3c <_PreparePacket>
 8002186:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002188:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <SEGGER_SYSVIEW_Stop+0x48>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d007      	beq.n	80021a0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002190:	220b      	movs	r2, #11
 8002192:	6839      	ldr	r1, [r7, #0]
 8002194:	6838      	ldr	r0, [r7, #0]
 8002196:	f7ff fda7 	bl	8001ce8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <SEGGER_SYSVIEW_Stop+0x48>)
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f383 8811 	msr	BASEPRI, r3
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20003ea0 	.word	0x20003ea0
 80021b4:	20003e70 	.word	0x20003e70

080021b8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08c      	sub	sp, #48	; 0x30
 80021bc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80021be:	f3ef 8311 	mrs	r3, BASEPRI
 80021c2:	f04f 0120 	mov.w	r1, #32
 80021c6:	f381 8811 	msr	BASEPRI, r1
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	4845      	ldr	r0, [pc, #276]	; (80022e4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80021ce:	f7ff fcb5 	bl	8001b3c <_PreparePacket>
 80021d2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021dc:	4b42      	ldr	r3, [pc, #264]	; (80022e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80021e2:	e00b      	b.n	80021fc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80021e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]
 80021f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f8:	09db      	lsrs	r3, r3, #7
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80021fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fe:	2b7f      	cmp	r3, #127	; 0x7f
 8002200:	d8f0      	bhi.n	80021e4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	701a      	strb	r2, [r3, #0]
 800220e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002210:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
 8002216:	4b34      	ldr	r3, [pc, #208]	; (80022e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	623b      	str	r3, [r7, #32]
 800221c:	e00b      	b.n	8002236 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	627a      	str	r2, [r7, #36]	; 0x24
 8002224:	6a3a      	ldr	r2, [r7, #32]
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	701a      	strb	r2, [r3, #0]
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	09db      	lsrs	r3, r3, #7
 8002234:	623b      	str	r3, [r7, #32]
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	2b7f      	cmp	r3, #127	; 0x7f
 800223a:	d8f0      	bhi.n	800221e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	627a      	str	r2, [r7, #36]	; 0x24
 8002242:	6a3a      	ldr	r2, [r7, #32]
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	701a      	strb	r2, [r3, #0]
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	61fb      	str	r3, [r7, #28]
 8002250:	4b25      	ldr	r3, [pc, #148]	; (80022e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	61bb      	str	r3, [r7, #24]
 8002256:	e00b      	b.n	8002270 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	61fa      	str	r2, [r7, #28]
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	701a      	strb	r2, [r3, #0]
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	09db      	lsrs	r3, r3, #7
 800226e:	61bb      	str	r3, [r7, #24]
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	2b7f      	cmp	r3, #127	; 0x7f
 8002274:	d8f0      	bhi.n	8002258 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	61fa      	str	r2, [r7, #28]
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	701a      	strb	r2, [r3, #0]
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	2302      	movs	r3, #2
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	e00b      	b.n	80022a8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	617a      	str	r2, [r7, #20]
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	701a      	strb	r2, [r3, #0]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	09db      	lsrs	r3, r3, #7
 80022a6:	613b      	str	r3, [r7, #16]
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	2b7f      	cmp	r3, #127	; 0x7f
 80022ac:	d8f0      	bhi.n	8002290 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	617a      	str	r2, [r7, #20]
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	701a      	strb	r2, [r3, #0]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80022be:	2218      	movs	r2, #24
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	68b8      	ldr	r0, [r7, #8]
 80022c4:	f7ff fd10 	bl	8001ce8 <_SendPacket>
  RECORD_END();
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80022d6:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	4798      	blx	r3
  }
}
 80022dc:	bf00      	nop
 80022de:	3730      	adds	r7, #48	; 0x30
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20003ea0 	.word	0x20003ea0
 80022e8:	20003e70 	.word	0x20003e70

080022ec <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b092      	sub	sp, #72	; 0x48
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80022f4:	f3ef 8311 	mrs	r3, BASEPRI
 80022f8:	f04f 0120 	mov.w	r1, #32
 80022fc:	f381 8811 	msr	BASEPRI, r1
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	486b      	ldr	r0, [pc, #428]	; (80024b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002304:	f7ff fc1a 	bl	8001b3c <_PreparePacket>
 8002308:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	647b      	str	r3, [r7, #68]	; 0x44
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	4b67      	ldr	r3, [pc, #412]	; (80024b4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	089b      	lsrs	r3, r3, #2
 800231e:	643b      	str	r3, [r7, #64]	; 0x40
 8002320:	e00b      	b.n	800233a <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8002322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	647a      	str	r2, [r7, #68]	; 0x44
 8002328:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	701a      	strb	r2, [r3, #0]
 8002334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002336:	09db      	lsrs	r3, r3, #7
 8002338:	643b      	str	r3, [r7, #64]	; 0x40
 800233a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800233c:	2b7f      	cmp	r3, #127	; 0x7f
 800233e:	d8f0      	bhi.n	8002322 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8002340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	647a      	str	r2, [r7, #68]	; 0x44
 8002346:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	701a      	strb	r2, [r3, #0]
 800234c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800234e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	63bb      	str	r3, [r7, #56]	; 0x38
 800235a:	e00b      	b.n	8002374 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 800235c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002362:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]
 800236e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002370:	09db      	lsrs	r3, r3, #7
 8002372:	63bb      	str	r3, [r7, #56]	; 0x38
 8002374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002376:	2b7f      	cmp	r3, #127	; 0x7f
 8002378:	d8f0      	bhi.n	800235c <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 800237a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	701a      	strb	r2, [r3, #0]
 8002386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002388:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2220      	movs	r2, #32
 8002390:	4619      	mov	r1, r3
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f7ff fb86 	bl	8001aa4 <_EncodeStr>
 8002398:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800239a:	2209      	movs	r2, #9
 800239c:	68f9      	ldr	r1, [r7, #12]
 800239e:	6938      	ldr	r0, [r7, #16]
 80023a0:	f7ff fca2 	bl	8001ce8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	637b      	str	r3, [r7, #52]	; 0x34
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b40      	ldr	r3, [pc, #256]	; (80024b4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	089b      	lsrs	r3, r3, #2
 80023b8:	633b      	str	r3, [r7, #48]	; 0x30
 80023ba:	e00b      	b.n	80023d4 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 80023bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	637a      	str	r2, [r7, #52]	; 0x34
 80023c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	701a      	strb	r2, [r3, #0]
 80023ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d0:	09db      	lsrs	r3, r3, #7
 80023d2:	633b      	str	r3, [r7, #48]	; 0x30
 80023d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d6:	2b7f      	cmp	r3, #127	; 0x7f
 80023d8:	d8f0      	bhi.n	80023bc <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 80023da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	637a      	str	r2, [r7, #52]	; 0x34
 80023e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	701a      	strb	r2, [r3, #0]
 80023e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023f4:	e00b      	b.n	800240e <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 80023f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240a:	09db      	lsrs	r3, r3, #7
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
 800240e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002410:	2b7f      	cmp	r3, #127	; 0x7f
 8002412:	d8f0      	bhi.n	80023f6 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8002414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	62fa      	str	r2, [r7, #44]	; 0x2c
 800241a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	701a      	strb	r2, [r3, #0]
 8002420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002422:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	623b      	str	r3, [r7, #32]
 800242e:	e00b      	b.n	8002448 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	627a      	str	r2, [r7, #36]	; 0x24
 8002436:	6a3a      	ldr	r2, [r7, #32]
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	09db      	lsrs	r3, r3, #7
 8002446:	623b      	str	r3, [r7, #32]
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	2b7f      	cmp	r3, #127	; 0x7f
 800244c:	d8f0      	bhi.n	8002430 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	627a      	str	r2, [r7, #36]	; 0x24
 8002454:	6a3a      	ldr	r2, [r7, #32]
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	701a      	strb	r2, [r3, #0]
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
 8002466:	e00b      	b.n	8002480 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	61fa      	str	r2, [r7, #28]
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	701a      	strb	r2, [r3, #0]
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	09db      	lsrs	r3, r3, #7
 800247e:	61bb      	str	r3, [r7, #24]
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	2b7f      	cmp	r3, #127	; 0x7f
 8002484:	d8f0      	bhi.n	8002468 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	61fa      	str	r2, [r7, #28]
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	701a      	strb	r2, [r3, #0]
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8002496:	2215      	movs	r2, #21
 8002498:	68f9      	ldr	r1, [r7, #12]
 800249a:	6938      	ldr	r0, [r7, #16]
 800249c:	f7ff fc24 	bl	8001ce8 <_SendPacket>
  RECORD_END();
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f383 8811 	msr	BASEPRI, r3
}
 80024a6:	bf00      	nop
 80024a8:	3748      	adds	r7, #72	; 0x48
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20003ea0 	.word	0x20003ea0
 80024b4:	20003e70 	.word	0x20003e70

080024b8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80024bc:	4b07      	ldr	r3, [pc, #28]	; (80024dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80024ce:	4b03      	ldr	r3, [pc, #12]	; (80024dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	4798      	blx	r3
  }
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20003e70 	.word	0x20003e70

080024e0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80024e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80024e6:	4b12      	ldr	r3, [pc, #72]	; (8002530 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d015      	beq.n	800251a <SEGGER_SYSVIEW_RecordSystime+0x3a>
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d010      	beq.n	800251a <SEGGER_SYSVIEW_RecordSystime+0x3a>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80024f8:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4798      	blx	r3
 8002500:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002504:	6839      	ldr	r1, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8002506:	e897 0018 	ldmia.w	r7, {r3, r4}
 800250a:	0025      	movs	r5, r4
 800250c:	2600      	movs	r6, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800250e:	462b      	mov	r3, r5
 8002510:	461a      	mov	r2, r3
 8002512:	200d      	movs	r0, #13
 8002514:	f7ff fd14 	bl	8001f40 <SEGGER_SYSVIEW_RecordU32x2>
 8002518:	e005      	b.n	8002526 <SEGGER_SYSVIEW_RecordSystime+0x46>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <SEGGER_SYSVIEW_RecordSystime+0x54>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4619      	mov	r1, r3
 8002520:	200c      	movs	r0, #12
 8002522:	f7ff fcd1 	bl	8001ec8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800252e:	bf00      	nop
 8002530:	20003e70 	.word	0x20003e70
 8002534:	e0001004 	.word	0xe0001004

08002538 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800253e:	f3ef 8311 	mrs	r3, BASEPRI
 8002542:	f04f 0120 	mov.w	r1, #32
 8002546:	f381 8811 	msr	BASEPRI, r1
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	4819      	ldr	r0, [pc, #100]	; (80025b4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800254e:	f7ff faf5 	bl	8001b3c <_PreparePacket>
 8002552:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8002558:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002560:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	e00b      	b.n	8002584 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	617a      	str	r2, [r7, #20]
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	701a      	strb	r2, [r3, #0]
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	09db      	lsrs	r3, r3, #7
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	2b7f      	cmp	r3, #127	; 0x7f
 8002588:	d8f0      	bhi.n	800256c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	617a      	str	r2, [r7, #20]
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	701a      	strb	r2, [r3, #0]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800259a:	2202      	movs	r2, #2
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	68b8      	ldr	r0, [r7, #8]
 80025a0:	f7ff fba2 	bl	8001ce8 <_SendPacket>
  RECORD_END();
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f383 8811 	msr	BASEPRI, r3
}
 80025aa:	bf00      	nop
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20003ea0 	.word	0x20003ea0
 80025b8:	e000ed04 	.word	0xe000ed04

080025bc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80025c2:	f3ef 8311 	mrs	r3, BASEPRI
 80025c6:	f04f 0120 	mov.w	r1, #32
 80025ca:	f381 8811 	msr	BASEPRI, r1
 80025ce:	607b      	str	r3, [r7, #4]
 80025d0:	4807      	ldr	r0, [pc, #28]	; (80025f0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80025d2:	f7ff fab3 	bl	8001b3c <_PreparePacket>
 80025d6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80025d8:	2203      	movs	r2, #3
 80025da:	6839      	ldr	r1, [r7, #0]
 80025dc:	6838      	ldr	r0, [r7, #0]
 80025de:	f7ff fb83 	bl	8001ce8 <_SendPacket>
  RECORD_END();
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f383 8811 	msr	BASEPRI, r3
}
 80025e8:	bf00      	nop
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20003ea0 	.word	0x20003ea0

080025f4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80025fa:	f3ef 8311 	mrs	r3, BASEPRI
 80025fe:	f04f 0120 	mov.w	r1, #32
 8002602:	f381 8811 	msr	BASEPRI, r1
 8002606:	607b      	str	r3, [r7, #4]
 8002608:	4807      	ldr	r0, [pc, #28]	; (8002628 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800260a:	f7ff fa97 	bl	8001b3c <_PreparePacket>
 800260e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8002610:	2212      	movs	r2, #18
 8002612:	6839      	ldr	r1, [r7, #0]
 8002614:	6838      	ldr	r0, [r7, #0]
 8002616:	f7ff fb67 	bl	8001ce8 <_SendPacket>
  RECORD_END();
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f383 8811 	msr	BASEPRI, r3
}
 8002620:	bf00      	nop
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20003ea0 	.word	0x20003ea0

0800262c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002632:	f3ef 8311 	mrs	r3, BASEPRI
 8002636:	f04f 0120 	mov.w	r1, #32
 800263a:	f381 8811 	msr	BASEPRI, r1
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	4807      	ldr	r0, [pc, #28]	; (8002660 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8002642:	f7ff fa7b 	bl	8001b3c <_PreparePacket>
 8002646:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8002648:	2211      	movs	r2, #17
 800264a:	6839      	ldr	r1, [r7, #0]
 800264c:	6838      	ldr	r0, [r7, #0]
 800264e:	f7ff fb4b 	bl	8001ce8 <_SendPacket>
  RECORD_END();
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f383 8811 	msr	BASEPRI, r3
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	20003ea0 	.word	0x20003ea0

08002664 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800266c:	f3ef 8311 	mrs	r3, BASEPRI
 8002670:	f04f 0120 	mov.w	r1, #32
 8002674:	f381 8811 	msr	BASEPRI, r1
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	481a      	ldr	r0, [pc, #104]	; (80026e4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800267c:	f7ff fa5e 	bl	8001b3c <_PreparePacket>
 8002680:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002686:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	61fb      	str	r3, [r7, #28]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	61bb      	str	r3, [r7, #24]
 800269a:	e00b      	b.n	80026b4 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	1c5a      	adds	r2, r3, #1
 80026a0:	61fa      	str	r2, [r7, #28]
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	701a      	strb	r2, [r3, #0]
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	09db      	lsrs	r3, r3, #7
 80026b2:	61bb      	str	r3, [r7, #24]
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	2b7f      	cmp	r3, #127	; 0x7f
 80026b8:	d8f0      	bhi.n	800269c <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	61fa      	str	r2, [r7, #28]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80026ca:	2208      	movs	r2, #8
 80026cc:	68f9      	ldr	r1, [r7, #12]
 80026ce:	6938      	ldr	r0, [r7, #16]
 80026d0:	f7ff fb0a 	bl	8001ce8 <_SendPacket>
  RECORD_END();
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f383 8811 	msr	BASEPRI, r3
}
 80026da:	bf00      	nop
 80026dc:	3720      	adds	r7, #32
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20003ea0 	.word	0x20003ea0
 80026e8:	20003e70 	.word	0x20003e70

080026ec <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80026f4:	f3ef 8311 	mrs	r3, BASEPRI
 80026f8:	f04f 0120 	mov.w	r1, #32
 80026fc:	f381 8811 	msr	BASEPRI, r1
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	481a      	ldr	r0, [pc, #104]	; (800276c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8002704:	f7ff fa1a 	bl	8001b3c <_PreparePacket>
 8002708:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800270e:	4b18      	ldr	r3, [pc, #96]	; (8002770 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	089b      	lsrs	r3, r3, #2
 8002718:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	e00b      	b.n	800273c <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	61fa      	str	r2, [r7, #28]
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	09db      	lsrs	r3, r3, #7
 800273a:	61bb      	str	r3, [r7, #24]
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	2b7f      	cmp	r3, #127	; 0x7f
 8002740:	d8f0      	bhi.n	8002724 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	61fa      	str	r2, [r7, #28]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	701a      	strb	r2, [r3, #0]
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8002752:	2204      	movs	r2, #4
 8002754:	68f9      	ldr	r1, [r7, #12]
 8002756:	6938      	ldr	r0, [r7, #16]
 8002758:	f7ff fac6 	bl	8001ce8 <_SendPacket>
  RECORD_END();
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f383 8811 	msr	BASEPRI, r3
}
 8002762:	bf00      	nop
 8002764:	3720      	adds	r7, #32
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20003ea0 	.word	0x20003ea0
 8002770:	20003e70 	.word	0x20003e70

08002774 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800277c:	f3ef 8311 	mrs	r3, BASEPRI
 8002780:	f04f 0120 	mov.w	r1, #32
 8002784:	f381 8811 	msr	BASEPRI, r1
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	481a      	ldr	r0, [pc, #104]	; (80027f4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800278c:	f7ff f9d6 	bl	8001b3c <_PreparePacket>
 8002790:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002796:	4b18      	ldr	r3, [pc, #96]	; (80027f8 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	089b      	lsrs	r3, r3, #2
 80027a0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	e00b      	b.n	80027c4 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	61fa      	str	r2, [r7, #28]
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	701a      	strb	r2, [r3, #0]
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	09db      	lsrs	r3, r3, #7
 80027c2:	61bb      	str	r3, [r7, #24]
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	2b7f      	cmp	r3, #127	; 0x7f
 80027c8:	d8f0      	bhi.n	80027ac <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	61fa      	str	r2, [r7, #28]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80027da:	2206      	movs	r2, #6
 80027dc:	68f9      	ldr	r1, [r7, #12]
 80027de:	6938      	ldr	r0, [r7, #16]
 80027e0:	f7ff fa82 	bl	8001ce8 <_SendPacket>
  RECORD_END();
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f383 8811 	msr	BASEPRI, r3
}
 80027ea:	bf00      	nop
 80027ec:	3720      	adds	r7, #32
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20003ea0 	.word	0x20003ea0
 80027f8:	20003e70 	.word	0x20003e70

080027fc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002806:	f3ef 8311 	mrs	r3, BASEPRI
 800280a:	f04f 0120 	mov.w	r1, #32
 800280e:	f381 8811 	msr	BASEPRI, r1
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	4827      	ldr	r0, [pc, #156]	; (80028b4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8002816:	f7ff f991 	bl	8001b3c <_PreparePacket>
 800281a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002820:	4b25      	ldr	r3, [pc, #148]	; (80028b8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	089b      	lsrs	r3, r3, #2
 800282a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	623b      	str	r3, [r7, #32]
 8002834:	e00b      	b.n	800284e <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	627a      	str	r2, [r7, #36]	; 0x24
 800283c:	6a3a      	ldr	r2, [r7, #32]
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	701a      	strb	r2, [r3, #0]
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	09db      	lsrs	r3, r3, #7
 800284c:	623b      	str	r3, [r7, #32]
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	2b7f      	cmp	r3, #127	; 0x7f
 8002852:	d8f0      	bhi.n	8002836 <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	627a      	str	r2, [r7, #36]	; 0x24
 800285a:	6a3a      	ldr	r2, [r7, #32]
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	701a      	strb	r2, [r3, #0]
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	61fb      	str	r3, [r7, #28]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	61bb      	str	r3, [r7, #24]
 800286c:	e00b      	b.n	8002886 <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	61fa      	str	r2, [r7, #28]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	701a      	strb	r2, [r3, #0]
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	09db      	lsrs	r3, r3, #7
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	2b7f      	cmp	r3, #127	; 0x7f
 800288a:	d8f0      	bhi.n	800286e <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	61fa      	str	r2, [r7, #28]
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	701a      	strb	r2, [r3, #0]
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800289c:	2207      	movs	r2, #7
 800289e:	68f9      	ldr	r1, [r7, #12]
 80028a0:	6938      	ldr	r0, [r7, #16]
 80028a2:	f7ff fa21 	bl	8001ce8 <_SendPacket>
  RECORD_END();
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f383 8811 	msr	BASEPRI, r3
}
 80028ac:	bf00      	nop
 80028ae:	3728      	adds	r7, #40	; 0x28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20003ea0 	.word	0x20003ea0
 80028b8:	20003e70 	.word	0x20003e70

080028bc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08c      	sub	sp, #48	; 0x30
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80028c6:	4b3b      	ldr	r3, [pc, #236]	; (80029b4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d06d      	beq.n	80029aa <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80028ce:	4b39      	ldr	r3, [pc, #228]	; (80029b4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80028d4:	2300      	movs	r3, #0
 80028d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028d8:	e008      	b.n	80028ec <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80028da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80028e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d007      	beq.n	80028f6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80028e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e8:	3301      	adds	r3, #1
 80028ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ec:	79fa      	ldrb	r2, [r7, #7]
 80028ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d8f2      	bhi.n	80028da <SEGGER_SYSVIEW_SendModule+0x1e>
 80028f4:	e000      	b.n	80028f8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80028f6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80028f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d055      	beq.n	80029aa <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80028fe:	f3ef 8311 	mrs	r3, BASEPRI
 8002902:	f04f 0120 	mov.w	r1, #32
 8002906:	f381 8811 	msr	BASEPRI, r1
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	482a      	ldr	r0, [pc, #168]	; (80029b8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800290e:	f7ff f915 	bl	8001b3c <_PreparePacket>
 8002912:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	623b      	str	r3, [r7, #32]
 8002920:	e00b      	b.n	800293a <SEGGER_SYSVIEW_SendModule+0x7e>
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	627a      	str	r2, [r7, #36]	; 0x24
 8002928:	6a3a      	ldr	r2, [r7, #32]
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	701a      	strb	r2, [r3, #0]
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	09db      	lsrs	r3, r3, #7
 8002938:	623b      	str	r3, [r7, #32]
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	2b7f      	cmp	r3, #127	; 0x7f
 800293e:	d8f0      	bhi.n	8002922 <SEGGER_SYSVIEW_SendModule+0x66>
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	627a      	str	r2, [r7, #36]	; 0x24
 8002946:	6a3a      	ldr	r2, [r7, #32]
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	701a      	strb	r2, [r3, #0]
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	61fb      	str	r3, [r7, #28]
 8002954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	61bb      	str	r3, [r7, #24]
 800295a:	e00b      	b.n	8002974 <SEGGER_SYSVIEW_SendModule+0xb8>
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	61fa      	str	r2, [r7, #28]
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	701a      	strb	r2, [r3, #0]
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	09db      	lsrs	r3, r3, #7
 8002972:	61bb      	str	r3, [r7, #24]
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2b7f      	cmp	r3, #127	; 0x7f
 8002978:	d8f0      	bhi.n	800295c <SEGGER_SYSVIEW_SendModule+0xa0>
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	61fa      	str	r2, [r7, #28]
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800298a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2280      	movs	r2, #128	; 0x80
 8002990:	4619      	mov	r1, r3
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f7ff f886 	bl	8001aa4 <_EncodeStr>
 8002998:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800299a:	2216      	movs	r2, #22
 800299c:	68f9      	ldr	r1, [r7, #12]
 800299e:	6938      	ldr	r0, [r7, #16]
 80029a0:	f7ff f9a2 	bl	8001ce8 <_SendPacket>
      RECORD_END();
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80029aa:	bf00      	nop
 80029ac:	3730      	adds	r7, #48	; 0x30
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20003e98 	.word	0x20003e98
 80029b8:	20003ea0 	.word	0x20003ea0

080029bc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80029c2:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00f      	beq.n	80029ea <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80029ca:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f2      	bne.n	80029d0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20003e98 	.word	0x20003e98

080029f8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80029fe:	f3ef 8311 	mrs	r3, BASEPRI
 8002a02:	f04f 0120 	mov.w	r1, #32
 8002a06:	f381 8811 	msr	BASEPRI, r1
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	4817      	ldr	r0, [pc, #92]	; (8002a6c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8002a0e:	f7ff f895 	bl	8001b3c <_PreparePacket>
 8002a12:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	613b      	str	r3, [r7, #16]
 8002a22:	e00b      	b.n	8002a3c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	617a      	str	r2, [r7, #20]
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	09db      	lsrs	r3, r3, #7
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b7f      	cmp	r3, #127	; 0x7f
 8002a40:	d8f0      	bhi.n	8002a24 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	617a      	str	r2, [r7, #20]
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	701a      	strb	r2, [r3, #0]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8002a52:	221b      	movs	r2, #27
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	68b8      	ldr	r0, [r7, #8]
 8002a58:	f7ff f946 	bl	8001ce8 <_SendPacket>
  RECORD_END();
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f383 8811 	msr	BASEPRI, r3
}
 8002a62:	bf00      	nop
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20003ea0 	.word	0x20003ea0
 8002a70:	20003e9c 	.word	0x20003e9c

08002a74 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08a      	sub	sp, #40	; 0x28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002a7c:	f3ef 8311 	mrs	r3, BASEPRI
 8002a80:	f04f 0120 	mov.w	r1, #32
 8002a84:	f381 8811 	msr	BASEPRI, r1
 8002a88:	617b      	str	r3, [r7, #20]
 8002a8a:	4827      	ldr	r0, [pc, #156]	; (8002b28 <SEGGER_SYSVIEW_Warn+0xb4>)
 8002a8c:	f7ff f856 	bl	8001b3c <_PreparePacket>
 8002a90:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002a92:	2280      	movs	r2, #128	; 0x80
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	6938      	ldr	r0, [r7, #16]
 8002a98:	f7ff f804 	bl	8001aa4 <_EncodeStr>
 8002a9c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	623b      	str	r3, [r7, #32]
 8002aa6:	e00b      	b.n	8002ac0 <SEGGER_SYSVIEW_Warn+0x4c>
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	627a      	str	r2, [r7, #36]	; 0x24
 8002aae:	6a3a      	ldr	r2, [r7, #32]
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	09db      	lsrs	r3, r3, #7
 8002abe:	623b      	str	r3, [r7, #32]
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ac4:	d8f0      	bhi.n	8002aa8 <SEGGER_SYSVIEW_Warn+0x34>
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	627a      	str	r2, [r7, #36]	; 0x24
 8002acc:	6a3a      	ldr	r2, [r7, #32]
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	2300      	movs	r3, #0
 8002adc:	61bb      	str	r3, [r7, #24]
 8002ade:	e00b      	b.n	8002af8 <SEGGER_SYSVIEW_Warn+0x84>
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	61fa      	str	r2, [r7, #28]
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	09db      	lsrs	r3, r3, #7
 8002af6:	61bb      	str	r3, [r7, #24]
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	2b7f      	cmp	r3, #127	; 0x7f
 8002afc:	d8f0      	bhi.n	8002ae0 <SEGGER_SYSVIEW_Warn+0x6c>
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	61fa      	str	r2, [r7, #28]
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	701a      	strb	r2, [r3, #0]
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8002b0e:	221a      	movs	r2, #26
 8002b10:	68f9      	ldr	r1, [r7, #12]
 8002b12:	6938      	ldr	r0, [r7, #16]
 8002b14:	f7ff f8e8 	bl	8001ce8 <_SendPacket>
  RECORD_END();
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f383 8811 	msr	BASEPRI, r3
}
 8002b1e:	bf00      	nop
 8002b20:	3728      	adds	r7, #40	; 0x28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20003ea0 	.word	0x20003ea0

08002b2c <main>:
TaskHandle_t xTaskHandle1=NULL;
TaskHandle_t xTaskHandle2=NULL ;
char usr_msg[200];
/*****************************Main Function****************************/
int main(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af02      	add	r7, sp, #8
	// Initializations
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8002b32:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002b36:	f7fd fb13 	bl	8000160 <NVIC_PriorityGroupConfig>
	prvSetupHardware();
 8002b3a:	f000 f859 	bl	8002bf0 <prvSetupHardware>


	printmsg("This Task vTaskDelay Project\r\n");
 8002b3e:	480e      	ldr	r0, [pc, #56]	; (8002b78 <main+0x4c>)
 8002b40:	f000 f85e 	bl	8002c00 <printmsg>

	// Create Task 1 low priority --> 2
	xTaskCreate(vTask1_Handler,"Task-1",300,NULL,2,&xTaskHandle1);
 8002b44:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <main+0x50>)
 8002b46:	9301      	str	r3, [sp, #4]
 8002b48:	2302      	movs	r3, #2
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b52:	490b      	ldr	r1, [pc, #44]	; (8002b80 <main+0x54>)
 8002b54:	480b      	ldr	r0, [pc, #44]	; (8002b84 <main+0x58>)
 8002b56:	f7fe f935 	bl	8000dc4 <xTaskCreate>

	// Create Task 2 high Priority --> 3
	xTaskCreate(vTask2_Handler,"Task-2",300,NULL,3,&xTaskHandle2);
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <main+0x5c>)
 8002b5c:	9301      	str	r3, [sp, #4]
 8002b5e:	2303      	movs	r3, #3
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	2300      	movs	r3, #0
 8002b64:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b68:	4908      	ldr	r1, [pc, #32]	; (8002b8c <main+0x60>)
 8002b6a:	4809      	ldr	r0, [pc, #36]	; (8002b90 <main+0x64>)
 8002b6c:	f7fe f92a 	bl	8000dc4 <xTaskCreate>

	//Start Scheduler
	vTaskStartScheduler();
 8002b70:	f7fe fa98 	bl	80010a4 <vTaskStartScheduler>

	while(1);
 8002b74:	e7fe      	b.n	8002b74 <main+0x48>
 8002b76:	bf00      	nop
 8002b78:	080038b0 	.word	0x080038b0
 8002b7c:	20003f84 	.word	0x20003f84
 8002b80:	080038d0 	.word	0x080038d0
 8002b84:	08002b95 	.word	0x08002b95
 8002b88:	20003f88 	.word	0x20003f88
 8002b8c:	080038d8 	.word	0x080038d8
 8002b90:	08002bd1 	.word	0x08002bd1

08002b94 <vTask1_Handler>:
}


/***************************** Task Handler Definition****************************/
void vTask1_Handler (void *param)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Print Status of The LED
		sprintf(usr_msg,"Status of The led is: %d\r\n",GPIO_ReadOutputDataBit(GPIOC,GPIO_Pin_13));
 8002b9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ba0:	4808      	ldr	r0, [pc, #32]	; (8002bc4 <vTask1_Handler+0x30>)
 8002ba2:	f7fd fbab 	bl	80002fc <GPIO_ReadOutputDataBit>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4907      	ldr	r1, [pc, #28]	; (8002bc8 <vTask1_Handler+0x34>)
 8002bac:	4807      	ldr	r0, [pc, #28]	; (8002bcc <vTask1_Handler+0x38>)
 8002bae:	f000 fa17 	bl	8002fe0 <siprintf>
		printmsg(usr_msg);
 8002bb2:	4806      	ldr	r0, [pc, #24]	; (8002bcc <vTask1_Handler+0x38>)
 8002bb4:	f000 f824 	bl	8002c00 <printmsg>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8002bb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bbc:	f7fe fa4a 	bl	8001054 <vTaskDelay>
		sprintf(usr_msg,"Status of The led is: %d\r\n",GPIO_ReadOutputDataBit(GPIOC,GPIO_Pin_13));
 8002bc0:	e7ec      	b.n	8002b9c <vTask1_Handler+0x8>
 8002bc2:	bf00      	nop
 8002bc4:	40011000 	.word	0x40011000
 8002bc8:	080038e0 	.word	0x080038e0
 8002bcc:	20004040 	.word	0x20004040

08002bd0 <vTask2_Handler>:
	}
}

void vTask2_Handler (void *param)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Toggle The LED Every 1 second
		GPIO_ToggleBit(GPIOC,GPIO_Pin_13);
 8002bd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bdc:	4803      	ldr	r0, [pc, #12]	; (8002bec <vTask2_Handler+0x1c>)
 8002bde:	f7fd fba6 	bl	800032e <GPIO_ToggleBit>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8002be2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002be6:	f7fe fa35 	bl	8001054 <vTaskDelay>
		GPIO_ToggleBit(GPIOC,GPIO_Pin_13);
 8002bea:	e7f5      	b.n	8002bd8 <vTask2_Handler+0x8>
 8002bec:	40011000 	.word	0x40011000

08002bf0 <prvSetupHardware>:


/*****************************FUNCTION Definition****************************/

static void prvSetupHardware(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
	//Setup GPIO
	prvGPIOSetup();
 8002bf4:	f000 f86c 	bl	8002cd0 <prvGPIOSetup>

	//setup UART_1
	prvUARTSetup();
 8002bf8:	f000 f82a 	bl	8002c50 <prvUARTSetup>
}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <printmsg>:

void printmsg(char *msg)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i<strlen(msg) ; i++)
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	e013      	b.n	8002c36 <printmsg+0x36>
	{
		//polling to check that the Date Register is Empty
		while(USART_GetFlagStatus(USART1, USART_FLAG_TXE)!=SET);
 8002c0e:	bf00      	nop
 8002c10:	2180      	movs	r1, #128	; 0x80
 8002c12:	480e      	ldr	r0, [pc, #56]	; (8002c4c <printmsg+0x4c>)
 8002c14:	f7fd fd54 	bl	80006c0 <USART_GetFlagStatus>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d1f8      	bne.n	8002c10 <printmsg+0x10>
		//put our mesg in the UART Data Register
		USART_SendData(USART1,msg[i]);
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4413      	add	r3, r2
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4808      	ldr	r0, [pc, #32]	; (8002c4c <printmsg+0x4c>)
 8002c2c:	f7fd fd37 	bl	800069e <USART_SendData>
	for(uint32_t i=0 ; i<strlen(msg) ; i++)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	3301      	adds	r3, #1
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fd fa8a 	bl	8000150 <strlen>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d8e4      	bhi.n	8002c0e <printmsg+0xe>
	}

}
 8002c44:	bf00      	nop
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40013800 	.word	0x40013800

08002c50 <prvUARTSetup>:

void prvUARTSetup()
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
    USART_InitTypeDef usart1_init_struct;
    /* Bit configuration structure for GPIOA PIN9 and PIN10 */
    GPIO_InitTypeDef gpioa_init_struct;

    /* Enalbe clock for USART1, AFIO and GPIOA */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_AFIO |
 8002c56:	2101      	movs	r1, #1
 8002c58:	f244 0005 	movw	r0, #16389	; 0x4005
 8002c5c:	f7fd fc28 	bl	80004b0 <RCC_APB2PeriphClockCmd>
                           RCC_APB2Periph_GPIOA, ENABLE);

    /* GPIOA PIN9 alternative function Tx */
    gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
 8002c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c64:	80bb      	strh	r3, [r7, #4]
    gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 8002c66:	2303      	movs	r3, #3
 8002c68:	71bb      	strb	r3, [r7, #6]
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
 8002c6a:	2318      	movs	r3, #24
 8002c6c:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &gpioa_init_struct);
 8002c6e:	1d3b      	adds	r3, r7, #4
 8002c70:	4619      	mov	r1, r3
 8002c72:	4815      	ldr	r0, [pc, #84]	; (8002cc8 <prvUARTSetup+0x78>)
 8002c74:	f7fd fa86 	bl	8000184 <GPIO_Init>
    /* GPIOA PIN9 alternative function Rx */
    gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
 8002c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c7c:	80bb      	strh	r3, [r7, #4]
    gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	71bb      	strb	r3, [r7, #6]
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8002c82:	2304      	movs	r3, #4
 8002c84:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &gpioa_init_struct);
 8002c86:	1d3b      	adds	r3, r7, #4
 8002c88:	4619      	mov	r1, r3
 8002c8a:	480f      	ldr	r0, [pc, #60]	; (8002cc8 <prvUARTSetup+0x78>)
 8002c8c:	f7fd fa7a 	bl	8000184 <GPIO_Init>

    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);
 8002c90:	2101      	movs	r1, #1
 8002c92:	480e      	ldr	r0, [pc, #56]	; (8002ccc <prvUARTSetup+0x7c>)
 8002c94:	f7fd fce4 	bl	8000660 <USART_Cmd>
    /* Baud rate 9600, 8-bit data, One stop bit
     * No parity, Do both Rx and Tx, No HW flow control
     */
    usart1_init_struct.USART_BaudRate = 9600;
 8002c98:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002c9c:	60bb      	str	r3, [r7, #8]
    usart1_init_struct.USART_WordLength = USART_WordLength_8b;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	81bb      	strh	r3, [r7, #12]
    usart1_init_struct.USART_StopBits = USART_StopBits_1;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	81fb      	strh	r3, [r7, #14]
    usart1_init_struct.USART_Parity = USART_Parity_No ;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	823b      	strh	r3, [r7, #16]
    usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002caa:	230c      	movs	r3, #12
 8002cac:	827b      	strh	r3, [r7, #18]
    usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	82bb      	strh	r3, [r7, #20]
    USART_Init(USART1,&usart1_init_struct);
 8002cb2:	f107 0308 	add.w	r3, r7, #8
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4804      	ldr	r0, [pc, #16]	; (8002ccc <prvUARTSetup+0x7c>)
 8002cba:	f7fd fc17 	bl	80004ec <USART_Init>
}
 8002cbe:	bf00      	nop
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40010800 	.word	0x40010800
 8002ccc:	40013800 	.word	0x40013800

08002cd0 <prvGPIOSetup>:

void prvGPIOSetup(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
	//Enable The clok for GPIOA , GPIOC
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	2004      	movs	r0, #4
 8002cda:	f7fd fbe9 	bl	80004b0 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC,ENABLE);
 8002cde:	2101      	movs	r1, #1
 8002ce0:	2010      	movs	r0, #16
 8002ce2:	f7fd fbe5 	bl	80004b0 <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef led_init , Button_init ;

	//initialize the LED PC13
	led_init.GPIO_Mode = GPIO_Mode_Out_PP ;
 8002ce6:	2310      	movs	r3, #16
 8002ce8:	71fb      	strb	r3, [r7, #7]
	led_init.GPIO_Pin = GPIO_Pin_13 ;
 8002cea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cee:	80bb      	strh	r3, [r7, #4]
	led_init.GPIO_Speed = GPIO_Speed_2MHz ;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC,&led_init);
 8002cf4:	1d3b      	adds	r3, r7, #4
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4808      	ldr	r0, [pc, #32]	; (8002d1c <prvGPIOSetup+0x4c>)
 8002cfa:	f7fd fa43 	bl	8000184 <GPIO_Init>

	//initialize the Button PA5
	Button_init.GPIO_Mode = GPIO_Mode_IPD ; // input pull down
 8002cfe:	2328      	movs	r3, #40	; 0x28
 8002d00:	70fb      	strb	r3, [r7, #3]
	Button_init.GPIO_Pin = GPIO_Pin_5 ;
 8002d02:	2320      	movs	r3, #32
 8002d04:	803b      	strh	r3, [r7, #0]
	Button_init.GPIO_Speed = GPIO_Speed_2MHz ;
 8002d06:	2302      	movs	r3, #2
 8002d08:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOA,&Button_init);
 8002d0a:	463b      	mov	r3, r7
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4804      	ldr	r0, [pc, #16]	; (8002d20 <prvGPIOSetup+0x50>)
 8002d10:	f7fd fa38 	bl	8000184 <GPIO_Init>
}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40011000 	.word	0x40011000
 8002d20:	40010800 	.word	0x40010800

08002d24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002d28:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002d2a:	e003      	b.n	8002d34 <LoopCopyDataInit>

08002d2c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8002d2e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002d30:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002d32:	3104      	adds	r1, #4

08002d34 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002d34:	480b      	ldr	r0, [pc, #44]	; (8002d64 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8002d36:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8002d38:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002d3a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002d3c:	d3f6      	bcc.n	8002d2c <CopyDataInit>
	ldr	r2, =_sbss
 8002d3e:	4a0b      	ldr	r2, [pc, #44]	; (8002d6c <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8002d40:	e002      	b.n	8002d48 <LoopFillZerobss>

08002d42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002d42:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002d44:	f842 3b04 	str.w	r3, [r2], #4

08002d48 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002d48:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8002d4a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002d4c:	d3f9      	bcc.n	8002d42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d4e:	f000 f847 	bl	8002de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d52:	f000 f8ff 	bl	8002f54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d56:	f7ff fee9 	bl	8002b2c <main>
	bx	lr
 8002d5a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d5c:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8002d60:	08003944 	.word	0x08003944
	ldr	r0, =_sdata
 8002d64:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002d68:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8002d6c:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 8002d70:	2000410c 	.word	0x2000410c

08002d74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d74:	e7fe      	b.n	8002d74 <ADC1_2_IRQHandler>
	...

08002d78 <_sbrk>:
  /* Implement your write code here, this is used by puts and printf for example */
  return len;
}

caddr_t _sbrk(int32_t incr)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  extern uint32_t _Min_Heap_Size; /* _Min_Heap_Size symbol defined in the linker script. */
  extern uint8_t end asm("end");
  const uint8_t *max_heap = (uint8_t*)((uint32_t)&end + (uint32_t)&_Min_Heap_Size);
 8002d80:	4a13      	ldr	r2, [pc, #76]	; (8002dd0 <_sbrk+0x58>)
 8002d82:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <_sbrk+0x5c>)
 8002d84:	4413      	add	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
  static uint8_t *heap_end;
  uint8_t *prev_heap_end;

  if (heap_end == 0)
 8002d88:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <_sbrk+0x60>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d102      	bne.n	8002d96 <_sbrk+0x1e>
    heap_end = &end;
 8002d90:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <_sbrk+0x60>)
 8002d92:	4a0f      	ldr	r2, [pc, #60]	; (8002dd0 <_sbrk+0x58>)
 8002d94:	601a      	str	r2, [r3, #0]

  prev_heap_end = heap_end;
 8002d96:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <_sbrk+0x60>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	60bb      	str	r3, [r7, #8]
  if (heap_end + incr > max_heap)
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <_sbrk+0x60>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	441a      	add	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d905      	bls.n	8002db6 <_sbrk+0x3e>
  {
//    write(1, "Heap and stack collision\n", 25);
//    abort();
    errno = ENOMEM;
 8002daa:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <_sbrk+0x64>)
 8002dac:	220c      	movs	r2, #12
 8002dae:	601a      	str	r2, [r3, #0]
    return (caddr_t) -1;
 8002db0:	f04f 33ff 	mov.w	r3, #4294967295
 8002db4:	e006      	b.n	8002dc4 <_sbrk+0x4c>
  }

  heap_end += incr;
 8002db6:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <_sbrk+0x60>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	4a06      	ldr	r2, [pc, #24]	; (8002dd8 <_sbrk+0x60>)
 8002dc0:	6013      	str	r3, [r2, #0]

  return (caddr_t) prev_heap_end;
 8002dc2:	68bb      	ldr	r3, [r7, #8]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	2000410c 	.word	0x2000410c
 8002dd4:	00000000 	.word	0x00000000
 8002dd8:	20003f8c 	.word	0x20003f8c
 8002ddc:	20004108 	.word	0x20004108

08002de0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002de4:	4a15      	ldr	r2, [pc, #84]	; (8002e3c <SystemInit+0x5c>)
 8002de6:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <SystemInit+0x5c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8002df0:	4912      	ldr	r1, [pc, #72]	; (8002e3c <SystemInit+0x5c>)
 8002df2:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <SystemInit+0x5c>)
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <SystemInit+0x60>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002dfc:	4a0f      	ldr	r2, [pc, #60]	; (8002e3c <SystemInit+0x5c>)
 8002dfe:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <SystemInit+0x5c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002e0c:	4a0b      	ldr	r2, [pc, #44]	; (8002e3c <SystemInit+0x5c>)
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <SystemInit+0x5c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e16:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002e18:	4a08      	ldr	r2, [pc, #32]	; (8002e3c <SystemInit+0x5c>)
 8002e1a:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <SystemInit+0x5c>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002e22:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8002e24:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <SystemInit+0x5c>)
 8002e26:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002e2a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8002e2c:	f000 f80c 	bl	8002e48 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002e30:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <SystemInit+0x64>)
 8002e32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e36:	609a      	str	r2, [r3, #8]
#endif 
}
 8002e38:	bf00      	nop
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	f8ff0000 	.word	0xf8ff0000
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8002e4c:	f000 f802 	bl	8002e54 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8002e50:	bf00      	nop
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	607b      	str	r3, [r7, #4]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002e62:	4a3a      	ldr	r2, [pc, #232]	; (8002f4c <SetSysClockTo72+0xf8>)
 8002e64:	4b39      	ldr	r3, [pc, #228]	; (8002f4c <SetSysClockTo72+0xf8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002e6e:	4b37      	ldr	r3, [pc, #220]	; (8002f4c <SetSysClockTo72+0xf8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d103      	bne.n	8002e8c <SetSysClockTo72+0x38>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002e8a:	d1f0      	bne.n	8002e6e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002e8c:	4b2f      	ldr	r3, [pc, #188]	; (8002f4c <SetSysClockTo72+0xf8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	603b      	str	r3, [r7, #0]
 8002e9c:	e001      	b.n	8002ea2 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d14b      	bne.n	8002f40 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002ea8:	4a29      	ldr	r2, [pc, #164]	; (8002f50 <SetSysClockTo72+0xfc>)
 8002eaa:	4b29      	ldr	r3, [pc, #164]	; (8002f50 <SetSysClockTo72+0xfc>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f043 0310 	orr.w	r3, r3, #16
 8002eb2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8002eb4:	4a26      	ldr	r2, [pc, #152]	; (8002f50 <SetSysClockTo72+0xfc>)
 8002eb6:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <SetSysClockTo72+0xfc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 0303 	bic.w	r3, r3, #3
 8002ebe:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8002ec0:	4a23      	ldr	r2, [pc, #140]	; (8002f50 <SetSysClockTo72+0xfc>)
 8002ec2:	4b23      	ldr	r3, [pc, #140]	; (8002f50 <SetSysClockTo72+0xfc>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f043 0302 	orr.w	r3, r3, #2
 8002eca:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002ecc:	4a1f      	ldr	r2, [pc, #124]	; (8002f4c <SetSysClockTo72+0xf8>)
 8002ece:	4b1f      	ldr	r3, [pc, #124]	; (8002f4c <SetSysClockTo72+0xf8>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002ed4:	4a1d      	ldr	r2, [pc, #116]	; (8002f4c <SetSysClockTo72+0xf8>)
 8002ed6:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <SetSysClockTo72+0xf8>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002edc:	4a1b      	ldr	r2, [pc, #108]	; (8002f4c <SetSysClockTo72+0xf8>)
 8002ede:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <SetSysClockTo72+0xf8>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ee6:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8002ee8:	4a18      	ldr	r2, [pc, #96]	; (8002f4c <SetSysClockTo72+0xf8>)
 8002eea:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <SetSysClockTo72+0xf8>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002ef2:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8002ef4:	4a15      	ldr	r2, [pc, #84]	; (8002f4c <SetSysClockTo72+0xf8>)
 8002ef6:	4b15      	ldr	r3, [pc, #84]	; (8002f4c <SetSysClockTo72+0xf8>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8002efe:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002f00:	4a12      	ldr	r2, [pc, #72]	; (8002f4c <SetSysClockTo72+0xf8>)
 8002f02:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <SetSysClockTo72+0xf8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f0a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002f0c:	bf00      	nop
 8002f0e:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <SetSysClockTo72+0xf8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f9      	beq.n	8002f0e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002f1a:	4a0c      	ldr	r2, [pc, #48]	; (8002f4c <SetSysClockTo72+0xf8>)
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <SetSysClockTo72+0xf8>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f023 0303 	bic.w	r3, r3, #3
 8002f24:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8002f26:	4a09      	ldr	r2, [pc, #36]	; (8002f4c <SetSysClockTo72+0xf8>)
 8002f28:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <SetSysClockTo72+0xf8>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f043 0302 	orr.w	r3, r3, #2
 8002f30:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8002f32:	bf00      	nop
 8002f34:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <SetSysClockTo72+0xf8>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 030c 	and.w	r3, r3, #12
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d1f9      	bne.n	8002f34 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	40022000 	.word	0x40022000

08002f54 <__libc_init_array>:
 8002f54:	b570      	push	{r4, r5, r6, lr}
 8002f56:	2500      	movs	r5, #0
 8002f58:	4e0c      	ldr	r6, [pc, #48]	; (8002f8c <__libc_init_array+0x38>)
 8002f5a:	4c0d      	ldr	r4, [pc, #52]	; (8002f90 <__libc_init_array+0x3c>)
 8002f5c:	1ba4      	subs	r4, r4, r6
 8002f5e:	10a4      	asrs	r4, r4, #2
 8002f60:	42a5      	cmp	r5, r4
 8002f62:	d109      	bne.n	8002f78 <__libc_init_array+0x24>
 8002f64:	f000 fc5c 	bl	8003820 <_init>
 8002f68:	2500      	movs	r5, #0
 8002f6a:	4e0a      	ldr	r6, [pc, #40]	; (8002f94 <__libc_init_array+0x40>)
 8002f6c:	4c0a      	ldr	r4, [pc, #40]	; (8002f98 <__libc_init_array+0x44>)
 8002f6e:	1ba4      	subs	r4, r4, r6
 8002f70:	10a4      	asrs	r4, r4, #2
 8002f72:	42a5      	cmp	r5, r4
 8002f74:	d105      	bne.n	8002f82 <__libc_init_array+0x2e>
 8002f76:	bd70      	pop	{r4, r5, r6, pc}
 8002f78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f7c:	4798      	blx	r3
 8002f7e:	3501      	adds	r5, #1
 8002f80:	e7ee      	b.n	8002f60 <__libc_init_array+0xc>
 8002f82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f86:	4798      	blx	r3
 8002f88:	3501      	adds	r5, #1
 8002f8a:	e7f2      	b.n	8002f72 <__libc_init_array+0x1e>
 8002f8c:	0800393c 	.word	0x0800393c
 8002f90:	0800393c 	.word	0x0800393c
 8002f94:	0800393c 	.word	0x0800393c
 8002f98:	08003940 	.word	0x08003940

08002f9c <memcmp>:
 8002f9c:	b510      	push	{r4, lr}
 8002f9e:	3901      	subs	r1, #1
 8002fa0:	4402      	add	r2, r0
 8002fa2:	4290      	cmp	r0, r2
 8002fa4:	d101      	bne.n	8002faa <memcmp+0xe>
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	bd10      	pop	{r4, pc}
 8002faa:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002fae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002fb2:	42a3      	cmp	r3, r4
 8002fb4:	d0f5      	beq.n	8002fa2 <memcmp+0x6>
 8002fb6:	1b18      	subs	r0, r3, r4
 8002fb8:	bd10      	pop	{r4, pc}

08002fba <memcpy>:
 8002fba:	b510      	push	{r4, lr}
 8002fbc:	1e43      	subs	r3, r0, #1
 8002fbe:	440a      	add	r2, r1
 8002fc0:	4291      	cmp	r1, r2
 8002fc2:	d100      	bne.n	8002fc6 <memcpy+0xc>
 8002fc4:	bd10      	pop	{r4, pc}
 8002fc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fce:	e7f7      	b.n	8002fc0 <memcpy+0x6>

08002fd0 <memset>:
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	4402      	add	r2, r0
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d100      	bne.n	8002fda <memset+0xa>
 8002fd8:	4770      	bx	lr
 8002fda:	f803 1b01 	strb.w	r1, [r3], #1
 8002fde:	e7f9      	b.n	8002fd4 <memset+0x4>

08002fe0 <siprintf>:
 8002fe0:	b40e      	push	{r1, r2, r3}
 8002fe2:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002fe6:	b500      	push	{lr}
 8002fe8:	b09c      	sub	sp, #112	; 0x70
 8002fea:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002fee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ff2:	9104      	str	r1, [sp, #16]
 8002ff4:	9107      	str	r1, [sp, #28]
 8002ff6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002ffa:	ab1d      	add	r3, sp, #116	; 0x74
 8002ffc:	9002      	str	r0, [sp, #8]
 8002ffe:	9006      	str	r0, [sp, #24]
 8003000:	4808      	ldr	r0, [pc, #32]	; (8003024 <siprintf+0x44>)
 8003002:	f853 2b04 	ldr.w	r2, [r3], #4
 8003006:	f8ad 1016 	strh.w	r1, [sp, #22]
 800300a:	6800      	ldr	r0, [r0, #0]
 800300c:	a902      	add	r1, sp, #8
 800300e:	9301      	str	r3, [sp, #4]
 8003010:	f000 f910 	bl	8003234 <_svfiprintf_r>
 8003014:	2200      	movs	r2, #0
 8003016:	9b02      	ldr	r3, [sp, #8]
 8003018:	701a      	strb	r2, [r3, #0]
 800301a:	b01c      	add	sp, #112	; 0x70
 800301c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003020:	b003      	add	sp, #12
 8003022:	4770      	bx	lr
 8003024:	20000018 	.word	0x20000018

08003028 <_free_r>:
 8003028:	b538      	push	{r3, r4, r5, lr}
 800302a:	4605      	mov	r5, r0
 800302c:	2900      	cmp	r1, #0
 800302e:	d043      	beq.n	80030b8 <_free_r+0x90>
 8003030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003034:	1f0c      	subs	r4, r1, #4
 8003036:	2b00      	cmp	r3, #0
 8003038:	bfb8      	it	lt
 800303a:	18e4      	addlt	r4, r4, r3
 800303c:	f000 fbbe 	bl	80037bc <__malloc_lock>
 8003040:	4a1e      	ldr	r2, [pc, #120]	; (80030bc <_free_r+0x94>)
 8003042:	6813      	ldr	r3, [r2, #0]
 8003044:	4610      	mov	r0, r2
 8003046:	b933      	cbnz	r3, 8003056 <_free_r+0x2e>
 8003048:	6063      	str	r3, [r4, #4]
 800304a:	6014      	str	r4, [r2, #0]
 800304c:	4628      	mov	r0, r5
 800304e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003052:	f000 bbb4 	b.w	80037be <__malloc_unlock>
 8003056:	42a3      	cmp	r3, r4
 8003058:	d90b      	bls.n	8003072 <_free_r+0x4a>
 800305a:	6821      	ldr	r1, [r4, #0]
 800305c:	1862      	adds	r2, r4, r1
 800305e:	4293      	cmp	r3, r2
 8003060:	bf01      	itttt	eq
 8003062:	681a      	ldreq	r2, [r3, #0]
 8003064:	685b      	ldreq	r3, [r3, #4]
 8003066:	1852      	addeq	r2, r2, r1
 8003068:	6022      	streq	r2, [r4, #0]
 800306a:	6063      	str	r3, [r4, #4]
 800306c:	6004      	str	r4, [r0, #0]
 800306e:	e7ed      	b.n	800304c <_free_r+0x24>
 8003070:	4613      	mov	r3, r2
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	b10a      	cbz	r2, 800307a <_free_r+0x52>
 8003076:	42a2      	cmp	r2, r4
 8003078:	d9fa      	bls.n	8003070 <_free_r+0x48>
 800307a:	6819      	ldr	r1, [r3, #0]
 800307c:	1858      	adds	r0, r3, r1
 800307e:	42a0      	cmp	r0, r4
 8003080:	d10b      	bne.n	800309a <_free_r+0x72>
 8003082:	6820      	ldr	r0, [r4, #0]
 8003084:	4401      	add	r1, r0
 8003086:	1858      	adds	r0, r3, r1
 8003088:	4282      	cmp	r2, r0
 800308a:	6019      	str	r1, [r3, #0]
 800308c:	d1de      	bne.n	800304c <_free_r+0x24>
 800308e:	6810      	ldr	r0, [r2, #0]
 8003090:	6852      	ldr	r2, [r2, #4]
 8003092:	4401      	add	r1, r0
 8003094:	6019      	str	r1, [r3, #0]
 8003096:	605a      	str	r2, [r3, #4]
 8003098:	e7d8      	b.n	800304c <_free_r+0x24>
 800309a:	d902      	bls.n	80030a2 <_free_r+0x7a>
 800309c:	230c      	movs	r3, #12
 800309e:	602b      	str	r3, [r5, #0]
 80030a0:	e7d4      	b.n	800304c <_free_r+0x24>
 80030a2:	6820      	ldr	r0, [r4, #0]
 80030a4:	1821      	adds	r1, r4, r0
 80030a6:	428a      	cmp	r2, r1
 80030a8:	bf01      	itttt	eq
 80030aa:	6811      	ldreq	r1, [r2, #0]
 80030ac:	6852      	ldreq	r2, [r2, #4]
 80030ae:	1809      	addeq	r1, r1, r0
 80030b0:	6021      	streq	r1, [r4, #0]
 80030b2:	6062      	str	r2, [r4, #4]
 80030b4:	605c      	str	r4, [r3, #4]
 80030b6:	e7c9      	b.n	800304c <_free_r+0x24>
 80030b8:	bd38      	pop	{r3, r4, r5, pc}
 80030ba:	bf00      	nop
 80030bc:	20003f90 	.word	0x20003f90

080030c0 <_malloc_r>:
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	1ccd      	adds	r5, r1, #3
 80030c4:	f025 0503 	bic.w	r5, r5, #3
 80030c8:	3508      	adds	r5, #8
 80030ca:	2d0c      	cmp	r5, #12
 80030cc:	bf38      	it	cc
 80030ce:	250c      	movcc	r5, #12
 80030d0:	2d00      	cmp	r5, #0
 80030d2:	4606      	mov	r6, r0
 80030d4:	db01      	blt.n	80030da <_malloc_r+0x1a>
 80030d6:	42a9      	cmp	r1, r5
 80030d8:	d903      	bls.n	80030e2 <_malloc_r+0x22>
 80030da:	230c      	movs	r3, #12
 80030dc:	6033      	str	r3, [r6, #0]
 80030de:	2000      	movs	r0, #0
 80030e0:	bd70      	pop	{r4, r5, r6, pc}
 80030e2:	f000 fb6b 	bl	80037bc <__malloc_lock>
 80030e6:	4a23      	ldr	r2, [pc, #140]	; (8003174 <_malloc_r+0xb4>)
 80030e8:	6814      	ldr	r4, [r2, #0]
 80030ea:	4621      	mov	r1, r4
 80030ec:	b991      	cbnz	r1, 8003114 <_malloc_r+0x54>
 80030ee:	4c22      	ldr	r4, [pc, #136]	; (8003178 <_malloc_r+0xb8>)
 80030f0:	6823      	ldr	r3, [r4, #0]
 80030f2:	b91b      	cbnz	r3, 80030fc <_malloc_r+0x3c>
 80030f4:	4630      	mov	r0, r6
 80030f6:	f000 fb29 	bl	800374c <_sbrk_r>
 80030fa:	6020      	str	r0, [r4, #0]
 80030fc:	4629      	mov	r1, r5
 80030fe:	4630      	mov	r0, r6
 8003100:	f000 fb24 	bl	800374c <_sbrk_r>
 8003104:	1c43      	adds	r3, r0, #1
 8003106:	d126      	bne.n	8003156 <_malloc_r+0x96>
 8003108:	230c      	movs	r3, #12
 800310a:	4630      	mov	r0, r6
 800310c:	6033      	str	r3, [r6, #0]
 800310e:	f000 fb56 	bl	80037be <__malloc_unlock>
 8003112:	e7e4      	b.n	80030de <_malloc_r+0x1e>
 8003114:	680b      	ldr	r3, [r1, #0]
 8003116:	1b5b      	subs	r3, r3, r5
 8003118:	d41a      	bmi.n	8003150 <_malloc_r+0x90>
 800311a:	2b0b      	cmp	r3, #11
 800311c:	d90f      	bls.n	800313e <_malloc_r+0x7e>
 800311e:	600b      	str	r3, [r1, #0]
 8003120:	18cc      	adds	r4, r1, r3
 8003122:	50cd      	str	r5, [r1, r3]
 8003124:	4630      	mov	r0, r6
 8003126:	f000 fb4a 	bl	80037be <__malloc_unlock>
 800312a:	f104 000b 	add.w	r0, r4, #11
 800312e:	1d23      	adds	r3, r4, #4
 8003130:	f020 0007 	bic.w	r0, r0, #7
 8003134:	1ac3      	subs	r3, r0, r3
 8003136:	d01b      	beq.n	8003170 <_malloc_r+0xb0>
 8003138:	425a      	negs	r2, r3
 800313a:	50e2      	str	r2, [r4, r3]
 800313c:	bd70      	pop	{r4, r5, r6, pc}
 800313e:	428c      	cmp	r4, r1
 8003140:	bf0b      	itete	eq
 8003142:	6863      	ldreq	r3, [r4, #4]
 8003144:	684b      	ldrne	r3, [r1, #4]
 8003146:	6013      	streq	r3, [r2, #0]
 8003148:	6063      	strne	r3, [r4, #4]
 800314a:	bf18      	it	ne
 800314c:	460c      	movne	r4, r1
 800314e:	e7e9      	b.n	8003124 <_malloc_r+0x64>
 8003150:	460c      	mov	r4, r1
 8003152:	6849      	ldr	r1, [r1, #4]
 8003154:	e7ca      	b.n	80030ec <_malloc_r+0x2c>
 8003156:	1cc4      	adds	r4, r0, #3
 8003158:	f024 0403 	bic.w	r4, r4, #3
 800315c:	42a0      	cmp	r0, r4
 800315e:	d005      	beq.n	800316c <_malloc_r+0xac>
 8003160:	1a21      	subs	r1, r4, r0
 8003162:	4630      	mov	r0, r6
 8003164:	f000 faf2 	bl	800374c <_sbrk_r>
 8003168:	3001      	adds	r0, #1
 800316a:	d0cd      	beq.n	8003108 <_malloc_r+0x48>
 800316c:	6025      	str	r5, [r4, #0]
 800316e:	e7d9      	b.n	8003124 <_malloc_r+0x64>
 8003170:	bd70      	pop	{r4, r5, r6, pc}
 8003172:	bf00      	nop
 8003174:	20003f90 	.word	0x20003f90
 8003178:	20003f94 	.word	0x20003f94

0800317c <__ssputs_r>:
 800317c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003180:	688e      	ldr	r6, [r1, #8]
 8003182:	4682      	mov	sl, r0
 8003184:	429e      	cmp	r6, r3
 8003186:	460c      	mov	r4, r1
 8003188:	4691      	mov	r9, r2
 800318a:	4698      	mov	r8, r3
 800318c:	d835      	bhi.n	80031fa <__ssputs_r+0x7e>
 800318e:	898a      	ldrh	r2, [r1, #12]
 8003190:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003194:	d031      	beq.n	80031fa <__ssputs_r+0x7e>
 8003196:	2302      	movs	r3, #2
 8003198:	6825      	ldr	r5, [r4, #0]
 800319a:	6909      	ldr	r1, [r1, #16]
 800319c:	1a6f      	subs	r7, r5, r1
 800319e:	6965      	ldr	r5, [r4, #20]
 80031a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80031a8:	f108 0301 	add.w	r3, r8, #1
 80031ac:	443b      	add	r3, r7
 80031ae:	429d      	cmp	r5, r3
 80031b0:	bf38      	it	cc
 80031b2:	461d      	movcc	r5, r3
 80031b4:	0553      	lsls	r3, r2, #21
 80031b6:	d531      	bpl.n	800321c <__ssputs_r+0xa0>
 80031b8:	4629      	mov	r1, r5
 80031ba:	f7ff ff81 	bl	80030c0 <_malloc_r>
 80031be:	4606      	mov	r6, r0
 80031c0:	b950      	cbnz	r0, 80031d8 <__ssputs_r+0x5c>
 80031c2:	230c      	movs	r3, #12
 80031c4:	f8ca 3000 	str.w	r3, [sl]
 80031c8:	89a3      	ldrh	r3, [r4, #12]
 80031ca:	f04f 30ff 	mov.w	r0, #4294967295
 80031ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031d2:	81a3      	strh	r3, [r4, #12]
 80031d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031d8:	463a      	mov	r2, r7
 80031da:	6921      	ldr	r1, [r4, #16]
 80031dc:	f7ff feed 	bl	8002fba <memcpy>
 80031e0:	89a3      	ldrh	r3, [r4, #12]
 80031e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ea:	81a3      	strh	r3, [r4, #12]
 80031ec:	6126      	str	r6, [r4, #16]
 80031ee:	443e      	add	r6, r7
 80031f0:	6026      	str	r6, [r4, #0]
 80031f2:	4646      	mov	r6, r8
 80031f4:	6165      	str	r5, [r4, #20]
 80031f6:	1bed      	subs	r5, r5, r7
 80031f8:	60a5      	str	r5, [r4, #8]
 80031fa:	4546      	cmp	r6, r8
 80031fc:	bf28      	it	cs
 80031fe:	4646      	movcs	r6, r8
 8003200:	4649      	mov	r1, r9
 8003202:	4632      	mov	r2, r6
 8003204:	6820      	ldr	r0, [r4, #0]
 8003206:	f000 fabf 	bl	8003788 <memmove>
 800320a:	68a3      	ldr	r3, [r4, #8]
 800320c:	2000      	movs	r0, #0
 800320e:	1b9b      	subs	r3, r3, r6
 8003210:	60a3      	str	r3, [r4, #8]
 8003212:	6823      	ldr	r3, [r4, #0]
 8003214:	441e      	add	r6, r3
 8003216:	6026      	str	r6, [r4, #0]
 8003218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800321c:	462a      	mov	r2, r5
 800321e:	f000 facf 	bl	80037c0 <_realloc_r>
 8003222:	4606      	mov	r6, r0
 8003224:	2800      	cmp	r0, #0
 8003226:	d1e1      	bne.n	80031ec <__ssputs_r+0x70>
 8003228:	6921      	ldr	r1, [r4, #16]
 800322a:	4650      	mov	r0, sl
 800322c:	f7ff fefc 	bl	8003028 <_free_r>
 8003230:	e7c7      	b.n	80031c2 <__ssputs_r+0x46>
	...

08003234 <_svfiprintf_r>:
 8003234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003238:	b09d      	sub	sp, #116	; 0x74
 800323a:	9303      	str	r3, [sp, #12]
 800323c:	898b      	ldrh	r3, [r1, #12]
 800323e:	4680      	mov	r8, r0
 8003240:	061c      	lsls	r4, r3, #24
 8003242:	460d      	mov	r5, r1
 8003244:	4616      	mov	r6, r2
 8003246:	d50f      	bpl.n	8003268 <_svfiprintf_r+0x34>
 8003248:	690b      	ldr	r3, [r1, #16]
 800324a:	b96b      	cbnz	r3, 8003268 <_svfiprintf_r+0x34>
 800324c:	2140      	movs	r1, #64	; 0x40
 800324e:	f7ff ff37 	bl	80030c0 <_malloc_r>
 8003252:	6028      	str	r0, [r5, #0]
 8003254:	6128      	str	r0, [r5, #16]
 8003256:	b928      	cbnz	r0, 8003264 <_svfiprintf_r+0x30>
 8003258:	230c      	movs	r3, #12
 800325a:	f8c8 3000 	str.w	r3, [r8]
 800325e:	f04f 30ff 	mov.w	r0, #4294967295
 8003262:	e0c4      	b.n	80033ee <_svfiprintf_r+0x1ba>
 8003264:	2340      	movs	r3, #64	; 0x40
 8003266:	616b      	str	r3, [r5, #20]
 8003268:	2300      	movs	r3, #0
 800326a:	9309      	str	r3, [sp, #36]	; 0x24
 800326c:	2320      	movs	r3, #32
 800326e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003272:	2330      	movs	r3, #48	; 0x30
 8003274:	f04f 0b01 	mov.w	fp, #1
 8003278:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800327c:	4637      	mov	r7, r6
 800327e:	463c      	mov	r4, r7
 8003280:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	d13c      	bne.n	8003302 <_svfiprintf_r+0xce>
 8003288:	ebb7 0a06 	subs.w	sl, r7, r6
 800328c:	d00b      	beq.n	80032a6 <_svfiprintf_r+0x72>
 800328e:	4653      	mov	r3, sl
 8003290:	4632      	mov	r2, r6
 8003292:	4629      	mov	r1, r5
 8003294:	4640      	mov	r0, r8
 8003296:	f7ff ff71 	bl	800317c <__ssputs_r>
 800329a:	3001      	adds	r0, #1
 800329c:	f000 80a2 	beq.w	80033e4 <_svfiprintf_r+0x1b0>
 80032a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032a2:	4453      	add	r3, sl
 80032a4:	9309      	str	r3, [sp, #36]	; 0x24
 80032a6:	783b      	ldrb	r3, [r7, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 809b 	beq.w	80033e4 <_svfiprintf_r+0x1b0>
 80032ae:	2300      	movs	r3, #0
 80032b0:	f04f 32ff 	mov.w	r2, #4294967295
 80032b4:	9304      	str	r3, [sp, #16]
 80032b6:	9307      	str	r3, [sp, #28]
 80032b8:	9205      	str	r2, [sp, #20]
 80032ba:	9306      	str	r3, [sp, #24]
 80032bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032c0:	931a      	str	r3, [sp, #104]	; 0x68
 80032c2:	2205      	movs	r2, #5
 80032c4:	7821      	ldrb	r1, [r4, #0]
 80032c6:	4850      	ldr	r0, [pc, #320]	; (8003408 <_svfiprintf_r+0x1d4>)
 80032c8:	f000 fa50 	bl	800376c <memchr>
 80032cc:	1c67      	adds	r7, r4, #1
 80032ce:	9b04      	ldr	r3, [sp, #16]
 80032d0:	b9d8      	cbnz	r0, 800330a <_svfiprintf_r+0xd6>
 80032d2:	06d9      	lsls	r1, r3, #27
 80032d4:	bf44      	itt	mi
 80032d6:	2220      	movmi	r2, #32
 80032d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032dc:	071a      	lsls	r2, r3, #28
 80032de:	bf44      	itt	mi
 80032e0:	222b      	movmi	r2, #43	; 0x2b
 80032e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032e6:	7822      	ldrb	r2, [r4, #0]
 80032e8:	2a2a      	cmp	r2, #42	; 0x2a
 80032ea:	d016      	beq.n	800331a <_svfiprintf_r+0xe6>
 80032ec:	2100      	movs	r1, #0
 80032ee:	200a      	movs	r0, #10
 80032f0:	9a07      	ldr	r2, [sp, #28]
 80032f2:	4627      	mov	r7, r4
 80032f4:	783b      	ldrb	r3, [r7, #0]
 80032f6:	3401      	adds	r4, #1
 80032f8:	3b30      	subs	r3, #48	; 0x30
 80032fa:	2b09      	cmp	r3, #9
 80032fc:	d950      	bls.n	80033a0 <_svfiprintf_r+0x16c>
 80032fe:	b1c9      	cbz	r1, 8003334 <_svfiprintf_r+0x100>
 8003300:	e011      	b.n	8003326 <_svfiprintf_r+0xf2>
 8003302:	2b25      	cmp	r3, #37	; 0x25
 8003304:	d0c0      	beq.n	8003288 <_svfiprintf_r+0x54>
 8003306:	4627      	mov	r7, r4
 8003308:	e7b9      	b.n	800327e <_svfiprintf_r+0x4a>
 800330a:	4a3f      	ldr	r2, [pc, #252]	; (8003408 <_svfiprintf_r+0x1d4>)
 800330c:	463c      	mov	r4, r7
 800330e:	1a80      	subs	r0, r0, r2
 8003310:	fa0b f000 	lsl.w	r0, fp, r0
 8003314:	4318      	orrs	r0, r3
 8003316:	9004      	str	r0, [sp, #16]
 8003318:	e7d3      	b.n	80032c2 <_svfiprintf_r+0x8e>
 800331a:	9a03      	ldr	r2, [sp, #12]
 800331c:	1d11      	adds	r1, r2, #4
 800331e:	6812      	ldr	r2, [r2, #0]
 8003320:	9103      	str	r1, [sp, #12]
 8003322:	2a00      	cmp	r2, #0
 8003324:	db01      	blt.n	800332a <_svfiprintf_r+0xf6>
 8003326:	9207      	str	r2, [sp, #28]
 8003328:	e004      	b.n	8003334 <_svfiprintf_r+0x100>
 800332a:	4252      	negs	r2, r2
 800332c:	f043 0302 	orr.w	r3, r3, #2
 8003330:	9207      	str	r2, [sp, #28]
 8003332:	9304      	str	r3, [sp, #16]
 8003334:	783b      	ldrb	r3, [r7, #0]
 8003336:	2b2e      	cmp	r3, #46	; 0x2e
 8003338:	d10d      	bne.n	8003356 <_svfiprintf_r+0x122>
 800333a:	787b      	ldrb	r3, [r7, #1]
 800333c:	1c79      	adds	r1, r7, #1
 800333e:	2b2a      	cmp	r3, #42	; 0x2a
 8003340:	d132      	bne.n	80033a8 <_svfiprintf_r+0x174>
 8003342:	9b03      	ldr	r3, [sp, #12]
 8003344:	3702      	adds	r7, #2
 8003346:	1d1a      	adds	r2, r3, #4
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	9203      	str	r2, [sp, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	bfb8      	it	lt
 8003350:	f04f 33ff 	movlt.w	r3, #4294967295
 8003354:	9305      	str	r3, [sp, #20]
 8003356:	4c2d      	ldr	r4, [pc, #180]	; (800340c <_svfiprintf_r+0x1d8>)
 8003358:	2203      	movs	r2, #3
 800335a:	7839      	ldrb	r1, [r7, #0]
 800335c:	4620      	mov	r0, r4
 800335e:	f000 fa05 	bl	800376c <memchr>
 8003362:	b138      	cbz	r0, 8003374 <_svfiprintf_r+0x140>
 8003364:	2340      	movs	r3, #64	; 0x40
 8003366:	1b00      	subs	r0, r0, r4
 8003368:	fa03 f000 	lsl.w	r0, r3, r0
 800336c:	9b04      	ldr	r3, [sp, #16]
 800336e:	3701      	adds	r7, #1
 8003370:	4303      	orrs	r3, r0
 8003372:	9304      	str	r3, [sp, #16]
 8003374:	7839      	ldrb	r1, [r7, #0]
 8003376:	2206      	movs	r2, #6
 8003378:	4825      	ldr	r0, [pc, #148]	; (8003410 <_svfiprintf_r+0x1dc>)
 800337a:	1c7e      	adds	r6, r7, #1
 800337c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003380:	f000 f9f4 	bl	800376c <memchr>
 8003384:	2800      	cmp	r0, #0
 8003386:	d035      	beq.n	80033f4 <_svfiprintf_r+0x1c0>
 8003388:	4b22      	ldr	r3, [pc, #136]	; (8003414 <_svfiprintf_r+0x1e0>)
 800338a:	b9fb      	cbnz	r3, 80033cc <_svfiprintf_r+0x198>
 800338c:	9b03      	ldr	r3, [sp, #12]
 800338e:	3307      	adds	r3, #7
 8003390:	f023 0307 	bic.w	r3, r3, #7
 8003394:	3308      	adds	r3, #8
 8003396:	9303      	str	r3, [sp, #12]
 8003398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800339a:	444b      	add	r3, r9
 800339c:	9309      	str	r3, [sp, #36]	; 0x24
 800339e:	e76d      	b.n	800327c <_svfiprintf_r+0x48>
 80033a0:	fb00 3202 	mla	r2, r0, r2, r3
 80033a4:	2101      	movs	r1, #1
 80033a6:	e7a4      	b.n	80032f2 <_svfiprintf_r+0xbe>
 80033a8:	2300      	movs	r3, #0
 80033aa:	240a      	movs	r4, #10
 80033ac:	4618      	mov	r0, r3
 80033ae:	9305      	str	r3, [sp, #20]
 80033b0:	460f      	mov	r7, r1
 80033b2:	783a      	ldrb	r2, [r7, #0]
 80033b4:	3101      	adds	r1, #1
 80033b6:	3a30      	subs	r2, #48	; 0x30
 80033b8:	2a09      	cmp	r2, #9
 80033ba:	d903      	bls.n	80033c4 <_svfiprintf_r+0x190>
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0ca      	beq.n	8003356 <_svfiprintf_r+0x122>
 80033c0:	9005      	str	r0, [sp, #20]
 80033c2:	e7c8      	b.n	8003356 <_svfiprintf_r+0x122>
 80033c4:	fb04 2000 	mla	r0, r4, r0, r2
 80033c8:	2301      	movs	r3, #1
 80033ca:	e7f1      	b.n	80033b0 <_svfiprintf_r+0x17c>
 80033cc:	ab03      	add	r3, sp, #12
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	462a      	mov	r2, r5
 80033d2:	4b11      	ldr	r3, [pc, #68]	; (8003418 <_svfiprintf_r+0x1e4>)
 80033d4:	a904      	add	r1, sp, #16
 80033d6:	4640      	mov	r0, r8
 80033d8:	f3af 8000 	nop.w
 80033dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80033e0:	4681      	mov	r9, r0
 80033e2:	d1d9      	bne.n	8003398 <_svfiprintf_r+0x164>
 80033e4:	89ab      	ldrh	r3, [r5, #12]
 80033e6:	065b      	lsls	r3, r3, #25
 80033e8:	f53f af39 	bmi.w	800325e <_svfiprintf_r+0x2a>
 80033ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033ee:	b01d      	add	sp, #116	; 0x74
 80033f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033f4:	ab03      	add	r3, sp, #12
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	462a      	mov	r2, r5
 80033fa:	4b07      	ldr	r3, [pc, #28]	; (8003418 <_svfiprintf_r+0x1e4>)
 80033fc:	a904      	add	r1, sp, #16
 80033fe:	4640      	mov	r0, r8
 8003400:	f000 f884 	bl	800350c <_printf_i>
 8003404:	e7ea      	b.n	80033dc <_svfiprintf_r+0x1a8>
 8003406:	bf00      	nop
 8003408:	08003906 	.word	0x08003906
 800340c:	0800390c 	.word	0x0800390c
 8003410:	08003910 	.word	0x08003910
 8003414:	00000000 	.word	0x00000000
 8003418:	0800317d 	.word	0x0800317d

0800341c <_printf_common>:
 800341c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003420:	4691      	mov	r9, r2
 8003422:	461f      	mov	r7, r3
 8003424:	688a      	ldr	r2, [r1, #8]
 8003426:	690b      	ldr	r3, [r1, #16]
 8003428:	4606      	mov	r6, r0
 800342a:	4293      	cmp	r3, r2
 800342c:	bfb8      	it	lt
 800342e:	4613      	movlt	r3, r2
 8003430:	f8c9 3000 	str.w	r3, [r9]
 8003434:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003438:	460c      	mov	r4, r1
 800343a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800343e:	b112      	cbz	r2, 8003446 <_printf_common+0x2a>
 8003440:	3301      	adds	r3, #1
 8003442:	f8c9 3000 	str.w	r3, [r9]
 8003446:	6823      	ldr	r3, [r4, #0]
 8003448:	0699      	lsls	r1, r3, #26
 800344a:	bf42      	ittt	mi
 800344c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003450:	3302      	addmi	r3, #2
 8003452:	f8c9 3000 	strmi.w	r3, [r9]
 8003456:	6825      	ldr	r5, [r4, #0]
 8003458:	f015 0506 	ands.w	r5, r5, #6
 800345c:	d107      	bne.n	800346e <_printf_common+0x52>
 800345e:	f104 0a19 	add.w	sl, r4, #25
 8003462:	68e3      	ldr	r3, [r4, #12]
 8003464:	f8d9 2000 	ldr.w	r2, [r9]
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	429d      	cmp	r5, r3
 800346c:	db2a      	blt.n	80034c4 <_printf_common+0xa8>
 800346e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003472:	6822      	ldr	r2, [r4, #0]
 8003474:	3300      	adds	r3, #0
 8003476:	bf18      	it	ne
 8003478:	2301      	movne	r3, #1
 800347a:	0692      	lsls	r2, r2, #26
 800347c:	d42f      	bmi.n	80034de <_printf_common+0xc2>
 800347e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003482:	4639      	mov	r1, r7
 8003484:	4630      	mov	r0, r6
 8003486:	47c0      	blx	r8
 8003488:	3001      	adds	r0, #1
 800348a:	d022      	beq.n	80034d2 <_printf_common+0xb6>
 800348c:	6823      	ldr	r3, [r4, #0]
 800348e:	68e5      	ldr	r5, [r4, #12]
 8003490:	f003 0306 	and.w	r3, r3, #6
 8003494:	2b04      	cmp	r3, #4
 8003496:	bf18      	it	ne
 8003498:	2500      	movne	r5, #0
 800349a:	f8d9 2000 	ldr.w	r2, [r9]
 800349e:	f04f 0900 	mov.w	r9, #0
 80034a2:	bf08      	it	eq
 80034a4:	1aad      	subeq	r5, r5, r2
 80034a6:	68a3      	ldr	r3, [r4, #8]
 80034a8:	6922      	ldr	r2, [r4, #16]
 80034aa:	bf08      	it	eq
 80034ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034b0:	4293      	cmp	r3, r2
 80034b2:	bfc4      	itt	gt
 80034b4:	1a9b      	subgt	r3, r3, r2
 80034b6:	18ed      	addgt	r5, r5, r3
 80034b8:	341a      	adds	r4, #26
 80034ba:	454d      	cmp	r5, r9
 80034bc:	d11b      	bne.n	80034f6 <_printf_common+0xda>
 80034be:	2000      	movs	r0, #0
 80034c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034c4:	2301      	movs	r3, #1
 80034c6:	4652      	mov	r2, sl
 80034c8:	4639      	mov	r1, r7
 80034ca:	4630      	mov	r0, r6
 80034cc:	47c0      	blx	r8
 80034ce:	3001      	adds	r0, #1
 80034d0:	d103      	bne.n	80034da <_printf_common+0xbe>
 80034d2:	f04f 30ff 	mov.w	r0, #4294967295
 80034d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034da:	3501      	adds	r5, #1
 80034dc:	e7c1      	b.n	8003462 <_printf_common+0x46>
 80034de:	2030      	movs	r0, #48	; 0x30
 80034e0:	18e1      	adds	r1, r4, r3
 80034e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034ec:	4422      	add	r2, r4
 80034ee:	3302      	adds	r3, #2
 80034f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034f4:	e7c3      	b.n	800347e <_printf_common+0x62>
 80034f6:	2301      	movs	r3, #1
 80034f8:	4622      	mov	r2, r4
 80034fa:	4639      	mov	r1, r7
 80034fc:	4630      	mov	r0, r6
 80034fe:	47c0      	blx	r8
 8003500:	3001      	adds	r0, #1
 8003502:	d0e6      	beq.n	80034d2 <_printf_common+0xb6>
 8003504:	f109 0901 	add.w	r9, r9, #1
 8003508:	e7d7      	b.n	80034ba <_printf_common+0x9e>
	...

0800350c <_printf_i>:
 800350c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003510:	4617      	mov	r7, r2
 8003512:	7e0a      	ldrb	r2, [r1, #24]
 8003514:	b085      	sub	sp, #20
 8003516:	2a6e      	cmp	r2, #110	; 0x6e
 8003518:	4698      	mov	r8, r3
 800351a:	4606      	mov	r6, r0
 800351c:	460c      	mov	r4, r1
 800351e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003520:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003524:	f000 80bc 	beq.w	80036a0 <_printf_i+0x194>
 8003528:	d81a      	bhi.n	8003560 <_printf_i+0x54>
 800352a:	2a63      	cmp	r2, #99	; 0x63
 800352c:	d02e      	beq.n	800358c <_printf_i+0x80>
 800352e:	d80a      	bhi.n	8003546 <_printf_i+0x3a>
 8003530:	2a00      	cmp	r2, #0
 8003532:	f000 80c8 	beq.w	80036c6 <_printf_i+0x1ba>
 8003536:	2a58      	cmp	r2, #88	; 0x58
 8003538:	f000 808a 	beq.w	8003650 <_printf_i+0x144>
 800353c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003540:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003544:	e02a      	b.n	800359c <_printf_i+0x90>
 8003546:	2a64      	cmp	r2, #100	; 0x64
 8003548:	d001      	beq.n	800354e <_printf_i+0x42>
 800354a:	2a69      	cmp	r2, #105	; 0x69
 800354c:	d1f6      	bne.n	800353c <_printf_i+0x30>
 800354e:	6821      	ldr	r1, [r4, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003556:	d023      	beq.n	80035a0 <_printf_i+0x94>
 8003558:	1d11      	adds	r1, r2, #4
 800355a:	6019      	str	r1, [r3, #0]
 800355c:	6813      	ldr	r3, [r2, #0]
 800355e:	e027      	b.n	80035b0 <_printf_i+0xa4>
 8003560:	2a73      	cmp	r2, #115	; 0x73
 8003562:	f000 80b4 	beq.w	80036ce <_printf_i+0x1c2>
 8003566:	d808      	bhi.n	800357a <_printf_i+0x6e>
 8003568:	2a6f      	cmp	r2, #111	; 0x6f
 800356a:	d02a      	beq.n	80035c2 <_printf_i+0xb6>
 800356c:	2a70      	cmp	r2, #112	; 0x70
 800356e:	d1e5      	bne.n	800353c <_printf_i+0x30>
 8003570:	680a      	ldr	r2, [r1, #0]
 8003572:	f042 0220 	orr.w	r2, r2, #32
 8003576:	600a      	str	r2, [r1, #0]
 8003578:	e003      	b.n	8003582 <_printf_i+0x76>
 800357a:	2a75      	cmp	r2, #117	; 0x75
 800357c:	d021      	beq.n	80035c2 <_printf_i+0xb6>
 800357e:	2a78      	cmp	r2, #120	; 0x78
 8003580:	d1dc      	bne.n	800353c <_printf_i+0x30>
 8003582:	2278      	movs	r2, #120	; 0x78
 8003584:	496f      	ldr	r1, [pc, #444]	; (8003744 <_printf_i+0x238>)
 8003586:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800358a:	e064      	b.n	8003656 <_printf_i+0x14a>
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003592:	1d11      	adds	r1, r2, #4
 8003594:	6019      	str	r1, [r3, #0]
 8003596:	6813      	ldr	r3, [r2, #0]
 8003598:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800359c:	2301      	movs	r3, #1
 800359e:	e0a3      	b.n	80036e8 <_printf_i+0x1dc>
 80035a0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80035a4:	f102 0104 	add.w	r1, r2, #4
 80035a8:	6019      	str	r1, [r3, #0]
 80035aa:	d0d7      	beq.n	800355c <_printf_i+0x50>
 80035ac:	f9b2 3000 	ldrsh.w	r3, [r2]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	da03      	bge.n	80035bc <_printf_i+0xb0>
 80035b4:	222d      	movs	r2, #45	; 0x2d
 80035b6:	425b      	negs	r3, r3
 80035b8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80035bc:	4962      	ldr	r1, [pc, #392]	; (8003748 <_printf_i+0x23c>)
 80035be:	220a      	movs	r2, #10
 80035c0:	e017      	b.n	80035f2 <_printf_i+0xe6>
 80035c2:	6820      	ldr	r0, [r4, #0]
 80035c4:	6819      	ldr	r1, [r3, #0]
 80035c6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80035ca:	d003      	beq.n	80035d4 <_printf_i+0xc8>
 80035cc:	1d08      	adds	r0, r1, #4
 80035ce:	6018      	str	r0, [r3, #0]
 80035d0:	680b      	ldr	r3, [r1, #0]
 80035d2:	e006      	b.n	80035e2 <_printf_i+0xd6>
 80035d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80035d8:	f101 0004 	add.w	r0, r1, #4
 80035dc:	6018      	str	r0, [r3, #0]
 80035de:	d0f7      	beq.n	80035d0 <_printf_i+0xc4>
 80035e0:	880b      	ldrh	r3, [r1, #0]
 80035e2:	2a6f      	cmp	r2, #111	; 0x6f
 80035e4:	bf14      	ite	ne
 80035e6:	220a      	movne	r2, #10
 80035e8:	2208      	moveq	r2, #8
 80035ea:	4957      	ldr	r1, [pc, #348]	; (8003748 <_printf_i+0x23c>)
 80035ec:	2000      	movs	r0, #0
 80035ee:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80035f2:	6865      	ldr	r5, [r4, #4]
 80035f4:	2d00      	cmp	r5, #0
 80035f6:	60a5      	str	r5, [r4, #8]
 80035f8:	f2c0 809c 	blt.w	8003734 <_printf_i+0x228>
 80035fc:	6820      	ldr	r0, [r4, #0]
 80035fe:	f020 0004 	bic.w	r0, r0, #4
 8003602:	6020      	str	r0, [r4, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d13f      	bne.n	8003688 <_printf_i+0x17c>
 8003608:	2d00      	cmp	r5, #0
 800360a:	f040 8095 	bne.w	8003738 <_printf_i+0x22c>
 800360e:	4675      	mov	r5, lr
 8003610:	2a08      	cmp	r2, #8
 8003612:	d10b      	bne.n	800362c <_printf_i+0x120>
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	07da      	lsls	r2, r3, #31
 8003618:	d508      	bpl.n	800362c <_printf_i+0x120>
 800361a:	6923      	ldr	r3, [r4, #16]
 800361c:	6862      	ldr	r2, [r4, #4]
 800361e:	429a      	cmp	r2, r3
 8003620:	bfde      	ittt	le
 8003622:	2330      	movle	r3, #48	; 0x30
 8003624:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003628:	f105 35ff 	addle.w	r5, r5, #4294967295
 800362c:	ebae 0305 	sub.w	r3, lr, r5
 8003630:	6123      	str	r3, [r4, #16]
 8003632:	f8cd 8000 	str.w	r8, [sp]
 8003636:	463b      	mov	r3, r7
 8003638:	aa03      	add	r2, sp, #12
 800363a:	4621      	mov	r1, r4
 800363c:	4630      	mov	r0, r6
 800363e:	f7ff feed 	bl	800341c <_printf_common>
 8003642:	3001      	adds	r0, #1
 8003644:	d155      	bne.n	80036f2 <_printf_i+0x1e6>
 8003646:	f04f 30ff 	mov.w	r0, #4294967295
 800364a:	b005      	add	sp, #20
 800364c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003650:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003654:	493c      	ldr	r1, [pc, #240]	; (8003748 <_printf_i+0x23c>)
 8003656:	6822      	ldr	r2, [r4, #0]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800365e:	f100 0504 	add.w	r5, r0, #4
 8003662:	601d      	str	r5, [r3, #0]
 8003664:	d001      	beq.n	800366a <_printf_i+0x15e>
 8003666:	6803      	ldr	r3, [r0, #0]
 8003668:	e002      	b.n	8003670 <_printf_i+0x164>
 800366a:	0655      	lsls	r5, r2, #25
 800366c:	d5fb      	bpl.n	8003666 <_printf_i+0x15a>
 800366e:	8803      	ldrh	r3, [r0, #0]
 8003670:	07d0      	lsls	r0, r2, #31
 8003672:	bf44      	itt	mi
 8003674:	f042 0220 	orrmi.w	r2, r2, #32
 8003678:	6022      	strmi	r2, [r4, #0]
 800367a:	b91b      	cbnz	r3, 8003684 <_printf_i+0x178>
 800367c:	6822      	ldr	r2, [r4, #0]
 800367e:	f022 0220 	bic.w	r2, r2, #32
 8003682:	6022      	str	r2, [r4, #0]
 8003684:	2210      	movs	r2, #16
 8003686:	e7b1      	b.n	80035ec <_printf_i+0xe0>
 8003688:	4675      	mov	r5, lr
 800368a:	fbb3 f0f2 	udiv	r0, r3, r2
 800368e:	fb02 3310 	mls	r3, r2, r0, r3
 8003692:	5ccb      	ldrb	r3, [r1, r3]
 8003694:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003698:	4603      	mov	r3, r0
 800369a:	2800      	cmp	r0, #0
 800369c:	d1f5      	bne.n	800368a <_printf_i+0x17e>
 800369e:	e7b7      	b.n	8003610 <_printf_i+0x104>
 80036a0:	6808      	ldr	r0, [r1, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80036a8:	6949      	ldr	r1, [r1, #20]
 80036aa:	d004      	beq.n	80036b6 <_printf_i+0x1aa>
 80036ac:	1d10      	adds	r0, r2, #4
 80036ae:	6018      	str	r0, [r3, #0]
 80036b0:	6813      	ldr	r3, [r2, #0]
 80036b2:	6019      	str	r1, [r3, #0]
 80036b4:	e007      	b.n	80036c6 <_printf_i+0x1ba>
 80036b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036ba:	f102 0004 	add.w	r0, r2, #4
 80036be:	6018      	str	r0, [r3, #0]
 80036c0:	6813      	ldr	r3, [r2, #0]
 80036c2:	d0f6      	beq.n	80036b2 <_printf_i+0x1a6>
 80036c4:	8019      	strh	r1, [r3, #0]
 80036c6:	2300      	movs	r3, #0
 80036c8:	4675      	mov	r5, lr
 80036ca:	6123      	str	r3, [r4, #16]
 80036cc:	e7b1      	b.n	8003632 <_printf_i+0x126>
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	1d11      	adds	r1, r2, #4
 80036d2:	6019      	str	r1, [r3, #0]
 80036d4:	6815      	ldr	r5, [r2, #0]
 80036d6:	2100      	movs	r1, #0
 80036d8:	6862      	ldr	r2, [r4, #4]
 80036da:	4628      	mov	r0, r5
 80036dc:	f000 f846 	bl	800376c <memchr>
 80036e0:	b108      	cbz	r0, 80036e6 <_printf_i+0x1da>
 80036e2:	1b40      	subs	r0, r0, r5
 80036e4:	6060      	str	r0, [r4, #4]
 80036e6:	6863      	ldr	r3, [r4, #4]
 80036e8:	6123      	str	r3, [r4, #16]
 80036ea:	2300      	movs	r3, #0
 80036ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036f0:	e79f      	b.n	8003632 <_printf_i+0x126>
 80036f2:	6923      	ldr	r3, [r4, #16]
 80036f4:	462a      	mov	r2, r5
 80036f6:	4639      	mov	r1, r7
 80036f8:	4630      	mov	r0, r6
 80036fa:	47c0      	blx	r8
 80036fc:	3001      	adds	r0, #1
 80036fe:	d0a2      	beq.n	8003646 <_printf_i+0x13a>
 8003700:	6823      	ldr	r3, [r4, #0]
 8003702:	079b      	lsls	r3, r3, #30
 8003704:	d507      	bpl.n	8003716 <_printf_i+0x20a>
 8003706:	2500      	movs	r5, #0
 8003708:	f104 0919 	add.w	r9, r4, #25
 800370c:	68e3      	ldr	r3, [r4, #12]
 800370e:	9a03      	ldr	r2, [sp, #12]
 8003710:	1a9b      	subs	r3, r3, r2
 8003712:	429d      	cmp	r5, r3
 8003714:	db05      	blt.n	8003722 <_printf_i+0x216>
 8003716:	68e0      	ldr	r0, [r4, #12]
 8003718:	9b03      	ldr	r3, [sp, #12]
 800371a:	4298      	cmp	r0, r3
 800371c:	bfb8      	it	lt
 800371e:	4618      	movlt	r0, r3
 8003720:	e793      	b.n	800364a <_printf_i+0x13e>
 8003722:	2301      	movs	r3, #1
 8003724:	464a      	mov	r2, r9
 8003726:	4639      	mov	r1, r7
 8003728:	4630      	mov	r0, r6
 800372a:	47c0      	blx	r8
 800372c:	3001      	adds	r0, #1
 800372e:	d08a      	beq.n	8003646 <_printf_i+0x13a>
 8003730:	3501      	adds	r5, #1
 8003732:	e7eb      	b.n	800370c <_printf_i+0x200>
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1a7      	bne.n	8003688 <_printf_i+0x17c>
 8003738:	780b      	ldrb	r3, [r1, #0]
 800373a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800373e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003742:	e765      	b.n	8003610 <_printf_i+0x104>
 8003744:	08003928 	.word	0x08003928
 8003748:	08003917 	.word	0x08003917

0800374c <_sbrk_r>:
 800374c:	b538      	push	{r3, r4, r5, lr}
 800374e:	2300      	movs	r3, #0
 8003750:	4c05      	ldr	r4, [pc, #20]	; (8003768 <_sbrk_r+0x1c>)
 8003752:	4605      	mov	r5, r0
 8003754:	4608      	mov	r0, r1
 8003756:	6023      	str	r3, [r4, #0]
 8003758:	f7ff fb0e 	bl	8002d78 <_sbrk>
 800375c:	1c43      	adds	r3, r0, #1
 800375e:	d102      	bne.n	8003766 <_sbrk_r+0x1a>
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	b103      	cbz	r3, 8003766 <_sbrk_r+0x1a>
 8003764:	602b      	str	r3, [r5, #0]
 8003766:	bd38      	pop	{r3, r4, r5, pc}
 8003768:	20004108 	.word	0x20004108

0800376c <memchr>:
 800376c:	b510      	push	{r4, lr}
 800376e:	b2c9      	uxtb	r1, r1
 8003770:	4402      	add	r2, r0
 8003772:	4290      	cmp	r0, r2
 8003774:	4603      	mov	r3, r0
 8003776:	d101      	bne.n	800377c <memchr+0x10>
 8003778:	2000      	movs	r0, #0
 800377a:	bd10      	pop	{r4, pc}
 800377c:	781c      	ldrb	r4, [r3, #0]
 800377e:	3001      	adds	r0, #1
 8003780:	428c      	cmp	r4, r1
 8003782:	d1f6      	bne.n	8003772 <memchr+0x6>
 8003784:	4618      	mov	r0, r3
 8003786:	bd10      	pop	{r4, pc}

08003788 <memmove>:
 8003788:	4288      	cmp	r0, r1
 800378a:	b510      	push	{r4, lr}
 800378c:	eb01 0302 	add.w	r3, r1, r2
 8003790:	d803      	bhi.n	800379a <memmove+0x12>
 8003792:	1e42      	subs	r2, r0, #1
 8003794:	4299      	cmp	r1, r3
 8003796:	d10c      	bne.n	80037b2 <memmove+0x2a>
 8003798:	bd10      	pop	{r4, pc}
 800379a:	4298      	cmp	r0, r3
 800379c:	d2f9      	bcs.n	8003792 <memmove+0xa>
 800379e:	1881      	adds	r1, r0, r2
 80037a0:	1ad2      	subs	r2, r2, r3
 80037a2:	42d3      	cmn	r3, r2
 80037a4:	d100      	bne.n	80037a8 <memmove+0x20>
 80037a6:	bd10      	pop	{r4, pc}
 80037a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037ac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80037b0:	e7f7      	b.n	80037a2 <memmove+0x1a>
 80037b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037b6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80037ba:	e7eb      	b.n	8003794 <memmove+0xc>

080037bc <__malloc_lock>:
 80037bc:	4770      	bx	lr

080037be <__malloc_unlock>:
 80037be:	4770      	bx	lr

080037c0 <_realloc_r>:
 80037c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c2:	4607      	mov	r7, r0
 80037c4:	4614      	mov	r4, r2
 80037c6:	460e      	mov	r6, r1
 80037c8:	b921      	cbnz	r1, 80037d4 <_realloc_r+0x14>
 80037ca:	4611      	mov	r1, r2
 80037cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80037d0:	f7ff bc76 	b.w	80030c0 <_malloc_r>
 80037d4:	b922      	cbnz	r2, 80037e0 <_realloc_r+0x20>
 80037d6:	f7ff fc27 	bl	8003028 <_free_r>
 80037da:	4625      	mov	r5, r4
 80037dc:	4628      	mov	r0, r5
 80037de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037e0:	f000 f814 	bl	800380c <_malloc_usable_size_r>
 80037e4:	4284      	cmp	r4, r0
 80037e6:	d90f      	bls.n	8003808 <_realloc_r+0x48>
 80037e8:	4621      	mov	r1, r4
 80037ea:	4638      	mov	r0, r7
 80037ec:	f7ff fc68 	bl	80030c0 <_malloc_r>
 80037f0:	4605      	mov	r5, r0
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d0f2      	beq.n	80037dc <_realloc_r+0x1c>
 80037f6:	4631      	mov	r1, r6
 80037f8:	4622      	mov	r2, r4
 80037fa:	f7ff fbde 	bl	8002fba <memcpy>
 80037fe:	4631      	mov	r1, r6
 8003800:	4638      	mov	r0, r7
 8003802:	f7ff fc11 	bl	8003028 <_free_r>
 8003806:	e7e9      	b.n	80037dc <_realloc_r+0x1c>
 8003808:	4635      	mov	r5, r6
 800380a:	e7e7      	b.n	80037dc <_realloc_r+0x1c>

0800380c <_malloc_usable_size_r>:
 800380c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003810:	2800      	cmp	r0, #0
 8003812:	f1a0 0004 	sub.w	r0, r0, #4
 8003816:	bfbc      	itt	lt
 8003818:	580b      	ldrlt	r3, [r1, r0]
 800381a:	18c0      	addlt	r0, r0, r3
 800381c:	4770      	bx	lr
	...

08003820 <_init>:
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	bf00      	nop
 8003824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003826:	bc08      	pop	{r3}
 8003828:	469e      	mov	lr, r3
 800382a:	4770      	bx	lr

0800382c <_fini>:
 800382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382e:	bf00      	nop
 8003830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003832:	bc08      	pop	{r3}
 8003834:	469e      	mov	lr, r3
 8003836:	4770      	bx	lr
