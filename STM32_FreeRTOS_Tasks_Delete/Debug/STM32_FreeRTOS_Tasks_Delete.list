
STM32_FreeRTOS_Tasks_Delete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fa0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080030b0  080030b0  000130b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080031a4  080031a4  000131a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080031a8  080031a8  000131a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  080031ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004080  20000018  080031c4  00020018  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20004098  080031c4  00024098  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c86e  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001b42  00000000  00000000  0002c8af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a58  00000000  00000000  0002e3f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000980  00000000  00000000  0002ee50  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005139  00000000  00000000  0002f7d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000038d9  00000000  00000000  00034909  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000381e2  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002be8  00000000  00000000  00038260  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08003098 	.word	0x08003098

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08003098 	.word	0x08003098

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000160:	b480      	push	{r7}
 8000162:	b083      	sub	sp, #12
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000168:	4a05      	ldr	r2, [pc, #20]	; (8000180 <NVIC_PriorityGroupConfig+0x20>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000174:	60d3      	str	r3, [r2, #12]
}
 8000176:	bf00      	nop
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	e000ed00 	.word	0xe000ed00

08000184 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000184:	b480      	push	{r7}
 8000186:	b089      	sub	sp, #36	; 0x24
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800018e:	2300      	movs	r3, #0
 8000190:	61fb      	str	r3, [r7, #28]
 8000192:	2300      	movs	r3, #0
 8000194:	613b      	str	r3, [r7, #16]
 8000196:	2300      	movs	r3, #0
 8000198:	61bb      	str	r3, [r7, #24]
 800019a:	2300      	movs	r3, #0
 800019c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800019e:	2300      	movs	r3, #0
 80001a0:	617b      	str	r3, [r7, #20]
 80001a2:	2300      	movs	r3, #0
 80001a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80001a6:	683b      	ldr	r3, [r7, #0]
 80001a8:	78db      	ldrb	r3, [r3, #3]
 80001aa:	f003 030f 	and.w	r3, r3, #15
 80001ae:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	78db      	ldrb	r3, [r3, #3]
 80001b4:	f003 0310 	and.w	r3, r3, #16
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d005      	beq.n	80001c8 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80001bc:	683b      	ldr	r3, [r7, #0]
 80001be:	789b      	ldrb	r3, [r3, #2]
 80001c0:	461a      	mov	r2, r3
 80001c2:	69fb      	ldr	r3, [r7, #28]
 80001c4:	4313      	orrs	r3, r2
 80001c6:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80001c8:	683b      	ldr	r3, [r7, #0]
 80001ca:	881b      	ldrh	r3, [r3, #0]
 80001cc:	b2db      	uxtb	r3, r3
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d044      	beq.n	800025c <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80001d8:	2300      	movs	r3, #0
 80001da:	61bb      	str	r3, [r7, #24]
 80001dc:	e038      	b.n	8000250 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80001de:	2201      	movs	r2, #1
 80001e0:	69bb      	ldr	r3, [r7, #24]
 80001e2:	fa02 f303 	lsl.w	r3, r2, r3
 80001e6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	881b      	ldrh	r3, [r3, #0]
 80001ec:	461a      	mov	r2, r3
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	4013      	ands	r3, r2
 80001f2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80001f4:	693a      	ldr	r2, [r7, #16]
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	429a      	cmp	r2, r3
 80001fa:	d126      	bne.n	800024a <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80001fc:	69bb      	ldr	r3, [r7, #24]
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000202:	220f      	movs	r2, #15
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	fa02 f303 	lsl.w	r3, r2, r3
 800020a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800020c:	68bb      	ldr	r3, [r7, #8]
 800020e:	43db      	mvns	r3, r3
 8000210:	697a      	ldr	r2, [r7, #20]
 8000212:	4013      	ands	r3, r2
 8000214:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000216:	69fa      	ldr	r2, [r7, #28]
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	fa02 f303 	lsl.w	r3, r2, r3
 800021e:	697a      	ldr	r2, [r7, #20]
 8000220:	4313      	orrs	r3, r2
 8000222:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	78db      	ldrb	r3, [r3, #3]
 8000228:	2b28      	cmp	r3, #40	; 0x28
 800022a:	d105      	bne.n	8000238 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800022c:	2201      	movs	r2, #1
 800022e:	69bb      	ldr	r3, [r7, #24]
 8000230:	409a      	lsls	r2, r3
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	615a      	str	r2, [r3, #20]
 8000236:	e008      	b.n	800024a <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	78db      	ldrb	r3, [r3, #3]
 800023c:	2b48      	cmp	r3, #72	; 0x48
 800023e:	d104      	bne.n	800024a <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000240:	2201      	movs	r2, #1
 8000242:	69bb      	ldr	r3, [r7, #24]
 8000244:	409a      	lsls	r2, r3
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800024a:	69bb      	ldr	r3, [r7, #24]
 800024c:	3301      	adds	r3, #1
 800024e:	61bb      	str	r3, [r7, #24]
 8000250:	69bb      	ldr	r3, [r7, #24]
 8000252:	2b07      	cmp	r3, #7
 8000254:	d9c3      	bls.n	80001de <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	697a      	ldr	r2, [r7, #20]
 800025a:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	2bff      	cmp	r3, #255	; 0xff
 8000262:	d946      	bls.n	80002f2 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800026a:	2300      	movs	r3, #0
 800026c:	61bb      	str	r3, [r7, #24]
 800026e:	e03a      	b.n	80002e6 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000270:	69bb      	ldr	r3, [r7, #24]
 8000272:	3308      	adds	r3, #8
 8000274:	2201      	movs	r2, #1
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	881b      	ldrh	r3, [r3, #0]
 8000280:	461a      	mov	r2, r3
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	4013      	ands	r3, r2
 8000286:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000288:	693a      	ldr	r2, [r7, #16]
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	429a      	cmp	r2, r3
 800028e:	d127      	bne.n	80002e0 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000290:	69bb      	ldr	r3, [r7, #24]
 8000292:	009b      	lsls	r3, r3, #2
 8000294:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000296:	220f      	movs	r2, #15
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	fa02 f303 	lsl.w	r3, r2, r3
 800029e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	43db      	mvns	r3, r3
 80002a4:	697a      	ldr	r2, [r7, #20]
 80002a6:	4013      	ands	r3, r2
 80002a8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80002aa:	69fa      	ldr	r2, [r7, #28]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	697a      	ldr	r2, [r7, #20]
 80002b4:	4313      	orrs	r3, r2
 80002b6:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	78db      	ldrb	r3, [r3, #3]
 80002bc:	2b28      	cmp	r3, #40	; 0x28
 80002be:	d105      	bne.n	80002cc <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80002c0:	69bb      	ldr	r3, [r7, #24]
 80002c2:	3308      	adds	r3, #8
 80002c4:	2201      	movs	r2, #1
 80002c6:	409a      	lsls	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	78db      	ldrb	r3, [r3, #3]
 80002d0:	2b48      	cmp	r3, #72	; 0x48
 80002d2:	d105      	bne.n	80002e0 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80002d4:	69bb      	ldr	r3, [r7, #24]
 80002d6:	3308      	adds	r3, #8
 80002d8:	2201      	movs	r2, #1
 80002da:	409a      	lsls	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002e0:	69bb      	ldr	r3, [r7, #24]
 80002e2:	3301      	adds	r3, #1
 80002e4:	61bb      	str	r3, [r7, #24]
 80002e6:	69bb      	ldr	r3, [r7, #24]
 80002e8:	2b07      	cmp	r3, #7
 80002ea:	d9c1      	bls.n	8000270 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	697a      	ldr	r2, [r7, #20]
 80002f0:	605a      	str	r2, [r3, #4]
  }
}
 80002f2:	bf00      	nop
 80002f4:	3724      	adds	r7, #36	; 0x24
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr

080002fc <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	460b      	mov	r3, r1
 8000306:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000308:	2300      	movs	r3, #0
 800030a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	689a      	ldr	r2, [r3, #8]
 8000310:	887b      	ldrh	r3, [r7, #2]
 8000312:	4013      	ands	r3, r2
 8000314:	2b00      	cmp	r3, #0
 8000316:	d002      	beq.n	800031e <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000318:	2301      	movs	r3, #1
 800031a:	73fb      	strb	r3, [r7, #15]
 800031c:	e001      	b.n	8000322 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800031e:	2300      	movs	r3, #0
 8000320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000322:	7bfb      	ldrb	r3, [r7, #15]
}
 8000324:	4618      	mov	r0, r3
 8000326:	3714      	adds	r7, #20
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr

0800032e <GPIO_ToggleBit>:
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
void GPIO_ToggleBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800032e:	b480      	push	{r7}
 8000330:	b083      	sub	sp, #12
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
 8000336:	460b      	mov	r3, r1
 8000338:	807b      	strh	r3, [r7, #2]

	/* Check the parameters */
	assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

	GPIOx->ODR ^= GPIO_Pin;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	68da      	ldr	r2, [r3, #12]
 800033e:	887b      	ldrh	r3, [r7, #2]
 8000340:	405a      	eors	r2, r3
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	60da      	str	r2, [r3, #12]

}
 8000346:	bf00      	nop
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr

08000350 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000350:	b480      	push	{r7}
 8000352:	b087      	sub	sp, #28
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	617b      	str	r3, [r7, #20]
 800035c:	2300      	movs	r3, #0
 800035e:	613b      	str	r3, [r7, #16]
 8000360:	2300      	movs	r3, #0
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	2300      	movs	r3, #0
 8000366:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000368:	4b4c      	ldr	r3, [pc, #304]	; (800049c <RCC_GetClocksFreq+0x14c>)
 800036a:	685b      	ldr	r3, [r3, #4]
 800036c:	f003 030c 	and.w	r3, r3, #12
 8000370:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	2b04      	cmp	r3, #4
 8000376:	d007      	beq.n	8000388 <RCC_GetClocksFreq+0x38>
 8000378:	2b08      	cmp	r3, #8
 800037a:	d009      	beq.n	8000390 <RCC_GetClocksFreq+0x40>
 800037c:	2b00      	cmp	r3, #0
 800037e:	d133      	bne.n	80003e8 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a47      	ldr	r2, [pc, #284]	; (80004a0 <RCC_GetClocksFreq+0x150>)
 8000384:	601a      	str	r2, [r3, #0]
      break;
 8000386:	e033      	b.n	80003f0 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4a45      	ldr	r2, [pc, #276]	; (80004a0 <RCC_GetClocksFreq+0x150>)
 800038c:	601a      	str	r2, [r3, #0]
      break;
 800038e:	e02f      	b.n	80003f0 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000390:	4b42      	ldr	r3, [pc, #264]	; (800049c <RCC_GetClocksFreq+0x14c>)
 8000392:	685b      	ldr	r3, [r3, #4]
 8000394:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000398:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800039a:	4b40      	ldr	r3, [pc, #256]	; (800049c <RCC_GetClocksFreq+0x14c>)
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003a2:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80003a4:	693b      	ldr	r3, [r7, #16]
 80003a6:	0c9b      	lsrs	r3, r3, #18
 80003a8:	3302      	adds	r3, #2
 80003aa:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d106      	bne.n	80003c0 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80003b2:	693b      	ldr	r3, [r7, #16]
 80003b4:	4a3b      	ldr	r2, [pc, #236]	; (80004a4 <RCC_GetClocksFreq+0x154>)
 80003b6:	fb02 f203 	mul.w	r2, r2, r3
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80003be:	e017      	b.n	80003f0 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80003c0:	4b36      	ldr	r3, [pc, #216]	; (800049c <RCC_GetClocksFreq+0x14c>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d006      	beq.n	80003da <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80003cc:	693b      	ldr	r3, [r7, #16]
 80003ce:	4a35      	ldr	r2, [pc, #212]	; (80004a4 <RCC_GetClocksFreq+0x154>)
 80003d0:	fb02 f203 	mul.w	r2, r2, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	601a      	str	r2, [r3, #0]
      break;
 80003d8:	e00a      	b.n	80003f0 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80003da:	693b      	ldr	r3, [r7, #16]
 80003dc:	4a30      	ldr	r2, [pc, #192]	; (80004a0 <RCC_GetClocksFreq+0x150>)
 80003de:	fb02 f203 	mul.w	r2, r2, r3
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	601a      	str	r2, [r3, #0]
      break;
 80003e6:	e003      	b.n	80003f0 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a2d      	ldr	r2, [pc, #180]	; (80004a0 <RCC_GetClocksFreq+0x150>)
 80003ec:	601a      	str	r2, [r3, #0]
      break;
 80003ee:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80003f0:	4b2a      	ldr	r3, [pc, #168]	; (800049c <RCC_GetClocksFreq+0x14c>)
 80003f2:	685b      	ldr	r3, [r3, #4]
 80003f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80003f8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80003fa:	697b      	ldr	r3, [r7, #20]
 80003fc:	091b      	lsrs	r3, r3, #4
 80003fe:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000400:	4a29      	ldr	r2, [pc, #164]	; (80004a8 <RCC_GetClocksFreq+0x158>)
 8000402:	697b      	ldr	r3, [r7, #20]
 8000404:	4413      	add	r3, r2
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	b2db      	uxtb	r3, r3
 800040a:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	40da      	lsrs	r2, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000418:	4b20      	ldr	r3, [pc, #128]	; (800049c <RCC_GetClocksFreq+0x14c>)
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000420:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	0a1b      	lsrs	r3, r3, #8
 8000426:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000428:	4a1f      	ldr	r2, [pc, #124]	; (80004a8 <RCC_GetClocksFreq+0x158>)
 800042a:	697b      	ldr	r3, [r7, #20]
 800042c:	4413      	add	r3, r2
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	b2db      	uxtb	r3, r3
 8000432:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	685a      	ldr	r2, [r3, #4]
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	40da      	lsrs	r2, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000440:	4b16      	ldr	r3, [pc, #88]	; (800049c <RCC_GetClocksFreq+0x14c>)
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000448:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	0adb      	lsrs	r3, r3, #11
 800044e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000450:	4a15      	ldr	r2, [pc, #84]	; (80004a8 <RCC_GetClocksFreq+0x158>)
 8000452:	697b      	ldr	r3, [r7, #20]
 8000454:	4413      	add	r3, r2
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	b2db      	uxtb	r3, r3
 800045a:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	685a      	ldr	r2, [r3, #4]
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	40da      	lsrs	r2, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000468:	4b0c      	ldr	r3, [pc, #48]	; (800049c <RCC_GetClocksFreq+0x14c>)
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000470:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8000472:	697b      	ldr	r3, [r7, #20]
 8000474:	0b9b      	lsrs	r3, r3, #14
 8000476:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000478:	4a0c      	ldr	r2, [pc, #48]	; (80004ac <RCC_GetClocksFreq+0x15c>)
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	4413      	add	r3, r2
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	68da      	ldr	r2, [r3, #12]
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	fbb2 f2f3 	udiv	r2, r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	611a      	str	r2, [r3, #16]
}
 8000492:	bf00      	nop
 8000494:	371c      	adds	r7, #28
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	40021000 	.word	0x40021000
 80004a0:	007a1200 	.word	0x007a1200
 80004a4:	003d0900 	.word	0x003d0900
 80004a8:	20000000 	.word	0x20000000
 80004ac:	20000010 	.word	0x20000010

080004b0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	460b      	mov	r3, r1
 80004ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80004bc:	78fb      	ldrb	r3, [r7, #3]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d006      	beq.n	80004d0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80004c2:	4909      	ldr	r1, [pc, #36]	; (80004e8 <RCC_APB2PeriphClockCmd+0x38>)
 80004c4:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <RCC_APB2PeriphClockCmd+0x38>)
 80004c6:	699a      	ldr	r2, [r3, #24]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4313      	orrs	r3, r2
 80004cc:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80004ce:	e006      	b.n	80004de <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80004d0:	4905      	ldr	r1, [pc, #20]	; (80004e8 <RCC_APB2PeriphClockCmd+0x38>)
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <RCC_APB2PeriphClockCmd+0x38>)
 80004d4:	699a      	ldr	r2, [r3, #24]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	43db      	mvns	r3, r3
 80004da:	4013      	ands	r3, r2
 80004dc:	618b      	str	r3, [r1, #24]
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	40021000 	.word	0x40021000

080004ec <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b08c      	sub	sp, #48	; 0x30
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80004f6:	2300      	movs	r3, #0
 80004f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004fa:	2300      	movs	r3, #0
 80004fc:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 80004fe:	2300      	movs	r3, #0
 8000500:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8000502:	2300      	movs	r3, #0
 8000504:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	8a1b      	ldrh	r3, [r3, #16]
 8000512:	b29b      	uxth	r3, r3
 8000514:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8000516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000518:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800051c:	4013      	ands	r3, r2
 800051e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	88db      	ldrh	r3, [r3, #6]
 8000524:	461a      	mov	r2, r3
 8000526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000528:	4313      	orrs	r3, r2
 800052a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800052c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800052e:	b29a      	uxth	r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	899b      	ldrh	r3, [r3, #12]
 8000538:	b29b      	uxth	r3, r3
 800053a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 800053c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800053e:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8000542:	4013      	ands	r3, r2
 8000544:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	889a      	ldrh	r2, [r3, #4]
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	891b      	ldrh	r3, [r3, #8]
 800054e:	4313      	orrs	r3, r2
 8000550:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000556:	4313      	orrs	r3, r2
 8000558:	b29b      	uxth	r3, r3
 800055a:	461a      	mov	r2, r3
 800055c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800055e:	4313      	orrs	r3, r2
 8000560:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000564:	b29a      	uxth	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	8a9b      	ldrh	r3, [r3, #20]
 800056e:	b29b      	uxth	r3, r3
 8000570:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8000572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000574:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000578:	4013      	ands	r3, r2
 800057a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	899b      	ldrh	r3, [r3, #12]
 8000580:	461a      	mov	r2, r3
 8000582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000584:	4313      	orrs	r3, r2
 8000586:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800058a:	b29a      	uxth	r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff fedb 	bl	8000350 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 800059a:	69fb      	ldr	r3, [r7, #28]
 800059c:	4a2e      	ldr	r2, [pc, #184]	; (8000658 <USART_Init+0x16c>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d102      	bne.n	80005a8 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80005a6:	e001      	b.n	80005ac <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80005a8:	693b      	ldr	r3, [r7, #16]
 80005aa:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	899b      	ldrh	r3, [r3, #12]
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	b21b      	sxth	r3, r3
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	da0c      	bge.n	80005d2 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80005b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005ba:	4613      	mov	r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	009a      	lsls	r2, r3, #2
 80005c2:	441a      	add	r2, r3
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ce:	627b      	str	r3, [r7, #36]	; 0x24
 80005d0:	e00b      	b.n	80005ea <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80005d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005d4:	4613      	mov	r3, r2
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	4413      	add	r3, r2
 80005da:	009a      	lsls	r2, r3, #2
 80005dc:	441a      	add	r2, r3
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 80005ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ec:	4a1b      	ldr	r2, [pc, #108]	; (800065c <USART_Init+0x170>)
 80005ee:	fba2 2303 	umull	r2, r3, r2, r3
 80005f2:	095b      	lsrs	r3, r3, #5
 80005f4:	011b      	lsls	r3, r3, #4
 80005f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80005f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005fa:	091b      	lsrs	r3, r3, #4
 80005fc:	2264      	movs	r2, #100	; 0x64
 80005fe:	fb02 f303 	mul.w	r3, r2, r3
 8000602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	899b      	ldrh	r3, [r3, #12]
 800060c:	b29b      	uxth	r3, r3
 800060e:	b21b      	sxth	r3, r3
 8000610:	2b00      	cmp	r3, #0
 8000612:	da0c      	bge.n	800062e <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000614:	6a3b      	ldr	r3, [r7, #32]
 8000616:	00db      	lsls	r3, r3, #3
 8000618:	3332      	adds	r3, #50	; 0x32
 800061a:	4a10      	ldr	r2, [pc, #64]	; (800065c <USART_Init+0x170>)
 800061c:	fba2 2303 	umull	r2, r3, r2, r3
 8000620:	095b      	lsrs	r3, r3, #5
 8000622:	f003 0307 	and.w	r3, r3, #7
 8000626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000628:	4313      	orrs	r3, r2
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800062c:	e00b      	b.n	8000646 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800062e:	6a3b      	ldr	r3, [r7, #32]
 8000630:	011b      	lsls	r3, r3, #4
 8000632:	3332      	adds	r3, #50	; 0x32
 8000634:	4a09      	ldr	r2, [pc, #36]	; (800065c <USART_Init+0x170>)
 8000636:	fba2 2303 	umull	r2, r3, r2, r3
 800063a:	095b      	lsrs	r3, r3, #5
 800063c:	f003 030f 	and.w	r3, r3, #15
 8000640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000642:	4313      	orrs	r3, r2
 8000644:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000648:	b29a      	uxth	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	811a      	strh	r2, [r3, #8]
}
 800064e:	bf00      	nop
 8000650:	3730      	adds	r7, #48	; 0x30
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40013800 	.word	0x40013800
 800065c:	51eb851f 	.word	0x51eb851f

08000660 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	460b      	mov	r3, r1
 800066a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800066c:	78fb      	ldrb	r3, [r7, #3]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d008      	beq.n	8000684 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	899b      	ldrh	r3, [r3, #12]
 8000676:	b29b      	uxth	r3, r3
 8000678:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800067c:	b29a      	uxth	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8000682:	e007      	b.n	8000694 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	899b      	ldrh	r3, [r3, #12]
 8000688:	b29b      	uxth	r3, r3
 800068a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800068e:	b29a      	uxth	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	819a      	strh	r2, [r3, #12]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr

0800069e <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
 80006a6:	460b      	mov	r3, r1
 80006a8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80006aa:	887b      	ldrh	r3, [r7, #2]
 80006ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	809a      	strh	r2, [r3, #4]
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80006cc:	2300      	movs	r3, #0
 80006ce:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	b29a      	uxth	r2, r3
 80006d6:	887b      	ldrh	r3, [r7, #2]
 80006d8:	4013      	ands	r3, r2
 80006da:	b29b      	uxth	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d002      	beq.n	80006e6 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80006e0:	2301      	movs	r3, #1
 80006e2:	73fb      	strb	r3, [r7, #15]
 80006e4:	e001      	b.n	80006ea <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80006e6:	2300      	movs	r3, #0
 80006e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr

080006f6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f103 0208 	add.w	r2, r3, #8
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f04f 32ff 	mov.w	r2, #4294967295
 800070e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f103 0208 	add.w	r2, r3, #8
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	f103 0208 	add.w	r2, r3, #8
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	689a      	ldr	r2, [r3, #8]
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	683a      	ldr	r2, [r7, #0]
 8000776:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	1c5a      	adds	r2, r3, #1
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	601a      	str	r2, [r3, #0]
}
 8000788:	bf00      	nop
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr

08000792 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000792:	b480      	push	{r7}
 8000794:	b085      	sub	sp, #20
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	691b      	ldr	r3, [r3, #16]
 800079e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	6892      	ldr	r2, [r2, #8]
 80007a8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	6852      	ldr	r2, [r2, #4]
 80007b2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	685a      	ldr	r2, [r3, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d103      	bne.n	80007c6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	689a      	ldr	r2, [r3, #8]
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	1e5a      	subs	r2, r3, #1
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	681b      	ldr	r3, [r3, #0]
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	3b04      	subs	r3, #4
 80007f4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	3b04      	subs	r3, #4
 8000802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	f023 0201 	bic.w	r2, r3, #1
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	3b04      	subs	r3, #4
 8000812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000814:	4a08      	ldr	r2, [pc, #32]	; (8000838 <pxPortInitialiseStack+0x54>)
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	3b14      	subs	r3, #20
 800081e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	3b20      	subs	r3, #32
 800082a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800082c:	68fb      	ldr	r3, [r7, #12]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	0800083d 	.word	0x0800083d

0800083c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8000842:	2300      	movs	r3, #0
 8000844:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000846:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800084a:	f383 8811 	msr	BASEPRI, r3
 800084e:	f3bf 8f6f 	isb	sy
 8000852:	f3bf 8f4f 	dsb	sy
 8000856:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000858:	bf00      	nop
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d0fc      	beq.n	800085a <prvTaskExitError+0x1e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	0000      	movs	r0, r0
 800086c:	0000      	movs	r0, r0
	...

08000870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <pxCurrentTCBConst2>)
 8000872:	6819      	ldr	r1, [r3, #0]
 8000874:	6808      	ldr	r0, [r1, #0]
 8000876:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800087a:	f380 8809 	msr	PSP, r0
 800087e:	f3bf 8f6f 	isb	sy
 8000882:	f04f 0000 	mov.w	r0, #0
 8000886:	f380 8811 	msr	BASEPRI, r0
 800088a:	f04e 0e0d 	orr.w	lr, lr, #13
 800088e:	4770      	bx	lr

08000890 <pxCurrentTCBConst2>:
 8000890:	20003854 	.word	0x20003854
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000894:	bf00      	nop
 8000896:	bf00      	nop

08000898 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000898:	4806      	ldr	r0, [pc, #24]	; (80008b4 <prvPortStartFirstTask+0x1c>)
 800089a:	6800      	ldr	r0, [r0, #0]
 800089c:	6800      	ldr	r0, [r0, #0]
 800089e:	f380 8808 	msr	MSP, r0
 80008a2:	b662      	cpsie	i
 80008a4:	b661      	cpsie	f
 80008a6:	f3bf 8f4f 	dsb	sy
 80008aa:	f3bf 8f6f 	isb	sy
 80008ae:	df00      	svc	0
 80008b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80008b2:	bf00      	nop
 80008b4:	e000ed08 	.word	0xe000ed08

080008b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80008bc:	4a0c      	ldr	r2, [pc, #48]	; (80008f0 <xPortStartScheduler+0x38>)
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <xPortStartScheduler+0x38>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80008c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80008c8:	4a09      	ldr	r2, [pc, #36]	; (80008f0 <xPortStartScheduler+0x38>)
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <xPortStartScheduler+0x38>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80008d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80008d4:	f000 f890 	bl	80009f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <xPortStartScheduler+0x3c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80008de:	f7ff ffdb 	bl	8000898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80008e2:	f000 fdb7 	bl	8001454 <vTaskSwitchContext>
	prvTaskExitError();
 80008e6:	f7ff ffa9 	bl	800083c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80008ea:	2300      	movs	r3, #0
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	e000ed20 	.word	0xe000ed20
 80008f4:	20000014 	.word	0x20000014

080008f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000902:	f383 8811 	msr	BASEPRI, r3
 8000906:	f3bf 8f6f 	isb	sy
 800090a:	f3bf 8f4f 	dsb	sy
 800090e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <vPortEnterCritical+0x2c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	3301      	adds	r3, #1
 8000916:	4a03      	ldr	r2, [pc, #12]	; (8000924 <vPortEnterCritical+0x2c>)
 8000918:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	20000014 	.word	0x20000014

08000928 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <vPortExitCritical+0x2c>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3b01      	subs	r3, #1
 8000934:	4a07      	ldr	r2, [pc, #28]	; (8000954 <vPortExitCritical+0x2c>)
 8000936:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <vPortExitCritical+0x2c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d104      	bne.n	800094a <vPortExitCritical+0x22>
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	20000014 	.word	0x20000014
	...

08000960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000960:	f3ef 8009 	mrs	r0, PSP
 8000964:	f3bf 8f6f 	isb	sy
 8000968:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <pxCurrentTCBConst>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000970:	6010      	str	r0, [r2, #0]
 8000972:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000976:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800097a:	f380 8811 	msr	BASEPRI, r0
 800097e:	f000 fd69 	bl	8001454 <vTaskSwitchContext>
 8000982:	f04f 0000 	mov.w	r0, #0
 8000986:	f380 8811 	msr	BASEPRI, r0
 800098a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800098e:	6819      	ldr	r1, [r3, #0]
 8000990:	6808      	ldr	r0, [r1, #0]
 8000992:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000996:	f380 8809 	msr	PSP, r0
 800099a:	f3bf 8f6f 	isb	sy
 800099e:	4770      	bx	lr

080009a0 <pxCurrentTCBConst>:
 80009a0:	20003854 	.word	0x20003854
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80009a4:	bf00      	nop
 80009a6:	bf00      	nop

080009a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
	__asm volatile
 80009ae:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80009b2:	f383 8811 	msr	BASEPRI, r3
 80009b6:	f3bf 8f6f 	isb	sy
 80009ba:	f3bf 8f4f 	dsb	sy
 80009be:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 80009c0:	f001 fe44 	bl	800264c <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80009c4:	f000 fc9a 	bl	80012fc <xTaskIncrementTick>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d006      	beq.n	80009dc <SysTick_Handler+0x34>
		{
      traceISR_EXIT_TO_SCHEDULER();
 80009ce:	f001 fe9b 	bl	8002708 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <SysTick_Handler+0x4c>)
 80009d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	e001      	b.n	80009e0 <SysTick_Handler+0x38>
		}
		else
		{
			traceISR_EXIT();
 80009dc:	f001 fe78 	bl	80026d0 <SEGGER_SYSVIEW_RecordExitISR>
 80009e0:	2300      	movs	r3, #0
 80009e2:	603b      	str	r3, [r7, #0]
	__asm volatile
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	e000ed04 	.word	0xe000ed04

080009f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <vPortSetupTimerInterrupt+0x24>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000a02:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <vPortSetupTimerInterrupt+0x28>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <vPortSetupTimerInterrupt+0x2c>)
 8000a0a:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <vPortSetupTimerInterrupt+0x30>)
 8000a0c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000a0e:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <vPortSetupTimerInterrupt+0x24>)
 8000a10:	2207      	movs	r2, #7
 8000a12:	601a      	str	r2, [r3, #0]
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	e000e010 	.word	0xe000e010
 8000a20:	e000e018 	.word	0xe000e018
 8000a24:	e000e014 	.word	0xe000e014
 8000a28:	0001193f 	.word	0x0001193f

08000a2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8000a38:	f000 fbb2 	bl	80011a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000a3c:	4b42      	ldr	r3, [pc, #264]	; (8000b48 <pvPortMalloc+0x11c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d101      	bne.n	8000a48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8000a44:	f000 f8cc 	bl	8000be0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000a48:	4b40      	ldr	r3, [pc, #256]	; (8000b4c <pvPortMalloc+0x120>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d172      	bne.n	8000b3a <pvPortMalloc+0x10e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d00d      	beq.n	8000a76 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 8000a5a:	2208      	movs	r2, #8
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4413      	add	r3, r2
 8000a60:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f003 0307 	and.w	r3, r3, #7
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d004      	beq.n	8000a76 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f023 0307 	bic.w	r3, r3, #7
 8000a72:	3308      	adds	r3, #8
 8000a74:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d05e      	beq.n	8000b3a <pvPortMalloc+0x10e>
 8000a7c:	4b34      	ldr	r3, [pc, #208]	; (8000b50 <pvPortMalloc+0x124>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d859      	bhi.n	8000b3a <pvPortMalloc+0x10e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000a86:	4b33      	ldr	r3, [pc, #204]	; (8000b54 <pvPortMalloc+0x128>)
 8000a88:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8000a8a:	4b32      	ldr	r3, [pc, #200]	; (8000b54 <pvPortMalloc+0x128>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a90:	e004      	b.n	8000a9c <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	685a      	ldr	r2, [r3, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d203      	bcs.n	8000aae <pvPortMalloc+0x82>
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d1f1      	bne.n	8000a92 <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000aae:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <pvPortMalloc+0x11c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d040      	beq.n	8000b3a <pvPortMalloc+0x10e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2208      	movs	r2, #8
 8000abe:	4413      	add	r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	1ad2      	subs	r2, r2, r3
 8000ad2:	2308      	movs	r3, #8
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d90f      	bls.n	8000afa <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000ada:	697a      	ldr	r2, [r7, #20]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4413      	add	r3, r2
 8000ae0:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	685a      	ldr	r2, [r3, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	1ad2      	subs	r2, r2, r3
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000af4:	68b8      	ldr	r0, [r7, #8]
 8000af6:	f000 f8d5 	bl	8000ca4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <pvPortMalloc+0x124>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <pvPortMalloc+0x124>)
 8000b06:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <pvPortMalloc+0x124>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <pvPortMalloc+0x12c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d203      	bcs.n	8000b1c <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <pvPortMalloc+0x124>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0f      	ldr	r2, [pc, #60]	; (8000b58 <pvPortMalloc+0x12c>)
 8000b1a:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	685a      	ldr	r2, [r3, #4]
 8000b20:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <pvPortMalloc+0x120>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	431a      	orrs	r2, r3
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <pvPortMalloc+0x130>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	3301      	adds	r3, #1
 8000b36:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <pvPortMalloc+0x130>)
 8000b38:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000b3a:	f000 fb3f 	bl	80011bc <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000383c 	.word	0x2000383c
 8000b4c:	20003850 	.word	0x20003850
 8000b50:	20003840 	.word	0x20003840
 8000b54:	20003834 	.word	0x20003834
 8000b58:	20003844 	.word	0x20003844
 8000b5c:	20003848 	.word	0x20003848

08000b60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d02c      	beq.n	8000bcc <vPortFree+0x6c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000b72:	2308      	movs	r3, #8
 8000b74:	425b      	negs	r3, r3
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	4413      	add	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	685a      	ldr	r2, [r3, #4]
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <vPortFree+0x74>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d01e      	beq.n	8000bcc <vPortFree+0x6c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d11a      	bne.n	8000bcc <vPortFree+0x6c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	685a      	ldr	r2, [r3, #4]
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <vPortFree+0x74>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	401a      	ands	r2, r3
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000ba6:	f000 fafb 	bl	80011a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	685a      	ldr	r2, [r3, #4]
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <vPortFree+0x78>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4a08      	ldr	r2, [pc, #32]	; (8000bd8 <vPortFree+0x78>)
 8000bb6:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000bb8:	68b8      	ldr	r0, [r7, #8]
 8000bba:	f000 f873 	bl	8000ca4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <vPortFree+0x7c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <vPortFree+0x7c>)
 8000bc6:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8000bc8:	f000 faf8 	bl	80011bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20003850 	.word	0x20003850
 8000bd8:	20003840 	.word	0x20003840
 8000bdc:	2000384c 	.word	0x2000384c

08000be0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000be6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000bea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000bec:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <prvHeapInit+0xac>)
 8000bee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d00c      	beq.n	8000c14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	3307      	adds	r3, #7
 8000bfe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f023 0307 	bic.w	r3, r3, #7
 8000c06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000c08:	68ba      	ldr	r2, [r7, #8]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	4a1f      	ldr	r2, [pc, #124]	; (8000c8c <prvHeapInit+0xac>)
 8000c10:	4413      	add	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000c18:	4a1d      	ldr	r2, [pc, #116]	; (8000c90 <prvHeapInit+0xb0>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <prvHeapInit+0xb0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	4413      	add	r3, r2
 8000c2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000c2c:	2208      	movs	r2, #8
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	1a9b      	subs	r3, r3, r2
 8000c32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f023 0307 	bic.w	r3, r3, #7
 8000c3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4a15      	ldr	r2, [pc, #84]	; (8000c94 <prvHeapInit+0xb4>)
 8000c40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <prvHeapInit+0xb4>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2200      	movs	r2, #0
 8000c48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <prvHeapInit+0xb4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	1ad2      	subs	r2, r2, r3
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <prvHeapInit+0xb4>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <prvHeapInit+0xb8>)
 8000c6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	4a09      	ldr	r2, [pc, #36]	; (8000c9c <prvHeapInit+0xbc>)
 8000c76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <prvHeapInit+0xc0>)
 8000c7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000c7e:	601a      	str	r2, [r3, #0]
}
 8000c80:	bf00      	nop
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	20000034 	.word	0x20000034
 8000c90:	20003834 	.word	0x20003834
 8000c94:	2000383c 	.word	0x2000383c
 8000c98:	20003844 	.word	0x20003844
 8000c9c:	20003840 	.word	0x20003840
 8000ca0:	20003850 	.word	0x20003850

08000ca4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000cac:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <prvInsertBlockIntoFreeList+0xa8>)
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	e002      	b.n	8000cb8 <prvInsertBlockIntoFreeList+0x14>
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d3f7      	bcc.n	8000cb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	441a      	add	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d108      	bne.n	8000ce6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	685a      	ldr	r2, [r3, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	441a      	add	r2, r3
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	441a      	add	r2, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d118      	bne.n	8000d2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <prvInsertBlockIntoFreeList+0xac>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d00d      	beq.n	8000d22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685a      	ldr	r2, [r3, #4]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	441a      	add	r2, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	e008      	b.n	8000d34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <prvInsertBlockIntoFreeList+0xac>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	e003      	b.n	8000d34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d002      	beq.n	8000d42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000d42:	bf00      	nop
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr
 8000d4c:	20003834 	.word	0x20003834
 8000d50:	2000383c 	.word	0x2000383c

08000d54 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	; 0x30
 8000d58:	af04      	add	r7, sp, #16
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	4613      	mov	r3, r2
 8000d62:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fe5f 	bl	8000a2c <pvPortMalloc>
 8000d6e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d00e      	beq.n	8000d94 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000d76:	2054      	movs	r0, #84	; 0x54
 8000d78:	f7ff fe58 	bl	8000a2c <pvPortMalloc>
 8000d7c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d003      	beq.n	8000d8c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	631a      	str	r2, [r3, #48]	; 0x30
 8000d8a:	e005      	b.n	8000d98 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000d8c:	6978      	ldr	r0, [r7, #20]
 8000d8e:	f7ff fee7 	bl	8000b60 <vPortFree>
 8000d92:	e001      	b.n	8000d98 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d013      	beq.n	8000dc6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000d9e:	88fa      	ldrh	r2, [r7, #6]
 8000da0:	2300      	movs	r3, #0
 8000da2:	9303      	str	r3, [sp, #12]
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	9302      	str	r3, [sp, #8]
 8000da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000daa:	9301      	str	r3, [sp, #4]
 8000dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	68b9      	ldr	r1, [r7, #8]
 8000db4:	68f8      	ldr	r0, [r7, #12]
 8000db6:	f000 f80e 	bl	8000dd6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000dba:	69f8      	ldr	r0, [r7, #28]
 8000dbc:	f000 f88a 	bl	8000ed4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	61bb      	str	r3, [r7, #24]
 8000dc4:	e002      	b.n	8000dcc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000dcc:	69bb      	ldr	r3, [r7, #24]
	}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3720      	adds	r7, #32
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	60f8      	str	r0, [r7, #12]
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	461a      	mov	r2, r3
 8000dee:	21a5      	movs	r1, #165	; 0xa5
 8000df0:	f002 f94a 	bl	8003088 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4413      	add	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	f023 0307 	bic.w	r3, r3, #7
 8000e0c:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d01f      	beq.n	8000e54 <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	e012      	b.n	8000e40 <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	4413      	add	r3, r2
 8000e20:	7819      	ldrb	r1, [r3, #0]
 8000e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	4413      	add	r3, r2
 8000e28:	3334      	adds	r3, #52	; 0x34
 8000e2a:	460a      	mov	r2, r1
 8000e2c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	4413      	add	r3, r2
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d006      	beq.n	8000e48 <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	2b0f      	cmp	r3, #15
 8000e44:	d9e9      	bls.n	8000e1a <prvInitialiseNewTask+0x44>
 8000e46:	e000      	b.n	8000e4a <prvInitialiseNewTask+0x74>
			{
				break;
 8000e48:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000e52:	e003      	b.n	8000e5c <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000e5c:	6a3b      	ldr	r3, [r7, #32]
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	d901      	bls.n	8000e66 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000e62:	2304      	movs	r3, #4
 8000e64:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e68:	6a3a      	ldr	r2, [r7, #32]
 8000e6a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6e:	6a3a      	ldr	r2, [r7, #32]
 8000e70:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8000e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e74:	2200      	movs	r2, #0
 8000e76:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fc59 	bl	8000734 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e84:	3318      	adds	r3, #24
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fc54 	bl	8000734 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e90:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e92:	6a3b      	ldr	r3, [r7, #32]
 8000e94:	f1c3 0205 	rsb	r2, r3, #5
 8000e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e9a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000eb0:	683a      	ldr	r2, [r7, #0]
 8000eb2:	68f9      	ldr	r1, [r7, #12]
 8000eb4:	6938      	ldr	r0, [r7, #16]
 8000eb6:	f7ff fc95 	bl	80007e4 <pxPortInitialiseStack>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ebe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d002      	beq.n	8000ecc <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000eca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000ecc:	bf00      	nop
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000ed4:	b5b0      	push	{r4, r5, r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000edc:	f7ff fd0c 	bl	80008f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000ee0:	4b39      	ldr	r3, [pc, #228]	; (8000fc8 <prvAddNewTaskToReadyList+0xf4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	4a38      	ldr	r2, [pc, #224]	; (8000fc8 <prvAddNewTaskToReadyList+0xf4>)
 8000ee8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000eea:	4b38      	ldr	r3, [pc, #224]	; (8000fcc <prvAddNewTaskToReadyList+0xf8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d109      	bne.n	8000f06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000ef2:	4a36      	ldr	r2, [pc, #216]	; (8000fcc <prvAddNewTaskToReadyList+0xf8>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000ef8:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <prvAddNewTaskToReadyList+0xf4>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d110      	bne.n	8000f22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000f00:	f000 fb14 	bl	800152c <prvInitialiseTaskLists>
 8000f04:	e00d      	b.n	8000f22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000f06:	4b32      	ldr	r3, [pc, #200]	; (8000fd0 <prvAddNewTaskToReadyList+0xfc>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d109      	bne.n	8000f22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <prvAddNewTaskToReadyList+0xf8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d802      	bhi.n	8000f22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000f1c:	4a2b      	ldr	r2, [pc, #172]	; (8000fcc <prvAddNewTaskToReadyList+0xf8>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000f22:	4b2c      	ldr	r3, [pc, #176]	; (8000fd4 <prvAddNewTaskToReadyList+0x100>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	3301      	adds	r3, #1
 8000f28:	4a2a      	ldr	r2, [pc, #168]	; (8000fd4 <prvAddNewTaskToReadyList+0x100>)
 8000f2a:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d016      	beq.n	8000f60 <prvAddNewTaskToReadyList+0x8c>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f001 fc1f 	bl	8002778 <SEGGER_SYSVIEW_OnTaskCreate>
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	461d      	mov	r5, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	461c      	mov	r4, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	1ae3      	subs	r3, r4, r3
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	462b      	mov	r3, r5
 8000f5c:	f000 fb82 	bl	8001664 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 fc90 	bl	8002888 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	409a      	lsls	r2, r3
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <prvAddNewTaskToReadyList+0x104>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	4a18      	ldr	r2, [pc, #96]	; (8000fd8 <prvAddNewTaskToReadyList+0x104>)
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f7e:	4613      	mov	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4a15      	ldr	r2, [pc, #84]	; (8000fdc <prvAddNewTaskToReadyList+0x108>)
 8000f88:	441a      	add	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4610      	mov	r0, r2
 8000f92:	f7ff fbdb 	bl	800074c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000f96:	f7ff fcc7 	bl	8000928 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <prvAddNewTaskToReadyList+0xfc>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d00e      	beq.n	8000fc0 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <prvAddNewTaskToReadyList+0xf8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d207      	bcs.n	8000fc0 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <prvAddNewTaskToReadyList+0x10c>)
 8000fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	f3bf 8f4f 	dsb	sy
 8000fbc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fc8:	2000392c 	.word	0x2000392c
 8000fcc:	20003854 	.word	0x20003854
 8000fd0:	20003938 	.word	0x20003938
 8000fd4:	20003948 	.word	0x20003948
 8000fd8:	20003934 	.word	0x20003934
 8000fdc:	20003858 	.word	0x20003858
 8000fe0:	e000ed04 	.word	0xe000ed04

08000fe4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8000fec:	f7ff fc84 	bl	80008f8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d102      	bne.n	8000ffc <vTaskDelete+0x18>
 8000ff6:	4b3e      	ldr	r3, [pc, #248]	; (80010f0 <vTaskDelete+0x10c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	e000      	b.n	8000ffe <vTaskDelete+0x1a>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	3304      	adds	r3, #4
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fbc4 	bl	8000792 <uxListRemove>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d115      	bne.n	800103c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001014:	4937      	ldr	r1, [pc, #220]	; (80010f4 <vTaskDelete+0x110>)
 8001016:	4613      	mov	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	440b      	add	r3, r1
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10a      	bne.n	800103c <vTaskDelete+0x58>
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102a:	2201      	movs	r2, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43da      	mvns	r2, r3
 8001032:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <vTaskDelete+0x114>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4013      	ands	r3, r2
 8001038:	4a2f      	ldr	r2, [pc, #188]	; (80010f8 <vTaskDelete+0x114>)
 800103a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001040:	2b00      	cmp	r3, #0
 8001042:	d004      	beq.n	800104e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3318      	adds	r3, #24
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fba2 	bl	8000792 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800104e:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <vTaskDelete+0x118>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	3301      	adds	r3, #1
 8001054:	4a29      	ldr	r2, [pc, #164]	; (80010fc <vTaskDelete+0x118>)
 8001056:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8001058:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <vTaskDelete+0x10c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	429a      	cmp	r2, r3
 8001060:	d118      	bne.n	8001094 <vTaskDelete+0xb0>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3304      	adds	r3, #4
 8001066:	4619      	mov	r1, r3
 8001068:	4825      	ldr	r0, [pc, #148]	; (8001100 <vTaskDelete+0x11c>)
 800106a:	f7ff fb6f 	bl	800074c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800106e:	4b25      	ldr	r3, [pc, #148]	; (8001104 <vTaskDelete+0x120>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	4a23      	ldr	r2, [pc, #140]	; (8001104 <vTaskDelete+0x120>)
 8001076:	6013      	str	r3, [r2, #0]

				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
				traceTASK_DELETE( pxTCB );
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4618      	mov	r0, r3
 800107c:	f001 fc48 	bl	8002910 <SEGGER_SYSVIEW_ShrinkId>
 8001080:	4603      	mov	r3, r0
 8001082:	4619      	mov	r1, r3
 8001084:	2022      	movs	r0, #34	; 0x22
 8001086:	f000 ffa9 	bl	8001fdc <SEGGER_SYSVIEW_RecordU32>
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fb51 	bl	8001734 <SYSVIEW_DeleteTask>
 8001092:	e016      	b.n	80010c2 <vTaskDelete+0xde>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8001094:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <vTaskDelete+0x124>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	3b01      	subs	r3, #1
 800109a:	4a1b      	ldr	r2, [pc, #108]	; (8001108 <vTaskDelete+0x124>)
 800109c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 fc35 	bl	8002910 <SEGGER_SYSVIEW_ShrinkId>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4619      	mov	r1, r3
 80010aa:	2022      	movs	r0, #34	; 0x22
 80010ac:	f000 ff96 	bl	8001fdc <SEGGER_SYSVIEW_RecordU32>
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 fb3e 	bl	8001734 <SYSVIEW_DeleteTask>
				prvDeleteTCB( pxTCB );
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f000 faa3 	bl	8001604 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80010be:	f000 fab1 	bl	8001624 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80010c2:	f7ff fc31 	bl	8000928 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <vTaskDelete+0x128>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00c      	beq.n	80010e8 <vTaskDelete+0x104>
		{
			if( pxTCB == pxCurrentTCB )
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <vTaskDelete+0x10c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d107      	bne.n	80010e8 <vTaskDelete+0x104>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 80010d8:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <vTaskDelete+0x12c>)
 80010da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	f3bf 8f4f 	dsb	sy
 80010e4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20003854 	.word	0x20003854
 80010f4:	20003858 	.word	0x20003858
 80010f8:	20003934 	.word	0x20003934
 80010fc:	20003948 	.word	0x20003948
 8001100:	20003900 	.word	0x20003900
 8001104:	20003914 	.word	0x20003914
 8001108:	2000392c 	.word	0x2000392c
 800110c:	20003938 	.word	0x20003938
 8001110:	e000ed04 	.word	0xe000ed04

08001114 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800111a:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <vTaskStartScheduler+0x70>)
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	2300      	movs	r3, #0
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2300      	movs	r3, #0
 8001124:	2280      	movs	r2, #128	; 0x80
 8001126:	4918      	ldr	r1, [pc, #96]	; (8001188 <vTaskStartScheduler+0x74>)
 8001128:	4818      	ldr	r0, [pc, #96]	; (800118c <vTaskStartScheduler+0x78>)
 800112a:	f7ff fe13 	bl	8000d54 <xTaskCreate>
 800112e:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d122      	bne.n	800117c <vTaskStartScheduler+0x68>
	__asm volatile
 8001136:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800113a:	f383 8811 	msr	BASEPRI, r3
 800113e:	f3bf 8f6f 	isb	sy
 8001142:	f3bf 8f4f 	dsb	sy
 8001146:	603b      	str	r3, [r7, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <vTaskStartScheduler+0x7c>)
 800114a:	f04f 32ff 	mov.w	r2, #4294967295
 800114e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001150:	4b10      	ldr	r3, [pc, #64]	; (8001194 <vTaskStartScheduler+0x80>)
 8001152:	2201      	movs	r2, #1
 8001154:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <vTaskStartScheduler+0x84>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <vTaskStartScheduler+0x88>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <vTaskStartScheduler+0x70>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	429a      	cmp	r2, r3
 8001166:	d102      	bne.n	800116e <vTaskStartScheduler+0x5a>
 8001168:	f001 faea 	bl	8002740 <SEGGER_SYSVIEW_OnIdle>
 800116c:	e004      	b.n	8001178 <vTaskStartScheduler+0x64>
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <vTaskStartScheduler+0x88>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f001 fb44 	bl	8002800 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001178:	f7ff fb9e 	bl	80008b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20003950 	.word	0x20003950
 8001188:	080030b0 	.word	0x080030b0
 800118c:	080014fd 	.word	0x080014fd
 8001190:	2000394c 	.word	0x2000394c
 8001194:	20003938 	.word	0x20003938
 8001198:	20003930 	.word	0x20003930
 800119c:	20003854 	.word	0x20003854

080011a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <vTaskSuspendAll+0x18>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	3301      	adds	r3, #1
 80011aa:	4a03      	ldr	r2, [pc, #12]	; (80011b8 <vTaskSuspendAll+0x18>)
 80011ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20003954 	.word	0x20003954

080011bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80011ca:	f7ff fb95 	bl	80008f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80011ce:	4b3b      	ldr	r3, [pc, #236]	; (80012bc <xTaskResumeAll+0x100>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	4a39      	ldr	r2, [pc, #228]	; (80012bc <xTaskResumeAll+0x100>)
 80011d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80011d8:	4b38      	ldr	r3, [pc, #224]	; (80012bc <xTaskResumeAll+0x100>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d165      	bne.n	80012ac <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80011e0:	4b37      	ldr	r3, [pc, #220]	; (80012c0 <xTaskResumeAll+0x104>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d061      	beq.n	80012ac <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80011e8:	e032      	b.n	8001250 <xTaskResumeAll+0x94>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80011ea:	4b36      	ldr	r3, [pc, #216]	; (80012c4 <xTaskResumeAll+0x108>)
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	3318      	adds	r3, #24
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff facb 	bl	8000792 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	3304      	adds	r3, #4
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fac6 	bl	8000792 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4618      	mov	r0, r3
 800120a:	f001 fb3d 	bl	8002888 <SEGGER_SYSVIEW_OnTaskStartReady>
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001212:	2201      	movs	r2, #1
 8001214:	409a      	lsls	r2, r3
 8001216:	4b2c      	ldr	r3, [pc, #176]	; (80012c8 <xTaskResumeAll+0x10c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4313      	orrs	r3, r2
 800121c:	4a2a      	ldr	r2, [pc, #168]	; (80012c8 <xTaskResumeAll+0x10c>)
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4a27      	ldr	r2, [pc, #156]	; (80012cc <xTaskResumeAll+0x110>)
 800122e:	441a      	add	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	3304      	adds	r3, #4
 8001234:	4619      	mov	r1, r3
 8001236:	4610      	mov	r0, r2
 8001238:	f7ff fa88 	bl	800074c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001240:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <xTaskResumeAll+0x114>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001246:	429a      	cmp	r2, r3
 8001248:	d302      	bcc.n	8001250 <xTaskResumeAll+0x94>
					{
						xYieldPending = pdTRUE;
 800124a:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <xTaskResumeAll+0x118>)
 800124c:	2201      	movs	r2, #1
 800124e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001250:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <xTaskResumeAll+0x108>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1c8      	bne.n	80011ea <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <xTaskResumeAll+0xa6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800125e:	f000 f9e1 	bl	8001624 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001262:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <xTaskResumeAll+0x11c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d010      	beq.n	8001290 <xTaskResumeAll+0xd4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800126e:	f000 f845 	bl	80012fc <xTaskIncrementTick>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <xTaskResumeAll+0xc2>
							{
								xYieldPending = pdTRUE;
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <xTaskResumeAll+0x118>)
 800127a:	2201      	movs	r2, #1
 800127c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3b01      	subs	r3, #1
 8001282:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f1      	bne.n	800126e <xTaskResumeAll+0xb2>

						xPendedTicks = 0;
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <xTaskResumeAll+0x11c>)
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001290:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <xTaskResumeAll+0x118>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d009      	beq.n	80012ac <xTaskResumeAll+0xf0>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001298:	2301      	movs	r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <xTaskResumeAll+0x120>)
 800129e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	f3bf 8f4f 	dsb	sy
 80012a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80012ac:	f7ff fb3c 	bl	8000928 <vPortExitCritical>

	return xAlreadyYielded;
 80012b0:	68bb      	ldr	r3, [r7, #8]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20003954 	.word	0x20003954
 80012c0:	2000392c 	.word	0x2000392c
 80012c4:	200038ec 	.word	0x200038ec
 80012c8:	20003934 	.word	0x20003934
 80012cc:	20003858 	.word	0x20003858
 80012d0:	20003854 	.word	0x20003854
 80012d4:	20003940 	.word	0x20003940
 80012d8:	2000393c 	.word	0x2000393c
 80012dc:	e000ed04 	.word	0xe000ed04

080012e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80012e6:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <xTaskGetTickCount+0x18>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80012ec:	687b      	ldr	r3, [r7, #4]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	20003930 	.word	0x20003930

080012fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001306:	4b48      	ldr	r3, [pc, #288]	; (8001428 <xTaskIncrementTick+0x12c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f040 8082 	bne.w	8001414 <xTaskIncrementTick+0x118>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001310:	4b46      	ldr	r3, [pc, #280]	; (800142c <xTaskIncrementTick+0x130>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	3301      	adds	r3, #1
 8001316:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001318:	4a44      	ldr	r2, [pc, #272]	; (800142c <xTaskIncrementTick+0x130>)
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d110      	bne.n	8001346 <xTaskIncrementTick+0x4a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001324:	4b42      	ldr	r3, [pc, #264]	; (8001430 <xTaskIncrementTick+0x134>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b42      	ldr	r3, [pc, #264]	; (8001434 <xTaskIncrementTick+0x138>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a40      	ldr	r2, [pc, #256]	; (8001430 <xTaskIncrementTick+0x134>)
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	4a40      	ldr	r2, [pc, #256]	; (8001434 <xTaskIncrementTick+0x138>)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b3f      	ldr	r3, [pc, #252]	; (8001438 <xTaskIncrementTick+0x13c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	4a3e      	ldr	r2, [pc, #248]	; (8001438 <xTaskIncrementTick+0x13c>)
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	f000 f96f 	bl	8001624 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001346:	4b3d      	ldr	r3, [pc, #244]	; (800143c <xTaskIncrementTick+0x140>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	429a      	cmp	r2, r3
 800134e:	d34c      	bcc.n	80013ea <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001350:	4b37      	ldr	r3, [pc, #220]	; (8001430 <xTaskIncrementTick+0x134>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d104      	bne.n	8001364 <xTaskIncrementTick+0x68>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800135a:	4b38      	ldr	r3, [pc, #224]	; (800143c <xTaskIncrementTick+0x140>)
 800135c:	f04f 32ff 	mov.w	r2, #4294967295
 8001360:	601a      	str	r2, [r3, #0]
					break;
 8001362:	e042      	b.n	80013ea <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001364:	4b32      	ldr	r3, [pc, #200]	; (8001430 <xTaskIncrementTick+0x134>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	429a      	cmp	r2, r3
 800137a:	d203      	bcs.n	8001384 <xTaskIncrementTick+0x88>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800137c:	4a2f      	ldr	r2, [pc, #188]	; (800143c <xTaskIncrementTick+0x140>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001382:	e032      	b.n	80013ea <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	3304      	adds	r3, #4
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fa02 	bl	8000792 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001392:	2b00      	cmp	r3, #0
 8001394:	d004      	beq.n	80013a0 <xTaskIncrementTick+0xa4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	3318      	adds	r3, #24
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f9f9 	bl	8000792 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f001 fa70 	bl	8002888 <SEGGER_SYSVIEW_OnTaskStartReady>
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	2201      	movs	r2, #1
 80013ae:	409a      	lsls	r2, r3
 80013b0:	4b23      	ldr	r3, [pc, #140]	; (8001440 <xTaskIncrementTick+0x144>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	4a22      	ldr	r2, [pc, #136]	; (8001440 <xTaskIncrementTick+0x144>)
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4a1f      	ldr	r2, [pc, #124]	; (8001444 <xTaskIncrementTick+0x148>)
 80013c8:	441a      	add	r2, r3
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	3304      	adds	r3, #4
 80013ce:	4619      	mov	r1, r3
 80013d0:	4610      	mov	r0, r2
 80013d2:	f7ff f9bb 	bl	800074c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <xTaskIncrementTick+0x14c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d3b5      	bcc.n	8001350 <xTaskIncrementTick+0x54>
						{
							xSwitchRequired = pdTRUE;
 80013e4:	2301      	movs	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80013e8:	e7b2      	b.n	8001350 <xTaskIncrementTick+0x54>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80013ea:	4b17      	ldr	r3, [pc, #92]	; (8001448 <xTaskIncrementTick+0x14c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013f0:	4914      	ldr	r1, [pc, #80]	; (8001444 <xTaskIncrementTick+0x148>)
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d901      	bls.n	8001406 <xTaskIncrementTick+0x10a>
			{
				xSwitchRequired = pdTRUE;
 8001402:	2301      	movs	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <xTaskIncrementTick+0x150>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d007      	beq.n	800141e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800140e:	2301      	movs	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	e004      	b.n	800141e <xTaskIncrementTick+0x122>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <xTaskIncrementTick+0x154>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	3301      	adds	r3, #1
 800141a:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <xTaskIncrementTick+0x154>)
 800141c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800141e:	697b      	ldr	r3, [r7, #20]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20003954 	.word	0x20003954
 800142c:	20003930 	.word	0x20003930
 8001430:	200038e4 	.word	0x200038e4
 8001434:	200038e8 	.word	0x200038e8
 8001438:	20003944 	.word	0x20003944
 800143c:	2000394c 	.word	0x2000394c
 8001440:	20003934 	.word	0x20003934
 8001444:	20003858 	.word	0x20003858
 8001448:	20003854 	.word	0x20003854
 800144c:	20003940 	.word	0x20003940
 8001450:	2000393c 	.word	0x2000393c

08001454 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800145a:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <vTaskSwitchContext+0x90>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001462:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <vTaskSwitchContext+0x94>)
 8001464:	2201      	movs	r2, #1
 8001466:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001468:	e038      	b.n	80014dc <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <vTaskSwitchContext+0x94>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001470:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <vTaskSwitchContext+0x98>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	fab3 f383 	clz	r3, r3
 800147c:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 800147e:	78fb      	ldrb	r3, [r7, #3]
 8001480:	f1c3 031f 	rsb	r3, r3, #31
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <vTaskSwitchContext+0x9c>)
 8001492:	4413      	add	r3, r2
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	3308      	adds	r3, #8
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d104      	bne.n	80014b6 <vTaskSwitchContext+0x62>
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	4a0d      	ldr	r2, [pc, #52]	; (80014f4 <vTaskSwitchContext+0xa0>)
 80014be:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <vTaskSwitchContext+0xa0>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <vTaskSwitchContext+0xa4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d102      	bne.n	80014d2 <vTaskSwitchContext+0x7e>
 80014cc:	f001 f938 	bl	8002740 <SEGGER_SYSVIEW_OnIdle>
}
 80014d0:	e004      	b.n	80014dc <vTaskSwitchContext+0x88>
		traceTASK_SWITCHED_IN();
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <vTaskSwitchContext+0xa0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f001 f992 	bl	8002800 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80014dc:	bf00      	nop
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20003954 	.word	0x20003954
 80014e8:	20003940 	.word	0x20003940
 80014ec:	20003934 	.word	0x20003934
 80014f0:	20003858 	.word	0x20003858
 80014f4:	20003854 	.word	0x20003854
 80014f8:	20003950 	.word	0x20003950

080014fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001504:	f000 f852 	bl	80015ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <prvIdleTask+0x28>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d9f9      	bls.n	8001504 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <prvIdleTask+0x2c>)
 8001512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	f3bf 8f4f 	dsb	sy
 800151c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001520:	e7f0      	b.n	8001504 <prvIdleTask+0x8>
 8001522:	bf00      	nop
 8001524:	20003858 	.word	0x20003858
 8001528:	e000ed04 	.word	0xe000ed04

0800152c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	e00c      	b.n	8001552 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4a12      	ldr	r2, [pc, #72]	; (800158c <prvInitialiseTaskLists+0x60>)
 8001544:	4413      	add	r3, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff f8d5 	bl	80006f6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3301      	adds	r3, #1
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b04      	cmp	r3, #4
 8001556:	d9ef      	bls.n	8001538 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <prvInitialiseTaskLists+0x64>)
 800155a:	f7ff f8cc 	bl	80006f6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800155e:	480d      	ldr	r0, [pc, #52]	; (8001594 <prvInitialiseTaskLists+0x68>)
 8001560:	f7ff f8c9 	bl	80006f6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001564:	480c      	ldr	r0, [pc, #48]	; (8001598 <prvInitialiseTaskLists+0x6c>)
 8001566:	f7ff f8c6 	bl	80006f6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800156a:	480c      	ldr	r0, [pc, #48]	; (800159c <prvInitialiseTaskLists+0x70>)
 800156c:	f7ff f8c3 	bl	80006f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001570:	480b      	ldr	r0, [pc, #44]	; (80015a0 <prvInitialiseTaskLists+0x74>)
 8001572:	f7ff f8c0 	bl	80006f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <prvInitialiseTaskLists+0x78>)
 8001578:	4a05      	ldr	r2, [pc, #20]	; (8001590 <prvInitialiseTaskLists+0x64>)
 800157a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <prvInitialiseTaskLists+0x7c>)
 800157e:	4a05      	ldr	r2, [pc, #20]	; (8001594 <prvInitialiseTaskLists+0x68>)
 8001580:	601a      	str	r2, [r3, #0]
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20003858 	.word	0x20003858
 8001590:	200038bc 	.word	0x200038bc
 8001594:	200038d0 	.word	0x200038d0
 8001598:	200038ec 	.word	0x200038ec
 800159c:	20003900 	.word	0x20003900
 80015a0:	20003918 	.word	0x20003918
 80015a4:	200038e4 	.word	0x200038e4
 80015a8:	200038e8 	.word	0x200038e8

080015ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80015b2:	e019      	b.n	80015e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80015b4:	f7ff f9a0 	bl	80008f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <prvCheckTasksWaitingTermination+0x4c>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3304      	adds	r3, #4
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff f8e4 	bl	8000792 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <prvCheckTasksWaitingTermination+0x50>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <prvCheckTasksWaitingTermination+0x50>)
 80015d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80015d4:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <prvCheckTasksWaitingTermination+0x54>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	3b01      	subs	r3, #1
 80015da:	4a09      	ldr	r2, [pc, #36]	; (8001600 <prvCheckTasksWaitingTermination+0x54>)
 80015dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80015de:	f7ff f9a3 	bl	8000928 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f80e 	bl	8001604 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <prvCheckTasksWaitingTermination+0x54>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1e1      	bne.n	80015b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20003900 	.word	0x20003900
 80015fc:	2000392c 	.word	0x2000392c
 8001600:	20003914 	.word	0x20003914

08001604 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff faa5 	bl	8000b60 <vPortFree>
			vPortFree( pxTCB );
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff faa2 	bl	8000b60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <prvResetNextTaskUnblockTime+0x38>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d104      	bne.n	800163e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <prvResetNextTaskUnblockTime+0x3c>)
 8001636:	f04f 32ff 	mov.w	r2, #4294967295
 800163a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800163c:	e008      	b.n	8001650 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <prvResetNextTaskUnblockTime+0x38>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	4a04      	ldr	r2, [pc, #16]	; (8001660 <prvResetNextTaskUnblockTime+0x3c>)
 800164e:	6013      	str	r3, [r2, #0]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	200038e4 	.word	0x200038e4
 8001660:	2000394c 	.word	0x2000394c

08001664 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af02      	add	r7, sp, #8
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001672:	2205      	movs	r2, #5
 8001674:	492b      	ldr	r1, [pc, #172]	; (8001724 <SYSVIEW_AddTask+0xc0>)
 8001676:	68b8      	ldr	r0, [r7, #8]
 8001678:	f001 fcec 	bl	8003054 <memcmp>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d04b      	beq.n	800171a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001682:	4b29      	ldr	r3, [pc, #164]	; (8001728 <SYSVIEW_AddTask+0xc4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b07      	cmp	r3, #7
 8001688:	d903      	bls.n	8001692 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800168a:	4828      	ldr	r0, [pc, #160]	; (800172c <SYSVIEW_AddTask+0xc8>)
 800168c:	f001 fa2c 	bl	8002ae8 <SEGGER_SYSVIEW_Warn>
    return;
 8001690:	e044      	b.n	800171c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8001692:	4b25      	ldr	r3, [pc, #148]	; (8001728 <SYSVIEW_AddTask+0xc4>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	4926      	ldr	r1, [pc, #152]	; (8001730 <SYSVIEW_AddTask+0xcc>)
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80016a6:	4b20      	ldr	r3, [pc, #128]	; (8001728 <SYSVIEW_AddTask+0xc4>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	4921      	ldr	r1, [pc, #132]	; (8001730 <SYSVIEW_AddTask+0xcc>)
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	440b      	add	r3, r1
 80016b6:	3304      	adds	r3, #4
 80016b8:	68ba      	ldr	r2, [r7, #8]
 80016ba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <SYSVIEW_AddTask+0xc4>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	491b      	ldr	r1, [pc, #108]	; (8001730 <SYSVIEW_AddTask+0xcc>)
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	440b      	add	r3, r1
 80016cc:	3308      	adds	r3, #8
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <SYSVIEW_AddTask+0xc4>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	4916      	ldr	r1, [pc, #88]	; (8001730 <SYSVIEW_AddTask+0xcc>)
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	330c      	adds	r3, #12
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <SYSVIEW_AddTask+0xc4>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4910      	ldr	r1, [pc, #64]	; (8001730 <SYSVIEW_AddTask+0xcc>)
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	440b      	add	r3, r1
 80016f8:	3310      	adds	r3, #16
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <SYSVIEW_AddTask+0xc4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	3301      	adds	r3, #1
 8001704:	4a08      	ldr	r2, [pc, #32]	; (8001728 <SYSVIEW_AddTask+0xc4>)
 8001706:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f000 f8ca 	bl	80018ac <SYSVIEW_SendTaskInfo>
 8001718:	e000      	b.n	800171c <SYSVIEW_AddTask+0xb8>
    return;
 800171a:	bf00      	nop

}
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	080030b8 	.word	0x080030b8
 8001728:	200039f8 	.word	0x200039f8
 800172c:	080030c0 	.word	0x080030c0
 8001730:	20003958 	.word	0x20003958

08001734 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 800173c:	4b59      	ldr	r3, [pc, #356]	; (80018a4 <SYSVIEW_DeleteTask+0x170>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80ab 	beq.w	800189c <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	e00d      	b.n	8001768 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800174c:	4956      	ldr	r1, [pc, #344]	; (80018a8 <SYSVIEW_DeleteTask+0x174>)
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	4613      	mov	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	429a      	cmp	r2, r3
 8001760:	d008      	beq.n	8001774 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	3301      	adds	r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	4b4e      	ldr	r3, [pc, #312]	; (80018a4 <SYSVIEW_DeleteTask+0x170>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	429a      	cmp	r2, r3
 8001770:	d3ec      	bcc.n	800174c <SYSVIEW_DeleteTask+0x18>
 8001772:	e000      	b.n	8001776 <SYSVIEW_DeleteTask+0x42>
      break;
 8001774:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8001776:	4b4b      	ldr	r3, [pc, #300]	; (80018a4 <SYSVIEW_DeleteTask+0x170>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	1e5a      	subs	r2, r3, #1
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	429a      	cmp	r2, r3
 8001780:	d111      	bne.n	80017a6 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4a46      	ldr	r2, [pc, #280]	; (80018a8 <SYSVIEW_DeleteTask+0x174>)
 800178e:	4413      	add	r3, r2
 8001790:	2214      	movs	r2, #20
 8001792:	2100      	movs	r1, #0
 8001794:	4618      	mov	r0, r3
 8001796:	f001 fc77 	bl	8003088 <memset>
    _NumTasks--;
 800179a:	4b42      	ldr	r3, [pc, #264]	; (80018a4 <SYSVIEW_DeleteTask+0x170>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	3b01      	subs	r3, #1
 80017a0:	4a40      	ldr	r2, [pc, #256]	; (80018a4 <SYSVIEW_DeleteTask+0x170>)
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	e07b      	b.n	800189e <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80017a6:	4b3f      	ldr	r3, [pc, #252]	; (80018a4 <SYSVIEW_DeleteTask+0x170>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d276      	bcs.n	800189e <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80017b0:	4b3c      	ldr	r3, [pc, #240]	; (80018a4 <SYSVIEW_DeleteTask+0x170>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	1e5a      	subs	r2, r3, #1
 80017b6:	493c      	ldr	r1, [pc, #240]	; (80018a8 <SYSVIEW_DeleteTask+0x174>)
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	6819      	ldr	r1, [r3, #0]
 80017c4:	4838      	ldr	r0, [pc, #224]	; (80018a8 <SYSVIEW_DeleteTask+0x174>)
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4403      	add	r3, r0
 80017d2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80017d4:	4b33      	ldr	r3, [pc, #204]	; (80018a4 <SYSVIEW_DeleteTask+0x170>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	1e5a      	subs	r2, r3, #1
 80017da:	4933      	ldr	r1, [pc, #204]	; (80018a8 <SYSVIEW_DeleteTask+0x174>)
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	3304      	adds	r3, #4
 80017e8:	6819      	ldr	r1, [r3, #0]
 80017ea:	482f      	ldr	r0, [pc, #188]	; (80018a8 <SYSVIEW_DeleteTask+0x174>)
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4403      	add	r3, r0
 80017f8:	3304      	adds	r3, #4
 80017fa:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80017fc:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <SYSVIEW_DeleteTask+0x170>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	1e5a      	subs	r2, r3, #1
 8001802:	4929      	ldr	r1, [pc, #164]	; (80018a8 <SYSVIEW_DeleteTask+0x174>)
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	3308      	adds	r3, #8
 8001810:	6819      	ldr	r1, [r3, #0]
 8001812:	4825      	ldr	r0, [pc, #148]	; (80018a8 <SYSVIEW_DeleteTask+0x174>)
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4403      	add	r3, r0
 8001820:	3308      	adds	r3, #8
 8001822:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8001824:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <SYSVIEW_DeleteTask+0x170>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	1e5a      	subs	r2, r3, #1
 800182a:	491f      	ldr	r1, [pc, #124]	; (80018a8 <SYSVIEW_DeleteTask+0x174>)
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	330c      	adds	r3, #12
 8001838:	6819      	ldr	r1, [r3, #0]
 800183a:	481b      	ldr	r0, [pc, #108]	; (80018a8 <SYSVIEW_DeleteTask+0x174>)
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4403      	add	r3, r0
 8001848:	330c      	adds	r3, #12
 800184a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800184c:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <SYSVIEW_DeleteTask+0x170>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	1e5a      	subs	r2, r3, #1
 8001852:	4915      	ldr	r1, [pc, #84]	; (80018a8 <SYSVIEW_DeleteTask+0x174>)
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	3310      	adds	r3, #16
 8001860:	6819      	ldr	r1, [r3, #0]
 8001862:	4811      	ldr	r0, [pc, #68]	; (80018a8 <SYSVIEW_DeleteTask+0x174>)
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4403      	add	r3, r0
 8001870:	3310      	adds	r3, #16
 8001872:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <SYSVIEW_DeleteTask+0x170>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	1e5a      	subs	r2, r3, #1
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4a09      	ldr	r2, [pc, #36]	; (80018a8 <SYSVIEW_DeleteTask+0x174>)
 8001884:	4413      	add	r3, r2
 8001886:	2214      	movs	r2, #20
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f001 fbfc 	bl	8003088 <memset>
    _NumTasks--;
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <SYSVIEW_DeleteTask+0x170>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3b01      	subs	r3, #1
 8001896:	4a03      	ldr	r2, [pc, #12]	; (80018a4 <SYSVIEW_DeleteTask+0x170>)
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	e000      	b.n	800189e <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 800189c:	bf00      	nop
  }
}
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200039f8 	.word	0x200039f8
 80018a8:	20003958 	.word	0x20003958

080018ac <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	2214      	movs	r2, #20
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f001 fbe0 	bl	8003088 <memset>
  TaskInfo.TaskID     = TaskID;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80018d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4618      	mov	r0, r3
 80018e2:	f000 fd8d 	bl	8002400 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80018e6:	bf00      	nop
 80018e8:	3728      	adds	r7, #40	; 0x28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 80018f6:	4b21      	ldr	r3, [pc, #132]	; (800197c <_DoInit+0x8c>)
 80018f8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2203      	movs	r2, #3
 80018fe:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2203      	movs	r2, #3
 8001904:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a1d      	ldr	r2, [pc, #116]	; (8001980 <_DoInit+0x90>)
 800190a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a1d      	ldr	r2, [pc, #116]	; (8001984 <_DoInit+0x94>)
 8001910:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001918:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a14      	ldr	r2, [pc, #80]	; (8001980 <_DoInit+0x90>)
 8001930:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a14      	ldr	r2, [pc, #80]	; (8001988 <_DoInit+0x98>)
 8001936:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2210      	movs	r2, #16
 800193c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3307      	adds	r3, #7
 8001954:	4a0d      	ldr	r2, [pc, #52]	; (800198c <_DoInit+0x9c>)
 8001956:	6810      	ldr	r0, [r2, #0]
 8001958:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a0c      	ldr	r2, [pc, #48]	; (8001990 <_DoInit+0xa0>)
 800195e:	6810      	ldr	r0, [r2, #0]
 8001960:	6018      	str	r0, [r3, #0]
 8001962:	8891      	ldrh	r1, [r2, #4]
 8001964:	7992      	ldrb	r2, [r2, #6]
 8001966:	8099      	strh	r1, [r3, #4]
 8001968:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2220      	movs	r2, #32
 800196e:	719a      	strb	r2, [r3, #6]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20003f28 	.word	0x20003f28
 8001980:	08003110 	.word	0x08003110
 8001984:	200039fc 	.word	0x200039fc
 8001988:	20003dfc 	.word	0x20003dfc
 800198c:	0800311c 	.word	0x0800311c
 8001990:	08003120 	.word	0x08003120

08001994 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	; 0x28
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 80019a0:	4b3c      	ldr	r3, [pc, #240]	; (8001a94 <SEGGER_RTT_ReadNoLock+0x100>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <SEGGER_RTT_ReadNoLock+0x18>
 80019a8:	f7ff ffa2 	bl	80018f0 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	4613      	mov	r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	3360      	adds	r3, #96	; 0x60
 80019b8:	4a36      	ldr	r2, [pc, #216]	; (8001a94 <SEGGER_RTT_ReadNoLock+0x100>)
 80019ba:	4413      	add	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 80019ce:	2300      	movs	r3, #0
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80019d2:	6a3a      	ldr	r2, [r7, #32]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d92a      	bls.n	8001a30 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4293      	cmp	r3, r2
 80019ea:	bf28      	it	cs
 80019ec:	4613      	movcs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	4413      	add	r3, r2
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4619      	mov	r1, r3
 80019fc:	69f8      	ldr	r0, [r7, #28]
 80019fe:	f001 fb38 	bl	8003072 <memcpy>
    NumBytesRead += NumBytesRem;
 8001a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4413      	add	r3, r2
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	4413      	add	r3, r2
 8001a10:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001a1a:	6a3a      	ldr	r2, [r7, #32]
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	4413      	add	r3, r2
 8001a20:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d101      	bne.n	8001a30 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	bf28      	it	cs
 8001a40:	4613      	movcs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d018      	beq.n	8001a7c <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	4413      	add	r3, r2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4619      	mov	r1, r3
 8001a56:	69f8      	ldr	r0, [r7, #28]
 8001a58:	f001 fb0b 	bl	8003072 <memcpy>
    NumBytesRead += NumBytesRem;
 8001a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4413      	add	r3, r2
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8001a64:	69fa      	ldr	r2, [r7, #28]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4413      	add	r3, r2
 8001a6a:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001a74:	6a3a      	ldr	r2, [r7, #32]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4413      	add	r3, r2
 8001a7a:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	6a3a      	ldr	r2, [r7, #32]
 8001a86:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3728      	adds	r7, #40	; 0x28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20003f28 	.word	0x20003f28

08001a98 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	4a3f      	ldr	r2, [pc, #252]	; (8001bb4 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8001ab6:	4413      	add	r3, r2
 8001ab8:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8001ac6:	69fa      	ldr	r2, [r7, #28]
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d854      	bhi.n	8001b78 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d30f      	bcc.n	8001b02 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	4413      	add	r3, r2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001aee:	4618      	mov	r0, r3
 8001af0:	f001 fabf 	bl	8003072 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	441a      	add	r2, r3
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e054      	b.n	8001bac <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	4413      	add	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d34b      	bcc.n	8001baa <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d90e      	bls.n	8001b42 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b30:	4618      	mov	r0, r3
 8001b32:	f001 fa9e 	bl	8003072 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	441a      	add	r2, r3
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	e018      	b.n	8001b74 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	4413      	add	r3, r2
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f001 fa8f 	bl	8003072 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8001b54:	6a3b      	ldr	r3, [r7, #32]
 8001b56:	6858      	ldr	r0, [r3, #4]
 8001b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	18d1      	adds	r1, r2, r3
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	f001 fa84 	bl	8003072 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad2      	subs	r2, r2, r3
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e019      	b.n	8001bac <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8001b78:	69fa      	ldr	r2, [r7, #28]
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d30f      	bcc.n	8001baa <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	4413      	add	r3, r2
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b96:	4618      	mov	r0, r3
 8001b98:	f001 fa6b 	bl	8003072 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	441a      	add	r2, r3
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3728      	adds	r7, #40	; 0x28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20003f28 	.word	0x20003f28

08001bb8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8001bb8:	b480      	push	{r7}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8001bc8:	e002      	b.n	8001bd0 <_EncodeStr+0x18>
    Len++;
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f6      	bne.n	8001bca <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d901      	bls.n	8001be8 <_EncodeStr+0x30>
    Len = Limit;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	2bfe      	cmp	r3, #254	; 0xfe
 8001bec:	d806      	bhi.n	8001bfc <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	60fa      	str	r2, [r7, #12]
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	701a      	strb	r2, [r3, #0]
 8001bfa:	e011      	b.n	8001c20 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	60fa      	str	r2, [r7, #12]
 8001c02:	22ff      	movs	r2, #255	; 0xff
 8001c04:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	60fa      	str	r2, [r7, #12]
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1c5a      	adds	r2, r3, #1
 8001c16:	60fa      	str	r2, [r7, #12]
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	0a12      	lsrs	r2, r2, #8
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8001c24:	e00a      	b.n	8001c3c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	60fa      	str	r2, [r7, #12]
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	1c51      	adds	r1, r2, #1
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	7812      	ldrb	r2, [r2, #0]
 8001c34:	701a      	strb	r2, [r3, #0]
    n++;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d3f0      	bcc.n	8001c26 <_EncodeStr+0x6e>
  }
  return pPayload;
 8001c44:	68fb      	ldr	r3, [r7, #12]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	371c      	adds	r7, #28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3304      	adds	r3, #4
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001c6c:	1cfb      	adds	r3, r7, #3
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4619      	mov	r1, r3
 8001c72:	2001      	movs	r0, #1
 8001c74:	f7ff fe8e 	bl	8001994 <SEGGER_RTT_ReadNoLock>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	dd47      	ble.n	8001d12 <_HandleIncomingPacket+0xac>
    switch (Cmd) {
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d01a      	beq.n	8001cbe <_HandleIncomingPacket+0x58>
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	dc06      	bgt.n	8001c9a <_HandleIncomingPacket+0x34>
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d010      	beq.n	8001cb2 <_HandleIncomingPacket+0x4c>
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	dc11      	bgt.n	8001cb8 <_HandleIncomingPacket+0x52>
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d009      	beq.n	8001cac <_HandleIncomingPacket+0x46>
 8001c98:	e02d      	b.n	8001cf6 <_HandleIncomingPacket+0x90>
 8001c9a:	2b06      	cmp	r3, #6
 8001c9c:	d015      	beq.n	8001cca <_HandleIncomingPacket+0x64>
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	db10      	blt.n	8001cc4 <_HandleIncomingPacket+0x5e>
 8001ca2:	2b07      	cmp	r3, #7
 8001ca4:	d014      	beq.n	8001cd0 <_HandleIncomingPacket+0x6a>
 8001ca6:	2b80      	cmp	r3, #128	; 0x80
 8001ca8:	d015      	beq.n	8001cd6 <_HandleIncomingPacket+0x70>
 8001caa:	e024      	b.n	8001cf6 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8001cac:	f000 fa2c 	bl	8002108 <SEGGER_SYSVIEW_Start>
      break;
 8001cb0:	e02f      	b.n	8001d12 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8001cb2:	f000 fae5 	bl	8002280 <SEGGER_SYSVIEW_Stop>
      break;
 8001cb6:	e02c      	b.n	8001d12 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8001cb8:	f000 fc9c 	bl	80025f4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8001cbc:	e029      	b.n	8001d12 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8001cbe:	f000 fc85 	bl	80025cc <SEGGER_SYSVIEW_SendTaskList>
      break;
 8001cc2:	e026      	b.n	8001d12 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8001cc4:	f000 fb02 	bl	80022cc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8001cc8:	e023      	b.n	8001d12 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8001cca:	f000 fecf 	bl	8002a6c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8001cce:	e020      	b.n	8001d12 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8001cd0:	f000 feae 	bl	8002a30 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8001cd4:	e01d      	b.n	8001d12 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001cd6:	1cfb      	adds	r3, r7, #3
 8001cd8:	2201      	movs	r2, #1
 8001cda:	4619      	mov	r1, r3
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f7ff fe59 	bl	8001994 <SEGGER_RTT_ReadNoLock>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	dd0f      	ble.n	8001d0c <_HandleIncomingPacket+0xa6>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 fe1e 	bl	8002930 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8001cf4:	e00a      	b.n	8001d0c <_HandleIncomingPacket+0xa6>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	b25b      	sxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	da08      	bge.n	8001d10 <_HandleIncomingPacket+0xaa>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001cfe:	1cfb      	adds	r3, r7, #3
 8001d00:	2201      	movs	r2, #1
 8001d02:	4619      	mov	r1, r3
 8001d04:	2001      	movs	r0, #1
 8001d06:	f7ff fe45 	bl	8001994 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8001d0a:	e001      	b.n	8001d10 <_HandleIncomingPacket+0xaa>
      break;
 8001d0c:	bf00      	nop
 8001d0e:	e000      	b.n	8001d12 <_HandleIncomingPacket+0xac>
      break;
 8001d10:	bf00      	nop
    }
  }
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08c      	sub	sp, #48	; 0x30
 8001d20:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8001d22:	2301      	movs	r3, #1
 8001d24:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8001d26:	1d3b      	adds	r3, r7, #4
 8001d28:	3301      	adds	r3, #1
 8001d2a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d30:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <_TrySendOverflowPacket+0xd8>)
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d36:	e00b      	b.n	8001d50 <_TrySendOverflowPacket+0x34>
 8001d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	701a      	strb	r2, [r3, #0]
 8001d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4c:	09db      	lsrs	r3, r3, #7
 8001d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d52:	2b7f      	cmp	r3, #127	; 0x7f
 8001d54:	d8f0      	bhi.n	8001d38 <_TrySendOverflowPacket+0x1c>
 8001d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d58:	1c5a      	adds	r2, r3, #1
 8001d5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	701a      	strb	r2, [r3, #0]
 8001d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d64:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001d66:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <_TrySendOverflowPacket+0xdc>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001d6c:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <_TrySendOverflowPacket+0xd8>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	623b      	str	r3, [r7, #32]
 8001d7e:	e00b      	b.n	8001d98 <_TrySendOverflowPacket+0x7c>
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	627a      	str	r2, [r7, #36]	; 0x24
 8001d86:	6a3a      	ldr	r2, [r7, #32]
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	701a      	strb	r2, [r3, #0]
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	09db      	lsrs	r3, r3, #7
 8001d96:	623b      	str	r3, [r7, #32]
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8001d9c:	d8f0      	bhi.n	8001d80 <_TrySendOverflowPacket+0x64>
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	627a      	str	r2, [r7, #36]	; 0x24
 8001da4:	6a3a      	ldr	r2, [r7, #32]
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	701a      	strb	r2, [r3, #0]
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8001dae:	69fa      	ldr	r2, [r7, #28]
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	461a      	mov	r2, r3
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	4619      	mov	r1, r3
 8001dba:	2001      	movs	r0, #1
 8001dbc:	f7ff fe6c 	bl	8001a98 <SEGGER_RTT_WriteSkipNoLock>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	613b      	str	r3, [r7, #16]
  if (Status) {
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d009      	beq.n	8001dde <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <_TrySendOverflowPacket+0xd8>)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <_TrySendOverflowPacket+0xd8>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <_TrySendOverflowPacket+0xd8>)
 8001dda:	701a      	strb	r2, [r3, #0]
 8001ddc:	e004      	b.n	8001de8 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <_TrySendOverflowPacket+0xd8>)
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	3301      	adds	r3, #1
 8001de4:	4a03      	ldr	r2, [pc, #12]	; (8001df4 <_TrySendOverflowPacket+0xd8>)
 8001de6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8001de8:	693b      	ldr	r3, [r7, #16]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3730      	adds	r7, #48	; 0x30
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20003e0c 	.word	0x20003e0c
 8001df8:	e0001004 	.word	0xe0001004

08001dfc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08a      	sub	sp, #40	; 0x28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8001e08:	4b62      	ldr	r3, [pc, #392]	; (8001f94 <_SendPacket+0x198>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d010      	beq.n	8001e32 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8001e10:	4b60      	ldr	r3, [pc, #384]	; (8001f94 <_SendPacket+0x198>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 809f 	beq.w	8001f58 <_SendPacket+0x15c>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8001e1a:	4b5e      	ldr	r3, [pc, #376]	; (8001f94 <_SendPacket+0x198>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d108      	bne.n	8001e34 <_SendPacket+0x38>
    _TrySendOverflowPacket();
 8001e22:	f7ff ff7b 	bl	8001d1c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8001e26:	4b5b      	ldr	r3, [pc, #364]	; (8001f94 <_SendPacket+0x198>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	f040 8096 	bne.w	8001f5c <_SendPacket+0x160>
 8001e30:	e000      	b.n	8001e34 <_SendPacket+0x38>
    goto Send;
 8001e32:	bf00      	nop
Send:
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b1f      	cmp	r3, #31
 8001e38:	d809      	bhi.n	8001e4e <_SendPacket+0x52>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8001e3a:	4b56      	ldr	r3, [pc, #344]	; (8001f94 <_SendPacket+0x198>)
 8001e3c:	69da      	ldr	r2, [r3, #28]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	fa22 f303 	lsr.w	r3, r2, r3
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f040 8089 	bne.w	8001f60 <_SendPacket+0x164>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b17      	cmp	r3, #23
 8001e52:	d807      	bhi.n	8001e64 <_SendPacket+0x68>
    *--pStartPacket = EventId;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	701a      	strb	r2, [r3, #0]
 8001e62:	e03d      	b.n	8001ee0 <_SendPacket+0xe4>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8001e70:	d912      	bls.n	8001e98 <_SendPacket+0x9c>
      *--pStartPacket = (NumBytes >> 7);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	09db      	lsrs	r3, r3, #7
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	701a      	strb	r2, [r3, #0]
 8001e96:	e006      	b.n	8001ea6 <_SendPacket+0xaa>
    } else {
      *--pStartPacket = NumBytes;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b7f      	cmp	r3, #127	; 0x7f
 8001eaa:	d912      	bls.n	8001ed2 <_SendPacket+0xd6>
      *--pStartPacket = (EventId >> 7);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	09db      	lsrs	r3, r3, #7
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	701a      	strb	r2, [r3, #0]
 8001ed0:	e006      	b.n	8001ee0 <_SendPacket+0xe4>
    } else {
      *--pStartPacket = EventId;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001ee0:	4b2d      	ldr	r3, [pc, #180]	; (8001f98 <_SendPacket+0x19c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001ee6:	4b2b      	ldr	r3, [pc, #172]	; (8001f94 <_SendPacket+0x198>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	623b      	str	r3, [r7, #32]
 8001ef8:	e00b      	b.n	8001f12 <_SendPacket+0x116>
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	627a      	str	r2, [r7, #36]	; 0x24
 8001f00:	6a3a      	ldr	r2, [r7, #32]
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	701a      	strb	r2, [r3, #0]
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
 8001f0e:	09db      	lsrs	r3, r3, #7
 8001f10:	623b      	str	r3, [r7, #32]
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	2b7f      	cmp	r3, #127	; 0x7f
 8001f16:	d8f0      	bhi.n	8001efa <_SendPacket+0xfe>
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	627a      	str	r2, [r7, #36]	; 0x24
 8001f1e:	6a3a      	ldr	r2, [r7, #32]
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	701a      	strb	r2, [r3, #0]
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68f9      	ldr	r1, [r7, #12]
 8001f32:	2001      	movs	r0, #1
 8001f34:	f7ff fdb0 	bl	8001a98 <SEGGER_RTT_WriteSkipNoLock>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	613b      	str	r3, [r7, #16]
  if (Status) {
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <_SendPacket+0x14e>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001f42:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <_SendPacket+0x198>)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	60d3      	str	r3, [r2, #12]
 8001f48:	e00b      	b.n	8001f62 <_SendPacket+0x166>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8001f4a:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <_SendPacket+0x198>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <_SendPacket+0x198>)
 8001f54:	701a      	strb	r2, [r3, #0]
 8001f56:	e004      	b.n	8001f62 <_SendPacket+0x166>
    goto SendDone;
 8001f58:	bf00      	nop
 8001f5a:	e002      	b.n	8001f62 <_SendPacket+0x166>
      goto SendDone;
 8001f5c:	bf00      	nop
 8001f5e:	e000      	b.n	8001f62 <_SendPacket+0x166>
      goto SendDone;
 8001f60:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <_SendPacket+0x1a0>)
 8001f64:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <_SendPacket+0x1a0>)
 8001f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d00b      	beq.n	8001f8a <_SendPacket+0x18e>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <_SendPacket+0x198>)
 8001f74:	789b      	ldrb	r3, [r3, #2]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d107      	bne.n	8001f8a <_SendPacket+0x18e>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <_SendPacket+0x198>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8001f80:	f7ff fe71 	bl	8001c66 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <_SendPacket+0x198>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8001f8a:	bf00      	nop
 8001f8c:	3728      	adds	r7, #40	; 0x28
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20003e0c 	.word	0x20003e0c
 8001f98:	e0001004 	.word	0xe0001004
 8001f9c:	20003f28 	.word	0x20003f28

08001fa0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001fa8:	f3ef 8311 	mrs	r3, BASEPRI
 8001fac:	f04f 0120 	mov.w	r1, #32
 8001fb0:	f381 8811 	msr	BASEPRI, r1
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4808      	ldr	r0, [pc, #32]	; (8001fd8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8001fb8:	f7ff fe4a 	bl	8001c50 <_PreparePacket>
 8001fbc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	68b8      	ldr	r0, [r7, #8]
 8001fc4:	f7ff ff1a 	bl	8001dfc <_SendPacket>
  RECORD_END();
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f383 8811 	msr	BASEPRI, r3
}
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20003e3c 	.word	0x20003e3c

08001fdc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8001fe6:	f3ef 8311 	mrs	r3, BASEPRI
 8001fea:	f04f 0120 	mov.w	r1, #32
 8001fee:	f381 8811 	msr	BASEPRI, r1
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	4816      	ldr	r0, [pc, #88]	; (8002050 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8001ff6:	f7ff fe2b 	bl	8001c50 <_PreparePacket>
 8001ffa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	61fb      	str	r3, [r7, #28]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	61bb      	str	r3, [r7, #24]
 8002008:	e00b      	b.n	8002022 <SEGGER_SYSVIEW_RecordU32+0x46>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	61fa      	str	r2, [r7, #28]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	701a      	strb	r2, [r3, #0]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	09db      	lsrs	r3, r3, #7
 8002020:	61bb      	str	r3, [r7, #24]
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	2b7f      	cmp	r3, #127	; 0x7f
 8002026:	d8f0      	bhi.n	800200a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	61fa      	str	r2, [r7, #28]
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	701a      	strb	r2, [r3, #0]
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	68f9      	ldr	r1, [r7, #12]
 800203c:	6938      	ldr	r0, [r7, #16]
 800203e:	f7ff fedd 	bl	8001dfc <_SendPacket>
  RECORD_END();
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f383 8811 	msr	BASEPRI, r3
}
 8002048:	bf00      	nop
 800204a:	3720      	adds	r7, #32
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20003e3c 	.word	0x20003e3c

08002054 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002054:	b580      	push	{r7, lr}
 8002056:	b08c      	sub	sp, #48	; 0x30
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002060:	f3ef 8311 	mrs	r3, BASEPRI
 8002064:	f04f 0120 	mov.w	r1, #32
 8002068:	f381 8811 	msr	BASEPRI, r1
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	4825      	ldr	r0, [pc, #148]	; (8002104 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002070:	f7ff fdee 	bl	8001c50 <_PreparePacket>
 8002074:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	62bb      	str	r3, [r7, #40]	; 0x28
 8002082:	e00b      	b.n	800209c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	62fa      	str	r2, [r7, #44]	; 0x2c
 800208a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	701a      	strb	r2, [r3, #0]
 8002096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002098:	09db      	lsrs	r3, r3, #7
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28
 800209c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209e:	2b7f      	cmp	r3, #127	; 0x7f
 80020a0:	d8f0      	bhi.n	8002084 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80020a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	701a      	strb	r2, [r3, #0]
 80020ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	623b      	str	r3, [r7, #32]
 80020ba:	e00b      	b.n	80020d4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	627a      	str	r2, [r7, #36]	; 0x24
 80020c2:	6a3a      	ldr	r2, [r7, #32]
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	701a      	strb	r2, [r3, #0]
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	09db      	lsrs	r3, r3, #7
 80020d2:	623b      	str	r3, [r7, #32]
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	2b7f      	cmp	r3, #127	; 0x7f
 80020d8:	d8f0      	bhi.n	80020bc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	627a      	str	r2, [r7, #36]	; 0x24
 80020e0:	6a3a      	ldr	r2, [r7, #32]
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	6979      	ldr	r1, [r7, #20]
 80020ee:	69b8      	ldr	r0, [r7, #24]
 80020f0:	f7ff fe84 	bl	8001dfc <_SendPacket>
  RECORD_END();
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f383 8811 	msr	BASEPRI, r3
}
 80020fa:	bf00      	nop
 80020fc:	3730      	adds	r7, #48	; 0x30
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20003e3c 	.word	0x20003e3c

08002108 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b08c      	sub	sp, #48	; 0x30
 800210c:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 800210e:	4b59      	ldr	r3, [pc, #356]	; (8002274 <SEGGER_SYSVIEW_Start+0x16c>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f040 80aa 	bne.w	800226c <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8002118:	4b56      	ldr	r3, [pc, #344]	; (8002274 <SEGGER_SYSVIEW_Start+0x16c>)
 800211a:	2201      	movs	r2, #1
 800211c:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800211e:	f3ef 8311 	mrs	r3, BASEPRI
 8002122:	f04f 0120 	mov.w	r1, #32
 8002126:	f381 8811 	msr	BASEPRI, r1
 800212a:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800212c:	220a      	movs	r2, #10
 800212e:	4952      	ldr	r1, [pc, #328]	; (8002278 <SEGGER_SYSVIEW_Start+0x170>)
 8002130:	2001      	movs	r0, #1
 8002132:	f7ff fcb1 	bl	8001a98 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800213c:	200a      	movs	r0, #10
 800213e:	f7ff ff2f 	bl	8001fa0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002142:	f3ef 8311 	mrs	r3, BASEPRI
 8002146:	f04f 0120 	mov.w	r1, #32
 800214a:	f381 8811 	msr	BASEPRI, r1
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	484a      	ldr	r0, [pc, #296]	; (800227c <SEGGER_SYSVIEW_Start+0x174>)
 8002152:	f7ff fd7d 	bl	8001c50 <_PreparePacket>
 8002156:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002160:	4b44      	ldr	r3, [pc, #272]	; (8002274 <SEGGER_SYSVIEW_Start+0x16c>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	62bb      	str	r3, [r7, #40]	; 0x28
 8002166:	e00b      	b.n	8002180 <SEGGER_SYSVIEW_Start+0x78>
 8002168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800216e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	701a      	strb	r2, [r3, #0]
 800217a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217c:	09db      	lsrs	r3, r3, #7
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002182:	2b7f      	cmp	r3, #127	; 0x7f
 8002184:	d8f0      	bhi.n	8002168 <SEGGER_SYSVIEW_Start+0x60>
 8002186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800218c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	701a      	strb	r2, [r3, #0]
 8002192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002194:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
 800219a:	4b36      	ldr	r3, [pc, #216]	; (8002274 <SEGGER_SYSVIEW_Start+0x16c>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	623b      	str	r3, [r7, #32]
 80021a0:	e00b      	b.n	80021ba <SEGGER_SYSVIEW_Start+0xb2>
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	1c5a      	adds	r2, r3, #1
 80021a6:	627a      	str	r2, [r7, #36]	; 0x24
 80021a8:	6a3a      	ldr	r2, [r7, #32]
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	701a      	strb	r2, [r3, #0]
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	09db      	lsrs	r3, r3, #7
 80021b8:	623b      	str	r3, [r7, #32]
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	2b7f      	cmp	r3, #127	; 0x7f
 80021be:	d8f0      	bhi.n	80021a2 <SEGGER_SYSVIEW_Start+0x9a>
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	627a      	str	r2, [r7, #36]	; 0x24
 80021c6:	6a3a      	ldr	r2, [r7, #32]
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	701a      	strb	r2, [r3, #0]
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	61fb      	str	r3, [r7, #28]
 80021d4:	4b27      	ldr	r3, [pc, #156]	; (8002274 <SEGGER_SYSVIEW_Start+0x16c>)
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	61bb      	str	r3, [r7, #24]
 80021da:	e00b      	b.n	80021f4 <SEGGER_SYSVIEW_Start+0xec>
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	61fa      	str	r2, [r7, #28]
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	701a      	strb	r2, [r3, #0]
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	09db      	lsrs	r3, r3, #7
 80021f2:	61bb      	str	r3, [r7, #24]
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	2b7f      	cmp	r3, #127	; 0x7f
 80021f8:	d8f0      	bhi.n	80021dc <SEGGER_SYSVIEW_Start+0xd4>
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	61fa      	str	r2, [r7, #28]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	701a      	strb	r2, [r3, #0]
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	2302      	movs	r3, #2
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	e00b      	b.n	800222c <SEGGER_SYSVIEW_Start+0x124>
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	617a      	str	r2, [r7, #20]
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	09db      	lsrs	r3, r3, #7
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	2b7f      	cmp	r3, #127	; 0x7f
 8002230:	d8f0      	bhi.n	8002214 <SEGGER_SYSVIEW_Start+0x10c>
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	617a      	str	r2, [r7, #20]
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	701a      	strb	r2, [r3, #0]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002242:	2218      	movs	r2, #24
 8002244:	6839      	ldr	r1, [r7, #0]
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff fdd8 	bl	8001dfc <_SendPacket>
      RECORD_END();
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002252:	4b08      	ldr	r3, [pc, #32]	; (8002274 <SEGGER_SYSVIEW_Start+0x16c>)
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <SEGGER_SYSVIEW_Start+0x16c>)
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002260:	f000 f9c8 	bl	80025f4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002264:	f000 f9b2 	bl	80025cc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002268:	f000 fc00 	bl	8002a6c <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 800226c:	bf00      	nop
 800226e:	3730      	adds	r7, #48	; 0x30
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20003e0c 	.word	0x20003e0c
 8002278:	08003198 	.word	0x08003198
 800227c:	20003e3c 	.word	0x20003e3c

08002280 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002286:	f3ef 8311 	mrs	r3, BASEPRI
 800228a:	f04f 0120 	mov.w	r1, #32
 800228e:	f381 8811 	msr	BASEPRI, r1
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	480b      	ldr	r0, [pc, #44]	; (80022c4 <SEGGER_SYSVIEW_Stop+0x44>)
 8002296:	f7ff fcdb 	bl	8001c50 <_PreparePacket>
 800229a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <SEGGER_SYSVIEW_Stop+0x48>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d007      	beq.n	80022b4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80022a4:	220b      	movs	r2, #11
 80022a6:	6839      	ldr	r1, [r7, #0]
 80022a8:	6838      	ldr	r0, [r7, #0]
 80022aa:	f7ff fda7 	bl	8001dfc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <SEGGER_SYSVIEW_Stop+0x48>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f383 8811 	msr	BASEPRI, r3
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20003e3c 	.word	0x20003e3c
 80022c8:	20003e0c 	.word	0x20003e0c

080022cc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08c      	sub	sp, #48	; 0x30
 80022d0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80022d2:	f3ef 8311 	mrs	r3, BASEPRI
 80022d6:	f04f 0120 	mov.w	r1, #32
 80022da:	f381 8811 	msr	BASEPRI, r1
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	4845      	ldr	r0, [pc, #276]	; (80023f8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80022e2:	f7ff fcb5 	bl	8001c50 <_PreparePacket>
 80022e6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f0:	4b42      	ldr	r3, [pc, #264]	; (80023fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022f6:	e00b      	b.n	8002310 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80022f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	701a      	strb	r2, [r3, #0]
 800230a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230c:	09db      	lsrs	r3, r3, #7
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002312:	2b7f      	cmp	r3, #127	; 0x7f
 8002314:	d8f0      	bhi.n	80022f8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800231c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	701a      	strb	r2, [r3, #0]
 8002322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002324:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
 800232a:	4b34      	ldr	r3, [pc, #208]	; (80023fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	623b      	str	r3, [r7, #32]
 8002330:	e00b      	b.n	800234a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	627a      	str	r2, [r7, #36]	; 0x24
 8002338:	6a3a      	ldr	r2, [r7, #32]
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	701a      	strb	r2, [r3, #0]
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	09db      	lsrs	r3, r3, #7
 8002348:	623b      	str	r3, [r7, #32]
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	2b7f      	cmp	r3, #127	; 0x7f
 800234e:	d8f0      	bhi.n	8002332 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	627a      	str	r2, [r7, #36]	; 0x24
 8002356:	6a3a      	ldr	r2, [r7, #32]
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	701a      	strb	r2, [r3, #0]
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	61fb      	str	r3, [r7, #28]
 8002364:	4b25      	ldr	r3, [pc, #148]	; (80023fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	61bb      	str	r3, [r7, #24]
 800236a:	e00b      	b.n	8002384 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	61fa      	str	r2, [r7, #28]
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	09db      	lsrs	r3, r3, #7
 8002382:	61bb      	str	r3, [r7, #24]
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2b7f      	cmp	r3, #127	; 0x7f
 8002388:	d8f0      	bhi.n	800236c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	61fa      	str	r2, [r7, #28]
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	701a      	strb	r2, [r3, #0]
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	2302      	movs	r3, #2
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	e00b      	b.n	80023bc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	617a      	str	r2, [r7, #20]
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	09db      	lsrs	r3, r3, #7
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	2b7f      	cmp	r3, #127	; 0x7f
 80023c0:	d8f0      	bhi.n	80023a4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	617a      	str	r2, [r7, #20]
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	701a      	strb	r2, [r3, #0]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80023d2:	2218      	movs	r2, #24
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	68b8      	ldr	r0, [r7, #8]
 80023d8:	f7ff fd10 	bl	8001dfc <_SendPacket>
  RECORD_END();
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80023ea:	4b04      	ldr	r3, [pc, #16]	; (80023fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	4798      	blx	r3
  }
}
 80023f0:	bf00      	nop
 80023f2:	3730      	adds	r7, #48	; 0x30
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20003e3c 	.word	0x20003e3c
 80023fc:	20003e0c 	.word	0x20003e0c

08002400 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b092      	sub	sp, #72	; 0x48
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8002408:	f3ef 8311 	mrs	r3, BASEPRI
 800240c:	f04f 0120 	mov.w	r1, #32
 8002410:	f381 8811 	msr	BASEPRI, r1
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	486b      	ldr	r0, [pc, #428]	; (80025c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002418:	f7ff fc1a 	bl	8001c50 <_PreparePacket>
 800241c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	647b      	str	r3, [r7, #68]	; 0x44
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	4b67      	ldr	r3, [pc, #412]	; (80025c8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	089b      	lsrs	r3, r3, #2
 8002432:	643b      	str	r3, [r7, #64]	; 0x40
 8002434:	e00b      	b.n	800244e <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8002436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	647a      	str	r2, [r7, #68]	; 0x44
 800243c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	701a      	strb	r2, [r3, #0]
 8002448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800244a:	09db      	lsrs	r3, r3, #7
 800244c:	643b      	str	r3, [r7, #64]	; 0x40
 800244e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002450:	2b7f      	cmp	r3, #127	; 0x7f
 8002452:	d8f0      	bhi.n	8002436 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8002454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	647a      	str	r2, [r7, #68]	; 0x44
 800245a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	701a      	strb	r2, [r3, #0]
 8002460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002462:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	63bb      	str	r3, [r7, #56]	; 0x38
 800246e:	e00b      	b.n	8002488 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8002470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002476:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	701a      	strb	r2, [r3, #0]
 8002482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002484:	09db      	lsrs	r3, r3, #7
 8002486:	63bb      	str	r3, [r7, #56]	; 0x38
 8002488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800248a:	2b7f      	cmp	r3, #127	; 0x7f
 800248c:	d8f0      	bhi.n	8002470 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 800248e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	701a      	strb	r2, [r3, #0]
 800249a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800249c:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2220      	movs	r2, #32
 80024a4:	4619      	mov	r1, r3
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f7ff fb86 	bl	8001bb8 <_EncodeStr>
 80024ac:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80024ae:	2209      	movs	r2, #9
 80024b0:	68f9      	ldr	r1, [r7, #12]
 80024b2:	6938      	ldr	r0, [r7, #16]
 80024b4:	f7ff fca2 	bl	8001dfc <_SendPacket>
  //
  pPayload = pPayloadStart;
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	637b      	str	r3, [r7, #52]	; 0x34
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	4b40      	ldr	r3, [pc, #256]	; (80025c8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	089b      	lsrs	r3, r3, #2
 80024cc:	633b      	str	r3, [r7, #48]	; 0x30
 80024ce:	e00b      	b.n	80024e8 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 80024d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	637a      	str	r2, [r7, #52]	; 0x34
 80024d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e4:	09db      	lsrs	r3, r3, #7
 80024e6:	633b      	str	r3, [r7, #48]	; 0x30
 80024e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ea:	2b7f      	cmp	r3, #127	; 0x7f
 80024ec:	d8f0      	bhi.n	80024d0 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 80024ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f0:	1c5a      	adds	r2, r3, #1
 80024f2:	637a      	str	r2, [r7, #52]	; 0x34
 80024f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	701a      	strb	r2, [r3, #0]
 80024fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
 8002508:	e00b      	b.n	8002522 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 800250a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	701a      	strb	r2, [r3, #0]
 800251c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251e:	09db      	lsrs	r3, r3, #7
 8002520:	62bb      	str	r3, [r7, #40]	; 0x28
 8002522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002524:	2b7f      	cmp	r3, #127	; 0x7f
 8002526:	d8f0      	bhi.n	800250a <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8002528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800252e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	701a      	strb	r2, [r3, #0]
 8002534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002536:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	623b      	str	r3, [r7, #32]
 8002542:	e00b      	b.n	800255c <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	627a      	str	r2, [r7, #36]	; 0x24
 800254a:	6a3a      	ldr	r2, [r7, #32]
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	701a      	strb	r2, [r3, #0]
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	09db      	lsrs	r3, r3, #7
 800255a:	623b      	str	r3, [r7, #32]
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	2b7f      	cmp	r3, #127	; 0x7f
 8002560:	d8f0      	bhi.n	8002544 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	627a      	str	r2, [r7, #36]	; 0x24
 8002568:	6a3a      	ldr	r2, [r7, #32]
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	701a      	strb	r2, [r3, #0]
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	61fb      	str	r3, [r7, #28]
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	e00b      	b.n	8002594 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	61fa      	str	r2, [r7, #28]
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	09db      	lsrs	r3, r3, #7
 8002592:	61bb      	str	r3, [r7, #24]
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2b7f      	cmp	r3, #127	; 0x7f
 8002598:	d8f0      	bhi.n	800257c <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	61fa      	str	r2, [r7, #28]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80025aa:	2215      	movs	r2, #21
 80025ac:	68f9      	ldr	r1, [r7, #12]
 80025ae:	6938      	ldr	r0, [r7, #16]
 80025b0:	f7ff fc24 	bl	8001dfc <_SendPacket>
  RECORD_END();
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f383 8811 	msr	BASEPRI, r3
}
 80025ba:	bf00      	nop
 80025bc:	3748      	adds	r7, #72	; 0x48
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20003e3c 	.word	0x20003e3c
 80025c8:	20003e0c 	.word	0x20003e0c

080025cc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80025d0:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80025e2:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	4798      	blx	r3
  }
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20003e0c 	.word	0x20003e0c

080025f4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80025f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80025fa:	4b12      	ldr	r3, [pc, #72]	; (8002644 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d015      	beq.n	800262e <SEGGER_SYSVIEW_RecordSystime+0x3a>
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d010      	beq.n	800262e <SEGGER_SYSVIEW_RecordSystime+0x3a>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800260c:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4798      	blx	r3
 8002614:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002618:	6839      	ldr	r1, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800261a:	e897 0018 	ldmia.w	r7, {r3, r4}
 800261e:	0025      	movs	r5, r4
 8002620:	2600      	movs	r6, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002622:	462b      	mov	r3, r5
 8002624:	461a      	mov	r2, r3
 8002626:	200d      	movs	r0, #13
 8002628:	f7ff fd14 	bl	8002054 <SEGGER_SYSVIEW_RecordU32x2>
 800262c:	e005      	b.n	800263a <SEGGER_SYSVIEW_RecordSystime+0x46>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <SEGGER_SYSVIEW_RecordSystime+0x54>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4619      	mov	r1, r3
 8002634:	200c      	movs	r0, #12
 8002636:	f7ff fcd1 	bl	8001fdc <SEGGER_SYSVIEW_RecordU32>
  }
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002642:	bf00      	nop
 8002644:	20003e0c 	.word	0x20003e0c
 8002648:	e0001004 	.word	0xe0001004

0800264c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002652:	f3ef 8311 	mrs	r3, BASEPRI
 8002656:	f04f 0120 	mov.w	r1, #32
 800265a:	f381 8811 	msr	BASEPRI, r1
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	4819      	ldr	r0, [pc, #100]	; (80026c8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8002662:	f7ff faf5 	bl	8001c50 <_PreparePacket>
 8002666:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800266c:	4b17      	ldr	r3, [pc, #92]	; (80026cc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002674:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	e00b      	b.n	8002698 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	617a      	str	r2, [r7, #20]
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	09db      	lsrs	r3, r3, #7
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	2b7f      	cmp	r3, #127	; 0x7f
 800269c:	d8f0      	bhi.n	8002680 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	617a      	str	r2, [r7, #20]
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80026ae:	2202      	movs	r2, #2
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	68b8      	ldr	r0, [r7, #8]
 80026b4:	f7ff fba2 	bl	8001dfc <_SendPacket>
  RECORD_END();
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f383 8811 	msr	BASEPRI, r3
}
 80026be:	bf00      	nop
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20003e3c 	.word	0x20003e3c
 80026cc:	e000ed04 	.word	0xe000ed04

080026d0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80026d6:	f3ef 8311 	mrs	r3, BASEPRI
 80026da:	f04f 0120 	mov.w	r1, #32
 80026de:	f381 8811 	msr	BASEPRI, r1
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	4807      	ldr	r0, [pc, #28]	; (8002704 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80026e6:	f7ff fab3 	bl	8001c50 <_PreparePacket>
 80026ea:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80026ec:	2203      	movs	r2, #3
 80026ee:	6839      	ldr	r1, [r7, #0]
 80026f0:	6838      	ldr	r0, [r7, #0]
 80026f2:	f7ff fb83 	bl	8001dfc <_SendPacket>
  RECORD_END();
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f383 8811 	msr	BASEPRI, r3
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20003e3c 	.word	0x20003e3c

08002708 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800270e:	f3ef 8311 	mrs	r3, BASEPRI
 8002712:	f04f 0120 	mov.w	r1, #32
 8002716:	f381 8811 	msr	BASEPRI, r1
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	4807      	ldr	r0, [pc, #28]	; (800273c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800271e:	f7ff fa97 	bl	8001c50 <_PreparePacket>
 8002722:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8002724:	2212      	movs	r2, #18
 8002726:	6839      	ldr	r1, [r7, #0]
 8002728:	6838      	ldr	r0, [r7, #0]
 800272a:	f7ff fb67 	bl	8001dfc <_SendPacket>
  RECORD_END();
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f383 8811 	msr	BASEPRI, r3
}
 8002734:	bf00      	nop
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20003e3c 	.word	0x20003e3c

08002740 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002746:	f3ef 8311 	mrs	r3, BASEPRI
 800274a:	f04f 0120 	mov.w	r1, #32
 800274e:	f381 8811 	msr	BASEPRI, r1
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	4807      	ldr	r0, [pc, #28]	; (8002774 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8002756:	f7ff fa7b 	bl	8001c50 <_PreparePacket>
 800275a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800275c:	2211      	movs	r2, #17
 800275e:	6839      	ldr	r1, [r7, #0]
 8002760:	6838      	ldr	r0, [r7, #0]
 8002762:	f7ff fb4b 	bl	8001dfc <_SendPacket>
  RECORD_END();
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f383 8811 	msr	BASEPRI, r3
}
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20003e3c 	.word	0x20003e3c

08002778 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002780:	f3ef 8311 	mrs	r3, BASEPRI
 8002784:	f04f 0120 	mov.w	r1, #32
 8002788:	f381 8811 	msr	BASEPRI, r1
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	481a      	ldr	r0, [pc, #104]	; (80027f8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8002790:	f7ff fa5e 	bl	8001c50 <_PreparePacket>
 8002794:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800279a:	4b18      	ldr	r3, [pc, #96]	; (80027fc <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	089b      	lsrs	r3, r3, #2
 80027a4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	61bb      	str	r3, [r7, #24]
 80027ae:	e00b      	b.n	80027c8 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	61fa      	str	r2, [r7, #28]
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	09db      	lsrs	r3, r3, #7
 80027c6:	61bb      	str	r3, [r7, #24]
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	2b7f      	cmp	r3, #127	; 0x7f
 80027cc:	d8f0      	bhi.n	80027b0 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	61fa      	str	r2, [r7, #28]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80027de:	2208      	movs	r2, #8
 80027e0:	68f9      	ldr	r1, [r7, #12]
 80027e2:	6938      	ldr	r0, [r7, #16]
 80027e4:	f7ff fb0a 	bl	8001dfc <_SendPacket>
  RECORD_END();
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f383 8811 	msr	BASEPRI, r3
}
 80027ee:	bf00      	nop
 80027f0:	3720      	adds	r7, #32
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20003e3c 	.word	0x20003e3c
 80027fc:	20003e0c 	.word	0x20003e0c

08002800 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002808:	f3ef 8311 	mrs	r3, BASEPRI
 800280c:	f04f 0120 	mov.w	r1, #32
 8002810:	f381 8811 	msr	BASEPRI, r1
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	481a      	ldr	r0, [pc, #104]	; (8002880 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8002818:	f7ff fa1a 	bl	8001c50 <_PreparePacket>
 800281c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002822:	4b18      	ldr	r3, [pc, #96]	; (8002884 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	089b      	lsrs	r3, r3, #2
 800282c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	61fb      	str	r3, [r7, #28]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	61bb      	str	r3, [r7, #24]
 8002836:	e00b      	b.n	8002850 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	61fa      	str	r2, [r7, #28]
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	09db      	lsrs	r3, r3, #7
 800284e:	61bb      	str	r3, [r7, #24]
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	2b7f      	cmp	r3, #127	; 0x7f
 8002854:	d8f0      	bhi.n	8002838 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	61fa      	str	r2, [r7, #28]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8002866:	2204      	movs	r2, #4
 8002868:	68f9      	ldr	r1, [r7, #12]
 800286a:	6938      	ldr	r0, [r7, #16]
 800286c:	f7ff fac6 	bl	8001dfc <_SendPacket>
  RECORD_END();
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f383 8811 	msr	BASEPRI, r3
}
 8002876:	bf00      	nop
 8002878:	3720      	adds	r7, #32
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20003e3c 	.word	0x20003e3c
 8002884:	20003e0c 	.word	0x20003e0c

08002888 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002890:	f3ef 8311 	mrs	r3, BASEPRI
 8002894:	f04f 0120 	mov.w	r1, #32
 8002898:	f381 8811 	msr	BASEPRI, r1
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	481a      	ldr	r0, [pc, #104]	; (8002908 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80028a0:	f7ff f9d6 	bl	8001c50 <_PreparePacket>
 80028a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80028aa:	4b18      	ldr	r3, [pc, #96]	; (800290c <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	089b      	lsrs	r3, r3, #2
 80028b4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	61fb      	str	r3, [r7, #28]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	61bb      	str	r3, [r7, #24]
 80028be:	e00b      	b.n	80028d8 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	61fa      	str	r2, [r7, #28]
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	701a      	strb	r2, [r3, #0]
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	09db      	lsrs	r3, r3, #7
 80028d6:	61bb      	str	r3, [r7, #24]
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2b7f      	cmp	r3, #127	; 0x7f
 80028dc:	d8f0      	bhi.n	80028c0 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	61fa      	str	r2, [r7, #28]
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80028ee:	2206      	movs	r2, #6
 80028f0:	68f9      	ldr	r1, [r7, #12]
 80028f2:	6938      	ldr	r0, [r7, #16]
 80028f4:	f7ff fa82 	bl	8001dfc <_SendPacket>
  RECORD_END();
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f383 8811 	msr	BASEPRI, r3
}
 80028fe:	bf00      	nop
 8002900:	3720      	adds	r7, #32
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20003e3c 	.word	0x20003e3c
 800290c:	20003e0c 	.word	0x20003e0c

08002910 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	089b      	lsrs	r3, r3, #2
}
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	20003e0c 	.word	0x20003e0c

08002930 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8002930:	b580      	push	{r7, lr}
 8002932:	b08c      	sub	sp, #48	; 0x30
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800293a:	4b3b      	ldr	r3, [pc, #236]	; (8002a28 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d06d      	beq.n	8002a1e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8002942:	4b39      	ldr	r3, [pc, #228]	; (8002a28 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8002948:	2300      	movs	r3, #0
 800294a:	62bb      	str	r3, [r7, #40]	; 0x28
 800294c:	e008      	b.n	8002960 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800294e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8002954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002956:	2b00      	cmp	r3, #0
 8002958:	d007      	beq.n	800296a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295c:	3301      	adds	r3, #1
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002960:	79fa      	ldrb	r2, [r7, #7]
 8002962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002964:	429a      	cmp	r2, r3
 8002966:	d8f2      	bhi.n	800294e <SEGGER_SYSVIEW_SendModule+0x1e>
 8002968:	e000      	b.n	800296c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800296a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800296c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296e:	2b00      	cmp	r3, #0
 8002970:	d055      	beq.n	8002a1e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002972:	f3ef 8311 	mrs	r3, BASEPRI
 8002976:	f04f 0120 	mov.w	r1, #32
 800297a:	f381 8811 	msr	BASEPRI, r1
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	482a      	ldr	r0, [pc, #168]	; (8002a2c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8002982:	f7ff f965 	bl	8001c50 <_PreparePacket>
 8002986:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	623b      	str	r3, [r7, #32]
 8002994:	e00b      	b.n	80029ae <SEGGER_SYSVIEW_SendModule+0x7e>
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	1c5a      	adds	r2, r3, #1
 800299a:	627a      	str	r2, [r7, #36]	; 0x24
 800299c:	6a3a      	ldr	r2, [r7, #32]
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	701a      	strb	r2, [r3, #0]
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	09db      	lsrs	r3, r3, #7
 80029ac:	623b      	str	r3, [r7, #32]
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	2b7f      	cmp	r3, #127	; 0x7f
 80029b2:	d8f0      	bhi.n	8002996 <SEGGER_SYSVIEW_SendModule+0x66>
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	627a      	str	r2, [r7, #36]	; 0x24
 80029ba:	6a3a      	ldr	r2, [r7, #32]
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	701a      	strb	r2, [r3, #0]
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	61fb      	str	r3, [r7, #28]
 80029c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	e00b      	b.n	80029e8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	61fa      	str	r2, [r7, #28]
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	701a      	strb	r2, [r3, #0]
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	09db      	lsrs	r3, r3, #7
 80029e6:	61bb      	str	r3, [r7, #24]
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2b7f      	cmp	r3, #127	; 0x7f
 80029ec:	d8f0      	bhi.n	80029d0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	61fa      	str	r2, [r7, #28]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80029fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2280      	movs	r2, #128	; 0x80
 8002a04:	4619      	mov	r1, r3
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f7ff f8d6 	bl	8001bb8 <_EncodeStr>
 8002a0c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8002a0e:	2216      	movs	r2, #22
 8002a10:	68f9      	ldr	r1, [r7, #12]
 8002a12:	6938      	ldr	r0, [r7, #16]
 8002a14:	f7ff f9f2 	bl	8001dfc <_SendPacket>
      RECORD_END();
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8002a1e:	bf00      	nop
 8002a20:	3730      	adds	r7, #48	; 0x30
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20003e34 	.word	0x20003e34
 8002a2c:	20003e3c 	.word	0x20003e3c

08002a30 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8002a36:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00f      	beq.n	8002a5e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f2      	bne.n	8002a44 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20003e34 	.word	0x20003e34

08002a6c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8002a72:	f3ef 8311 	mrs	r3, BASEPRI
 8002a76:	f04f 0120 	mov.w	r1, #32
 8002a7a:	f381 8811 	msr	BASEPRI, r1
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	4817      	ldr	r0, [pc, #92]	; (8002ae0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8002a82:	f7ff f8e5 	bl	8001c50 <_PreparePacket>
 8002a86:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	4b14      	ldr	r3, [pc, #80]	; (8002ae4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	e00b      	b.n	8002ab0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	617a      	str	r2, [r7, #20]
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	09db      	lsrs	r3, r3, #7
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ab4:	d8f0      	bhi.n	8002a98 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	617a      	str	r2, [r7, #20]
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	701a      	strb	r2, [r3, #0]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8002ac6:	221b      	movs	r2, #27
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	68b8      	ldr	r0, [r7, #8]
 8002acc:	f7ff f996 	bl	8001dfc <_SendPacket>
  RECORD_END();
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f383 8811 	msr	BASEPRI, r3
}
 8002ad6:	bf00      	nop
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20003e3c 	.word	0x20003e3c
 8002ae4:	20003e38 	.word	0x20003e38

08002ae8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08a      	sub	sp, #40	; 0x28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002af0:	f3ef 8311 	mrs	r3, BASEPRI
 8002af4:	f04f 0120 	mov.w	r1, #32
 8002af8:	f381 8811 	msr	BASEPRI, r1
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	4827      	ldr	r0, [pc, #156]	; (8002b9c <SEGGER_SYSVIEW_Warn+0xb4>)
 8002b00:	f7ff f8a6 	bl	8001c50 <_PreparePacket>
 8002b04:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002b06:	2280      	movs	r2, #128	; 0x80
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	6938      	ldr	r0, [r7, #16]
 8002b0c:	f7ff f854 	bl	8001bb8 <_EncodeStr>
 8002b10:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
 8002b16:	2301      	movs	r3, #1
 8002b18:	623b      	str	r3, [r7, #32]
 8002b1a:	e00b      	b.n	8002b34 <SEGGER_SYSVIEW_Warn+0x4c>
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	627a      	str	r2, [r7, #36]	; 0x24
 8002b22:	6a3a      	ldr	r2, [r7, #32]
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	09db      	lsrs	r3, r3, #7
 8002b32:	623b      	str	r3, [r7, #32]
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	2b7f      	cmp	r3, #127	; 0x7f
 8002b38:	d8f0      	bhi.n	8002b1c <SEGGER_SYSVIEW_Warn+0x34>
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	627a      	str	r2, [r7, #36]	; 0x24
 8002b40:	6a3a      	ldr	r2, [r7, #32]
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	e00b      	b.n	8002b6c <SEGGER_SYSVIEW_Warn+0x84>
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	61fa      	str	r2, [r7, #28]
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	701a      	strb	r2, [r3, #0]
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	09db      	lsrs	r3, r3, #7
 8002b6a:	61bb      	str	r3, [r7, #24]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8002b70:	d8f0      	bhi.n	8002b54 <SEGGER_SYSVIEW_Warn+0x6c>
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	61fa      	str	r2, [r7, #28]
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	701a      	strb	r2, [r3, #0]
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8002b82:	221a      	movs	r2, #26
 8002b84:	68f9      	ldr	r1, [r7, #12]
 8002b86:	6938      	ldr	r0, [r7, #16]
 8002b88:	f7ff f938 	bl	8001dfc <_SendPacket>
  RECORD_END();
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f383 8811 	msr	BASEPRI, r3
}
 8002b92:	bf00      	nop
 8002b94:	3728      	adds	r7, #40	; 0x28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20003e3c 	.word	0x20003e3c

08002ba0 <main>:
TaskHandle_t xTaskHandle1=NULL;
TaskHandle_t xTaskHandle2=NULL ;
char usr_msg[200];
/*****************************Main Function****************************/
int main(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af02      	add	r7, sp, #8
	// Initializations
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8002ba6:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002baa:	f7fd fad9 	bl	8000160 <NVIC_PriorityGroupConfig>
	prvSetupHardware();
 8002bae:	f000 f88f 	bl	8002cd0 <prvSetupHardware>

	printmsg("This Task Delete Project\r\n");
 8002bb2:	480e      	ldr	r0, [pc, #56]	; (8002bec <main+0x4c>)
 8002bb4:	f000 f894 	bl	8002ce0 <printmsg>
	// Create Task 1 low priority
	xTaskCreate(vTask1_Handler,"Task-1",300,NULL,1,&xTaskHandle1);
 8002bb8:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <main+0x50>)
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bc6:	490b      	ldr	r1, [pc, #44]	; (8002bf4 <main+0x54>)
 8002bc8:	480b      	ldr	r0, [pc, #44]	; (8002bf8 <main+0x58>)
 8002bca:	f7fe f8c3 	bl	8000d54 <xTaskCreate>

	// Create Task 2 high Priority
	xTaskCreate(vTask2_Handler,"Task-2",300,NULL,2,&xTaskHandle2);
 8002bce:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <main+0x5c>)
 8002bd0:	9301      	str	r3, [sp, #4]
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bdc:	4908      	ldr	r1, [pc, #32]	; (8002c00 <main+0x60>)
 8002bde:	4809      	ldr	r0, [pc, #36]	; (8002c04 <main+0x64>)
 8002be0:	f7fe f8b8 	bl	8000d54 <xTaskCreate>

	//Start Scheduler
	vTaskStartScheduler();
 8002be4:	f7fe fa96 	bl	8001114 <vTaskStartScheduler>


	while(1);
 8002be8:	e7fe      	b.n	8002be8 <main+0x48>
 8002bea:	bf00      	nop
 8002bec:	08003128 	.word	0x08003128
 8002bf0:	20003f20 	.word	0x20003f20
 8002bf4:	08003144 	.word	0x08003144
 8002bf8:	08002c09 	.word	0x08002c09
 8002bfc:	20003f24 	.word	0x20003f24
 8002c00:	0800314c 	.word	0x0800314c
 8002c04:	08002c4d 	.word	0x08002c4d

08002c08 <vTask1_Handler>:
}


/***************************** Task Handler Definition****************************/
void vTask1_Handler (void *param)
{
 8002c08:	b5b0      	push	{r4, r5, r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
	//Low Priority Task will run only when Task 2 is Deleted
	sprintf(usr_msg,"Task-1 is Running\r\n");
 8002c10:	4a0b      	ldr	r2, [pc, #44]	; (8002c40 <vTask1_Handler+0x38>)
 8002c12:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <vTask1_Handler+0x3c>)
 8002c14:	4615      	mov	r5, r2
 8002c16:	461c      	mov	r4, r3
 8002c18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c1a:	6028      	str	r0, [r5, #0]
 8002c1c:	6069      	str	r1, [r5, #4]
 8002c1e:	60aa      	str	r2, [r5, #8]
 8002c20:	60eb      	str	r3, [r5, #12]
 8002c22:	6820      	ldr	r0, [r4, #0]
 8002c24:	6128      	str	r0, [r5, #16]
	printmsg(usr_msg);
 8002c26:	4806      	ldr	r0, [pc, #24]	; (8002c40 <vTask1_Handler+0x38>)
 8002c28:	f000 f85a 	bl	8002ce0 <printmsg>
	while(1)
	{
		RTOS_Delay(200);
 8002c2c:	20c8      	movs	r0, #200	; 0xc8
 8002c2e:	f000 f8e9 	bl	8002e04 <RTOS_Delay>
		GPIO_ToggleBit(GPIOC,GPIO_Pin_13);
 8002c32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c36:	4804      	ldr	r0, [pc, #16]	; (8002c48 <vTask1_Handler+0x40>)
 8002c38:	f7fd fb79 	bl	800032e <GPIO_ToggleBit>
		RTOS_Delay(200);
 8002c3c:	e7f6      	b.n	8002c2c <vTask1_Handler+0x24>
 8002c3e:	bf00      	nop
 8002c40:	20003fd0 	.word	0x20003fd0
 8002c44:	08003154 	.word	0x08003154
 8002c48:	40011000 	.word	0x40011000

08002c4c <vTask2_Handler>:
	}
}

void vTask2_Handler (void *param)
{
 8002c4c:	b5b0      	push	{r4, r5, r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
	// High Priority Task always will be running till it deleted
	sprintf(usr_msg,"Task-2 is Running\r\n");
 8002c54:	4a19      	ldr	r2, [pc, #100]	; (8002cbc <vTask2_Handler+0x70>)
 8002c56:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <vTask2_Handler+0x74>)
 8002c58:	4615      	mov	r5, r2
 8002c5a:	461c      	mov	r4, r3
 8002c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c5e:	6028      	str	r0, [r5, #0]
 8002c60:	6069      	str	r1, [r5, #4]
 8002c62:	60aa      	str	r2, [r5, #8]
 8002c64:	60eb      	str	r3, [r5, #12]
 8002c66:	6820      	ldr	r0, [r4, #0]
 8002c68:	6128      	str	r0, [r5, #16]
	printmsg(usr_msg);
 8002c6a:	4814      	ldr	r0, [pc, #80]	; (8002cbc <vTask2_Handler+0x70>)
 8002c6c:	f000 f838 	bl	8002ce0 <printmsg>
	while(1)
	{
		if(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_5) )
 8002c70:	2120      	movs	r1, #32
 8002c72:	4814      	ldr	r0, [pc, #80]	; (8002cc4 <vTask2_Handler+0x78>)
 8002c74:	f7fd fb42 	bl	80002fc <GPIO_ReadInputDataBit>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d013      	beq.n	8002ca6 <vTask2_Handler+0x5a>
		{
			// Button is Pressed
			//task 2 delete itself
			sprintf(usr_msg,"Task-2 is Getting Deleted\r\n");
 8002c7e:	4a0f      	ldr	r2, [pc, #60]	; (8002cbc <vTask2_Handler+0x70>)
 8002c80:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <vTask2_Handler+0x7c>)
 8002c82:	4615      	mov	r5, r2
 8002c84:	461c      	mov	r4, r3
 8002c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c88:	6028      	str	r0, [r5, #0]
 8002c8a:	6069      	str	r1, [r5, #4]
 8002c8c:	60aa      	str	r2, [r5, #8]
 8002c8e:	60eb      	str	r3, [r5, #12]
 8002c90:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002c92:	6128      	str	r0, [r5, #16]
 8002c94:	6169      	str	r1, [r5, #20]
 8002c96:	61aa      	str	r2, [r5, #24]
			printmsg(usr_msg);
 8002c98:	4808      	ldr	r0, [pc, #32]	; (8002cbc <vTask2_Handler+0x70>)
 8002c9a:	f000 f821 	bl	8002ce0 <printmsg>
			vTaskDelete(NULL);
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f7fe f9a0 	bl	8000fe4 <vTaskDelete>
 8002ca4:	e7e4      	b.n	8002c70 <vTask2_Handler+0x24>
		}
		else
		{
			// Button is Not Pressed
			// LED is Toggeled every 1 sec
			RTOS_Delay(1000);
 8002ca6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002caa:	f000 f8ab 	bl	8002e04 <RTOS_Delay>
			GPIO_ToggleBit(GPIOC,GPIO_Pin_13);
 8002cae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cb2:	4806      	ldr	r0, [pc, #24]	; (8002ccc <vTask2_Handler+0x80>)
 8002cb4:	f7fd fb3b 	bl	800032e <GPIO_ToggleBit>
		if(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_5) )
 8002cb8:	e7da      	b.n	8002c70 <vTask2_Handler+0x24>
 8002cba:	bf00      	nop
 8002cbc:	20003fd0 	.word	0x20003fd0
 8002cc0:	08003168 	.word	0x08003168
 8002cc4:	40010800 	.word	0x40010800
 8002cc8:	0800317c 	.word	0x0800317c
 8002ccc:	40011000 	.word	0x40011000

08002cd0 <prvSetupHardware>:
	}
}
/*****************************FUNCTION Definition****************************/

static void prvSetupHardware(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
	//Setup GPIO
	prvGPIOSetup();
 8002cd4:	f000 f86c 	bl	8002db0 <prvGPIOSetup>

	//setup UART_1
	prvUARTSetup();
 8002cd8:	f000 f82a 	bl	8002d30 <prvUARTSetup>
}
 8002cdc:	bf00      	nop
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <printmsg>:

void printmsg(char *msg)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i<strlen(msg) ; i++)
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	e013      	b.n	8002d16 <printmsg+0x36>
	{
		//polling to check that the Date Register is Empty
		while(USART_GetFlagStatus(USART1, USART_FLAG_TXE)!=SET);
 8002cee:	bf00      	nop
 8002cf0:	2180      	movs	r1, #128	; 0x80
 8002cf2:	480e      	ldr	r0, [pc, #56]	; (8002d2c <printmsg+0x4c>)
 8002cf4:	f7fd fce4 	bl	80006c0 <USART_GetFlagStatus>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d1f8      	bne.n	8002cf0 <printmsg+0x10>
		//put our mesg in the UART Data Register
		USART_SendData(USART1,msg[i]);
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4413      	add	r3, r2
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4808      	ldr	r0, [pc, #32]	; (8002d2c <printmsg+0x4c>)
 8002d0c:	f7fd fcc7 	bl	800069e <USART_SendData>
	for(uint32_t i=0 ; i<strlen(msg) ; i++)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	3301      	adds	r3, #1
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fd fa1a 	bl	8000150 <strlen>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d8e4      	bhi.n	8002cee <printmsg+0xe>
	}

}
 8002d24:	bf00      	nop
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40013800 	.word	0x40013800

08002d30 <prvUARTSetup>:

void prvUARTSetup()
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
    USART_InitTypeDef usart1_init_struct;
    /* Bit configuration structure for GPIOA PIN9 and PIN10 */
    GPIO_InitTypeDef gpioa_init_struct;

    /* Enalbe clock for USART1, AFIO and GPIOA */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_AFIO |
 8002d36:	2101      	movs	r1, #1
 8002d38:	f244 0005 	movw	r0, #16389	; 0x4005
 8002d3c:	f7fd fbb8 	bl	80004b0 <RCC_APB2PeriphClockCmd>
                           RCC_APB2Periph_GPIOA, ENABLE);

    /* GPIOA PIN9 alternative function Tx */
    gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
 8002d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d44:	80bb      	strh	r3, [r7, #4]
    gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 8002d46:	2303      	movs	r3, #3
 8002d48:	71bb      	strb	r3, [r7, #6]
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
 8002d4a:	2318      	movs	r3, #24
 8002d4c:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &gpioa_init_struct);
 8002d4e:	1d3b      	adds	r3, r7, #4
 8002d50:	4619      	mov	r1, r3
 8002d52:	4815      	ldr	r0, [pc, #84]	; (8002da8 <prvUARTSetup+0x78>)
 8002d54:	f7fd fa16 	bl	8000184 <GPIO_Init>
    /* GPIOA PIN9 alternative function Rx */
    gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
 8002d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d5c:	80bb      	strh	r3, [r7, #4]
    gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	71bb      	strb	r3, [r7, #6]
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8002d62:	2304      	movs	r3, #4
 8002d64:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &gpioa_init_struct);
 8002d66:	1d3b      	adds	r3, r7, #4
 8002d68:	4619      	mov	r1, r3
 8002d6a:	480f      	ldr	r0, [pc, #60]	; (8002da8 <prvUARTSetup+0x78>)
 8002d6c:	f7fd fa0a 	bl	8000184 <GPIO_Init>

    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);
 8002d70:	2101      	movs	r1, #1
 8002d72:	480e      	ldr	r0, [pc, #56]	; (8002dac <prvUARTSetup+0x7c>)
 8002d74:	f7fd fc74 	bl	8000660 <USART_Cmd>
    /* Baud rate 9600, 8-bit data, One stop bit
     * No parity, Do both Rx and Tx, No HW flow control
     */
    usart1_init_struct.USART_BaudRate = 9600;
 8002d78:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002d7c:	60bb      	str	r3, [r7, #8]
    usart1_init_struct.USART_WordLength = USART_WordLength_8b;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	81bb      	strh	r3, [r7, #12]
    usart1_init_struct.USART_StopBits = USART_StopBits_1;
 8002d82:	2300      	movs	r3, #0
 8002d84:	81fb      	strh	r3, [r7, #14]
    usart1_init_struct.USART_Parity = USART_Parity_No ;
 8002d86:	2300      	movs	r3, #0
 8002d88:	823b      	strh	r3, [r7, #16]
    usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002d8a:	230c      	movs	r3, #12
 8002d8c:	827b      	strh	r3, [r7, #18]
    usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	82bb      	strh	r3, [r7, #20]
    USART_Init(USART1,&usart1_init_struct);
 8002d92:	f107 0308 	add.w	r3, r7, #8
 8002d96:	4619      	mov	r1, r3
 8002d98:	4804      	ldr	r0, [pc, #16]	; (8002dac <prvUARTSetup+0x7c>)
 8002d9a:	f7fd fba7 	bl	80004ec <USART_Init>
}
 8002d9e:	bf00      	nop
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40010800 	.word	0x40010800
 8002dac:	40013800 	.word	0x40013800

08002db0 <prvGPIOSetup>:

void prvGPIOSetup(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
	//Enable The clok for GPIOA , GPIOC
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
 8002db6:	2101      	movs	r1, #1
 8002db8:	2004      	movs	r0, #4
 8002dba:	f7fd fb79 	bl	80004b0 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC,ENABLE);
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	2010      	movs	r0, #16
 8002dc2:	f7fd fb75 	bl	80004b0 <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef led_init , Button_init ;

	//initialize the LED PC13
	led_init.GPIO_Mode = GPIO_Mode_Out_PP ;
 8002dc6:	2310      	movs	r3, #16
 8002dc8:	71fb      	strb	r3, [r7, #7]
	led_init.GPIO_Pin = GPIO_Pin_13 ;
 8002dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dce:	80bb      	strh	r3, [r7, #4]
	led_init.GPIO_Speed = GPIO_Speed_2MHz ;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC,&led_init);
 8002dd4:	1d3b      	adds	r3, r7, #4
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4808      	ldr	r0, [pc, #32]	; (8002dfc <prvGPIOSetup+0x4c>)
 8002dda:	f7fd f9d3 	bl	8000184 <GPIO_Init>

	//initialize the Button PA5
	Button_init.GPIO_Mode = GPIO_Mode_IPD ; // input pull down
 8002dde:	2328      	movs	r3, #40	; 0x28
 8002de0:	70fb      	strb	r3, [r7, #3]
	Button_init.GPIO_Pin = GPIO_Pin_5 ;
 8002de2:	2320      	movs	r3, #32
 8002de4:	803b      	strh	r3, [r7, #0]
	Button_init.GPIO_Speed = GPIO_Speed_2MHz ;
 8002de6:	2302      	movs	r3, #2
 8002de8:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOA,&Button_init);
 8002dea:	463b      	mov	r3, r7
 8002dec:	4619      	mov	r1, r3
 8002dee:	4804      	ldr	r0, [pc, #16]	; (8002e00 <prvGPIOSetup+0x50>)
 8002df0:	f7fd f9c8 	bl	8000184 <GPIO_Init>
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40011000 	.word	0x40011000
 8002e00:	40010800 	.word	0x40010800

08002e04 <RTOS_Delay>:

void RTOS_Delay(uint32_t delay_in_ms)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
	// get the Global tick count value which is incremented by systic every 1ms
	uint32_t current_tick_count = xTaskGetTickCount();
 8002e0c:	f7fe fa68 	bl	80012e0 <xTaskGetTickCount>
 8002e10:	60f8      	str	r0, [r7, #12]

	//configTICK_RATE_HZ/1000 will give us 1 (1ms)
	// Multiply 1 * delay_in_ms will get amount of delay in ms
	uint32_t delay_in_ticks = (delay_in_ms * configTICK_RATE_HZ)/1000 ;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e18:	fb02 f303 	mul.w	r3, r2, r3
 8002e1c:	4a08      	ldr	r2, [pc, #32]	; (8002e40 <RTOS_Delay+0x3c>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	099b      	lsrs	r3, r3, #6
 8002e24:	60bb      	str	r3, [r7, #8]
	while(xTaskGetTickCount() < (current_tick_count + delay_in_ticks)) ;
 8002e26:	bf00      	nop
 8002e28:	f7fe fa5a 	bl	80012e0 <xTaskGetTickCount>
 8002e2c:	4601      	mov	r1, r0
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4413      	add	r3, r2
 8002e34:	4299      	cmp	r1, r3
 8002e36:	d3f7      	bcc.n	8002e28 <RTOS_Delay+0x24>
}
 8002e38:	bf00      	nop
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	10624dd3 	.word	0x10624dd3

08002e44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002e48:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002e4a:	e003      	b.n	8002e54 <LoopCopyDataInit>

08002e4c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8002e4e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002e50:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002e52:	3104      	adds	r1, #4

08002e54 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002e54:	480b      	ldr	r0, [pc, #44]	; (8002e84 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8002e56:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8002e58:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002e5a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002e5c:	d3f6      	bcc.n	8002e4c <CopyDataInit>
	ldr	r2, =_sbss
 8002e5e:	4a0b      	ldr	r2, [pc, #44]	; (8002e8c <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8002e60:	e002      	b.n	8002e68 <LoopFillZerobss>

08002e62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002e62:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002e64:	f842 3b04 	str.w	r3, [r2], #4

08002e68 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002e68:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8002e6a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002e6c:	d3f9      	bcc.n	8002e62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e6e:	f000 f813 	bl	8002e98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e72:	f000 f8cb 	bl	800300c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e76:	f7ff fe93 	bl	8002ba0 <main>
	bx	lr
 8002e7a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e7c:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8002e80:	080031ac 	.word	0x080031ac
	ldr	r0, =_sdata
 8002e84:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002e88:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8002e8c:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8002e90:	20004098 	.word	0x20004098

08002e94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e94:	e7fe      	b.n	8002e94 <ADC1_2_IRQHandler>
	...

08002e98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002e9c:	4a15      	ldr	r2, [pc, #84]	; (8002ef4 <SystemInit+0x5c>)
 8002e9e:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <SystemInit+0x5c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8002ea8:	4912      	ldr	r1, [pc, #72]	; (8002ef4 <SystemInit+0x5c>)
 8002eaa:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <SystemInit+0x5c>)
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	4b12      	ldr	r3, [pc, #72]	; (8002ef8 <SystemInit+0x60>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002eb4:	4a0f      	ldr	r2, [pc, #60]	; (8002ef4 <SystemInit+0x5c>)
 8002eb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <SystemInit+0x5c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002ec4:	4a0b      	ldr	r2, [pc, #44]	; (8002ef4 <SystemInit+0x5c>)
 8002ec6:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <SystemInit+0x5c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ece:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002ed0:	4a08      	ldr	r2, [pc, #32]	; (8002ef4 <SystemInit+0x5c>)
 8002ed2:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <SystemInit+0x5c>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002eda:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <SystemInit+0x5c>)
 8002ede:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002ee2:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8002ee4:	f000 f80c 	bl	8002f00 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <SystemInit+0x64>)
 8002eea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002eee:	609a      	str	r2, [r3, #8]
#endif 
}
 8002ef0:	bf00      	nop
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	f8ff0000 	.word	0xf8ff0000
 8002efc:	e000ed00 	.word	0xe000ed00

08002f00 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8002f04:	f000 f802 	bl	8002f0c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8002f08:	bf00      	nop
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	607b      	str	r3, [r7, #4]
 8002f16:	2300      	movs	r3, #0
 8002f18:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002f1a:	4a3a      	ldr	r2, [pc, #232]	; (8003004 <SetSysClockTo72+0xf8>)
 8002f1c:	4b39      	ldr	r3, [pc, #228]	; (8003004 <SetSysClockTo72+0xf8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f24:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002f26:	4b37      	ldr	r3, [pc, #220]	; (8003004 <SetSysClockTo72+0xf8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3301      	adds	r3, #1
 8002f34:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d103      	bne.n	8002f44 <SetSysClockTo72+0x38>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002f42:	d1f0      	bne.n	8002f26 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002f44:	4b2f      	ldr	r3, [pc, #188]	; (8003004 <SetSysClockTo72+0xf8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d002      	beq.n	8002f56 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002f50:	2301      	movs	r3, #1
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	e001      	b.n	8002f5a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002f56:	2300      	movs	r3, #0
 8002f58:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d14b      	bne.n	8002ff8 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002f60:	4a29      	ldr	r2, [pc, #164]	; (8003008 <SetSysClockTo72+0xfc>)
 8002f62:	4b29      	ldr	r3, [pc, #164]	; (8003008 <SetSysClockTo72+0xfc>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f043 0310 	orr.w	r3, r3, #16
 8002f6a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8002f6c:	4a26      	ldr	r2, [pc, #152]	; (8003008 <SetSysClockTo72+0xfc>)
 8002f6e:	4b26      	ldr	r3, [pc, #152]	; (8003008 <SetSysClockTo72+0xfc>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 0303 	bic.w	r3, r3, #3
 8002f76:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8002f78:	4a23      	ldr	r2, [pc, #140]	; (8003008 <SetSysClockTo72+0xfc>)
 8002f7a:	4b23      	ldr	r3, [pc, #140]	; (8003008 <SetSysClockTo72+0xfc>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f043 0302 	orr.w	r3, r3, #2
 8002f82:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002f84:	4a1f      	ldr	r2, [pc, #124]	; (8003004 <SetSysClockTo72+0xf8>)
 8002f86:	4b1f      	ldr	r3, [pc, #124]	; (8003004 <SetSysClockTo72+0xf8>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002f8c:	4a1d      	ldr	r2, [pc, #116]	; (8003004 <SetSysClockTo72+0xf8>)
 8002f8e:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <SetSysClockTo72+0xf8>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002f94:	4a1b      	ldr	r2, [pc, #108]	; (8003004 <SetSysClockTo72+0xf8>)
 8002f96:	4b1b      	ldr	r3, [pc, #108]	; (8003004 <SetSysClockTo72+0xf8>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f9e:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8002fa0:	4a18      	ldr	r2, [pc, #96]	; (8003004 <SetSysClockTo72+0xf8>)
 8002fa2:	4b18      	ldr	r3, [pc, #96]	; (8003004 <SetSysClockTo72+0xf8>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002faa:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8002fac:	4a15      	ldr	r2, [pc, #84]	; (8003004 <SetSysClockTo72+0xf8>)
 8002fae:	4b15      	ldr	r3, [pc, #84]	; (8003004 <SetSysClockTo72+0xf8>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8002fb6:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002fb8:	4a12      	ldr	r2, [pc, #72]	; (8003004 <SetSysClockTo72+0xf8>)
 8002fba:	4b12      	ldr	r3, [pc, #72]	; (8003004 <SetSysClockTo72+0xf8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fc2:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002fc4:	bf00      	nop
 8002fc6:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <SetSysClockTo72+0xf8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0f9      	beq.n	8002fc6 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002fd2:	4a0c      	ldr	r2, [pc, #48]	; (8003004 <SetSysClockTo72+0xf8>)
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <SetSysClockTo72+0xf8>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f023 0303 	bic.w	r3, r3, #3
 8002fdc:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8002fde:	4a09      	ldr	r2, [pc, #36]	; (8003004 <SetSysClockTo72+0xf8>)
 8002fe0:	4b08      	ldr	r3, [pc, #32]	; (8003004 <SetSysClockTo72+0xf8>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f043 0302 	orr.w	r3, r3, #2
 8002fe8:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8002fea:	bf00      	nop
 8002fec:	4b05      	ldr	r3, [pc, #20]	; (8003004 <SetSysClockTo72+0xf8>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 030c 	and.w	r3, r3, #12
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d1f9      	bne.n	8002fec <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	40021000 	.word	0x40021000
 8003008:	40022000 	.word	0x40022000

0800300c <__libc_init_array>:
 800300c:	b570      	push	{r4, r5, r6, lr}
 800300e:	2500      	movs	r5, #0
 8003010:	4e0c      	ldr	r6, [pc, #48]	; (8003044 <__libc_init_array+0x38>)
 8003012:	4c0d      	ldr	r4, [pc, #52]	; (8003048 <__libc_init_array+0x3c>)
 8003014:	1ba4      	subs	r4, r4, r6
 8003016:	10a4      	asrs	r4, r4, #2
 8003018:	42a5      	cmp	r5, r4
 800301a:	d109      	bne.n	8003030 <__libc_init_array+0x24>
 800301c:	f000 f83c 	bl	8003098 <_init>
 8003020:	2500      	movs	r5, #0
 8003022:	4e0a      	ldr	r6, [pc, #40]	; (800304c <__libc_init_array+0x40>)
 8003024:	4c0a      	ldr	r4, [pc, #40]	; (8003050 <__libc_init_array+0x44>)
 8003026:	1ba4      	subs	r4, r4, r6
 8003028:	10a4      	asrs	r4, r4, #2
 800302a:	42a5      	cmp	r5, r4
 800302c:	d105      	bne.n	800303a <__libc_init_array+0x2e>
 800302e:	bd70      	pop	{r4, r5, r6, pc}
 8003030:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003034:	4798      	blx	r3
 8003036:	3501      	adds	r5, #1
 8003038:	e7ee      	b.n	8003018 <__libc_init_array+0xc>
 800303a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800303e:	4798      	blx	r3
 8003040:	3501      	adds	r5, #1
 8003042:	e7f2      	b.n	800302a <__libc_init_array+0x1e>
 8003044:	080031a4 	.word	0x080031a4
 8003048:	080031a4 	.word	0x080031a4
 800304c:	080031a4 	.word	0x080031a4
 8003050:	080031a8 	.word	0x080031a8

08003054 <memcmp>:
 8003054:	b510      	push	{r4, lr}
 8003056:	3901      	subs	r1, #1
 8003058:	4402      	add	r2, r0
 800305a:	4290      	cmp	r0, r2
 800305c:	d101      	bne.n	8003062 <memcmp+0xe>
 800305e:	2000      	movs	r0, #0
 8003060:	bd10      	pop	{r4, pc}
 8003062:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003066:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800306a:	42a3      	cmp	r3, r4
 800306c:	d0f5      	beq.n	800305a <memcmp+0x6>
 800306e:	1b18      	subs	r0, r3, r4
 8003070:	bd10      	pop	{r4, pc}

08003072 <memcpy>:
 8003072:	b510      	push	{r4, lr}
 8003074:	1e43      	subs	r3, r0, #1
 8003076:	440a      	add	r2, r1
 8003078:	4291      	cmp	r1, r2
 800307a:	d100      	bne.n	800307e <memcpy+0xc>
 800307c:	bd10      	pop	{r4, pc}
 800307e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003082:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003086:	e7f7      	b.n	8003078 <memcpy+0x6>

08003088 <memset>:
 8003088:	4603      	mov	r3, r0
 800308a:	4402      	add	r2, r0
 800308c:	4293      	cmp	r3, r2
 800308e:	d100      	bne.n	8003092 <memset+0xa>
 8003090:	4770      	bx	lr
 8003092:	f803 1b01 	strb.w	r1, [r3], #1
 8003096:	e7f9      	b.n	800308c <memset+0x4>

08003098 <_init>:
 8003098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309a:	bf00      	nop
 800309c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800309e:	bc08      	pop	{r3}
 80030a0:	469e      	mov	lr, r3
 80030a2:	4770      	bx	lr

080030a4 <_fini>:
 80030a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a6:	bf00      	nop
 80030a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030aa:	bc08      	pop	{r3}
 80030ac:	469e      	mov	lr, r3
 80030ae:	4770      	bx	lr
