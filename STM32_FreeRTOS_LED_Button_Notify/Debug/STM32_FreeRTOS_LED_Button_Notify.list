
STM32_FreeRTOS_LED_Button_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ad8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003d14  08003d14  00013d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003d18  08003d18  00013d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  20000000  08003d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004090  2000007c  08003d98  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  2000410c  08003d98  0002410c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d80e  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001d69  00000000  00000000  0002d8b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b00  00000000  00000000  0002f620  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a18  00000000  00000000  00030120  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000551e  00000000  00000000  00030b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003b04  00000000  00000000  00036056  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00039b5a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000031c8  00000000  00000000  00039bd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003bd0 	.word	0x08003bd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08003bd0 	.word	0x08003bd0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000160:	b480      	push	{r7}
 8000162:	b083      	sub	sp, #12
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000168:	4a05      	ldr	r2, [pc, #20]	; (8000180 <NVIC_PriorityGroupConfig+0x20>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000174:	60d3      	str	r3, [r2, #12]
}
 8000176:	bf00      	nop
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	e000ed00 	.word	0xe000ed00

08000184 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000184:	b480      	push	{r7}
 8000186:	b089      	sub	sp, #36	; 0x24
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800018e:	2300      	movs	r3, #0
 8000190:	61fb      	str	r3, [r7, #28]
 8000192:	2300      	movs	r3, #0
 8000194:	613b      	str	r3, [r7, #16]
 8000196:	2300      	movs	r3, #0
 8000198:	61bb      	str	r3, [r7, #24]
 800019a:	2300      	movs	r3, #0
 800019c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800019e:	2300      	movs	r3, #0
 80001a0:	617b      	str	r3, [r7, #20]
 80001a2:	2300      	movs	r3, #0
 80001a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80001a6:	683b      	ldr	r3, [r7, #0]
 80001a8:	78db      	ldrb	r3, [r3, #3]
 80001aa:	f003 030f 	and.w	r3, r3, #15
 80001ae:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	78db      	ldrb	r3, [r3, #3]
 80001b4:	f003 0310 	and.w	r3, r3, #16
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d005      	beq.n	80001c8 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80001bc:	683b      	ldr	r3, [r7, #0]
 80001be:	789b      	ldrb	r3, [r3, #2]
 80001c0:	461a      	mov	r2, r3
 80001c2:	69fb      	ldr	r3, [r7, #28]
 80001c4:	4313      	orrs	r3, r2
 80001c6:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80001c8:	683b      	ldr	r3, [r7, #0]
 80001ca:	881b      	ldrh	r3, [r3, #0]
 80001cc:	b2db      	uxtb	r3, r3
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d044      	beq.n	800025c <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80001d8:	2300      	movs	r3, #0
 80001da:	61bb      	str	r3, [r7, #24]
 80001dc:	e038      	b.n	8000250 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80001de:	2201      	movs	r2, #1
 80001e0:	69bb      	ldr	r3, [r7, #24]
 80001e2:	fa02 f303 	lsl.w	r3, r2, r3
 80001e6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	881b      	ldrh	r3, [r3, #0]
 80001ec:	461a      	mov	r2, r3
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	4013      	ands	r3, r2
 80001f2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80001f4:	693a      	ldr	r2, [r7, #16]
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	429a      	cmp	r2, r3
 80001fa:	d126      	bne.n	800024a <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80001fc:	69bb      	ldr	r3, [r7, #24]
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000202:	220f      	movs	r2, #15
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	fa02 f303 	lsl.w	r3, r2, r3
 800020a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800020c:	68bb      	ldr	r3, [r7, #8]
 800020e:	43db      	mvns	r3, r3
 8000210:	697a      	ldr	r2, [r7, #20]
 8000212:	4013      	ands	r3, r2
 8000214:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000216:	69fa      	ldr	r2, [r7, #28]
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	fa02 f303 	lsl.w	r3, r2, r3
 800021e:	697a      	ldr	r2, [r7, #20]
 8000220:	4313      	orrs	r3, r2
 8000222:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	78db      	ldrb	r3, [r3, #3]
 8000228:	2b28      	cmp	r3, #40	; 0x28
 800022a:	d105      	bne.n	8000238 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800022c:	2201      	movs	r2, #1
 800022e:	69bb      	ldr	r3, [r7, #24]
 8000230:	409a      	lsls	r2, r3
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	615a      	str	r2, [r3, #20]
 8000236:	e008      	b.n	800024a <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	78db      	ldrb	r3, [r3, #3]
 800023c:	2b48      	cmp	r3, #72	; 0x48
 800023e:	d104      	bne.n	800024a <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000240:	2201      	movs	r2, #1
 8000242:	69bb      	ldr	r3, [r7, #24]
 8000244:	409a      	lsls	r2, r3
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800024a:	69bb      	ldr	r3, [r7, #24]
 800024c:	3301      	adds	r3, #1
 800024e:	61bb      	str	r3, [r7, #24]
 8000250:	69bb      	ldr	r3, [r7, #24]
 8000252:	2b07      	cmp	r3, #7
 8000254:	d9c3      	bls.n	80001de <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	697a      	ldr	r2, [r7, #20]
 800025a:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	2bff      	cmp	r3, #255	; 0xff
 8000262:	d946      	bls.n	80002f2 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800026a:	2300      	movs	r3, #0
 800026c:	61bb      	str	r3, [r7, #24]
 800026e:	e03a      	b.n	80002e6 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000270:	69bb      	ldr	r3, [r7, #24]
 8000272:	3308      	adds	r3, #8
 8000274:	2201      	movs	r2, #1
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	881b      	ldrh	r3, [r3, #0]
 8000280:	461a      	mov	r2, r3
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	4013      	ands	r3, r2
 8000286:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000288:	693a      	ldr	r2, [r7, #16]
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	429a      	cmp	r2, r3
 800028e:	d127      	bne.n	80002e0 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000290:	69bb      	ldr	r3, [r7, #24]
 8000292:	009b      	lsls	r3, r3, #2
 8000294:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000296:	220f      	movs	r2, #15
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	fa02 f303 	lsl.w	r3, r2, r3
 800029e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	43db      	mvns	r3, r3
 80002a4:	697a      	ldr	r2, [r7, #20]
 80002a6:	4013      	ands	r3, r2
 80002a8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80002aa:	69fa      	ldr	r2, [r7, #28]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	697a      	ldr	r2, [r7, #20]
 80002b4:	4313      	orrs	r3, r2
 80002b6:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	78db      	ldrb	r3, [r3, #3]
 80002bc:	2b28      	cmp	r3, #40	; 0x28
 80002be:	d105      	bne.n	80002cc <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80002c0:	69bb      	ldr	r3, [r7, #24]
 80002c2:	3308      	adds	r3, #8
 80002c4:	2201      	movs	r2, #1
 80002c6:	409a      	lsls	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	78db      	ldrb	r3, [r3, #3]
 80002d0:	2b48      	cmp	r3, #72	; 0x48
 80002d2:	d105      	bne.n	80002e0 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80002d4:	69bb      	ldr	r3, [r7, #24]
 80002d6:	3308      	adds	r3, #8
 80002d8:	2201      	movs	r2, #1
 80002da:	409a      	lsls	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002e0:	69bb      	ldr	r3, [r7, #24]
 80002e2:	3301      	adds	r3, #1
 80002e4:	61bb      	str	r3, [r7, #24]
 80002e6:	69bb      	ldr	r3, [r7, #24]
 80002e8:	2b07      	cmp	r3, #7
 80002ea:	d9c1      	bls.n	8000270 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	697a      	ldr	r2, [r7, #20]
 80002f0:	605a      	str	r2, [r3, #4]
  }
}
 80002f2:	bf00      	nop
 80002f4:	3724      	adds	r7, #36	; 0x24
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr

080002fc <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	460b      	mov	r3, r1
 8000306:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000308:	2300      	movs	r3, #0
 800030a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	689a      	ldr	r2, [r3, #8]
 8000310:	887b      	ldrh	r3, [r7, #2]
 8000312:	4013      	ands	r3, r2
 8000314:	2b00      	cmp	r3, #0
 8000316:	d002      	beq.n	800031e <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000318:	2301      	movs	r3, #1
 800031a:	73fb      	strb	r3, [r7, #15]
 800031c:	e001      	b.n	8000322 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800031e:	2300      	movs	r3, #0
 8000320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000322:	7bfb      	ldrb	r3, [r7, #15]
}
 8000324:	4618      	mov	r0, r3
 8000326:	3714      	adds	r7, #20
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr

0800032e <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800032e:	b480      	push	{r7}
 8000330:	b083      	sub	sp, #12
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
 8000336:	460b      	mov	r3, r1
 8000338:	807b      	strh	r3, [r7, #2]
 800033a:	4613      	mov	r3, r2
 800033c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 800033e:	787b      	ldrb	r3, [r7, #1]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d003      	beq.n	800034c <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000344:	887a      	ldrh	r2, [r7, #2]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 800034a:	e002      	b.n	8000352 <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 800034c:	887a      	ldrh	r2, [r7, #2]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	615a      	str	r2, [r3, #20]
}
 8000352:	bf00      	nop
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr

0800035c <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800035c:	b480      	push	{r7}
 800035e:	b087      	sub	sp, #28
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000364:	2300      	movs	r3, #0
 8000366:	617b      	str	r3, [r7, #20]
 8000368:	2300      	movs	r3, #0
 800036a:	613b      	str	r3, [r7, #16]
 800036c:	2300      	movs	r3, #0
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	2300      	movs	r3, #0
 8000372:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000374:	4b4c      	ldr	r3, [pc, #304]	; (80004a8 <RCC_GetClocksFreq+0x14c>)
 8000376:	685b      	ldr	r3, [r3, #4]
 8000378:	f003 030c 	and.w	r3, r3, #12
 800037c:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	2b04      	cmp	r3, #4
 8000382:	d007      	beq.n	8000394 <RCC_GetClocksFreq+0x38>
 8000384:	2b08      	cmp	r3, #8
 8000386:	d009      	beq.n	800039c <RCC_GetClocksFreq+0x40>
 8000388:	2b00      	cmp	r3, #0
 800038a:	d133      	bne.n	80003f4 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a47      	ldr	r2, [pc, #284]	; (80004ac <RCC_GetClocksFreq+0x150>)
 8000390:	601a      	str	r2, [r3, #0]
      break;
 8000392:	e033      	b.n	80003fc <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a45      	ldr	r2, [pc, #276]	; (80004ac <RCC_GetClocksFreq+0x150>)
 8000398:	601a      	str	r2, [r3, #0]
      break;
 800039a:	e02f      	b.n	80003fc <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800039c:	4b42      	ldr	r3, [pc, #264]	; (80004a8 <RCC_GetClocksFreq+0x14c>)
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80003a4:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80003a6:	4b40      	ldr	r3, [pc, #256]	; (80004a8 <RCC_GetClocksFreq+0x14c>)
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003ae:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80003b0:	693b      	ldr	r3, [r7, #16]
 80003b2:	0c9b      	lsrs	r3, r3, #18
 80003b4:	3302      	adds	r3, #2
 80003b6:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d106      	bne.n	80003cc <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80003be:	693b      	ldr	r3, [r7, #16]
 80003c0:	4a3b      	ldr	r2, [pc, #236]	; (80004b0 <RCC_GetClocksFreq+0x154>)
 80003c2:	fb02 f203 	mul.w	r2, r2, r3
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80003ca:	e017      	b.n	80003fc <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80003cc:	4b36      	ldr	r3, [pc, #216]	; (80004a8 <RCC_GetClocksFreq+0x14c>)
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d006      	beq.n	80003e6 <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80003d8:	693b      	ldr	r3, [r7, #16]
 80003da:	4a35      	ldr	r2, [pc, #212]	; (80004b0 <RCC_GetClocksFreq+0x154>)
 80003dc:	fb02 f203 	mul.w	r2, r2, r3
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	601a      	str	r2, [r3, #0]
      break;
 80003e4:	e00a      	b.n	80003fc <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	4a30      	ldr	r2, [pc, #192]	; (80004ac <RCC_GetClocksFreq+0x150>)
 80003ea:	fb02 f203 	mul.w	r2, r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	601a      	str	r2, [r3, #0]
      break;
 80003f2:	e003      	b.n	80003fc <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4a2d      	ldr	r2, [pc, #180]	; (80004ac <RCC_GetClocksFreq+0x150>)
 80003f8:	601a      	str	r2, [r3, #0]
      break;
 80003fa:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80003fc:	4b2a      	ldr	r3, [pc, #168]	; (80004a8 <RCC_GetClocksFreq+0x14c>)
 80003fe:	685b      	ldr	r3, [r3, #4]
 8000400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000404:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	091b      	lsrs	r3, r3, #4
 800040a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800040c:	4a29      	ldr	r2, [pc, #164]	; (80004b4 <RCC_GetClocksFreq+0x158>)
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	4413      	add	r3, r2
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	b2db      	uxtb	r3, r3
 8000416:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	40da      	lsrs	r2, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000424:	4b20      	ldr	r3, [pc, #128]	; (80004a8 <RCC_GetClocksFreq+0x14c>)
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800042c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	0a1b      	lsrs	r3, r3, #8
 8000432:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000434:	4a1f      	ldr	r2, [pc, #124]	; (80004b4 <RCC_GetClocksFreq+0x158>)
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	4413      	add	r3, r2
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	b2db      	uxtb	r3, r3
 800043e:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	685a      	ldr	r2, [r3, #4]
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	40da      	lsrs	r2, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800044c:	4b16      	ldr	r3, [pc, #88]	; (80004a8 <RCC_GetClocksFreq+0x14c>)
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000454:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	0adb      	lsrs	r3, r3, #11
 800045a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800045c:	4a15      	ldr	r2, [pc, #84]	; (80004b4 <RCC_GetClocksFreq+0x158>)
 800045e:	697b      	ldr	r3, [r7, #20]
 8000460:	4413      	add	r3, r2
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	b2db      	uxtb	r3, r3
 8000466:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	685a      	ldr	r2, [r3, #4]
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	40da      	lsrs	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <RCC_GetClocksFreq+0x14c>)
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800047c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	0b9b      	lsrs	r3, r3, #14
 8000482:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000484:	4a0c      	ldr	r2, [pc, #48]	; (80004b8 <RCC_GetClocksFreq+0x15c>)
 8000486:	697b      	ldr	r3, [r7, #20]
 8000488:	4413      	add	r3, r2
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	b2db      	uxtb	r3, r3
 800048e:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	68da      	ldr	r2, [r3, #12]
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	fbb2 f2f3 	udiv	r2, r2, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	611a      	str	r2, [r3, #16]
}
 800049e:	bf00      	nop
 80004a0:	371c      	adds	r7, #28
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr
 80004a8:	40021000 	.word	0x40021000
 80004ac:	007a1200 	.word	0x007a1200
 80004b0:	003d0900 	.word	0x003d0900
 80004b4:	20000000 	.word	0x20000000
 80004b8:	20000010 	.word	0x20000010

080004bc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	460b      	mov	r3, r1
 80004c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80004c8:	78fb      	ldrb	r3, [r7, #3]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d006      	beq.n	80004dc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80004ce:	4909      	ldr	r1, [pc, #36]	; (80004f4 <RCC_APB2PeriphClockCmd+0x38>)
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <RCC_APB2PeriphClockCmd+0x38>)
 80004d2:	699a      	ldr	r2, [r3, #24]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4313      	orrs	r3, r2
 80004d8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80004da:	e006      	b.n	80004ea <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80004dc:	4905      	ldr	r1, [pc, #20]	; (80004f4 <RCC_APB2PeriphClockCmd+0x38>)
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <RCC_APB2PeriphClockCmd+0x38>)
 80004e0:	699a      	ldr	r2, [r3, #24]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	43db      	mvns	r3, r3
 80004e6:	4013      	ands	r3, r2
 80004e8:	618b      	str	r3, [r1, #24]
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	40021000 	.word	0x40021000

080004f8 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08c      	sub	sp, #48	; 0x30
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000502:	2300      	movs	r3, #0
 8000504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000506:	2300      	movs	r3, #0
 8000508:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 800050a:	2300      	movs	r3, #0
 800050c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 800050e:	2300      	movs	r3, #0
 8000510:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	8a1b      	ldrh	r3, [r3, #16]
 800051e:	b29b      	uxth	r3, r3
 8000520:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8000522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000524:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8000528:	4013      	ands	r3, r2
 800052a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	88db      	ldrh	r3, [r3, #6]
 8000530:	461a      	mov	r2, r3
 8000532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000534:	4313      	orrs	r3, r2
 8000536:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800053a:	b29a      	uxth	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	899b      	ldrh	r3, [r3, #12]
 8000544:	b29b      	uxth	r3, r3
 8000546:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800054a:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 800054e:	4013      	ands	r3, r2
 8000550:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	889a      	ldrh	r2, [r3, #4]
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	891b      	ldrh	r3, [r3, #8]
 800055a:	4313      	orrs	r3, r2
 800055c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000562:	4313      	orrs	r3, r2
 8000564:	b29b      	uxth	r3, r3
 8000566:	461a      	mov	r2, r3
 8000568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800056a:	4313      	orrs	r3, r2
 800056c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800056e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000570:	b29a      	uxth	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	8a9b      	ldrh	r3, [r3, #20]
 800057a:	b29b      	uxth	r3, r3
 800057c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 800057e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000580:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000584:	4013      	ands	r3, r2
 8000586:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	899b      	ldrh	r3, [r3, #12]
 800058c:	461a      	mov	r2, r3
 800058e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000590:	4313      	orrs	r3, r2
 8000592:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000596:	b29a      	uxth	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800059c:	f107 0308 	add.w	r3, r7, #8
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff fedb 	bl	800035c <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	4a2e      	ldr	r2, [pc, #184]	; (8000664 <USART_Init+0x16c>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d102      	bne.n	80005b4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80005b2:	e001      	b.n	80005b8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80005b4:	693b      	ldr	r3, [r7, #16]
 80005b6:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	899b      	ldrh	r3, [r3, #12]
 80005bc:	b29b      	uxth	r3, r3
 80005be:	b21b      	sxth	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	da0c      	bge.n	80005de <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80005c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005c6:	4613      	mov	r3, r2
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	4413      	add	r3, r2
 80005cc:	009a      	lsls	r2, r3, #2
 80005ce:	441a      	add	r2, r3
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005da:	627b      	str	r3, [r7, #36]	; 0x24
 80005dc:	e00b      	b.n	80005f6 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80005de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005e0:	4613      	mov	r3, r2
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	4413      	add	r3, r2
 80005e6:	009a      	lsls	r2, r3, #2
 80005e8:	441a      	add	r2, r3
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 80005f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f8:	4a1b      	ldr	r2, [pc, #108]	; (8000668 <USART_Init+0x170>)
 80005fa:	fba2 2303 	umull	r2, r3, r2, r3
 80005fe:	095b      	lsrs	r3, r3, #5
 8000600:	011b      	lsls	r3, r3, #4
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000606:	091b      	lsrs	r3, r3, #4
 8000608:	2264      	movs	r2, #100	; 0x64
 800060a:	fb02 f303 	mul.w	r3, r2, r3
 800060e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	899b      	ldrh	r3, [r3, #12]
 8000618:	b29b      	uxth	r3, r3
 800061a:	b21b      	sxth	r3, r3
 800061c:	2b00      	cmp	r3, #0
 800061e:	da0c      	bge.n	800063a <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000620:	6a3b      	ldr	r3, [r7, #32]
 8000622:	00db      	lsls	r3, r3, #3
 8000624:	3332      	adds	r3, #50	; 0x32
 8000626:	4a10      	ldr	r2, [pc, #64]	; (8000668 <USART_Init+0x170>)
 8000628:	fba2 2303 	umull	r2, r3, r2, r3
 800062c:	095b      	lsrs	r3, r3, #5
 800062e:	f003 0307 	and.w	r3, r3, #7
 8000632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000634:	4313      	orrs	r3, r2
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000638:	e00b      	b.n	8000652 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800063a:	6a3b      	ldr	r3, [r7, #32]
 800063c:	011b      	lsls	r3, r3, #4
 800063e:	3332      	adds	r3, #50	; 0x32
 8000640:	4a09      	ldr	r2, [pc, #36]	; (8000668 <USART_Init+0x170>)
 8000642:	fba2 2303 	umull	r2, r3, r2, r3
 8000646:	095b      	lsrs	r3, r3, #5
 8000648:	f003 030f 	and.w	r3, r3, #15
 800064c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800064e:	4313      	orrs	r3, r2
 8000650:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000654:	b29a      	uxth	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	811a      	strh	r2, [r3, #8]
}
 800065a:	bf00      	nop
 800065c:	3730      	adds	r7, #48	; 0x30
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40013800 	.word	0x40013800
 8000668:	51eb851f 	.word	0x51eb851f

0800066c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000678:	78fb      	ldrb	r3, [r7, #3]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d008      	beq.n	8000690 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	899b      	ldrh	r3, [r3, #12]
 8000682:	b29b      	uxth	r3, r3
 8000684:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000688:	b29a      	uxth	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 800068e:	e007      	b.n	80006a0 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	899b      	ldrh	r3, [r3, #12]
 8000694:	b29b      	uxth	r3, r3
 8000696:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800069a:	b29a      	uxth	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	819a      	strh	r2, [r3, #12]
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr

080006aa <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80006aa:	b480      	push	{r7}
 80006ac:	b083      	sub	sp, #12
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
 80006b2:	460b      	mov	r3, r1
 80006b4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80006b6:	887b      	ldrh	r3, [r7, #2]
 80006b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006bc:	b29a      	uxth	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	809a      	strh	r2, [r3, #4]
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80006d8:	2300      	movs	r3, #0
 80006da:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	887b      	ldrh	r3, [r7, #2]
 80006e4:	4013      	ands	r3, r2
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d002      	beq.n	80006f2 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80006ec:	2301      	movs	r3, #1
 80006ee:	73fb      	strb	r3, [r7, #15]
 80006f0:	e001      	b.n	80006f6 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80006f2:	2300      	movs	r3, #0
 80006f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr

08000702 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	f103 0208 	add.w	r2, r3, #8
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f04f 32ff 	mov.w	r2, #4294967295
 800071a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f103 0208 	add.w	r2, r3, #8
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f103 0208 	add.w	r2, r3, #8
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr

08000740 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	689a      	ldr	r2, [r3, #8]
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	689b      	ldr	r3, [r3, #8]
 800077a:	683a      	ldr	r2, [r7, #0]
 800077c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	683a      	ldr	r2, [r7, #0]
 8000782:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	601a      	str	r2, [r3, #0]
}
 8000794:	bf00      	nop
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr

0800079e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800079e:	b480      	push	{r7}
 80007a0:	b085      	sub	sp, #20
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
 80007a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007b4:	d103      	bne.n	80007be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	691b      	ldr	r3, [r3, #16]
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	e00c      	b.n	80007d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	3308      	adds	r3, #8
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	e002      	b.n	80007cc <vListInsert+0x2e>
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d9f6      	bls.n	80007c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	685a      	ldr	r2, [r3, #4]
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	683a      	ldr	r2, [r7, #0]
 80007e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	683a      	ldr	r2, [r7, #0]
 80007f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	1c5a      	adds	r2, r3, #1
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	601a      	str	r2, [r3, #0]
}
 8000804:	bf00      	nop
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr

0800080e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800080e:	b480      	push	{r7}
 8000810:	b085      	sub	sp, #20
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	691b      	ldr	r3, [r3, #16]
 800081a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	6892      	ldr	r2, [r2, #8]
 8000824:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	6852      	ldr	r2, [r2, #4]
 800082e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	685a      	ldr	r2, [r3, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	429a      	cmp	r2, r3
 8000838:	d103      	bne.n	8000842 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	689a      	ldr	r2, [r3, #8]
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	1e5a      	subs	r2, r3, #1
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	681b      	ldr	r3, [r3, #0]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3714      	adds	r7, #20
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	3b04      	subs	r3, #4
 8000870:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000878:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	3b04      	subs	r3, #4
 800087e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	f023 0201 	bic.w	r2, r3, #1
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	3b04      	subs	r3, #4
 800088e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000890:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <pxPortInitialiseStack+0x54>)
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	3b14      	subs	r3, #20
 800089a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	3b20      	subs	r3, #32
 80008a6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80008a8:	68fb      	ldr	r3, [r7, #12]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	080008b9 	.word	0x080008b9

080008b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80008c2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80008c6:	f383 8811 	msr	BASEPRI, r3
 80008ca:	f3bf 8f6f 	isb	sy
 80008ce:	f3bf 8f4f 	dsb	sy
 80008d2:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80008d4:	bf00      	nop
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d0fc      	beq.n	80008d6 <prvTaskExitError+0x1e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
	...

080008f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <pxCurrentTCBConst2>)
 80008f2:	6819      	ldr	r1, [r3, #0]
 80008f4:	6808      	ldr	r0, [r1, #0]
 80008f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80008fa:	f380 8809 	msr	PSP, r0
 80008fe:	f3bf 8f6f 	isb	sy
 8000902:	f04f 0000 	mov.w	r0, #0
 8000906:	f380 8811 	msr	BASEPRI, r0
 800090a:	f04e 0e0d 	orr.w	lr, lr, #13
 800090e:	4770      	bx	lr

08000910 <pxCurrentTCBConst2>:
 8000910:	200038b8 	.word	0x200038b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000914:	bf00      	nop
 8000916:	bf00      	nop

08000918 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000918:	4806      	ldr	r0, [pc, #24]	; (8000934 <prvPortStartFirstTask+0x1c>)
 800091a:	6800      	ldr	r0, [r0, #0]
 800091c:	6800      	ldr	r0, [r0, #0]
 800091e:	f380 8808 	msr	MSP, r0
 8000922:	b662      	cpsie	i
 8000924:	b661      	cpsie	f
 8000926:	f3bf 8f4f 	dsb	sy
 800092a:	f3bf 8f6f 	isb	sy
 800092e:	df00      	svc	0
 8000930:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000932:	bf00      	nop
 8000934:	e000ed08 	.word	0xe000ed08

08000938 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800093c:	4a0c      	ldr	r2, [pc, #48]	; (8000970 <xPortStartScheduler+0x38>)
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <xPortStartScheduler+0x38>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000946:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000948:	4a09      	ldr	r2, [pc, #36]	; (8000970 <xPortStartScheduler+0x38>)
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <xPortStartScheduler+0x38>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000952:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000954:	f000 f890 	bl	8000a78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <xPortStartScheduler+0x3c>)
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800095e:	f7ff ffdb 	bl	8000918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000962:	f000 fd1f 	bl	80013a4 <vTaskSwitchContext>
	prvTaskExitError();
 8000966:	f7ff ffa7 	bl	80008b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800096a:	2300      	movs	r3, #0
}
 800096c:	4618      	mov	r0, r3
 800096e:	bd80      	pop	{r7, pc}
 8000970:	e000ed20 	.word	0xe000ed20
 8000974:	20000014 	.word	0x20000014

08000978 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000982:	f383 8811 	msr	BASEPRI, r3
 8000986:	f3bf 8f6f 	isb	sy
 800098a:	f3bf 8f4f 	dsb	sy
 800098e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <vPortEnterCritical+0x2c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	3301      	adds	r3, #1
 8000996:	4a03      	ldr	r2, [pc, #12]	; (80009a4 <vPortEnterCritical+0x2c>)
 8000998:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	20000014 	.word	0x20000014

080009a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <vPortExitCritical+0x2c>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <vPortExitCritical+0x2c>)
 80009b6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <vPortExitCritical+0x2c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d104      	bne.n	80009ca <vPortExitCritical+0x22>
 80009c0:	2300      	movs	r3, #0
 80009c2:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	20000014 	.word	0x20000014
	...

080009e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80009e0:	f3ef 8009 	mrs	r0, PSP
 80009e4:	f3bf 8f6f 	isb	sy
 80009e8:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <pxCurrentTCBConst>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80009f0:	6010      	str	r0, [r2, #0]
 80009f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80009f6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80009fa:	f380 8811 	msr	BASEPRI, r0
 80009fe:	f000 fcd1 	bl	80013a4 <vTaskSwitchContext>
 8000a02:	f04f 0000 	mov.w	r0, #0
 8000a06:	f380 8811 	msr	BASEPRI, r0
 8000a0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000a0e:	6819      	ldr	r1, [r3, #0]
 8000a10:	6808      	ldr	r0, [r1, #0]
 8000a12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000a16:	f380 8809 	msr	PSP, r0
 8000a1a:	f3bf 8f6f 	isb	sy
 8000a1e:	4770      	bx	lr

08000a20 <pxCurrentTCBConst>:
 8000a20:	200038b8 	.word	0x200038b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000a24:	bf00      	nop
 8000a26:	bf00      	nop

08000a28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8000a2e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000a32:	f383 8811 	msr	BASEPRI, r3
 8000a36:	f3bf 8f6f 	isb	sy
 8000a3a:	f3bf 8f4f 	dsb	sy
 8000a3e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8000a40:	f001 fef6 	bl	8002830 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000a44:	f000 fc02 	bl	800124c <xTaskIncrementTick>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d006      	beq.n	8000a5c <SysTick_Handler+0x34>
		{
      traceISR_EXIT_TO_SCHEDULER();
 8000a4e:	f001 ff4d 	bl	80028ec <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <SysTick_Handler+0x4c>)
 8000a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	e001      	b.n	8000a60 <SysTick_Handler+0x38>
		}
		else
		{
			traceISR_EXIT();
 8000a5c:	f001 ff2a 	bl	80028b4 <SEGGER_SYSVIEW_RecordExitISR>
 8000a60:	2300      	movs	r3, #0
 8000a62:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	e000ed04 	.word	0xe000ed04

08000a78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <vPortSetupTimerInterrupt+0x24>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000a82:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <vPortSetupTimerInterrupt+0x28>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <vPortSetupTimerInterrupt+0x2c>)
 8000a8a:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <vPortSetupTimerInterrupt+0x30>)
 8000a8c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000a8e:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <vPortSetupTimerInterrupt+0x24>)
 8000a90:	2207      	movs	r2, #7
 8000a92:	601a      	str	r2, [r3, #0]
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr
 8000a9c:	e000e010 	.word	0xe000e010
 8000aa0:	e000e018 	.word	0xe000e018
 8000aa4:	e000e014 	.word	0xe000e014
 8000aa8:	0001193f 	.word	0x0001193f

08000aac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8000ab8:	f000 fb1a 	bl	80010f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000abc:	4b42      	ldr	r3, [pc, #264]	; (8000bc8 <pvPortMalloc+0x11c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d101      	bne.n	8000ac8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8000ac4:	f000 f8cc 	bl	8000c60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000ac8:	4b40      	ldr	r3, [pc, #256]	; (8000bcc <pvPortMalloc+0x120>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d172      	bne.n	8000bba <pvPortMalloc+0x10e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d00d      	beq.n	8000af6 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 8000ada:	2208      	movs	r2, #8
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4413      	add	r3, r2
 8000ae0:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f003 0307 	and.w	r3, r3, #7
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d004      	beq.n	8000af6 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f023 0307 	bic.w	r3, r3, #7
 8000af2:	3308      	adds	r3, #8
 8000af4:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d05e      	beq.n	8000bba <pvPortMalloc+0x10e>
 8000afc:	4b34      	ldr	r3, [pc, #208]	; (8000bd0 <pvPortMalloc+0x124>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d859      	bhi.n	8000bba <pvPortMalloc+0x10e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000b06:	4b33      	ldr	r3, [pc, #204]	; (8000bd4 <pvPortMalloc+0x128>)
 8000b08:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8000b0a:	4b32      	ldr	r3, [pc, #200]	; (8000bd4 <pvPortMalloc+0x128>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000b10:	e004      	b.n	8000b1c <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	685a      	ldr	r2, [r3, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d203      	bcs.n	8000b2e <pvPortMalloc+0x82>
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1f1      	bne.n	8000b12 <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000b2e:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <pvPortMalloc+0x11c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	697a      	ldr	r2, [r7, #20]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d040      	beq.n	8000bba <pvPortMalloc+0x10e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2208      	movs	r2, #8
 8000b3e:	4413      	add	r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	685a      	ldr	r2, [r3, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	1ad2      	subs	r2, r2, r3
 8000b52:	2308      	movs	r3, #8
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d90f      	bls.n	8000b7a <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000b5a:	697a      	ldr	r2, [r7, #20]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4413      	add	r3, r2
 8000b60:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	1ad2      	subs	r2, r2, r3
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000b74:	68b8      	ldr	r0, [r7, #8]
 8000b76:	f000 f8d5 	bl	8000d24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <pvPortMalloc+0x124>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <pvPortMalloc+0x124>)
 8000b86:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <pvPortMalloc+0x124>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <pvPortMalloc+0x12c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d203      	bcs.n	8000b9c <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <pvPortMalloc+0x124>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0f      	ldr	r2, [pc, #60]	; (8000bd8 <pvPortMalloc+0x12c>)
 8000b9a:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	685a      	ldr	r2, [r3, #4]
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <pvPortMalloc+0x120>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <pvPortMalloc+0x130>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	4a09      	ldr	r2, [pc, #36]	; (8000bdc <pvPortMalloc+0x130>)
 8000bb8:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000bba:	f000 faa7 	bl	800110c <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200038a0 	.word	0x200038a0
 8000bcc:	200038b4 	.word	0x200038b4
 8000bd0:	200038a4 	.word	0x200038a4
 8000bd4:	20003898 	.word	0x20003898
 8000bd8:	200038a8 	.word	0x200038a8
 8000bdc:	200038ac 	.word	0x200038ac

08000be0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d02c      	beq.n	8000c4c <vPortFree+0x6c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000bf2:	2308      	movs	r3, #8
 8000bf4:	425b      	negs	r3, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <vPortFree+0x74>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d01e      	beq.n	8000c4c <vPortFree+0x6c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d11a      	bne.n	8000c4c <vPortFree+0x6c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <vPortFree+0x74>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	401a      	ands	r2, r3
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000c26:	f000 fa63 	bl	80010f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <vPortFree+0x78>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <vPortFree+0x78>)
 8000c36:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000c38:	68b8      	ldr	r0, [r7, #8]
 8000c3a:	f000 f873 	bl	8000d24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <vPortFree+0x7c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	3301      	adds	r3, #1
 8000c44:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <vPortFree+0x7c>)
 8000c46:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8000c48:	f000 fa60 	bl	800110c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000c4c:	bf00      	nop
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	200038b4 	.word	0x200038b4
 8000c58:	200038a4 	.word	0x200038a4
 8000c5c:	200038b0 	.word	0x200038b0

08000c60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000c66:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000c6c:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <prvHeapInit+0xac>)
 8000c6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d00c      	beq.n	8000c94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	3307      	adds	r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f023 0307 	bic.w	r3, r3, #7
 8000c86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000c88:	68ba      	ldr	r2, [r7, #8]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	4a1f      	ldr	r2, [pc, #124]	; (8000d0c <prvHeapInit+0xac>)
 8000c90:	4413      	add	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000c98:	4a1d      	ldr	r2, [pc, #116]	; (8000d10 <prvHeapInit+0xb0>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <prvHeapInit+0xb0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	4413      	add	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000cac:	2208      	movs	r2, #8
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	1a9b      	subs	r3, r3, r2
 8000cb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f023 0307 	bic.w	r3, r3, #7
 8000cba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4a15      	ldr	r2, [pc, #84]	; (8000d14 <prvHeapInit+0xb4>)
 8000cc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000cc2:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <prvHeapInit+0xb4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000cca:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <prvHeapInit+0xb4>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	68fa      	ldr	r2, [r7, #12]
 8000cda:	1ad2      	subs	r2, r2, r3
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <prvHeapInit+0xb4>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <prvHeapInit+0xb8>)
 8000cee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	4a09      	ldr	r2, [pc, #36]	; (8000d1c <prvHeapInit+0xbc>)
 8000cf6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <prvHeapInit+0xc0>)
 8000cfa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000cfe:	601a      	str	r2, [r3, #0]
}
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000098 	.word	0x20000098
 8000d10:	20003898 	.word	0x20003898
 8000d14:	200038a0 	.word	0x200038a0
 8000d18:	200038a8 	.word	0x200038a8
 8000d1c:	200038a4 	.word	0x200038a4
 8000d20:	200038b4 	.word	0x200038b4

08000d24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000d2c:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <prvInsertBlockIntoFreeList+0xa8>)
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	e002      	b.n	8000d38 <prvInsertBlockIntoFreeList+0x14>
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d3f7      	bcc.n	8000d32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	441a      	add	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d108      	bne.n	8000d66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	685a      	ldr	r2, [r3, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	441a      	add	r2, r3
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	441a      	add	r2, r3
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d118      	bne.n	8000dac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <prvInsertBlockIntoFreeList+0xac>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d00d      	beq.n	8000da2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685a      	ldr	r2, [r3, #4]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	441a      	add	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	e008      	b.n	8000db4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <prvInsertBlockIntoFreeList+0xac>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	e003      	b.n	8000db4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d002      	beq.n	8000dc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	20003898 	.word	0x20003898
 8000dd0:	200038a0 	.word	0x200038a0

08000dd4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08c      	sub	sp, #48	; 0x30
 8000dd8:	af04      	add	r7, sp, #16
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	4613      	mov	r3, r2
 8000de2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000de4:	88fb      	ldrh	r3, [r7, #6]
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fe5f 	bl	8000aac <pvPortMalloc>
 8000dee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d00e      	beq.n	8000e14 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000df6:	2054      	movs	r0, #84	; 0x54
 8000df8:	f7ff fe58 	bl	8000aac <pvPortMalloc>
 8000dfc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d003      	beq.n	8000e0c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	631a      	str	r2, [r3, #48]	; 0x30
 8000e0a:	e005      	b.n	8000e18 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000e0c:	6978      	ldr	r0, [r7, #20]
 8000e0e:	f7ff fee7 	bl	8000be0 <vPortFree>
 8000e12:	e001      	b.n	8000e18 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d013      	beq.n	8000e46 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000e1e:	88fa      	ldrh	r2, [r7, #6]
 8000e20:	2300      	movs	r3, #0
 8000e22:	9303      	str	r3, [sp, #12]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	9302      	str	r3, [sp, #8]
 8000e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e2a:	9301      	str	r3, [sp, #4]
 8000e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	68b9      	ldr	r1, [r7, #8]
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	f000 f80e 	bl	8000e56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000e3a:	69f8      	ldr	r0, [r7, #28]
 8000e3c:	f000 f88a 	bl	8000f54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000e40:	2301      	movs	r3, #1
 8000e42:	61bb      	str	r3, [r7, #24]
 8000e44:	e002      	b.n	8000e4c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000e4c:	69bb      	ldr	r3, [r7, #24]
	}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3720      	adds	r7, #32
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b086      	sub	sp, #24
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
 8000e62:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	21a5      	movs	r1, #165	; 0xa5
 8000e70:	f002 fa86 	bl	8003380 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	f023 0307 	bic.w	r3, r3, #7
 8000e8c:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d01f      	beq.n	8000ed4 <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	e012      	b.n	8000ec0 <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	7819      	ldrb	r1, [r3, #0]
 8000ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	3334      	adds	r3, #52	; 0x34
 8000eaa:	460a      	mov	r2, r1
 8000eac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d006      	beq.n	8000ec8 <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	2b0f      	cmp	r3, #15
 8000ec4:	d9e9      	bls.n	8000e9a <prvInitialiseNewTask+0x44>
 8000ec6:	e000      	b.n	8000eca <prvInitialiseNewTask+0x74>
			{
				break;
 8000ec8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000ed2:	e003      	b.n	8000edc <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000edc:	6a3b      	ldr	r3, [r7, #32]
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	d901      	bls.n	8000ee6 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee8:	6a3a      	ldr	r2, [r7, #32]
 8000eea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eee:	6a3a      	ldr	r2, [r7, #32]
 8000ef0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8000ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efa:	3304      	adds	r3, #4
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fc1f 	bl	8000740 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f04:	3318      	adds	r3, #24
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fc1a 	bl	8000740 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f10:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f12:	6a3b      	ldr	r3, [r7, #32]
 8000f14:	f1c3 0205 	rsb	r2, r3, #5
 8000f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f24:	2200      	movs	r2, #0
 8000f26:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	68f9      	ldr	r1, [r7, #12]
 8000f34:	6938      	ldr	r0, [r7, #16]
 8000f36:	f7ff fc93 	bl	8000860 <pxPortInitialiseStack>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d002      	beq.n	8000f4c <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000f4c:	bf00      	nop
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000f54:	b5b0      	push	{r4, r5, r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000f5c:	f7ff fd0c 	bl	8000978 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000f60:	4b39      	ldr	r3, [pc, #228]	; (8001048 <prvAddNewTaskToReadyList+0xf4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	3301      	adds	r3, #1
 8000f66:	4a38      	ldr	r2, [pc, #224]	; (8001048 <prvAddNewTaskToReadyList+0xf4>)
 8000f68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000f6a:	4b38      	ldr	r3, [pc, #224]	; (800104c <prvAddNewTaskToReadyList+0xf8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d109      	bne.n	8000f86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000f72:	4a36      	ldr	r2, [pc, #216]	; (800104c <prvAddNewTaskToReadyList+0xf8>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000f78:	4b33      	ldr	r3, [pc, #204]	; (8001048 <prvAddNewTaskToReadyList+0xf4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d110      	bne.n	8000fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000f80:	f000 fa7c 	bl	800147c <prvInitialiseTaskLists>
 8000f84:	e00d      	b.n	8000fa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000f86:	4b32      	ldr	r3, [pc, #200]	; (8001050 <prvAddNewTaskToReadyList+0xfc>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d109      	bne.n	8000fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000f8e:	4b2f      	ldr	r3, [pc, #188]	; (800104c <prvAddNewTaskToReadyList+0xf8>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d802      	bhi.n	8000fa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000f9c:	4a2b      	ldr	r2, [pc, #172]	; (800104c <prvAddNewTaskToReadyList+0xf8>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000fa2:	4b2c      	ldr	r3, [pc, #176]	; (8001054 <prvAddNewTaskToReadyList+0x100>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	4a2a      	ldr	r2, [pc, #168]	; (8001054 <prvAddNewTaskToReadyList+0x100>)
 8000faa:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d016      	beq.n	8000fe0 <prvAddNewTaskToReadyList+0x8c>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f001 fcd1 	bl	800295c <SEGGER_SYSVIEW_OnTaskCreate>
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	461d      	mov	r5, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	461c      	mov	r4, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	1ae3      	subs	r3, r4, r3
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	462b      	mov	r3, r5
 8000fdc:	f000 fc5e 	bl	800189c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f001 fd42 	bl	8002a6c <SEGGER_SYSVIEW_OnTaskStartReady>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fec:	2201      	movs	r2, #1
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <prvAddNewTaskToReadyList+0x104>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	4a18      	ldr	r2, [pc, #96]	; (8001058 <prvAddNewTaskToReadyList+0x104>)
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ffe:	4613      	mov	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4a15      	ldr	r2, [pc, #84]	; (800105c <prvAddNewTaskToReadyList+0x108>)
 8001008:	441a      	add	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3304      	adds	r3, #4
 800100e:	4619      	mov	r1, r3
 8001010:	4610      	mov	r0, r2
 8001012:	f7ff fba1 	bl	8000758 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001016:	f7ff fcc7 	bl	80009a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800101a:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <prvAddNewTaskToReadyList+0xfc>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00e      	beq.n	8001040 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <prvAddNewTaskToReadyList+0xf8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102c:	429a      	cmp	r2, r3
 800102e:	d207      	bcs.n	8001040 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <prvAddNewTaskToReadyList+0x10c>)
 8001032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	f3bf 8f4f 	dsb	sy
 800103c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bdb0      	pop	{r4, r5, r7, pc}
 8001048:	20003990 	.word	0x20003990
 800104c:	200038b8 	.word	0x200038b8
 8001050:	2000399c 	.word	0x2000399c
 8001054:	200039ac 	.word	0x200039ac
 8001058:	20003998 	.word	0x20003998
 800105c:	200038bc 	.word	0x200038bc
 8001060:	e000ed04 	.word	0xe000ed04

08001064 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <vTaskStartScheduler+0x70>)
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	2300      	movs	r3, #0
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2300      	movs	r3, #0
 8001074:	2280      	movs	r2, #128	; 0x80
 8001076:	4918      	ldr	r1, [pc, #96]	; (80010d8 <vTaskStartScheduler+0x74>)
 8001078:	4818      	ldr	r0, [pc, #96]	; (80010dc <vTaskStartScheduler+0x78>)
 800107a:	f7ff feab 	bl	8000dd4 <xTaskCreate>
 800107e:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d122      	bne.n	80010cc <vTaskStartScheduler+0x68>
	__asm volatile
 8001086:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800108a:	f383 8811 	msr	BASEPRI, r3
 800108e:	f3bf 8f6f 	isb	sy
 8001092:	f3bf 8f4f 	dsb	sy
 8001096:	603b      	str	r3, [r7, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <vTaskStartScheduler+0x7c>)
 800109a:	f04f 32ff 	mov.w	r2, #4294967295
 800109e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80010a0:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <vTaskStartScheduler+0x80>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <vTaskStartScheduler+0x84>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <vTaskStartScheduler+0x88>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <vTaskStartScheduler+0x70>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d102      	bne.n	80010be <vTaskStartScheduler+0x5a>
 80010b8:	f001 fc34 	bl	8002924 <SEGGER_SYSVIEW_OnIdle>
 80010bc:	e004      	b.n	80010c8 <vTaskStartScheduler+0x64>
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <vTaskStartScheduler+0x88>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f001 fc8e 	bl	80029e4 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80010c8:	f7ff fc36 	bl	8000938 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200039b4 	.word	0x200039b4
 80010d8:	08003be8 	.word	0x08003be8
 80010dc:	0800144d 	.word	0x0800144d
 80010e0:	200039b0 	.word	0x200039b0
 80010e4:	2000399c 	.word	0x2000399c
 80010e8:	20003994 	.word	0x20003994
 80010ec:	200038b8 	.word	0x200038b8

080010f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <vTaskSuspendAll+0x18>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	4a03      	ldr	r2, [pc, #12]	; (8001108 <vTaskSuspendAll+0x18>)
 80010fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	200039b8 	.word	0x200039b8

0800110c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800111a:	f7ff fc2d 	bl	8000978 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800111e:	4b3b      	ldr	r3, [pc, #236]	; (800120c <xTaskResumeAll+0x100>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	3b01      	subs	r3, #1
 8001124:	4a39      	ldr	r2, [pc, #228]	; (800120c <xTaskResumeAll+0x100>)
 8001126:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001128:	4b38      	ldr	r3, [pc, #224]	; (800120c <xTaskResumeAll+0x100>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d165      	bne.n	80011fc <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001130:	4b37      	ldr	r3, [pc, #220]	; (8001210 <xTaskResumeAll+0x104>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d061      	beq.n	80011fc <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001138:	e032      	b.n	80011a0 <xTaskResumeAll+0x94>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800113a:	4b36      	ldr	r3, [pc, #216]	; (8001214 <xTaskResumeAll+0x108>)
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3318      	adds	r3, #24
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fb61 	bl	800080e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	3304      	adds	r3, #4
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fb5c 	bl	800080e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4618      	mov	r0, r3
 800115a:	f001 fc87 	bl	8002a6c <SEGGER_SYSVIEW_OnTaskStartReady>
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001162:	2201      	movs	r2, #1
 8001164:	409a      	lsls	r2, r3
 8001166:	4b2c      	ldr	r3, [pc, #176]	; (8001218 <xTaskResumeAll+0x10c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4313      	orrs	r3, r2
 800116c:	4a2a      	ldr	r2, [pc, #168]	; (8001218 <xTaskResumeAll+0x10c>)
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4a27      	ldr	r2, [pc, #156]	; (800121c <xTaskResumeAll+0x110>)
 800117e:	441a      	add	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3304      	adds	r3, #4
 8001184:	4619      	mov	r1, r3
 8001186:	4610      	mov	r0, r2
 8001188:	f7ff fae6 	bl	8000758 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001190:	4b23      	ldr	r3, [pc, #140]	; (8001220 <xTaskResumeAll+0x114>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001196:	429a      	cmp	r2, r3
 8001198:	d302      	bcc.n	80011a0 <xTaskResumeAll+0x94>
					{
						xYieldPending = pdTRUE;
 800119a:	4b22      	ldr	r3, [pc, #136]	; (8001224 <xTaskResumeAll+0x118>)
 800119c:	2201      	movs	r2, #1
 800119e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80011a0:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <xTaskResumeAll+0x108>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1c8      	bne.n	800113a <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <xTaskResumeAll+0xa6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80011ae:	f000 f9e1 	bl	8001574 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <xTaskResumeAll+0x11c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d010      	beq.n	80011e0 <xTaskResumeAll+0xd4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80011be:	f000 f845 	bl	800124c <xTaskIncrementTick>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d002      	beq.n	80011ce <xTaskResumeAll+0xc2>
							{
								xYieldPending = pdTRUE;
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <xTaskResumeAll+0x118>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f1      	bne.n	80011be <xTaskResumeAll+0xb2>

						xPendedTicks = 0;
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <xTaskResumeAll+0x11c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <xTaskResumeAll+0x118>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d009      	beq.n	80011fc <xTaskResumeAll+0xf0>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80011e8:	2301      	movs	r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <xTaskResumeAll+0x120>)
 80011ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	f3bf 8f4f 	dsb	sy
 80011f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80011fc:	f7ff fbd4 	bl	80009a8 <vPortExitCritical>

	return xAlreadyYielded;
 8001200:	68bb      	ldr	r3, [r7, #8]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200039b8 	.word	0x200039b8
 8001210:	20003990 	.word	0x20003990
 8001214:	20003950 	.word	0x20003950
 8001218:	20003998 	.word	0x20003998
 800121c:	200038bc 	.word	0x200038bc
 8001220:	200038b8 	.word	0x200038b8
 8001224:	200039a4 	.word	0x200039a4
 8001228:	200039a0 	.word	0x200039a0
 800122c:	e000ed04 	.word	0xe000ed04

08001230 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001236:	4b04      	ldr	r3, [pc, #16]	; (8001248 <xTaskGetTickCount+0x18>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800123c:	687b      	ldr	r3, [r7, #4]
}
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	20003994 	.word	0x20003994

0800124c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001256:	4b48      	ldr	r3, [pc, #288]	; (8001378 <xTaskIncrementTick+0x12c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	f040 8082 	bne.w	8001364 <xTaskIncrementTick+0x118>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001260:	4b46      	ldr	r3, [pc, #280]	; (800137c <xTaskIncrementTick+0x130>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	3301      	adds	r3, #1
 8001266:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001268:	4a44      	ldr	r2, [pc, #272]	; (800137c <xTaskIncrementTick+0x130>)
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d110      	bne.n	8001296 <xTaskIncrementTick+0x4a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001274:	4b42      	ldr	r3, [pc, #264]	; (8001380 <xTaskIncrementTick+0x134>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b42      	ldr	r3, [pc, #264]	; (8001384 <xTaskIncrementTick+0x138>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a40      	ldr	r2, [pc, #256]	; (8001380 <xTaskIncrementTick+0x134>)
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	4a40      	ldr	r2, [pc, #256]	; (8001384 <xTaskIncrementTick+0x138>)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b3f      	ldr	r3, [pc, #252]	; (8001388 <xTaskIncrementTick+0x13c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	4a3e      	ldr	r2, [pc, #248]	; (8001388 <xTaskIncrementTick+0x13c>)
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	f000 f96f 	bl	8001574 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001296:	4b3d      	ldr	r3, [pc, #244]	; (800138c <xTaskIncrementTick+0x140>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	429a      	cmp	r2, r3
 800129e:	d34c      	bcc.n	800133a <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80012a0:	4b37      	ldr	r3, [pc, #220]	; (8001380 <xTaskIncrementTick+0x134>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d104      	bne.n	80012b4 <xTaskIncrementTick+0x68>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012aa:	4b38      	ldr	r3, [pc, #224]	; (800138c <xTaskIncrementTick+0x140>)
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	601a      	str	r2, [r3, #0]
					break;
 80012b2:	e042      	b.n	800133a <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80012b4:	4b32      	ldr	r3, [pc, #200]	; (8001380 <xTaskIncrementTick+0x134>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d203      	bcs.n	80012d4 <xTaskIncrementTick+0x88>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80012cc:	4a2f      	ldr	r2, [pc, #188]	; (800138c <xTaskIncrementTick+0x140>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80012d2:	e032      	b.n	800133a <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	3304      	adds	r3, #4
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fa98 	bl	800080e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d004      	beq.n	80012f0 <xTaskIncrementTick+0xa4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	3318      	adds	r3, #24
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fa8f 	bl	800080e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f001 fbba 	bl	8002a6c <SEGGER_SYSVIEW_OnTaskStartReady>
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fc:	2201      	movs	r2, #1
 80012fe:	409a      	lsls	r2, r3
 8001300:	4b23      	ldr	r3, [pc, #140]	; (8001390 <xTaskIncrementTick+0x144>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4313      	orrs	r3, r2
 8001306:	4a22      	ldr	r2, [pc, #136]	; (8001390 <xTaskIncrementTick+0x144>)
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4a1f      	ldr	r2, [pc, #124]	; (8001394 <xTaskIncrementTick+0x148>)
 8001318:	441a      	add	r2, r3
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	3304      	adds	r3, #4
 800131e:	4619      	mov	r1, r3
 8001320:	4610      	mov	r0, r2
 8001322:	f7ff fa19 	bl	8000758 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800132a:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <xTaskIncrementTick+0x14c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001330:	429a      	cmp	r2, r3
 8001332:	d3b5      	bcc.n	80012a0 <xTaskIncrementTick+0x54>
						{
							xSwitchRequired = pdTRUE;
 8001334:	2301      	movs	r3, #1
 8001336:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001338:	e7b2      	b.n	80012a0 <xTaskIncrementTick+0x54>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <xTaskIncrementTick+0x14c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001340:	4914      	ldr	r1, [pc, #80]	; (8001394 <xTaskIncrementTick+0x148>)
 8001342:	4613      	mov	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	440b      	add	r3, r1
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d901      	bls.n	8001356 <xTaskIncrementTick+0x10a>
			{
				xSwitchRequired = pdTRUE;
 8001352:	2301      	movs	r3, #1
 8001354:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <xTaskIncrementTick+0x150>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d007      	beq.n	800136e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800135e:	2301      	movs	r3, #1
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	e004      	b.n	800136e <xTaskIncrementTick+0x122>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001364:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <xTaskIncrementTick+0x154>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	3301      	adds	r3, #1
 800136a:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <xTaskIncrementTick+0x154>)
 800136c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800136e:	697b      	ldr	r3, [r7, #20]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200039b8 	.word	0x200039b8
 800137c:	20003994 	.word	0x20003994
 8001380:	20003948 	.word	0x20003948
 8001384:	2000394c 	.word	0x2000394c
 8001388:	200039a8 	.word	0x200039a8
 800138c:	200039b0 	.word	0x200039b0
 8001390:	20003998 	.word	0x20003998
 8001394:	200038bc 	.word	0x200038bc
 8001398:	200038b8 	.word	0x200038b8
 800139c:	200039a4 	.word	0x200039a4
 80013a0:	200039a0 	.word	0x200039a0

080013a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80013aa:	4b22      	ldr	r3, [pc, #136]	; (8001434 <vTaskSwitchContext+0x90>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80013b2:	4b21      	ldr	r3, [pc, #132]	; (8001438 <vTaskSwitchContext+0x94>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80013b8:	e038      	b.n	800142c <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 80013ba:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <vTaskSwitchContext+0x94>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013c0:	4b1e      	ldr	r3, [pc, #120]	; (800143c <vTaskSwitchContext+0x98>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	fab3 f383 	clz	r3, r3
 80013cc:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 80013ce:	78fb      	ldrb	r3, [r7, #3]
 80013d0:	f1c3 031f 	rsb	r3, r3, #31
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4a17      	ldr	r2, [pc, #92]	; (8001440 <vTaskSwitchContext+0x9c>)
 80013e2:	4413      	add	r3, r2
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	3308      	adds	r3, #8
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d104      	bne.n	8001406 <vTaskSwitchContext+0x62>
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <vTaskSwitchContext+0xa0>)
 800140e:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <vTaskSwitchContext+0xa0>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <vTaskSwitchContext+0xa4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	429a      	cmp	r2, r3
 800141a:	d102      	bne.n	8001422 <vTaskSwitchContext+0x7e>
 800141c:	f001 fa82 	bl	8002924 <SEGGER_SYSVIEW_OnIdle>
}
 8001420:	e004      	b.n	800142c <vTaskSwitchContext+0x88>
		traceTASK_SWITCHED_IN();
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <vTaskSwitchContext+0xa0>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f001 fadc 	bl	80029e4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800142c:	bf00      	nop
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200039b8 	.word	0x200039b8
 8001438:	200039a4 	.word	0x200039a4
 800143c:	20003998 	.word	0x20003998
 8001440:	200038bc 	.word	0x200038bc
 8001444:	200038b8 	.word	0x200038b8
 8001448:	200039b4 	.word	0x200039b4

0800144c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001454:	f000 f852 	bl	80014fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <prvIdleTask+0x28>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d9f9      	bls.n	8001454 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <prvIdleTask+0x2c>)
 8001462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	f3bf 8f4f 	dsb	sy
 800146c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001470:	e7f0      	b.n	8001454 <prvIdleTask+0x8>
 8001472:	bf00      	nop
 8001474:	200038bc 	.word	0x200038bc
 8001478:	e000ed04 	.word	0xe000ed04

0800147c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	e00c      	b.n	80014a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4a12      	ldr	r2, [pc, #72]	; (80014dc <prvInitialiseTaskLists+0x60>)
 8001494:	4413      	add	r3, r2
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f933 	bl	8000702 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3301      	adds	r3, #1
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d9ef      	bls.n	8001488 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80014a8:	480d      	ldr	r0, [pc, #52]	; (80014e0 <prvInitialiseTaskLists+0x64>)
 80014aa:	f7ff f92a 	bl	8000702 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80014ae:	480d      	ldr	r0, [pc, #52]	; (80014e4 <prvInitialiseTaskLists+0x68>)
 80014b0:	f7ff f927 	bl	8000702 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <prvInitialiseTaskLists+0x6c>)
 80014b6:	f7ff f924 	bl	8000702 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80014ba:	480c      	ldr	r0, [pc, #48]	; (80014ec <prvInitialiseTaskLists+0x70>)
 80014bc:	f7ff f921 	bl	8000702 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80014c0:	480b      	ldr	r0, [pc, #44]	; (80014f0 <prvInitialiseTaskLists+0x74>)
 80014c2:	f7ff f91e 	bl	8000702 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <prvInitialiseTaskLists+0x78>)
 80014c8:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <prvInitialiseTaskLists+0x64>)
 80014ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <prvInitialiseTaskLists+0x7c>)
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <prvInitialiseTaskLists+0x68>)
 80014d0:	601a      	str	r2, [r3, #0]
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200038bc 	.word	0x200038bc
 80014e0:	20003920 	.word	0x20003920
 80014e4:	20003934 	.word	0x20003934
 80014e8:	20003950 	.word	0x20003950
 80014ec:	20003964 	.word	0x20003964
 80014f0:	2000397c 	.word	0x2000397c
 80014f4:	20003948 	.word	0x20003948
 80014f8:	2000394c 	.word	0x2000394c

080014fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001502:	e019      	b.n	8001538 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001504:	f7ff fa38 	bl	8000978 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <prvCheckTasksWaitingTermination+0x4c>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3304      	adds	r3, #4
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f97a 	bl	800080e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <prvCheckTasksWaitingTermination+0x50>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	3b01      	subs	r3, #1
 8001520:	4a0a      	ldr	r2, [pc, #40]	; (800154c <prvCheckTasksWaitingTermination+0x50>)
 8001522:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <prvCheckTasksWaitingTermination+0x54>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	3b01      	subs	r3, #1
 800152a:	4a09      	ldr	r2, [pc, #36]	; (8001550 <prvCheckTasksWaitingTermination+0x54>)
 800152c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800152e:	f7ff fa3b 	bl	80009a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f80e 	bl	8001554 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <prvCheckTasksWaitingTermination+0x54>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1e1      	bne.n	8001504 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20003964 	.word	0x20003964
 800154c:	20003990 	.word	0x20003990
 8001550:	20003978 	.word	0x20003978

08001554 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fb3d 	bl	8000be0 <vPortFree>
			vPortFree( pxTCB );
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff fb3a 	bl	8000be0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <prvResetNextTaskUnblockTime+0x38>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d104      	bne.n	800158e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001584:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <prvResetNextTaskUnblockTime+0x3c>)
 8001586:	f04f 32ff 	mov.w	r2, #4294967295
 800158a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800158c:	e008      	b.n	80015a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <prvResetNextTaskUnblockTime+0x38>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <prvResetNextTaskUnblockTime+0x3c>)
 800159e:	6013      	str	r3, [r2, #0]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20003948 	.word	0x20003948
 80015b0:	200039b0 	.word	0x200039b0

080015b4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af02      	add	r7, sp, #8
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
 80015c0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80015c2:	f7ff f9d9 	bl	8000978 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80015c6:	4b2b      	ldr	r3, [pc, #172]	; (8001674 <xTaskNotifyWait+0xc0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d01a      	beq.n	800160a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80015d4:	4b27      	ldr	r3, [pc, #156]	; (8001674 <xTaskNotifyWait+0xc0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	43d2      	mvns	r2, r2
 80015de:	400a      	ands	r2, r1
 80015e0:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80015e2:	4b24      	ldr	r3, [pc, #144]	; (8001674 <xTaskNotifyWait+0xc0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00b      	beq.n	800160a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80015f2:	2101      	movs	r1, #1
 80015f4:	6838      	ldr	r0, [r7, #0]
 80015f6:	f000 f8d9 	bl	80017ac <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80015fa:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <xTaskNotifyWait+0xc4>)
 80015fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	f3bf 8f4f 	dsb	sy
 8001606:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800160a:	f7ff f9cd 	bl	80009a8 <vPortExitCritical>

		taskENTER_CRITICAL();
 800160e:	f7ff f9b3 	bl	8000978 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	4613      	mov	r3, r2
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	68f9      	ldr	r1, [r7, #12]
 800161e:	2040      	movs	r0, #64	; 0x40
 8001620:	f000 fdd2 	bl	80021c8 <SEGGER_SYSVIEW_RecordU32x4>

			if( pulNotificationValue != NULL )
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d004      	beq.n	8001634 <xTaskNotifyWait+0x80>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800162a:	4b12      	ldr	r3, [pc, #72]	; (8001674 <xTaskNotifyWait+0xc0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <xTaskNotifyWait+0xc0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d002      	beq.n	8001648 <xTaskNotifyWait+0x94>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	e008      	b.n	800165a <xTaskNotifyWait+0xa6>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8001648:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <xTaskNotifyWait+0xc0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	43d2      	mvns	r2, r2
 8001652:	400a      	ands	r2, r1
 8001654:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8001656:	2301      	movs	r3, #1
 8001658:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <xTaskNotifyWait+0xc0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8001664:	f7ff f9a0 	bl	80009a8 <vPortExitCritical>

		return xReturn;
 8001668:	697b      	ldr	r3, [r7, #20]
	}
 800166a:	4618      	mov	r0, r3
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200038b8 	.word	0x200038b8
 8001678:	e000ed04 	.word	0xe000ed04

0800167c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af02      	add	r7, sp, #8
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	4613      	mov	r3, r2
 800168a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800168c:	2301      	movs	r3, #1
 800168e:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = xTaskToNotify;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 8001694:	f7ff f970 	bl	8000978 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <xTaskGenericNotify+0x2a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016ac:	75fb      	strb	r3, [r7, #23]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	2202      	movs	r2, #2
 80016b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d828      	bhi.n	800170e <xTaskGenericNotify+0x92>
 80016bc:	a201      	add	r2, pc, #4	; (adr r2, 80016c4 <xTaskGenericNotify+0x48>)
 80016be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c2:	bf00      	nop
 80016c4:	0800170f 	.word	0x0800170f
 80016c8:	080016d9 	.word	0x080016d9
 80016cc:	080016e7 	.word	0x080016e7
 80016d0:	080016f3 	.word	0x080016f3
 80016d4:	080016fb 	.word	0x080016fb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	431a      	orrs	r2, r3
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80016e4:	e014      	b.n	8001710 <xTaskGenericNotify+0x94>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	1c5a      	adds	r2, r3, #1
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80016f0:	e00e      	b.n	8001710 <xTaskGenericNotify+0x94>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80016f8:	e00a      	b.n	8001710 <xTaskGenericNotify+0x94>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80016fa:	7dfb      	ldrb	r3, [r7, #23]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d003      	beq.n	8001708 <xTaskGenericNotify+0x8c>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8001706:	e003      	b.n	8001710 <xTaskGenericNotify+0x94>
						xReturn = pdFAIL;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
					break;
 800170c:	e000      	b.n	8001710 <xTaskGenericNotify+0x94>
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );

					break;
 800170e:	bf00      	nop
			}

			traceTASK_NOTIFY();
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	4618      	mov	r0, r3
 8001714:	f001 fa4e 	bl	8002bb4 <SEGGER_SYSVIEW_ShrinkId>
 8001718:	4601      	mov	r1, r0
 800171a:	79fa      	ldrb	r2, [r7, #7]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	4613      	mov	r3, r2
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	203e      	movs	r0, #62	; 0x3e
 8001726:	f000 fd4f 	bl	80021c8 <SEGGER_SYSVIEW_RecordU32x4>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800172a:	7dfb      	ldrb	r3, [r7, #23]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d12e      	bne.n	800178e <xTaskGenericNotify+0x112>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	3304      	adds	r3, #4
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff f86a 	bl	800080e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	4618      	mov	r0, r3
 800173e:	f001 f995 	bl	8002a6c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001746:	2201      	movs	r2, #1
 8001748:	409a      	lsls	r2, r3
 800174a:	4b14      	ldr	r3, [pc, #80]	; (800179c <xTaskGenericNotify+0x120>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4313      	orrs	r3, r2
 8001750:	4a12      	ldr	r2, [pc, #72]	; (800179c <xTaskGenericNotify+0x120>)
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4a0f      	ldr	r2, [pc, #60]	; (80017a0 <xTaskGenericNotify+0x124>)
 8001762:	441a      	add	r2, r3
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	3304      	adds	r3, #4
 8001768:	4619      	mov	r1, r3
 800176a:	4610      	mov	r0, r2
 800176c:	f7fe fff4 	bl	8000758 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <xTaskGenericNotify+0x128>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	429a      	cmp	r2, r3
 800177c:	d907      	bls.n	800178e <xTaskGenericNotify+0x112>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <xTaskGenericNotify+0x12c>)
 8001780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	f3bf 8f4f 	dsb	sy
 800178a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800178e:	f7ff f90b 	bl	80009a8 <vPortExitCritical>

		return xReturn;
 8001792:	69fb      	ldr	r3, [r7, #28]
	}
 8001794:	4618      	mov	r0, r3
 8001796:	3720      	adds	r7, #32
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20003998 	.word	0x20003998
 80017a0:	200038bc 	.word	0x200038bc
 80017a4:	200038b8 	.word	0x200038b8
 80017a8:	e000ed04 	.word	0xe000ed04

080017ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80017b6:	4b32      	ldr	r3, [pc, #200]	; (8001880 <prvAddCurrentTaskToDelayedList+0xd4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80017bc:	4b31      	ldr	r3, [pc, #196]	; (8001884 <prvAddCurrentTaskToDelayedList+0xd8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	3304      	adds	r3, #4
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff f823 	bl	800080e <uxListRemove>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10b      	bne.n	80017e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80017ce:	4b2d      	ldr	r3, [pc, #180]	; (8001884 <prvAddCurrentTaskToDelayedList+0xd8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d4:	2201      	movs	r2, #1
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <prvAddCurrentTaskToDelayedList+0xdc>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4013      	ands	r3, r2
 80017e2:	4a29      	ldr	r2, [pc, #164]	; (8001888 <prvAddCurrentTaskToDelayedList+0xdc>)
 80017e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ec:	d110      	bne.n	8001810 <prvAddCurrentTaskToDelayedList+0x64>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00d      	beq.n	8001810 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80017f4:	4b23      	ldr	r3, [pc, #140]	; (8001884 <prvAddCurrentTaskToDelayedList+0xd8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	211b      	movs	r1, #27
 80017fa:	4618      	mov	r0, r3
 80017fc:	f001 f97a 	bl	8002af4 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001800:	4b20      	ldr	r3, [pc, #128]	; (8001884 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3304      	adds	r3, #4
 8001806:	4619      	mov	r1, r3
 8001808:	4820      	ldr	r0, [pc, #128]	; (800188c <prvAddCurrentTaskToDelayedList+0xe0>)
 800180a:	f7fe ffa5 	bl	8000758 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800180e:	e032      	b.n	8001876 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001818:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <prvAddCurrentTaskToDelayedList+0xd8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	429a      	cmp	r2, r3
 8001826:	d20f      	bcs.n	8001848 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001828:	4b16      	ldr	r3, [pc, #88]	; (8001884 <prvAddCurrentTaskToDelayedList+0xd8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2104      	movs	r1, #4
 800182e:	4618      	mov	r0, r3
 8001830:	f001 f960 	bl	8002af4 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001834:	4b16      	ldr	r3, [pc, #88]	; (8001890 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <prvAddCurrentTaskToDelayedList+0xd8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3304      	adds	r3, #4
 800183e:	4619      	mov	r1, r3
 8001840:	4610      	mov	r0, r2
 8001842:	f7fe ffac 	bl	800079e <vListInsert>
}
 8001846:	e016      	b.n	8001876 <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8001848:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <prvAddCurrentTaskToDelayedList+0xd8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2104      	movs	r1, #4
 800184e:	4618      	mov	r0, r3
 8001850:	f001 f950 	bl	8002af4 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001854:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <prvAddCurrentTaskToDelayedList+0xd8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3304      	adds	r3, #4
 800185e:	4619      	mov	r1, r3
 8001860:	4610      	mov	r0, r2
 8001862:	f7fe ff9c 	bl	800079e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <prvAddCurrentTaskToDelayedList+0xec>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	429a      	cmp	r2, r3
 800186e:	d202      	bcs.n	8001876 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8001870:	4a09      	ldr	r2, [pc, #36]	; (8001898 <prvAddCurrentTaskToDelayedList+0xec>)
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	6013      	str	r3, [r2, #0]
}
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20003994 	.word	0x20003994
 8001884:	200038b8 	.word	0x200038b8
 8001888:	20003998 	.word	0x20003998
 800188c:	2000397c 	.word	0x2000397c
 8001890:	2000394c 	.word	0x2000394c
 8001894:	20003948 	.word	0x20003948
 8001898:	200039b0 	.word	0x200039b0

0800189c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af02      	add	r7, sp, #8
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80018aa:	2205      	movs	r2, #5
 80018ac:	492b      	ldr	r1, [pc, #172]	; (800195c <SYSVIEW_AddTask+0xc0>)
 80018ae:	68b8      	ldr	r0, [r7, #8]
 80018b0:	f001 fd4c 	bl	800334c <memcmp>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d04b      	beq.n	8001952 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80018ba:	4b29      	ldr	r3, [pc, #164]	; (8001960 <SYSVIEW_AddTask+0xc4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b07      	cmp	r3, #7
 80018c0:	d903      	bls.n	80018ca <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80018c2:	4828      	ldr	r0, [pc, #160]	; (8001964 <SYSVIEW_AddTask+0xc8>)
 80018c4:	f001 fa62 	bl	8002d8c <SEGGER_SYSVIEW_Warn>
    return;
 80018c8:	e044      	b.n	8001954 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80018ca:	4b25      	ldr	r3, [pc, #148]	; (8001960 <SYSVIEW_AddTask+0xc4>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	4926      	ldr	r1, [pc, #152]	; (8001968 <SYSVIEW_AddTask+0xcc>)
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80018de:	4b20      	ldr	r3, [pc, #128]	; (8001960 <SYSVIEW_AddTask+0xc4>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4921      	ldr	r1, [pc, #132]	; (8001968 <SYSVIEW_AddTask+0xcc>)
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	3304      	adds	r3, #4
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80018f4:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <SYSVIEW_AddTask+0xc4>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	491b      	ldr	r1, [pc, #108]	; (8001968 <SYSVIEW_AddTask+0xcc>)
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	3308      	adds	r3, #8
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <SYSVIEW_AddTask+0xc4>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	4916      	ldr	r1, [pc, #88]	; (8001968 <SYSVIEW_AddTask+0xcc>)
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	330c      	adds	r3, #12
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <SYSVIEW_AddTask+0xc4>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4910      	ldr	r1, [pc, #64]	; (8001968 <SYSVIEW_AddTask+0xcc>)
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	3310      	adds	r3, #16
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <SYSVIEW_AddTask+0xc4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	3301      	adds	r3, #1
 800193c:	4a08      	ldr	r2, [pc, #32]	; (8001960 <SYSVIEW_AddTask+0xc4>)
 800193e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f000 f80e 	bl	800196c <SYSVIEW_SendTaskInfo>
 8001950:	e000      	b.n	8001954 <SYSVIEW_AddTask+0xb8>
    return;
 8001952:	bf00      	nop

}
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	08003bf0 	.word	0x08003bf0
 8001960:	20003a5c 	.word	0x20003a5c
 8001964:	08003bf8 	.word	0x08003bf8
 8001968:	200039bc 	.word	0x200039bc

0800196c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	2214      	movs	r2, #20
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f001 fcfc 	bl	8003380 <memset>
  TaskInfo.TaskID     = TaskID;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 fe1f 	bl	80025e4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80019a6:	bf00      	nop
 80019a8:	3728      	adds	r7, #40	; 0x28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 80019b6:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <_DoInit+0x8c>)
 80019b8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2203      	movs	r2, #3
 80019be:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2203      	movs	r2, #3
 80019c4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a1d      	ldr	r2, [pc, #116]	; (8001a40 <_DoInit+0x90>)
 80019ca:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a1d      	ldr	r2, [pc, #116]	; (8001a44 <_DoInit+0x94>)
 80019d0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019d8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a14      	ldr	r2, [pc, #80]	; (8001a40 <_DoInit+0x90>)
 80019f0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <_DoInit+0x98>)
 80019f6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2210      	movs	r2, #16
 80019fc:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3307      	adds	r3, #7
 8001a14:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <_DoInit+0x9c>)
 8001a16:	6810      	ldr	r0, [r2, #0]
 8001a18:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a0c      	ldr	r2, [pc, #48]	; (8001a50 <_DoInit+0xa0>)
 8001a1e:	6810      	ldr	r0, [r2, #0]
 8001a20:	6018      	str	r0, [r3, #0]
 8001a22:	8891      	ldrh	r1, [r2, #4]
 8001a24:	7992      	ldrb	r2, [r2, #6]
 8001a26:	8099      	strh	r1, [r3, #4]
 8001a28:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	719a      	strb	r2, [r3, #6]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20003f98 	.word	0x20003f98
 8001a40:	08003c48 	.word	0x08003c48
 8001a44:	20003a60 	.word	0x20003a60
 8001a48:	20003e60 	.word	0x20003e60
 8001a4c:	08003c54 	.word	0x08003c54
 8001a50:	08003c58 	.word	0x08003c58

08001a54 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	; 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8001a60:	4b3c      	ldr	r3, [pc, #240]	; (8001b54 <SEGGER_RTT_ReadNoLock+0x100>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <SEGGER_RTT_ReadNoLock+0x18>
 8001a68:	f7ff ffa2 	bl	80019b0 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	3360      	adds	r3, #96	; 0x60
 8001a78:	4a36      	ldr	r2, [pc, #216]	; (8001b54 <SEGGER_RTT_ReadNoLock+0x100>)
 8001a7a:	4413      	add	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8001a92:	6a3a      	ldr	r2, [r7, #32]
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d92a      	bls.n	8001af0 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	bf28      	it	cs
 8001aac:	4613      	movcs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4619      	mov	r1, r3
 8001abc:	69f8      	ldr	r0, [r7, #28]
 8001abe:	f001 fc54 	bl	800336a <memcpy>
    NumBytesRead += NumBytesRem;
 8001ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8001aca:	69fa      	ldr	r2, [r7, #28]
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4413      	add	r3, r2
 8001ad0:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001ada:	6a3a      	ldr	r2, [r7, #32]
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4413      	add	r3, r2
 8001ae0:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d101      	bne.n	8001af0 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8001aec:	2300      	movs	r3, #0
 8001aee:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4293      	cmp	r3, r2
 8001afe:	bf28      	it	cs
 8001b00:	4613      	movcs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d018      	beq.n	8001b3c <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	4413      	add	r3, r2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4619      	mov	r1, r3
 8001b16:	69f8      	ldr	r0, [r7, #28]
 8001b18:	f001 fc27 	bl	800336a <memcpy>
    NumBytesRead += NumBytesRem;
 8001b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4413      	add	r3, r2
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8001b24:	69fa      	ldr	r2, [r7, #28]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4413      	add	r3, r2
 8001b2a:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001b34:	6a3a      	ldr	r2, [r7, #32]
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4413      	add	r3, r2
 8001b3a:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	6a3a      	ldr	r2, [r7, #32]
 8001b46:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3728      	adds	r7, #40	; 0x28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20003f98 	.word	0x20003f98

08001b58 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	; 0x28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4413      	add	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	4a3f      	ldr	r2, [pc, #252]	; (8001c74 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8001b76:	4413      	add	r3, r2
 8001b78:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8001b86:	69fa      	ldr	r2, [r7, #28]
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d854      	bhi.n	8001c38 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	3b01      	subs	r3, #1
 8001b98:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d30f      	bcc.n	8001bc2 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	4413      	add	r3, r2
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f001 fbdb 	bl	800336a <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	441a      	add	r2, r3
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e054      	b.n	8001c6c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d34b      	bcc.n	8001c6a <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d90e      	bls.n	8001c02 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001be4:	6a3b      	ldr	r3, [r7, #32]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	4413      	add	r3, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f001 fbba 	bl	800336a <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	441a      	add	r2, r3
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	e018      	b.n	8001c34 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	4413      	add	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f001 fbab 	bl	800336a <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	6858      	ldr	r0, [r3, #4]
 8001c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	18d1      	adds	r1, r2, r3
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	f001 fba0 	bl	800336a <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad2      	subs	r2, r2, r3
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e019      	b.n	8001c6c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d30f      	bcc.n	8001c6a <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	4413      	add	r3, r2
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c56:	4618      	mov	r0, r3
 8001c58:	f001 fb87 	bl	800336a <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	441a      	add	r2, r3
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3728      	adds	r7, #40	; 0x28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20003f98 	.word	0x20003f98

08001c78 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8001c88:	e002      	b.n	8001c90 <_EncodeStr+0x18>
    Len++;
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8001c90:	68ba      	ldr	r2, [r7, #8]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4413      	add	r3, r2
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f6      	bne.n	8001c8a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d901      	bls.n	8001ca8 <_EncodeStr+0x30>
    Len = Limit;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	2bfe      	cmp	r3, #254	; 0xfe
 8001cac:	d806      	bhi.n	8001cbc <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	60fa      	str	r2, [r7, #12]
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	701a      	strb	r2, [r3, #0]
 8001cba:	e011      	b.n	8001ce0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	60fa      	str	r2, [r7, #12]
 8001cc2:	22ff      	movs	r2, #255	; 0xff
 8001cc4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	60fa      	str	r2, [r7, #12]
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	60fa      	str	r2, [r7, #12]
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	0a12      	lsrs	r2, r2, #8
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8001ce4:	e00a      	b.n	8001cfc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	60fa      	str	r2, [r7, #12]
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	1c51      	adds	r1, r2, #1
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	7812      	ldrb	r2, [r2, #0]
 8001cf4:	701a      	strb	r2, [r3, #0]
    n++;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d3f0      	bcc.n	8001ce6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8001d04:	68fb      	ldr	r3, [r7, #12]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	371c      	adds	r7, #28
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3304      	adds	r3, #4
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001d2c:	1cfb      	adds	r3, r7, #3
 8001d2e:	2201      	movs	r2, #1
 8001d30:	4619      	mov	r1, r3
 8001d32:	2001      	movs	r0, #1
 8001d34:	f7ff fe8e 	bl	8001a54 <SEGGER_RTT_ReadNoLock>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	dd47      	ble.n	8001dd2 <_HandleIncomingPacket+0xac>
    switch (Cmd) {
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d01a      	beq.n	8001d7e <_HandleIncomingPacket+0x58>
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	dc06      	bgt.n	8001d5a <_HandleIncomingPacket+0x34>
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d010      	beq.n	8001d72 <_HandleIncomingPacket+0x4c>
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	dc11      	bgt.n	8001d78 <_HandleIncomingPacket+0x52>
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d009      	beq.n	8001d6c <_HandleIncomingPacket+0x46>
 8001d58:	e02d      	b.n	8001db6 <_HandleIncomingPacket+0x90>
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d015      	beq.n	8001d8a <_HandleIncomingPacket+0x64>
 8001d5e:	2b06      	cmp	r3, #6
 8001d60:	db10      	blt.n	8001d84 <_HandleIncomingPacket+0x5e>
 8001d62:	2b07      	cmp	r3, #7
 8001d64:	d014      	beq.n	8001d90 <_HandleIncomingPacket+0x6a>
 8001d66:	2b80      	cmp	r3, #128	; 0x80
 8001d68:	d015      	beq.n	8001d96 <_HandleIncomingPacket+0x70>
 8001d6a:	e024      	b.n	8001db6 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8001d6c:	f000 fabe 	bl	80022ec <SEGGER_SYSVIEW_Start>
      break;
 8001d70:	e02f      	b.n	8001dd2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8001d72:	f000 fb77 	bl	8002464 <SEGGER_SYSVIEW_Stop>
      break;
 8001d76:	e02c      	b.n	8001dd2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8001d78:	f000 fd2e 	bl	80027d8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8001d7c:	e029      	b.n	8001dd2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8001d7e:	f000 fd17 	bl	80027b0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8001d82:	e026      	b.n	8001dd2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8001d84:	f000 fb94 	bl	80024b0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8001d88:	e023      	b.n	8001dd2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8001d8a:	f000 ffc1 	bl	8002d10 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8001d8e:	e020      	b.n	8001dd2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8001d90:	f000 ffa0 	bl	8002cd4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8001d94:	e01d      	b.n	8001dd2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001d96:	1cfb      	adds	r3, r7, #3
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	f7ff fe59 	bl	8001a54 <SEGGER_RTT_ReadNoLock>
 8001da2:	4603      	mov	r3, r0
 8001da4:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	dd0f      	ble.n	8001dcc <_HandleIncomingPacket+0xa6>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 ff10 	bl	8002bd4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8001db4:	e00a      	b.n	8001dcc <_HandleIncomingPacket+0xa6>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	b25b      	sxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	da08      	bge.n	8001dd0 <_HandleIncomingPacket+0xaa>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001dbe:	1cfb      	adds	r3, r7, #3
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	f7ff fe45 	bl	8001a54 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8001dca:	e001      	b.n	8001dd0 <_HandleIncomingPacket+0xaa>
      break;
 8001dcc:	bf00      	nop
 8001dce:	e000      	b.n	8001dd2 <_HandleIncomingPacket+0xac>
      break;
 8001dd0:	bf00      	nop
    }
  }
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08c      	sub	sp, #48	; 0x30
 8001de0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8001de2:	2301      	movs	r3, #1
 8001de4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	3301      	adds	r3, #1
 8001dea:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001df0:	4b30      	ldr	r3, [pc, #192]	; (8001eb4 <_TrySendOverflowPacket+0xd8>)
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001df6:	e00b      	b.n	8001e10 <_TrySendOverflowPacket+0x34>
 8001df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	701a      	strb	r2, [r3, #0]
 8001e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0c:	09db      	lsrs	r3, r3, #7
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e12:	2b7f      	cmp	r3, #127	; 0x7f
 8001e14:	d8f0      	bhi.n	8001df8 <_TrySendOverflowPacket+0x1c>
 8001e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e18:	1c5a      	adds	r2, r3, #1
 8001e1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e24:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001e26:	4b24      	ldr	r3, [pc, #144]	; (8001eb8 <_TrySendOverflowPacket+0xdc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001e2c:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <_TrySendOverflowPacket+0xd8>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	623b      	str	r3, [r7, #32]
 8001e3e:	e00b      	b.n	8001e58 <_TrySendOverflowPacket+0x7c>
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	627a      	str	r2, [r7, #36]	; 0x24
 8001e46:	6a3a      	ldr	r2, [r7, #32]
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	701a      	strb	r2, [r3, #0]
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	09db      	lsrs	r3, r3, #7
 8001e56:	623b      	str	r3, [r7, #32]
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	2b7f      	cmp	r3, #127	; 0x7f
 8001e5c:	d8f0      	bhi.n	8001e40 <_TrySendOverflowPacket+0x64>
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	1c5a      	adds	r2, r3, #1
 8001e62:	627a      	str	r2, [r7, #36]	; 0x24
 8001e64:	6a3a      	ldr	r2, [r7, #32]
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	701a      	strb	r2, [r3, #0]
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	461a      	mov	r2, r3
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	4619      	mov	r1, r3
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f7ff fe6c 	bl	8001b58 <SEGGER_RTT_WriteSkipNoLock>
 8001e80:	4603      	mov	r3, r0
 8001e82:	613b      	str	r3, [r7, #16]
  if (Status) {
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d009      	beq.n	8001e9e <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <_TrySendOverflowPacket+0xd8>)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <_TrySendOverflowPacket+0xd8>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <_TrySendOverflowPacket+0xd8>)
 8001e9a:	701a      	strb	r2, [r3, #0]
 8001e9c:	e004      	b.n	8001ea8 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8001e9e:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <_TrySendOverflowPacket+0xd8>)
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	4a03      	ldr	r2, [pc, #12]	; (8001eb4 <_TrySendOverflowPacket+0xd8>)
 8001ea6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8001ea8:	693b      	ldr	r3, [r7, #16]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3730      	adds	r7, #48	; 0x30
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20003e70 	.word	0x20003e70
 8001eb8:	e0001004 	.word	0xe0001004

08001ebc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8001ec8:	4b62      	ldr	r3, [pc, #392]	; (8002054 <_SendPacket+0x198>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d010      	beq.n	8001ef2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8001ed0:	4b60      	ldr	r3, [pc, #384]	; (8002054 <_SendPacket+0x198>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 809f 	beq.w	8002018 <_SendPacket+0x15c>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8001eda:	4b5e      	ldr	r3, [pc, #376]	; (8002054 <_SendPacket+0x198>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d108      	bne.n	8001ef4 <_SendPacket+0x38>
    _TrySendOverflowPacket();
 8001ee2:	f7ff ff7b 	bl	8001ddc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8001ee6:	4b5b      	ldr	r3, [pc, #364]	; (8002054 <_SendPacket+0x198>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	f040 8096 	bne.w	800201c <_SendPacket+0x160>
 8001ef0:	e000      	b.n	8001ef4 <_SendPacket+0x38>
    goto Send;
 8001ef2:	bf00      	nop
Send:
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b1f      	cmp	r3, #31
 8001ef8:	d809      	bhi.n	8001f0e <_SendPacket+0x52>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8001efa:	4b56      	ldr	r3, [pc, #344]	; (8002054 <_SendPacket+0x198>)
 8001efc:	69da      	ldr	r2, [r3, #28]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	fa22 f303 	lsr.w	r3, r2, r3
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f040 8089 	bne.w	8002020 <_SendPacket+0x164>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b17      	cmp	r3, #23
 8001f12:	d807      	bhi.n	8001f24 <_SendPacket+0x68>
    *--pStartPacket = EventId;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	701a      	strb	r2, [r3, #0]
 8001f22:	e03d      	b.n	8001fa0 <_SendPacket+0xe4>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8001f30:	d912      	bls.n	8001f58 <_SendPacket+0x9c>
      *--pStartPacket = (NumBytes >> 7);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	09db      	lsrs	r3, r3, #7
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	3b01      	subs	r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	701a      	strb	r2, [r3, #0]
 8001f56:	e006      	b.n	8001f66 <_SendPacket+0xaa>
    } else {
      *--pStartPacket = NumBytes;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b7f      	cmp	r3, #127	; 0x7f
 8001f6a:	d912      	bls.n	8001f92 <_SendPacket+0xd6>
      *--pStartPacket = (EventId >> 7);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	09db      	lsrs	r3, r3, #7
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	e006      	b.n	8001fa0 <_SendPacket+0xe4>
    } else {
      *--pStartPacket = EventId;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001fa0:	4b2d      	ldr	r3, [pc, #180]	; (8002058 <_SendPacket+0x19c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001fa6:	4b2b      	ldr	r3, [pc, #172]	; (8002054 <_SendPacket+0x198>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	623b      	str	r3, [r7, #32]
 8001fb8:	e00b      	b.n	8001fd2 <_SendPacket+0x116>
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	627a      	str	r2, [r7, #36]	; 0x24
 8001fc0:	6a3a      	ldr	r2, [r7, #32]
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	701a      	strb	r2, [r3, #0]
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	09db      	lsrs	r3, r3, #7
 8001fd0:	623b      	str	r3, [r7, #32]
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	2b7f      	cmp	r3, #127	; 0x7f
 8001fd6:	d8f0      	bhi.n	8001fba <_SendPacket+0xfe>
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	627a      	str	r2, [r7, #36]	; 0x24
 8001fde:	6a3a      	ldr	r2, [r7, #32]
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	701a      	strb	r2, [r3, #0]
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68f9      	ldr	r1, [r7, #12]
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f7ff fdb0 	bl	8001b58 <SEGGER_RTT_WriteSkipNoLock>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	613b      	str	r3, [r7, #16]
  if (Status) {
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <_SendPacket+0x14e>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002002:	4a14      	ldr	r2, [pc, #80]	; (8002054 <_SendPacket+0x198>)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	60d3      	str	r3, [r2, #12]
 8002008:	e00b      	b.n	8002022 <_SendPacket+0x166>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800200a:	4b12      	ldr	r3, [pc, #72]	; (8002054 <_SendPacket+0x198>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	3301      	adds	r3, #1
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <_SendPacket+0x198>)
 8002014:	701a      	strb	r2, [r3, #0]
 8002016:	e004      	b.n	8002022 <_SendPacket+0x166>
    goto SendDone;
 8002018:	bf00      	nop
 800201a:	e002      	b.n	8002022 <_SendPacket+0x166>
      goto SendDone;
 800201c:	bf00      	nop
 800201e:	e000      	b.n	8002022 <_SendPacket+0x166>
      goto SendDone;
 8002020:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <_SendPacket+0x1a0>)
 8002024:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <_SendPacket+0x1a0>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202e:	429a      	cmp	r2, r3
 8002030:	d00b      	beq.n	800204a <_SendPacket+0x18e>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002032:	4b08      	ldr	r3, [pc, #32]	; (8002054 <_SendPacket+0x198>)
 8002034:	789b      	ldrb	r3, [r3, #2]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d107      	bne.n	800204a <_SendPacket+0x18e>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <_SendPacket+0x198>)
 800203c:	2201      	movs	r2, #1
 800203e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002040:	f7ff fe71 	bl	8001d26 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <_SendPacket+0x198>)
 8002046:	2200      	movs	r2, #0
 8002048:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800204a:	bf00      	nop
 800204c:	3728      	adds	r7, #40	; 0x28
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20003e70 	.word	0x20003e70
 8002058:	e0001004 	.word	0xe0001004
 800205c:	20003f98 	.word	0x20003f98

08002060 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002068:	f3ef 8311 	mrs	r3, BASEPRI
 800206c:	f04f 0120 	mov.w	r1, #32
 8002070:	f381 8811 	msr	BASEPRI, r1
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	4808      	ldr	r0, [pc, #32]	; (8002098 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002078:	f7ff fe4a 	bl	8001d10 <_PreparePacket>
 800207c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	68b8      	ldr	r0, [r7, #8]
 8002084:	f7ff ff1a 	bl	8001ebc <_SendPacket>
  RECORD_END();
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f383 8811 	msr	BASEPRI, r3
}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20003ea0 	.word	0x20003ea0

0800209c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800209c:	b580      	push	{r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80020a6:	f3ef 8311 	mrs	r3, BASEPRI
 80020aa:	f04f 0120 	mov.w	r1, #32
 80020ae:	f381 8811 	msr	BASEPRI, r1
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	4816      	ldr	r0, [pc, #88]	; (8002110 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80020b6:	f7ff fe2b 	bl	8001d10 <_PreparePacket>
 80020ba:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	61fb      	str	r3, [r7, #28]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	61bb      	str	r3, [r7, #24]
 80020c8:	e00b      	b.n	80020e2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	61fa      	str	r2, [r7, #28]
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	701a      	strb	r2, [r3, #0]
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	09db      	lsrs	r3, r3, #7
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	2b7f      	cmp	r3, #127	; 0x7f
 80020e6:	d8f0      	bhi.n	80020ca <SEGGER_SYSVIEW_RecordU32+0x2e>
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	61fa      	str	r2, [r7, #28]
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	701a      	strb	r2, [r3, #0]
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	68f9      	ldr	r1, [r7, #12]
 80020fc:	6938      	ldr	r0, [r7, #16]
 80020fe:	f7ff fedd 	bl	8001ebc <_SendPacket>
  RECORD_END();
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f383 8811 	msr	BASEPRI, r3
}
 8002108:	bf00      	nop
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20003ea0 	.word	0x20003ea0

08002114 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b08c      	sub	sp, #48	; 0x30
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002120:	f3ef 8311 	mrs	r3, BASEPRI
 8002124:	f04f 0120 	mov.w	r1, #32
 8002128:	f381 8811 	msr	BASEPRI, r1
 800212c:	61fb      	str	r3, [r7, #28]
 800212e:	4825      	ldr	r0, [pc, #148]	; (80021c4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002130:	f7ff fdee 	bl	8001d10 <_PreparePacket>
 8002134:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
 8002142:	e00b      	b.n	800215c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	62fa      	str	r2, [r7, #44]	; 0x2c
 800214a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	701a      	strb	r2, [r3, #0]
 8002156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002158:	09db      	lsrs	r3, r3, #7
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
 800215c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215e:	2b7f      	cmp	r3, #127	; 0x7f
 8002160:	d8f0      	bhi.n	8002144 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8002162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002170:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	623b      	str	r3, [r7, #32]
 800217a:	e00b      	b.n	8002194 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	627a      	str	r2, [r7, #36]	; 0x24
 8002182:	6a3a      	ldr	r2, [r7, #32]
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	701a      	strb	r2, [r3, #0]
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	09db      	lsrs	r3, r3, #7
 8002192:	623b      	str	r3, [r7, #32]
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	2b7f      	cmp	r3, #127	; 0x7f
 8002198:	d8f0      	bhi.n	800217c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	627a      	str	r2, [r7, #36]	; 0x24
 80021a0:	6a3a      	ldr	r2, [r7, #32]
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	701a      	strb	r2, [r3, #0]
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	6979      	ldr	r1, [r7, #20]
 80021ae:	69b8      	ldr	r0, [r7, #24]
 80021b0:	f7ff fe84 	bl	8001ebc <_SendPacket>
  RECORD_END();
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f383 8811 	msr	BASEPRI, r3
}
 80021ba:	bf00      	nop
 80021bc:	3730      	adds	r7, #48	; 0x30
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20003ea0 	.word	0x20003ea0

080021c8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b090      	sub	sp, #64	; 0x40
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80021d6:	f3ef 8311 	mrs	r3, BASEPRI
 80021da:	f04f 0120 	mov.w	r1, #32
 80021de:	f381 8811 	msr	BASEPRI, r1
 80021e2:	61fb      	str	r3, [r7, #28]
 80021e4:	4840      	ldr	r0, [pc, #256]	; (80022e8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80021e6:	f7ff fd93 	bl	8001d10 <_PreparePacket>
 80021ea:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80021f8:	e00b      	b.n	8002212 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80021fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002200:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	701a      	strb	r2, [r3, #0]
 800220c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800220e:	09db      	lsrs	r3, r3, #7
 8002210:	63bb      	str	r3, [r7, #56]	; 0x38
 8002212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002214:	2b7f      	cmp	r3, #127	; 0x7f
 8002216:	d8f0      	bhi.n	80021fa <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8002218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800221e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	701a      	strb	r2, [r3, #0]
 8002224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002226:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	637b      	str	r3, [r7, #52]	; 0x34
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	633b      	str	r3, [r7, #48]	; 0x30
 8002230:	e00b      	b.n	800224a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8002232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	637a      	str	r2, [r7, #52]	; 0x34
 8002238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	701a      	strb	r2, [r3, #0]
 8002244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002246:	09db      	lsrs	r3, r3, #7
 8002248:	633b      	str	r3, [r7, #48]	; 0x30
 800224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224c:	2b7f      	cmp	r3, #127	; 0x7f
 800224e:	d8f0      	bhi.n	8002232 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8002250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	637a      	str	r2, [r7, #52]	; 0x34
 8002256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	701a      	strb	r2, [r3, #0]
 800225c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
 8002268:	e00b      	b.n	8002282 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	701a      	strb	r2, [r3, #0]
 800227c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227e:	09db      	lsrs	r3, r3, #7
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
 8002282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002284:	2b7f      	cmp	r3, #127	; 0x7f
 8002286:	d8f0      	bhi.n	800226a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8002288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800228e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	701a      	strb	r2, [r3, #0]
 8002294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002296:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
 800229c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800229e:	623b      	str	r3, [r7, #32]
 80022a0:	e00b      	b.n	80022ba <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	627a      	str	r2, [r7, #36]	; 0x24
 80022a8:	6a3a      	ldr	r2, [r7, #32]
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	701a      	strb	r2, [r3, #0]
 80022b4:	6a3b      	ldr	r3, [r7, #32]
 80022b6:	09db      	lsrs	r3, r3, #7
 80022b8:	623b      	str	r3, [r7, #32]
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	2b7f      	cmp	r3, #127	; 0x7f
 80022be:	d8f0      	bhi.n	80022a2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	627a      	str	r2, [r7, #36]	; 0x24
 80022c6:	6a3a      	ldr	r2, [r7, #32]
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	701a      	strb	r2, [r3, #0]
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	6979      	ldr	r1, [r7, #20]
 80022d4:	69b8      	ldr	r0, [r7, #24]
 80022d6:	f7ff fdf1 	bl	8001ebc <_SendPacket>
  RECORD_END();
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f383 8811 	msr	BASEPRI, r3
}
 80022e0:	bf00      	nop
 80022e2:	3740      	adds	r7, #64	; 0x40
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20003ea0 	.word	0x20003ea0

080022ec <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08c      	sub	sp, #48	; 0x30
 80022f0:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 80022f2:	4b59      	ldr	r3, [pc, #356]	; (8002458 <SEGGER_SYSVIEW_Start+0x16c>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f040 80aa 	bne.w	8002450 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 80022fc:	4b56      	ldr	r3, [pc, #344]	; (8002458 <SEGGER_SYSVIEW_Start+0x16c>)
 80022fe:	2201      	movs	r2, #1
 8002300:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8002302:	f3ef 8311 	mrs	r3, BASEPRI
 8002306:	f04f 0120 	mov.w	r1, #32
 800230a:	f381 8811 	msr	BASEPRI, r1
 800230e:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8002310:	220a      	movs	r2, #10
 8002312:	4952      	ldr	r1, [pc, #328]	; (800245c <SEGGER_SYSVIEW_Start+0x170>)
 8002314:	2001      	movs	r0, #1
 8002316:	f7ff fc1f 	bl	8001b58 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002320:	200a      	movs	r0, #10
 8002322:	f7ff fe9d 	bl	8002060 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002326:	f3ef 8311 	mrs	r3, BASEPRI
 800232a:	f04f 0120 	mov.w	r1, #32
 800232e:	f381 8811 	msr	BASEPRI, r1
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	484a      	ldr	r0, [pc, #296]	; (8002460 <SEGGER_SYSVIEW_Start+0x174>)
 8002336:	f7ff fceb 	bl	8001d10 <_PreparePacket>
 800233a:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002344:	4b44      	ldr	r3, [pc, #272]	; (8002458 <SEGGER_SYSVIEW_Start+0x16c>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
 800234a:	e00b      	b.n	8002364 <SEGGER_SYSVIEW_Start+0x78>
 800234c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]
 800235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002360:	09db      	lsrs	r3, r3, #7
 8002362:	62bb      	str	r3, [r7, #40]	; 0x28
 8002364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002366:	2b7f      	cmp	r3, #127	; 0x7f
 8002368:	d8f0      	bhi.n	800234c <SEGGER_SYSVIEW_Start+0x60>
 800236a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	701a      	strb	r2, [r3, #0]
 8002376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002378:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
 800237e:	4b36      	ldr	r3, [pc, #216]	; (8002458 <SEGGER_SYSVIEW_Start+0x16c>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	623b      	str	r3, [r7, #32]
 8002384:	e00b      	b.n	800239e <SEGGER_SYSVIEW_Start+0xb2>
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	627a      	str	r2, [r7, #36]	; 0x24
 800238c:	6a3a      	ldr	r2, [r7, #32]
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	701a      	strb	r2, [r3, #0]
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	09db      	lsrs	r3, r3, #7
 800239c:	623b      	str	r3, [r7, #32]
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	2b7f      	cmp	r3, #127	; 0x7f
 80023a2:	d8f0      	bhi.n	8002386 <SEGGER_SYSVIEW_Start+0x9a>
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	627a      	str	r2, [r7, #36]	; 0x24
 80023aa:	6a3a      	ldr	r2, [r7, #32]
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	701a      	strb	r2, [r3, #0]
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	4b27      	ldr	r3, [pc, #156]	; (8002458 <SEGGER_SYSVIEW_Start+0x16c>)
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	61bb      	str	r3, [r7, #24]
 80023be:	e00b      	b.n	80023d8 <SEGGER_SYSVIEW_Start+0xec>
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	61fa      	str	r2, [r7, #28]
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	701a      	strb	r2, [r3, #0]
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	09db      	lsrs	r3, r3, #7
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	2b7f      	cmp	r3, #127	; 0x7f
 80023dc:	d8f0      	bhi.n	80023c0 <SEGGER_SYSVIEW_Start+0xd4>
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	61fa      	str	r2, [r7, #28]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	701a      	strb	r2, [r3, #0]
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	2302      	movs	r3, #2
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	e00b      	b.n	8002410 <SEGGER_SYSVIEW_Start+0x124>
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	617a      	str	r2, [r7, #20]
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	09db      	lsrs	r3, r3, #7
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	2b7f      	cmp	r3, #127	; 0x7f
 8002414:	d8f0      	bhi.n	80023f8 <SEGGER_SYSVIEW_Start+0x10c>
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	617a      	str	r2, [r7, #20]
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	701a      	strb	r2, [r3, #0]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002426:	2218      	movs	r2, #24
 8002428:	6839      	ldr	r1, [r7, #0]
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff fd46 	bl	8001ebc <_SendPacket>
      RECORD_END();
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002436:	4b08      	ldr	r3, [pc, #32]	; (8002458 <SEGGER_SYSVIEW_Start+0x16c>)
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <SEGGER_SYSVIEW_Start+0x16c>)
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002444:	f000 f9c8 	bl	80027d8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002448:	f000 f9b2 	bl	80027b0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800244c:	f000 fc60 	bl	8002d10 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8002450:	bf00      	nop
 8002452:	3730      	adds	r7, #48	; 0x30
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20003e70 	.word	0x20003e70
 800245c:	08003cd4 	.word	0x08003cd4
 8002460:	20003ea0 	.word	0x20003ea0

08002464 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800246a:	f3ef 8311 	mrs	r3, BASEPRI
 800246e:	f04f 0120 	mov.w	r1, #32
 8002472:	f381 8811 	msr	BASEPRI, r1
 8002476:	607b      	str	r3, [r7, #4]
 8002478:	480b      	ldr	r0, [pc, #44]	; (80024a8 <SEGGER_SYSVIEW_Stop+0x44>)
 800247a:	f7ff fc49 	bl	8001d10 <_PreparePacket>
 800247e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <SEGGER_SYSVIEW_Stop+0x48>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d007      	beq.n	8002498 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002488:	220b      	movs	r2, #11
 800248a:	6839      	ldr	r1, [r7, #0]
 800248c:	6838      	ldr	r0, [r7, #0]
 800248e:	f7ff fd15 	bl	8001ebc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <SEGGER_SYSVIEW_Stop+0x48>)
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f383 8811 	msr	BASEPRI, r3
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20003ea0 	.word	0x20003ea0
 80024ac:	20003e70 	.word	0x20003e70

080024b0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08c      	sub	sp, #48	; 0x30
 80024b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80024b6:	f3ef 8311 	mrs	r3, BASEPRI
 80024ba:	f04f 0120 	mov.w	r1, #32
 80024be:	f381 8811 	msr	BASEPRI, r1
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	4845      	ldr	r0, [pc, #276]	; (80025dc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80024c6:	f7ff fc23 	bl	8001d10 <_PreparePacket>
 80024ca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024d4:	4b42      	ldr	r3, [pc, #264]	; (80025e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024da:	e00b      	b.n	80024f4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80024dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	701a      	strb	r2, [r3, #0]
 80024ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f0:	09db      	lsrs	r3, r3, #7
 80024f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80024f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f6:	2b7f      	cmp	r3, #127	; 0x7f
 80024f8:	d8f0      	bhi.n	80024dc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80024fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002508:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
 800250e:	4b34      	ldr	r3, [pc, #208]	; (80025e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	623b      	str	r3, [r7, #32]
 8002514:	e00b      	b.n	800252e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	627a      	str	r2, [r7, #36]	; 0x24
 800251c:	6a3a      	ldr	r2, [r7, #32]
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	701a      	strb	r2, [r3, #0]
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	09db      	lsrs	r3, r3, #7
 800252c:	623b      	str	r3, [r7, #32]
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	2b7f      	cmp	r3, #127	; 0x7f
 8002532:	d8f0      	bhi.n	8002516 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	627a      	str	r2, [r7, #36]	; 0x24
 800253a:	6a3a      	ldr	r2, [r7, #32]
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	701a      	strb	r2, [r3, #0]
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	61fb      	str	r3, [r7, #28]
 8002548:	4b25      	ldr	r3, [pc, #148]	; (80025e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	61bb      	str	r3, [r7, #24]
 800254e:	e00b      	b.n	8002568 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	61fa      	str	r2, [r7, #28]
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	09db      	lsrs	r3, r3, #7
 8002566:	61bb      	str	r3, [r7, #24]
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	2b7f      	cmp	r3, #127	; 0x7f
 800256c:	d8f0      	bhi.n	8002550 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	61fa      	str	r2, [r7, #28]
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	2302      	movs	r3, #2
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	e00b      	b.n	80025a0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	617a      	str	r2, [r7, #20]
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	701a      	strb	r2, [r3, #0]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	09db      	lsrs	r3, r3, #7
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	2b7f      	cmp	r3, #127	; 0x7f
 80025a4:	d8f0      	bhi.n	8002588 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	617a      	str	r2, [r7, #20]
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	701a      	strb	r2, [r3, #0]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80025b6:	2218      	movs	r2, #24
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	68b8      	ldr	r0, [r7, #8]
 80025bc:	f7ff fc7e 	bl	8001ebc <_SendPacket>
  RECORD_END();
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80025ce:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	4798      	blx	r3
  }
}
 80025d4:	bf00      	nop
 80025d6:	3730      	adds	r7, #48	; 0x30
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20003ea0 	.word	0x20003ea0
 80025e0:	20003e70 	.word	0x20003e70

080025e4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b092      	sub	sp, #72	; 0x48
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80025ec:	f3ef 8311 	mrs	r3, BASEPRI
 80025f0:	f04f 0120 	mov.w	r1, #32
 80025f4:	f381 8811 	msr	BASEPRI, r1
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	486b      	ldr	r0, [pc, #428]	; (80027a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80025fc:	f7ff fb88 	bl	8001d10 <_PreparePacket>
 8002600:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	647b      	str	r3, [r7, #68]	; 0x44
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	4b67      	ldr	r3, [pc, #412]	; (80027ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	089b      	lsrs	r3, r3, #2
 8002616:	643b      	str	r3, [r7, #64]	; 0x40
 8002618:	e00b      	b.n	8002632 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 800261a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	647a      	str	r2, [r7, #68]	; 0x44
 8002620:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	701a      	strb	r2, [r3, #0]
 800262c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800262e:	09db      	lsrs	r3, r3, #7
 8002630:	643b      	str	r3, [r7, #64]	; 0x40
 8002632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002634:	2b7f      	cmp	r3, #127	; 0x7f
 8002636:	d8f0      	bhi.n	800261a <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8002638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	647a      	str	r2, [r7, #68]	; 0x44
 800263e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002646:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	63bb      	str	r3, [r7, #56]	; 0x38
 8002652:	e00b      	b.n	800266c <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8002654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	63fa      	str	r2, [r7, #60]	; 0x3c
 800265a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]
 8002666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002668:	09db      	lsrs	r3, r3, #7
 800266a:	63bb      	str	r3, [r7, #56]	; 0x38
 800266c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266e:	2b7f      	cmp	r3, #127	; 0x7f
 8002670:	d8f0      	bhi.n	8002654 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8002672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002678:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	701a      	strb	r2, [r3, #0]
 800267e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002680:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2220      	movs	r2, #32
 8002688:	4619      	mov	r1, r3
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f7ff faf4 	bl	8001c78 <_EncodeStr>
 8002690:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8002692:	2209      	movs	r2, #9
 8002694:	68f9      	ldr	r1, [r7, #12]
 8002696:	6938      	ldr	r0, [r7, #16]
 8002698:	f7ff fc10 	bl	8001ebc <_SendPacket>
  //
  pPayload = pPayloadStart;
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	637b      	str	r3, [r7, #52]	; 0x34
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4b40      	ldr	r3, [pc, #256]	; (80027ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	633b      	str	r3, [r7, #48]	; 0x30
 80026b2:	e00b      	b.n	80026cc <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 80026b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	637a      	str	r2, [r7, #52]	; 0x34
 80026ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]
 80026c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c8:	09db      	lsrs	r3, r3, #7
 80026ca:	633b      	str	r3, [r7, #48]	; 0x30
 80026cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ce:	2b7f      	cmp	r3, #127	; 0x7f
 80026d0:	d8f0      	bhi.n	80026b4 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 80026d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	637a      	str	r2, [r7, #52]	; 0x34
 80026d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	701a      	strb	r2, [r3, #0]
 80026de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ec:	e00b      	b.n	8002706 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 80026ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	701a      	strb	r2, [r3, #0]
 8002700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002702:	09db      	lsrs	r3, r3, #7
 8002704:	62bb      	str	r3, [r7, #40]	; 0x28
 8002706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002708:	2b7f      	cmp	r3, #127	; 0x7f
 800270a:	d8f0      	bhi.n	80026ee <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 800270c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	623b      	str	r3, [r7, #32]
 8002726:	e00b      	b.n	8002740 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	627a      	str	r2, [r7, #36]	; 0x24
 800272e:	6a3a      	ldr	r2, [r7, #32]
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	09db      	lsrs	r3, r3, #7
 800273e:	623b      	str	r3, [r7, #32]
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	2b7f      	cmp	r3, #127	; 0x7f
 8002744:	d8f0      	bhi.n	8002728 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	627a      	str	r2, [r7, #36]	; 0x24
 800274c:	6a3a      	ldr	r2, [r7, #32]
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	e00b      	b.n	8002778 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	61fa      	str	r2, [r7, #28]
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	701a      	strb	r2, [r3, #0]
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	09db      	lsrs	r3, r3, #7
 8002776:	61bb      	str	r3, [r7, #24]
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	2b7f      	cmp	r3, #127	; 0x7f
 800277c:	d8f0      	bhi.n	8002760 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	61fa      	str	r2, [r7, #28]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	701a      	strb	r2, [r3, #0]
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800278e:	2215      	movs	r2, #21
 8002790:	68f9      	ldr	r1, [r7, #12]
 8002792:	6938      	ldr	r0, [r7, #16]
 8002794:	f7ff fb92 	bl	8001ebc <_SendPacket>
  RECORD_END();
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f383 8811 	msr	BASEPRI, r3
}
 800279e:	bf00      	nop
 80027a0:	3748      	adds	r7, #72	; 0x48
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20003ea0 	.word	0x20003ea0
 80027ac:	20003e70 	.word	0x20003e70

080027b0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80027b4:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80027c6:	4b03      	ldr	r3, [pc, #12]	; (80027d4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	4798      	blx	r3
  }
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20003e70 	.word	0x20003e70

080027d8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80027d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80027de:	4b12      	ldr	r3, [pc, #72]	; (8002828 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d015      	beq.n	8002812 <SEGGER_SYSVIEW_RecordSystime+0x3a>
 80027e6:	4b10      	ldr	r3, [pc, #64]	; (8002828 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d010      	beq.n	8002812 <SEGGER_SYSVIEW_RecordSystime+0x3a>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80027f0:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4798      	blx	r3
 80027f8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80027fc:	6839      	ldr	r1, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80027fe:	e897 0018 	ldmia.w	r7, {r3, r4}
 8002802:	0025      	movs	r5, r4
 8002804:	2600      	movs	r6, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002806:	462b      	mov	r3, r5
 8002808:	461a      	mov	r2, r3
 800280a:	200d      	movs	r0, #13
 800280c:	f7ff fc82 	bl	8002114 <SEGGER_SYSVIEW_RecordU32x2>
 8002810:	e005      	b.n	800281e <SEGGER_SYSVIEW_RecordSystime+0x46>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <SEGGER_SYSVIEW_RecordSystime+0x54>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4619      	mov	r1, r3
 8002818:	200c      	movs	r0, #12
 800281a:	f7ff fc3f 	bl	800209c <SEGGER_SYSVIEW_RecordU32>
  }
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002826:	bf00      	nop
 8002828:	20003e70 	.word	0x20003e70
 800282c:	e0001004 	.word	0xe0001004

08002830 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002836:	f3ef 8311 	mrs	r3, BASEPRI
 800283a:	f04f 0120 	mov.w	r1, #32
 800283e:	f381 8811 	msr	BASEPRI, r1
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	4819      	ldr	r0, [pc, #100]	; (80028ac <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8002846:	f7ff fa63 	bl	8001d10 <_PreparePacket>
 800284a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8002850:	4b17      	ldr	r3, [pc, #92]	; (80028b0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002858:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	e00b      	b.n	800287c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	617a      	str	r2, [r7, #20]
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	09db      	lsrs	r3, r3, #7
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	2b7f      	cmp	r3, #127	; 0x7f
 8002880:	d8f0      	bhi.n	8002864 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	617a      	str	r2, [r7, #20]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	701a      	strb	r2, [r3, #0]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8002892:	2202      	movs	r2, #2
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	68b8      	ldr	r0, [r7, #8]
 8002898:	f7ff fb10 	bl	8001ebc <_SendPacket>
  RECORD_END();
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f383 8811 	msr	BASEPRI, r3
}
 80028a2:	bf00      	nop
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20003ea0 	.word	0x20003ea0
 80028b0:	e000ed04 	.word	0xe000ed04

080028b4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80028ba:	f3ef 8311 	mrs	r3, BASEPRI
 80028be:	f04f 0120 	mov.w	r1, #32
 80028c2:	f381 8811 	msr	BASEPRI, r1
 80028c6:	607b      	str	r3, [r7, #4]
 80028c8:	4807      	ldr	r0, [pc, #28]	; (80028e8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80028ca:	f7ff fa21 	bl	8001d10 <_PreparePacket>
 80028ce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80028d0:	2203      	movs	r2, #3
 80028d2:	6839      	ldr	r1, [r7, #0]
 80028d4:	6838      	ldr	r0, [r7, #0]
 80028d6:	f7ff faf1 	bl	8001ebc <_SendPacket>
  RECORD_END();
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f383 8811 	msr	BASEPRI, r3
}
 80028e0:	bf00      	nop
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20003ea0 	.word	0x20003ea0

080028ec <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80028f2:	f3ef 8311 	mrs	r3, BASEPRI
 80028f6:	f04f 0120 	mov.w	r1, #32
 80028fa:	f381 8811 	msr	BASEPRI, r1
 80028fe:	607b      	str	r3, [r7, #4]
 8002900:	4807      	ldr	r0, [pc, #28]	; (8002920 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8002902:	f7ff fa05 	bl	8001d10 <_PreparePacket>
 8002906:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8002908:	2212      	movs	r2, #18
 800290a:	6839      	ldr	r1, [r7, #0]
 800290c:	6838      	ldr	r0, [r7, #0]
 800290e:	f7ff fad5 	bl	8001ebc <_SendPacket>
  RECORD_END();
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f383 8811 	msr	BASEPRI, r3
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20003ea0 	.word	0x20003ea0

08002924 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800292a:	f3ef 8311 	mrs	r3, BASEPRI
 800292e:	f04f 0120 	mov.w	r1, #32
 8002932:	f381 8811 	msr	BASEPRI, r1
 8002936:	607b      	str	r3, [r7, #4]
 8002938:	4807      	ldr	r0, [pc, #28]	; (8002958 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800293a:	f7ff f9e9 	bl	8001d10 <_PreparePacket>
 800293e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8002940:	2211      	movs	r2, #17
 8002942:	6839      	ldr	r1, [r7, #0]
 8002944:	6838      	ldr	r0, [r7, #0]
 8002946:	f7ff fab9 	bl	8001ebc <_SendPacket>
  RECORD_END();
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f383 8811 	msr	BASEPRI, r3
}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20003ea0 	.word	0x20003ea0

0800295c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002964:	f3ef 8311 	mrs	r3, BASEPRI
 8002968:	f04f 0120 	mov.w	r1, #32
 800296c:	f381 8811 	msr	BASEPRI, r1
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	481a      	ldr	r0, [pc, #104]	; (80029dc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8002974:	f7ff f9cc 	bl	8001d10 <_PreparePacket>
 8002978:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800297e:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	089b      	lsrs	r3, r3, #2
 8002988:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	61fb      	str	r3, [r7, #28]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	e00b      	b.n	80029ac <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	61fa      	str	r2, [r7, #28]
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	701a      	strb	r2, [r3, #0]
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	09db      	lsrs	r3, r3, #7
 80029aa:	61bb      	str	r3, [r7, #24]
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2b7f      	cmp	r3, #127	; 0x7f
 80029b0:	d8f0      	bhi.n	8002994 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	61fa      	str	r2, [r7, #28]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80029c2:	2208      	movs	r2, #8
 80029c4:	68f9      	ldr	r1, [r7, #12]
 80029c6:	6938      	ldr	r0, [r7, #16]
 80029c8:	f7ff fa78 	bl	8001ebc <_SendPacket>
  RECORD_END();
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f383 8811 	msr	BASEPRI, r3
}
 80029d2:	bf00      	nop
 80029d4:	3720      	adds	r7, #32
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20003ea0 	.word	0x20003ea0
 80029e0:	20003e70 	.word	0x20003e70

080029e4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80029ec:	f3ef 8311 	mrs	r3, BASEPRI
 80029f0:	f04f 0120 	mov.w	r1, #32
 80029f4:	f381 8811 	msr	BASEPRI, r1
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	481a      	ldr	r0, [pc, #104]	; (8002a64 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80029fc:	f7ff f988 	bl	8001d10 <_PreparePacket>
 8002a00:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002a06:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	089b      	lsrs	r3, r3, #2
 8002a10:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	61fb      	str	r3, [r7, #28]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	e00b      	b.n	8002a34 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	61fa      	str	r2, [r7, #28]
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	09db      	lsrs	r3, r3, #7
 8002a32:	61bb      	str	r3, [r7, #24]
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	2b7f      	cmp	r3, #127	; 0x7f
 8002a38:	d8f0      	bhi.n	8002a1c <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	61fa      	str	r2, [r7, #28]
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	68f9      	ldr	r1, [r7, #12]
 8002a4e:	6938      	ldr	r0, [r7, #16]
 8002a50:	f7ff fa34 	bl	8001ebc <_SendPacket>
  RECORD_END();
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f383 8811 	msr	BASEPRI, r3
}
 8002a5a:	bf00      	nop
 8002a5c:	3720      	adds	r7, #32
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20003ea0 	.word	0x20003ea0
 8002a68:	20003e70 	.word	0x20003e70

08002a6c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b088      	sub	sp, #32
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002a74:	f3ef 8311 	mrs	r3, BASEPRI
 8002a78:	f04f 0120 	mov.w	r1, #32
 8002a7c:	f381 8811 	msr	BASEPRI, r1
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	481a      	ldr	r0, [pc, #104]	; (8002aec <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8002a84:	f7ff f944 	bl	8001d10 <_PreparePacket>
 8002a88:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002a8e:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	089b      	lsrs	r3, r3, #2
 8002a98:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	61bb      	str	r3, [r7, #24]
 8002aa2:	e00b      	b.n	8002abc <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	61fa      	str	r2, [r7, #28]
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	09db      	lsrs	r3, r3, #7
 8002aba:	61bb      	str	r3, [r7, #24]
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2b7f      	cmp	r3, #127	; 0x7f
 8002ac0:	d8f0      	bhi.n	8002aa4 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	61fa      	str	r2, [r7, #28]
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8002ad2:	2206      	movs	r2, #6
 8002ad4:	68f9      	ldr	r1, [r7, #12]
 8002ad6:	6938      	ldr	r0, [r7, #16]
 8002ad8:	f7ff f9f0 	bl	8001ebc <_SendPacket>
  RECORD_END();
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f383 8811 	msr	BASEPRI, r3
}
 8002ae2:	bf00      	nop
 8002ae4:	3720      	adds	r7, #32
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20003ea0 	.word	0x20003ea0
 8002af0:	20003e70 	.word	0x20003e70

08002af4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002afe:	f3ef 8311 	mrs	r3, BASEPRI
 8002b02:	f04f 0120 	mov.w	r1, #32
 8002b06:	f381 8811 	msr	BASEPRI, r1
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	4827      	ldr	r0, [pc, #156]	; (8002bac <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8002b0e:	f7ff f8ff 	bl	8001d10 <_PreparePacket>
 8002b12:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002b18:	4b25      	ldr	r3, [pc, #148]	; (8002bb0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	089b      	lsrs	r3, r3, #2
 8002b22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	623b      	str	r3, [r7, #32]
 8002b2c:	e00b      	b.n	8002b46 <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	627a      	str	r2, [r7, #36]	; 0x24
 8002b34:	6a3a      	ldr	r2, [r7, #32]
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	09db      	lsrs	r3, r3, #7
 8002b44:	623b      	str	r3, [r7, #32]
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	2b7f      	cmp	r3, #127	; 0x7f
 8002b4a:	d8f0      	bhi.n	8002b2e <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	627a      	str	r2, [r7, #36]	; 0x24
 8002b52:	6a3a      	ldr	r2, [r7, #32]
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	701a      	strb	r2, [r3, #0]
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	61fb      	str	r3, [r7, #28]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	61bb      	str	r3, [r7, #24]
 8002b64:	e00b      	b.n	8002b7e <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	1c5a      	adds	r2, r3, #1
 8002b6a:	61fa      	str	r2, [r7, #28]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	701a      	strb	r2, [r3, #0]
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	09db      	lsrs	r3, r3, #7
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	2b7f      	cmp	r3, #127	; 0x7f
 8002b82:	d8f0      	bhi.n	8002b66 <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	61fa      	str	r2, [r7, #28]
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	701a      	strb	r2, [r3, #0]
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8002b94:	2207      	movs	r2, #7
 8002b96:	68f9      	ldr	r1, [r7, #12]
 8002b98:	6938      	ldr	r0, [r7, #16]
 8002b9a:	f7ff f98f 	bl	8001ebc <_SendPacket>
  RECORD_END();
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f383 8811 	msr	BASEPRI, r3
}
 8002ba4:	bf00      	nop
 8002ba6:	3728      	adds	r7, #40	; 0x28
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	20003ea0 	.word	0x20003ea0
 8002bb0:	20003e70 	.word	0x20003e70

08002bb4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8002bbc:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	089b      	lsrs	r3, r3, #2
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr
 8002bd0:	20003e70 	.word	0x20003e70

08002bd4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08c      	sub	sp, #48	; 0x30
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8002bde:	4b3b      	ldr	r3, [pc, #236]	; (8002ccc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d06d      	beq.n	8002cc2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8002be6:	4b39      	ldr	r3, [pc, #228]	; (8002ccc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8002bec:	2300      	movs	r3, #0
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bf0:	e008      	b.n	8002c04 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8002bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d007      	beq.n	8002c0e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c00:	3301      	adds	r3, #1
 8002c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c04:	79fa      	ldrb	r2, [r7, #7]
 8002c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d8f2      	bhi.n	8002bf2 <SEGGER_SYSVIEW_SendModule+0x1e>
 8002c0c:	e000      	b.n	8002c10 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8002c0e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8002c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d055      	beq.n	8002cc2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002c16:	f3ef 8311 	mrs	r3, BASEPRI
 8002c1a:	f04f 0120 	mov.w	r1, #32
 8002c1e:	f381 8811 	msr	BASEPRI, r1
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	482a      	ldr	r0, [pc, #168]	; (8002cd0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8002c26:	f7ff f873 	bl	8001d10 <_PreparePacket>
 8002c2a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	623b      	str	r3, [r7, #32]
 8002c38:	e00b      	b.n	8002c52 <SEGGER_SYSVIEW_SendModule+0x7e>
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	627a      	str	r2, [r7, #36]	; 0x24
 8002c40:	6a3a      	ldr	r2, [r7, #32]
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	701a      	strb	r2, [r3, #0]
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	09db      	lsrs	r3, r3, #7
 8002c50:	623b      	str	r3, [r7, #32]
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	2b7f      	cmp	r3, #127	; 0x7f
 8002c56:	d8f0      	bhi.n	8002c3a <SEGGER_SYSVIEW_SendModule+0x66>
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	627a      	str	r2, [r7, #36]	; 0x24
 8002c5e:	6a3a      	ldr	r2, [r7, #32]
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	701a      	strb	r2, [r3, #0]
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	61fb      	str	r3, [r7, #28]
 8002c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	61bb      	str	r3, [r7, #24]
 8002c72:	e00b      	b.n	8002c8c <SEGGER_SYSVIEW_SendModule+0xb8>
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	61fa      	str	r2, [r7, #28]
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	09db      	lsrs	r3, r3, #7
 8002c8a:	61bb      	str	r3, [r7, #24]
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	2b7f      	cmp	r3, #127	; 0x7f
 8002c90:	d8f0      	bhi.n	8002c74 <SEGGER_SYSVIEW_SendModule+0xa0>
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	61fa      	str	r2, [r7, #28]
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2280      	movs	r2, #128	; 0x80
 8002ca8:	4619      	mov	r1, r3
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f7fe ffe4 	bl	8001c78 <_EncodeStr>
 8002cb0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8002cb2:	2216      	movs	r2, #22
 8002cb4:	68f9      	ldr	r1, [r7, #12]
 8002cb6:	6938      	ldr	r0, [r7, #16]
 8002cb8:	f7ff f900 	bl	8001ebc <_SendPacket>
      RECORD_END();
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8002cc2:	bf00      	nop
 8002cc4:	3730      	adds	r7, #48	; 0x30
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20003e98 	.word	0x20003e98
 8002cd0:	20003ea0 	.word	0x20003ea0

08002cd4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8002cda:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00f      	beq.n	8002d02 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8002ce2:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f2      	bne.n	8002ce8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20003e98 	.word	0x20003e98

08002d10 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8002d16:	f3ef 8311 	mrs	r3, BASEPRI
 8002d1a:	f04f 0120 	mov.w	r1, #32
 8002d1e:	f381 8811 	msr	BASEPRI, r1
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	4817      	ldr	r0, [pc, #92]	; (8002d84 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8002d26:	f7fe fff3 	bl	8001d10 <_PreparePacket>
 8002d2a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	e00b      	b.n	8002d54 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	617a      	str	r2, [r7, #20]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	701a      	strb	r2, [r3, #0]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	09db      	lsrs	r3, r3, #7
 8002d52:	613b      	str	r3, [r7, #16]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	2b7f      	cmp	r3, #127	; 0x7f
 8002d58:	d8f0      	bhi.n	8002d3c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	1c5a      	adds	r2, r3, #1
 8002d5e:	617a      	str	r2, [r7, #20]
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	701a      	strb	r2, [r3, #0]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8002d6a:	221b      	movs	r2, #27
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	68b8      	ldr	r0, [r7, #8]
 8002d70:	f7ff f8a4 	bl	8001ebc <_SendPacket>
  RECORD_END();
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f383 8811 	msr	BASEPRI, r3
}
 8002d7a:	bf00      	nop
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20003ea0 	.word	0x20003ea0
 8002d88:	20003e9c 	.word	0x20003e9c

08002d8c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08a      	sub	sp, #40	; 0x28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002d94:	f3ef 8311 	mrs	r3, BASEPRI
 8002d98:	f04f 0120 	mov.w	r1, #32
 8002d9c:	f381 8811 	msr	BASEPRI, r1
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	4827      	ldr	r0, [pc, #156]	; (8002e40 <SEGGER_SYSVIEW_Warn+0xb4>)
 8002da4:	f7fe ffb4 	bl	8001d10 <_PreparePacket>
 8002da8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002daa:	2280      	movs	r2, #128	; 0x80
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	6938      	ldr	r0, [r7, #16]
 8002db0:	f7fe ff62 	bl	8001c78 <_EncodeStr>
 8002db4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dba:	2301      	movs	r3, #1
 8002dbc:	623b      	str	r3, [r7, #32]
 8002dbe:	e00b      	b.n	8002dd8 <SEGGER_SYSVIEW_Warn+0x4c>
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	627a      	str	r2, [r7, #36]	; 0x24
 8002dc6:	6a3a      	ldr	r2, [r7, #32]
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	701a      	strb	r2, [r3, #0]
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	09db      	lsrs	r3, r3, #7
 8002dd6:	623b      	str	r3, [r7, #32]
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	2b7f      	cmp	r3, #127	; 0x7f
 8002ddc:	d8f0      	bhi.n	8002dc0 <SEGGER_SYSVIEW_Warn+0x34>
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	627a      	str	r2, [r7, #36]	; 0x24
 8002de4:	6a3a      	ldr	r2, [r7, #32]
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	701a      	strb	r2, [r3, #0]
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	61fb      	str	r3, [r7, #28]
 8002df2:	2300      	movs	r3, #0
 8002df4:	61bb      	str	r3, [r7, #24]
 8002df6:	e00b      	b.n	8002e10 <SEGGER_SYSVIEW_Warn+0x84>
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	1c5a      	adds	r2, r3, #1
 8002dfc:	61fa      	str	r2, [r7, #28]
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	701a      	strb	r2, [r3, #0]
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	09db      	lsrs	r3, r3, #7
 8002e0e:	61bb      	str	r3, [r7, #24]
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	2b7f      	cmp	r3, #127	; 0x7f
 8002e14:	d8f0      	bhi.n	8002df8 <SEGGER_SYSVIEW_Warn+0x6c>
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	61fa      	str	r2, [r7, #28]
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	701a      	strb	r2, [r3, #0]
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8002e26:	221a      	movs	r2, #26
 8002e28:	68f9      	ldr	r1, [r7, #12]
 8002e2a:	6938      	ldr	r0, [r7, #16]
 8002e2c:	f7ff f846 	bl	8001ebc <_SendPacket>
  RECORD_END();
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f383 8811 	msr	BASEPRI, r3
}
 8002e36:	bf00      	nop
 8002e38:	3728      	adds	r7, #40	; 0x28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20003ea0 	.word	0x20003ea0

08002e44 <main>:
TaskHandle_t xTaskHandle1=NULL;
TaskHandle_t xTaskHandle2=NULL ;
char usr_msg[200];
/*****************************Main Function****************************/
int main(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af02      	add	r7, sp, #8
	// Initializations
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8002e4a:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002e4e:	f7fd f987 	bl	8000160 <NVIC_PriorityGroupConfig>
	prvSetupHardware();
 8002e52:	f000 f885 	bl	8002f60 <prvSetupHardware>

	printmsg("This Demo of Task Notify API \r\n");
 8002e56:	480e      	ldr	r0, [pc, #56]	; (8002e90 <main+0x4c>)
 8002e58:	f000 f88a 	bl	8002f70 <printmsg>
	// Create LED Task
	xTaskCreate(LED_Task_Handler,"LED-Task",300,NULL,2,&xTaskHandle1);
 8002e5c:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <main+0x50>)
 8002e5e:	9301      	str	r3, [sp, #4]
 8002e60:	2302      	movs	r3, #2
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	2300      	movs	r3, #0
 8002e66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e6a:	490b      	ldr	r1, [pc, #44]	; (8002e98 <main+0x54>)
 8002e6c:	480b      	ldr	r0, [pc, #44]	; (8002e9c <main+0x58>)
 8002e6e:	f7fd ffb1 	bl	8000dd4 <xTaskCreate>

	// Create Button Task
	xTaskCreate(Button_Task_Handler,"Button-Task",300,NULL,2,&xTaskHandle2);
 8002e72:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <main+0x5c>)
 8002e74:	9301      	str	r3, [sp, #4]
 8002e76:	2302      	movs	r3, #2
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e80:	4908      	ldr	r1, [pc, #32]	; (8002ea4 <main+0x60>)
 8002e82:	4809      	ldr	r0, [pc, #36]	; (8002ea8 <main+0x64>)
 8002e84:	f7fd ffa6 	bl	8000dd4 <xTaskCreate>

	//Start Scheduler
	vTaskStartScheduler();
 8002e88:	f7fe f8ec 	bl	8001064 <vTaskStartScheduler>


	while(1);
 8002e8c:	e7fe      	b.n	8002e8c <main+0x48>
 8002e8e:	bf00      	nop
 8002e90:	08003c60 	.word	0x08003c60
 8002e94:	20003f84 	.word	0x20003f84
 8002e98:	08003c80 	.word	0x08003c80
 8002e9c:	08002ead 	.word	0x08002ead
 8002ea0:	20003f88 	.word	0x20003f88
 8002ea4:	08003c8c 	.word	0x08003c8c
 8002ea8:	08002f2d 	.word	0x08002f2d

08002eac <LED_Task_Handler>:
}


/***************************** Task Handler Definition****************************/
void LED_Task_Handler (void *param)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
	// it will hold number of count that task is get Notified
	uint32_t current_Notification_Value=0 ;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		// Lets Wait until we Received any Notification Event from Button Task
		//MaxDelay=xffffffff
		if(xTaskNotifyWait(0,0,&current_Notification_Value,portMAX_DELAY)==pdTRUE)
 8002eb8:	f107 020c 	add.w	r2, r7, #12
 8002ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	f7fe fb76 	bl	80015b4 <xTaskNotifyWait>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d1f4      	bne.n	8002eb8 <LED_Task_Handler+0xc>
		{
			//Notifiaction is Received , Lets Toggle The LED
			if(button_status_flag==PRESSED)
 8002ece:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <LED_Task_Handler+0x6c>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d109      	bne.n	8002eea <LED_Task_Handler+0x3e>
			{
				GPIO_WriteBit(GPIOC,GPIO_Pin_13,Bit_SET);
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002edc:	480f      	ldr	r0, [pc, #60]	; (8002f1c <LED_Task_Handler+0x70>)
 8002ede:	f7fd fa26 	bl	800032e <GPIO_WriteBit>
				button_status_flag=0;
 8002ee2:	4b0d      	ldr	r3, [pc, #52]	; (8002f18 <LED_Task_Handler+0x6c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
 8002ee8:	e008      	b.n	8002efc <LED_Task_Handler+0x50>
			}

			else
			{
				GPIO_WriteBit(GPIOC,GPIO_Pin_13,Bit_RESET);
 8002eea:	2200      	movs	r2, #0
 8002eec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ef0:	480a      	ldr	r0, [pc, #40]	; (8002f1c <LED_Task_Handler+0x70>)
 8002ef2:	f7fd fa1c 	bl	800032e <GPIO_WriteBit>
				button_status_flag=1;
 8002ef6:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <LED_Task_Handler+0x6c>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	701a      	strb	r2, [r3, #0]
			}

			printmsg("Notification is Received \r\n");
 8002efc:	4808      	ldr	r0, [pc, #32]	; (8002f20 <LED_Task_Handler+0x74>)
 8002efe:	f000 f837 	bl	8002f70 <printmsg>
			sprintf(usr_msg,"Button Receive Count= %ld \r\n",current_Notification_Value);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	461a      	mov	r2, r3
 8002f06:	4907      	ldr	r1, [pc, #28]	; (8002f24 <LED_Task_Handler+0x78>)
 8002f08:	4807      	ldr	r0, [pc, #28]	; (8002f28 <LED_Task_Handler+0x7c>)
 8002f0a:	f000 fa41 	bl	8003390 <siprintf>
			printmsg(usr_msg);
 8002f0e:	4806      	ldr	r0, [pc, #24]	; (8002f28 <LED_Task_Handler+0x7c>)
 8002f10:	f000 f82e 	bl	8002f70 <printmsg>
		if(xTaskNotifyWait(0,0,&current_Notification_Value,portMAX_DELAY)==pdTRUE)
 8002f14:	e7d0      	b.n	8002eb8 <LED_Task_Handler+0xc>
 8002f16:	bf00      	nop
 8002f18:	20003f83 	.word	0x20003f83
 8002f1c:	40011000 	.word	0x40011000
 8002f20:	08003c98 	.word	0x08003c98
 8002f24:	08003cb4 	.word	0x08003cb4
 8002f28:	20004040 	.word	0x20004040

08002f2c <Button_Task_Handler>:
		}
	}
}

void Button_Task_Handler (void *param)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_5) )
 8002f34:	2120      	movs	r1, #32
 8002f36:	4808      	ldr	r0, [pc, #32]	; (8002f58 <Button_Task_Handler+0x2c>)
 8002f38:	f7fd f9e0 	bl	80002fc <GPIO_ReadInputDataBit>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f8      	beq.n	8002f34 <Button_Task_Handler+0x8>
		{
			// Button is Pressed

			// lets  wait here for 100 ms for button Debouncing
			RTOS_Delay(100);
 8002f42:	2064      	movs	r0, #100	; 0x64
 8002f44:	f000 f8a6 	bl	8003094 <RTOS_Delay>

			// Lets send Notification to LED_task
			// and Increment the Notify Receiving Value
			xTaskNotify(xTaskHandle1,0x0,eIncrement );
 8002f48:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <Button_Task_Handler+0x30>)
 8002f4a:	6818      	ldr	r0, [r3, #0]
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	2202      	movs	r2, #2
 8002f50:	2100      	movs	r1, #0
 8002f52:	f7fe fb93 	bl	800167c <xTaskGenericNotify>
		if(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_5) )
 8002f56:	e7ed      	b.n	8002f34 <Button_Task_Handler+0x8>
 8002f58:	40010800 	.word	0x40010800
 8002f5c:	20003f84 	.word	0x20003f84

08002f60 <prvSetupHardware>:
	}
}
/*****************************FUNCTION Definition****************************/

static void prvSetupHardware(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
	//Setup GPIO
	prvGPIOSetup();
 8002f64:	f000 f86c 	bl	8003040 <prvGPIOSetup>

	//setup UART_1
	prvUARTSetup();
 8002f68:	f000 f82a 	bl	8002fc0 <prvUARTSetup>
}
 8002f6c:	bf00      	nop
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <printmsg>:

void printmsg(char *msg)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i<strlen(msg) ; i++)
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	e013      	b.n	8002fa6 <printmsg+0x36>
	{
		//polling to check that the Date Register is Empty
		while(USART_GetFlagStatus(USART1, USART_FLAG_TXE)!=SET);
 8002f7e:	bf00      	nop
 8002f80:	2180      	movs	r1, #128	; 0x80
 8002f82:	480e      	ldr	r0, [pc, #56]	; (8002fbc <printmsg+0x4c>)
 8002f84:	f7fd fba2 	bl	80006cc <USART_GetFlagStatus>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d1f8      	bne.n	8002f80 <printmsg+0x10>
		//put our mesg in the UART Data Register
		USART_SendData(USART1,msg[i]);
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4413      	add	r3, r2
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4808      	ldr	r0, [pc, #32]	; (8002fbc <printmsg+0x4c>)
 8002f9c:	f7fd fb85 	bl	80006aa <USART_SendData>
	for(uint32_t i=0 ; i<strlen(msg) ; i++)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7fd f8d2 	bl	8000150 <strlen>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d8e4      	bhi.n	8002f7e <printmsg+0xe>
	}

}
 8002fb4:	bf00      	nop
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40013800 	.word	0x40013800

08002fc0 <prvUARTSetup>:

void prvUARTSetup()
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
    USART_InitTypeDef usart1_init_struct;
    /* Bit configuration structure for GPIOA PIN9 and PIN10 */
    GPIO_InitTypeDef gpioa_init_struct;

    /* Enalbe clock for USART1, AFIO and GPIOA */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_AFIO |
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	f244 0005 	movw	r0, #16389	; 0x4005
 8002fcc:	f7fd fa76 	bl	80004bc <RCC_APB2PeriphClockCmd>
                           RCC_APB2Periph_GPIOA, ENABLE);

    /* GPIOA PIN9 alternative function Tx */
    gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
 8002fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fd4:	80bb      	strh	r3, [r7, #4]
    gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	71bb      	strb	r3, [r7, #6]
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
 8002fda:	2318      	movs	r3, #24
 8002fdc:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &gpioa_init_struct);
 8002fde:	1d3b      	adds	r3, r7, #4
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4815      	ldr	r0, [pc, #84]	; (8003038 <prvUARTSetup+0x78>)
 8002fe4:	f7fd f8ce 	bl	8000184 <GPIO_Init>
    /* GPIOA PIN9 alternative function Rx */
    gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
 8002fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fec:	80bb      	strh	r3, [r7, #4]
    gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	71bb      	strb	r3, [r7, #6]
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8002ff2:	2304      	movs	r3, #4
 8002ff4:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &gpioa_init_struct);
 8002ff6:	1d3b      	adds	r3, r7, #4
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	480f      	ldr	r0, [pc, #60]	; (8003038 <prvUARTSetup+0x78>)
 8002ffc:	f7fd f8c2 	bl	8000184 <GPIO_Init>

    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);
 8003000:	2101      	movs	r1, #1
 8003002:	480e      	ldr	r0, [pc, #56]	; (800303c <prvUARTSetup+0x7c>)
 8003004:	f7fd fb32 	bl	800066c <USART_Cmd>
    /* Baud rate 9600, 8-bit data, One stop bit
     * No parity, Do both Rx and Tx, No HW flow control
     */
    usart1_init_struct.USART_BaudRate = 9600;
 8003008:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800300c:	60bb      	str	r3, [r7, #8]
    usart1_init_struct.USART_WordLength = USART_WordLength_8b;
 800300e:	2300      	movs	r3, #0
 8003010:	81bb      	strh	r3, [r7, #12]
    usart1_init_struct.USART_StopBits = USART_StopBits_1;
 8003012:	2300      	movs	r3, #0
 8003014:	81fb      	strh	r3, [r7, #14]
    usart1_init_struct.USART_Parity = USART_Parity_No ;
 8003016:	2300      	movs	r3, #0
 8003018:	823b      	strh	r3, [r7, #16]
    usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800301a:	230c      	movs	r3, #12
 800301c:	827b      	strh	r3, [r7, #18]
    usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800301e:	2300      	movs	r3, #0
 8003020:	82bb      	strh	r3, [r7, #20]
    USART_Init(USART1,&usart1_init_struct);
 8003022:	f107 0308 	add.w	r3, r7, #8
 8003026:	4619      	mov	r1, r3
 8003028:	4804      	ldr	r0, [pc, #16]	; (800303c <prvUARTSetup+0x7c>)
 800302a:	f7fd fa65 	bl	80004f8 <USART_Init>
}
 800302e:	bf00      	nop
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40010800 	.word	0x40010800
 800303c:	40013800 	.word	0x40013800

08003040 <prvGPIOSetup>:

void prvGPIOSetup(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
	//Enable The clok for GPIOA , GPIOC
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
 8003046:	2101      	movs	r1, #1
 8003048:	2004      	movs	r0, #4
 800304a:	f7fd fa37 	bl	80004bc <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC,ENABLE);
 800304e:	2101      	movs	r1, #1
 8003050:	2010      	movs	r0, #16
 8003052:	f7fd fa33 	bl	80004bc <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef led_init , Button_init ;

	//initialize the LED PC13
	led_init.GPIO_Mode = GPIO_Mode_Out_PP ;
 8003056:	2310      	movs	r3, #16
 8003058:	71fb      	strb	r3, [r7, #7]
	led_init.GPIO_Pin = GPIO_Pin_13 ;
 800305a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800305e:	80bb      	strh	r3, [r7, #4]
	led_init.GPIO_Speed = GPIO_Speed_2MHz ;
 8003060:	2302      	movs	r3, #2
 8003062:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC,&led_init);
 8003064:	1d3b      	adds	r3, r7, #4
 8003066:	4619      	mov	r1, r3
 8003068:	4808      	ldr	r0, [pc, #32]	; (800308c <prvGPIOSetup+0x4c>)
 800306a:	f7fd f88b 	bl	8000184 <GPIO_Init>

	//initialize the Button PA5
	Button_init.GPIO_Mode = GPIO_Mode_IPD ; // input pull down
 800306e:	2328      	movs	r3, #40	; 0x28
 8003070:	70fb      	strb	r3, [r7, #3]
	Button_init.GPIO_Pin = GPIO_Pin_5 ;
 8003072:	2320      	movs	r3, #32
 8003074:	803b      	strh	r3, [r7, #0]
	Button_init.GPIO_Speed = GPIO_Speed_2MHz ;
 8003076:	2302      	movs	r3, #2
 8003078:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOA,&Button_init);
 800307a:	463b      	mov	r3, r7
 800307c:	4619      	mov	r1, r3
 800307e:	4804      	ldr	r0, [pc, #16]	; (8003090 <prvGPIOSetup+0x50>)
 8003080:	f7fd f880 	bl	8000184 <GPIO_Init>
}
 8003084:	bf00      	nop
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40011000 	.word	0x40011000
 8003090:	40010800 	.word	0x40010800

08003094 <RTOS_Delay>:

void RTOS_Delay(uint32_t delay_in_ms)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
	// get the Global tick count value which is incremented by systic every 1ms
	uint32_t current_tick_count = xTaskGetTickCount();
 800309c:	f7fe f8c8 	bl	8001230 <xTaskGetTickCount>
 80030a0:	60f8      	str	r0, [r7, #12]
	//configTICK_RATE_HZ/1000 will give us 1 (1ms)
	// Multiply 1 * delay_in_ms will get amount of delay in ms
	uint32_t delay_in_ticks = (delay_in_ms * configTICK_RATE_HZ)/1000 ;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030a8:	fb02 f303 	mul.w	r3, r2, r3
 80030ac:	4a08      	ldr	r2, [pc, #32]	; (80030d0 <RTOS_Delay+0x3c>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	099b      	lsrs	r3, r3, #6
 80030b4:	60bb      	str	r3, [r7, #8]
	while(xTaskGetTickCount() < (current_tick_count + delay_in_ticks)) ;
 80030b6:	bf00      	nop
 80030b8:	f7fe f8ba 	bl	8001230 <xTaskGetTickCount>
 80030bc:	4601      	mov	r1, r0
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	4413      	add	r3, r2
 80030c4:	4299      	cmp	r1, r3
 80030c6:	d3f7      	bcc.n	80030b8 <RTOS_Delay+0x24>
}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	10624dd3 	.word	0x10624dd3

080030d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80030d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800310c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80030d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80030da:	e003      	b.n	80030e4 <LoopCopyDataInit>

080030dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80030dc:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80030de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80030e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80030e2:	3104      	adds	r1, #4

080030e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80030e4:	480b      	ldr	r0, [pc, #44]	; (8003114 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80030e6:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80030e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80030ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80030ec:	d3f6      	bcc.n	80030dc <CopyDataInit>
	ldr	r2, =_sbss
 80030ee:	4a0b      	ldr	r2, [pc, #44]	; (800311c <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80030f0:	e002      	b.n	80030f8 <LoopFillZerobss>

080030f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80030f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80030f4:	f842 3b04 	str.w	r3, [r2], #4

080030f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80030f8:	4b09      	ldr	r3, [pc, #36]	; (8003120 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80030fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80030fc:	d3f9      	bcc.n	80030f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80030fe:	f000 f847 	bl	8003190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003102:	f000 f8ff 	bl	8003304 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003106:	f7ff fe9d 	bl	8002e44 <main>
	bx	lr
 800310a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800310c:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8003110:	08003d1c 	.word	0x08003d1c
	ldr	r0, =_sdata
 8003114:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003118:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 800311c:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 8003120:	2000410c 	.word	0x2000410c

08003124 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003124:	e7fe      	b.n	8003124 <ADC1_2_IRQHandler>
	...

08003128 <_sbrk>:
  /* Implement your write code here, this is used by puts and printf for example */
  return len;
}

caddr_t _sbrk(int32_t incr)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  extern uint32_t _Min_Heap_Size; /* _Min_Heap_Size symbol defined in the linker script. */
  extern uint8_t end asm("end");
  const uint8_t *max_heap = (uint8_t*)((uint32_t)&end + (uint32_t)&_Min_Heap_Size);
 8003130:	4a13      	ldr	r2, [pc, #76]	; (8003180 <_sbrk+0x58>)
 8003132:	4b14      	ldr	r3, [pc, #80]	; (8003184 <_sbrk+0x5c>)
 8003134:	4413      	add	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]
  static uint8_t *heap_end;
  uint8_t *prev_heap_end;

  if (heap_end == 0)
 8003138:	4b13      	ldr	r3, [pc, #76]	; (8003188 <_sbrk+0x60>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d102      	bne.n	8003146 <_sbrk+0x1e>
    heap_end = &end;
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <_sbrk+0x60>)
 8003142:	4a0f      	ldr	r2, [pc, #60]	; (8003180 <_sbrk+0x58>)
 8003144:	601a      	str	r2, [r3, #0]

  prev_heap_end = heap_end;
 8003146:	4b10      	ldr	r3, [pc, #64]	; (8003188 <_sbrk+0x60>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60bb      	str	r3, [r7, #8]
  if (heap_end + incr > max_heap)
 800314c:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <_sbrk+0x60>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	441a      	add	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	429a      	cmp	r2, r3
 8003158:	d905      	bls.n	8003166 <_sbrk+0x3e>
  {
//    write(1, "Heap and stack collision\n", 25);
//    abort();
    errno = ENOMEM;
 800315a:	4b0c      	ldr	r3, [pc, #48]	; (800318c <_sbrk+0x64>)
 800315c:	220c      	movs	r2, #12
 800315e:	601a      	str	r2, [r3, #0]
    return (caddr_t) -1;
 8003160:	f04f 33ff 	mov.w	r3, #4294967295
 8003164:	e006      	b.n	8003174 <_sbrk+0x4c>
  }

  heap_end += incr;
 8003166:	4b08      	ldr	r3, [pc, #32]	; (8003188 <_sbrk+0x60>)
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4413      	add	r3, r2
 800316e:	4a06      	ldr	r2, [pc, #24]	; (8003188 <_sbrk+0x60>)
 8003170:	6013      	str	r3, [r2, #0]

  return (caddr_t) prev_heap_end;
 8003172:	68bb      	ldr	r3, [r7, #8]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	2000410c 	.word	0x2000410c
 8003184:	00000000 	.word	0x00000000
 8003188:	20003f8c 	.word	0x20003f8c
 800318c:	20004108 	.word	0x20004108

08003190 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003194:	4a15      	ldr	r2, [pc, #84]	; (80031ec <SystemInit+0x5c>)
 8003196:	4b15      	ldr	r3, [pc, #84]	; (80031ec <SystemInit+0x5c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80031a0:	4912      	ldr	r1, [pc, #72]	; (80031ec <SystemInit+0x5c>)
 80031a2:	4b12      	ldr	r3, [pc, #72]	; (80031ec <SystemInit+0x5c>)
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <SystemInit+0x60>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80031ac:	4a0f      	ldr	r2, [pc, #60]	; (80031ec <SystemInit+0x5c>)
 80031ae:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <SystemInit+0x5c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80031b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80031bc:	4a0b      	ldr	r2, [pc, #44]	; (80031ec <SystemInit+0x5c>)
 80031be:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <SystemInit+0x5c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80031c8:	4a08      	ldr	r2, [pc, #32]	; (80031ec <SystemInit+0x5c>)
 80031ca:	4b08      	ldr	r3, [pc, #32]	; (80031ec <SystemInit+0x5c>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80031d2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <SystemInit+0x5c>)
 80031d6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80031da:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80031dc:	f000 f80c 	bl	80031f8 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80031e0:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <SystemInit+0x64>)
 80031e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031e6:	609a      	str	r2, [r3, #8]
#endif 
}
 80031e8:	bf00      	nop
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40021000 	.word	0x40021000
 80031f0:	f8ff0000 	.word	0xf8ff0000
 80031f4:	e000ed00 	.word	0xe000ed00

080031f8 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80031fc:	f000 f802 	bl	8003204 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8003200:	bf00      	nop
 8003202:	bd80      	pop	{r7, pc}

08003204 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	607b      	str	r3, [r7, #4]
 800320e:	2300      	movs	r3, #0
 8003210:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003212:	4a3a      	ldr	r2, [pc, #232]	; (80032fc <SetSysClockTo72+0xf8>)
 8003214:	4b39      	ldr	r3, [pc, #228]	; (80032fc <SetSysClockTo72+0xf8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800321e:	4b37      	ldr	r3, [pc, #220]	; (80032fc <SetSysClockTo72+0xf8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003226:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3301      	adds	r3, #1
 800322c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d103      	bne.n	800323c <SetSysClockTo72+0x38>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800323a:	d1f0      	bne.n	800321e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800323c:	4b2f      	ldr	r3, [pc, #188]	; (80032fc <SetSysClockTo72+0xf8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003248:	2301      	movs	r3, #1
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	e001      	b.n	8003252 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800324e:	2300      	movs	r3, #0
 8003250:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d14b      	bne.n	80032f0 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8003258:	4a29      	ldr	r2, [pc, #164]	; (8003300 <SetSysClockTo72+0xfc>)
 800325a:	4b29      	ldr	r3, [pc, #164]	; (8003300 <SetSysClockTo72+0xfc>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f043 0310 	orr.w	r3, r3, #16
 8003262:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8003264:	4a26      	ldr	r2, [pc, #152]	; (8003300 <SetSysClockTo72+0xfc>)
 8003266:	4b26      	ldr	r3, [pc, #152]	; (8003300 <SetSysClockTo72+0xfc>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 0303 	bic.w	r3, r3, #3
 800326e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8003270:	4a23      	ldr	r2, [pc, #140]	; (8003300 <SetSysClockTo72+0xfc>)
 8003272:	4b23      	ldr	r3, [pc, #140]	; (8003300 <SetSysClockTo72+0xfc>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f043 0302 	orr.w	r3, r3, #2
 800327a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800327c:	4a1f      	ldr	r2, [pc, #124]	; (80032fc <SetSysClockTo72+0xf8>)
 800327e:	4b1f      	ldr	r3, [pc, #124]	; (80032fc <SetSysClockTo72+0xf8>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8003284:	4a1d      	ldr	r2, [pc, #116]	; (80032fc <SetSysClockTo72+0xf8>)
 8003286:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <SetSysClockTo72+0xf8>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800328c:	4a1b      	ldr	r2, [pc, #108]	; (80032fc <SetSysClockTo72+0xf8>)
 800328e:	4b1b      	ldr	r3, [pc, #108]	; (80032fc <SetSysClockTo72+0xf8>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003296:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8003298:	4a18      	ldr	r2, [pc, #96]	; (80032fc <SetSysClockTo72+0xf8>)
 800329a:	4b18      	ldr	r3, [pc, #96]	; (80032fc <SetSysClockTo72+0xf8>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80032a2:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80032a4:	4a15      	ldr	r2, [pc, #84]	; (80032fc <SetSysClockTo72+0xf8>)
 80032a6:	4b15      	ldr	r3, [pc, #84]	; (80032fc <SetSysClockTo72+0xf8>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80032ae:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80032b0:	4a12      	ldr	r2, [pc, #72]	; (80032fc <SetSysClockTo72+0xf8>)
 80032b2:	4b12      	ldr	r3, [pc, #72]	; (80032fc <SetSysClockTo72+0xf8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ba:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80032bc:	bf00      	nop
 80032be:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <SetSysClockTo72+0xf8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f9      	beq.n	80032be <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80032ca:	4a0c      	ldr	r2, [pc, #48]	; (80032fc <SetSysClockTo72+0xf8>)
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <SetSysClockTo72+0xf8>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f023 0303 	bic.w	r3, r3, #3
 80032d4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80032d6:	4a09      	ldr	r2, [pc, #36]	; (80032fc <SetSysClockTo72+0xf8>)
 80032d8:	4b08      	ldr	r3, [pc, #32]	; (80032fc <SetSysClockTo72+0xf8>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f043 0302 	orr.w	r3, r3, #2
 80032e0:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80032e2:	bf00      	nop
 80032e4:	4b05      	ldr	r3, [pc, #20]	; (80032fc <SetSysClockTo72+0xf8>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 030c 	and.w	r3, r3, #12
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d1f9      	bne.n	80032e4 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40021000 	.word	0x40021000
 8003300:	40022000 	.word	0x40022000

08003304 <__libc_init_array>:
 8003304:	b570      	push	{r4, r5, r6, lr}
 8003306:	2500      	movs	r5, #0
 8003308:	4e0c      	ldr	r6, [pc, #48]	; (800333c <__libc_init_array+0x38>)
 800330a:	4c0d      	ldr	r4, [pc, #52]	; (8003340 <__libc_init_array+0x3c>)
 800330c:	1ba4      	subs	r4, r4, r6
 800330e:	10a4      	asrs	r4, r4, #2
 8003310:	42a5      	cmp	r5, r4
 8003312:	d109      	bne.n	8003328 <__libc_init_array+0x24>
 8003314:	f000 fc5c 	bl	8003bd0 <_init>
 8003318:	2500      	movs	r5, #0
 800331a:	4e0a      	ldr	r6, [pc, #40]	; (8003344 <__libc_init_array+0x40>)
 800331c:	4c0a      	ldr	r4, [pc, #40]	; (8003348 <__libc_init_array+0x44>)
 800331e:	1ba4      	subs	r4, r4, r6
 8003320:	10a4      	asrs	r4, r4, #2
 8003322:	42a5      	cmp	r5, r4
 8003324:	d105      	bne.n	8003332 <__libc_init_array+0x2e>
 8003326:	bd70      	pop	{r4, r5, r6, pc}
 8003328:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800332c:	4798      	blx	r3
 800332e:	3501      	adds	r5, #1
 8003330:	e7ee      	b.n	8003310 <__libc_init_array+0xc>
 8003332:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003336:	4798      	blx	r3
 8003338:	3501      	adds	r5, #1
 800333a:	e7f2      	b.n	8003322 <__libc_init_array+0x1e>
 800333c:	08003d14 	.word	0x08003d14
 8003340:	08003d14 	.word	0x08003d14
 8003344:	08003d14 	.word	0x08003d14
 8003348:	08003d18 	.word	0x08003d18

0800334c <memcmp>:
 800334c:	b510      	push	{r4, lr}
 800334e:	3901      	subs	r1, #1
 8003350:	4402      	add	r2, r0
 8003352:	4290      	cmp	r0, r2
 8003354:	d101      	bne.n	800335a <memcmp+0xe>
 8003356:	2000      	movs	r0, #0
 8003358:	bd10      	pop	{r4, pc}
 800335a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800335e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003362:	42a3      	cmp	r3, r4
 8003364:	d0f5      	beq.n	8003352 <memcmp+0x6>
 8003366:	1b18      	subs	r0, r3, r4
 8003368:	bd10      	pop	{r4, pc}

0800336a <memcpy>:
 800336a:	b510      	push	{r4, lr}
 800336c:	1e43      	subs	r3, r0, #1
 800336e:	440a      	add	r2, r1
 8003370:	4291      	cmp	r1, r2
 8003372:	d100      	bne.n	8003376 <memcpy+0xc>
 8003374:	bd10      	pop	{r4, pc}
 8003376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800337a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800337e:	e7f7      	b.n	8003370 <memcpy+0x6>

08003380 <memset>:
 8003380:	4603      	mov	r3, r0
 8003382:	4402      	add	r2, r0
 8003384:	4293      	cmp	r3, r2
 8003386:	d100      	bne.n	800338a <memset+0xa>
 8003388:	4770      	bx	lr
 800338a:	f803 1b01 	strb.w	r1, [r3], #1
 800338e:	e7f9      	b.n	8003384 <memset+0x4>

08003390 <siprintf>:
 8003390:	b40e      	push	{r1, r2, r3}
 8003392:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003396:	b500      	push	{lr}
 8003398:	b09c      	sub	sp, #112	; 0x70
 800339a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800339e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033a2:	9104      	str	r1, [sp, #16]
 80033a4:	9107      	str	r1, [sp, #28]
 80033a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80033aa:	ab1d      	add	r3, sp, #116	; 0x74
 80033ac:	9002      	str	r0, [sp, #8]
 80033ae:	9006      	str	r0, [sp, #24]
 80033b0:	4808      	ldr	r0, [pc, #32]	; (80033d4 <siprintf+0x44>)
 80033b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80033b6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80033ba:	6800      	ldr	r0, [r0, #0]
 80033bc:	a902      	add	r1, sp, #8
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	f000 f910 	bl	80035e4 <_svfiprintf_r>
 80033c4:	2200      	movs	r2, #0
 80033c6:	9b02      	ldr	r3, [sp, #8]
 80033c8:	701a      	strb	r2, [r3, #0]
 80033ca:	b01c      	add	sp, #112	; 0x70
 80033cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80033d0:	b003      	add	sp, #12
 80033d2:	4770      	bx	lr
 80033d4:	20000018 	.word	0x20000018

080033d8 <_free_r>:
 80033d8:	b538      	push	{r3, r4, r5, lr}
 80033da:	4605      	mov	r5, r0
 80033dc:	2900      	cmp	r1, #0
 80033de:	d043      	beq.n	8003468 <_free_r+0x90>
 80033e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033e4:	1f0c      	subs	r4, r1, #4
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	bfb8      	it	lt
 80033ea:	18e4      	addlt	r4, r4, r3
 80033ec:	f000 fbbe 	bl	8003b6c <__malloc_lock>
 80033f0:	4a1e      	ldr	r2, [pc, #120]	; (800346c <_free_r+0x94>)
 80033f2:	6813      	ldr	r3, [r2, #0]
 80033f4:	4610      	mov	r0, r2
 80033f6:	b933      	cbnz	r3, 8003406 <_free_r+0x2e>
 80033f8:	6063      	str	r3, [r4, #4]
 80033fa:	6014      	str	r4, [r2, #0]
 80033fc:	4628      	mov	r0, r5
 80033fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003402:	f000 bbb4 	b.w	8003b6e <__malloc_unlock>
 8003406:	42a3      	cmp	r3, r4
 8003408:	d90b      	bls.n	8003422 <_free_r+0x4a>
 800340a:	6821      	ldr	r1, [r4, #0]
 800340c:	1862      	adds	r2, r4, r1
 800340e:	4293      	cmp	r3, r2
 8003410:	bf01      	itttt	eq
 8003412:	681a      	ldreq	r2, [r3, #0]
 8003414:	685b      	ldreq	r3, [r3, #4]
 8003416:	1852      	addeq	r2, r2, r1
 8003418:	6022      	streq	r2, [r4, #0]
 800341a:	6063      	str	r3, [r4, #4]
 800341c:	6004      	str	r4, [r0, #0]
 800341e:	e7ed      	b.n	80033fc <_free_r+0x24>
 8003420:	4613      	mov	r3, r2
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	b10a      	cbz	r2, 800342a <_free_r+0x52>
 8003426:	42a2      	cmp	r2, r4
 8003428:	d9fa      	bls.n	8003420 <_free_r+0x48>
 800342a:	6819      	ldr	r1, [r3, #0]
 800342c:	1858      	adds	r0, r3, r1
 800342e:	42a0      	cmp	r0, r4
 8003430:	d10b      	bne.n	800344a <_free_r+0x72>
 8003432:	6820      	ldr	r0, [r4, #0]
 8003434:	4401      	add	r1, r0
 8003436:	1858      	adds	r0, r3, r1
 8003438:	4282      	cmp	r2, r0
 800343a:	6019      	str	r1, [r3, #0]
 800343c:	d1de      	bne.n	80033fc <_free_r+0x24>
 800343e:	6810      	ldr	r0, [r2, #0]
 8003440:	6852      	ldr	r2, [r2, #4]
 8003442:	4401      	add	r1, r0
 8003444:	6019      	str	r1, [r3, #0]
 8003446:	605a      	str	r2, [r3, #4]
 8003448:	e7d8      	b.n	80033fc <_free_r+0x24>
 800344a:	d902      	bls.n	8003452 <_free_r+0x7a>
 800344c:	230c      	movs	r3, #12
 800344e:	602b      	str	r3, [r5, #0]
 8003450:	e7d4      	b.n	80033fc <_free_r+0x24>
 8003452:	6820      	ldr	r0, [r4, #0]
 8003454:	1821      	adds	r1, r4, r0
 8003456:	428a      	cmp	r2, r1
 8003458:	bf01      	itttt	eq
 800345a:	6811      	ldreq	r1, [r2, #0]
 800345c:	6852      	ldreq	r2, [r2, #4]
 800345e:	1809      	addeq	r1, r1, r0
 8003460:	6021      	streq	r1, [r4, #0]
 8003462:	6062      	str	r2, [r4, #4]
 8003464:	605c      	str	r4, [r3, #4]
 8003466:	e7c9      	b.n	80033fc <_free_r+0x24>
 8003468:	bd38      	pop	{r3, r4, r5, pc}
 800346a:	bf00      	nop
 800346c:	20003f90 	.word	0x20003f90

08003470 <_malloc_r>:
 8003470:	b570      	push	{r4, r5, r6, lr}
 8003472:	1ccd      	adds	r5, r1, #3
 8003474:	f025 0503 	bic.w	r5, r5, #3
 8003478:	3508      	adds	r5, #8
 800347a:	2d0c      	cmp	r5, #12
 800347c:	bf38      	it	cc
 800347e:	250c      	movcc	r5, #12
 8003480:	2d00      	cmp	r5, #0
 8003482:	4606      	mov	r6, r0
 8003484:	db01      	blt.n	800348a <_malloc_r+0x1a>
 8003486:	42a9      	cmp	r1, r5
 8003488:	d903      	bls.n	8003492 <_malloc_r+0x22>
 800348a:	230c      	movs	r3, #12
 800348c:	6033      	str	r3, [r6, #0]
 800348e:	2000      	movs	r0, #0
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	f000 fb6b 	bl	8003b6c <__malloc_lock>
 8003496:	4a23      	ldr	r2, [pc, #140]	; (8003524 <_malloc_r+0xb4>)
 8003498:	6814      	ldr	r4, [r2, #0]
 800349a:	4621      	mov	r1, r4
 800349c:	b991      	cbnz	r1, 80034c4 <_malloc_r+0x54>
 800349e:	4c22      	ldr	r4, [pc, #136]	; (8003528 <_malloc_r+0xb8>)
 80034a0:	6823      	ldr	r3, [r4, #0]
 80034a2:	b91b      	cbnz	r3, 80034ac <_malloc_r+0x3c>
 80034a4:	4630      	mov	r0, r6
 80034a6:	f000 fb29 	bl	8003afc <_sbrk_r>
 80034aa:	6020      	str	r0, [r4, #0]
 80034ac:	4629      	mov	r1, r5
 80034ae:	4630      	mov	r0, r6
 80034b0:	f000 fb24 	bl	8003afc <_sbrk_r>
 80034b4:	1c43      	adds	r3, r0, #1
 80034b6:	d126      	bne.n	8003506 <_malloc_r+0x96>
 80034b8:	230c      	movs	r3, #12
 80034ba:	4630      	mov	r0, r6
 80034bc:	6033      	str	r3, [r6, #0]
 80034be:	f000 fb56 	bl	8003b6e <__malloc_unlock>
 80034c2:	e7e4      	b.n	800348e <_malloc_r+0x1e>
 80034c4:	680b      	ldr	r3, [r1, #0]
 80034c6:	1b5b      	subs	r3, r3, r5
 80034c8:	d41a      	bmi.n	8003500 <_malloc_r+0x90>
 80034ca:	2b0b      	cmp	r3, #11
 80034cc:	d90f      	bls.n	80034ee <_malloc_r+0x7e>
 80034ce:	600b      	str	r3, [r1, #0]
 80034d0:	18cc      	adds	r4, r1, r3
 80034d2:	50cd      	str	r5, [r1, r3]
 80034d4:	4630      	mov	r0, r6
 80034d6:	f000 fb4a 	bl	8003b6e <__malloc_unlock>
 80034da:	f104 000b 	add.w	r0, r4, #11
 80034de:	1d23      	adds	r3, r4, #4
 80034e0:	f020 0007 	bic.w	r0, r0, #7
 80034e4:	1ac3      	subs	r3, r0, r3
 80034e6:	d01b      	beq.n	8003520 <_malloc_r+0xb0>
 80034e8:	425a      	negs	r2, r3
 80034ea:	50e2      	str	r2, [r4, r3]
 80034ec:	bd70      	pop	{r4, r5, r6, pc}
 80034ee:	428c      	cmp	r4, r1
 80034f0:	bf0b      	itete	eq
 80034f2:	6863      	ldreq	r3, [r4, #4]
 80034f4:	684b      	ldrne	r3, [r1, #4]
 80034f6:	6013      	streq	r3, [r2, #0]
 80034f8:	6063      	strne	r3, [r4, #4]
 80034fa:	bf18      	it	ne
 80034fc:	460c      	movne	r4, r1
 80034fe:	e7e9      	b.n	80034d4 <_malloc_r+0x64>
 8003500:	460c      	mov	r4, r1
 8003502:	6849      	ldr	r1, [r1, #4]
 8003504:	e7ca      	b.n	800349c <_malloc_r+0x2c>
 8003506:	1cc4      	adds	r4, r0, #3
 8003508:	f024 0403 	bic.w	r4, r4, #3
 800350c:	42a0      	cmp	r0, r4
 800350e:	d005      	beq.n	800351c <_malloc_r+0xac>
 8003510:	1a21      	subs	r1, r4, r0
 8003512:	4630      	mov	r0, r6
 8003514:	f000 faf2 	bl	8003afc <_sbrk_r>
 8003518:	3001      	adds	r0, #1
 800351a:	d0cd      	beq.n	80034b8 <_malloc_r+0x48>
 800351c:	6025      	str	r5, [r4, #0]
 800351e:	e7d9      	b.n	80034d4 <_malloc_r+0x64>
 8003520:	bd70      	pop	{r4, r5, r6, pc}
 8003522:	bf00      	nop
 8003524:	20003f90 	.word	0x20003f90
 8003528:	20003f94 	.word	0x20003f94

0800352c <__ssputs_r>:
 800352c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003530:	688e      	ldr	r6, [r1, #8]
 8003532:	4682      	mov	sl, r0
 8003534:	429e      	cmp	r6, r3
 8003536:	460c      	mov	r4, r1
 8003538:	4691      	mov	r9, r2
 800353a:	4698      	mov	r8, r3
 800353c:	d835      	bhi.n	80035aa <__ssputs_r+0x7e>
 800353e:	898a      	ldrh	r2, [r1, #12]
 8003540:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003544:	d031      	beq.n	80035aa <__ssputs_r+0x7e>
 8003546:	2302      	movs	r3, #2
 8003548:	6825      	ldr	r5, [r4, #0]
 800354a:	6909      	ldr	r1, [r1, #16]
 800354c:	1a6f      	subs	r7, r5, r1
 800354e:	6965      	ldr	r5, [r4, #20]
 8003550:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003554:	fb95 f5f3 	sdiv	r5, r5, r3
 8003558:	f108 0301 	add.w	r3, r8, #1
 800355c:	443b      	add	r3, r7
 800355e:	429d      	cmp	r5, r3
 8003560:	bf38      	it	cc
 8003562:	461d      	movcc	r5, r3
 8003564:	0553      	lsls	r3, r2, #21
 8003566:	d531      	bpl.n	80035cc <__ssputs_r+0xa0>
 8003568:	4629      	mov	r1, r5
 800356a:	f7ff ff81 	bl	8003470 <_malloc_r>
 800356e:	4606      	mov	r6, r0
 8003570:	b950      	cbnz	r0, 8003588 <__ssputs_r+0x5c>
 8003572:	230c      	movs	r3, #12
 8003574:	f8ca 3000 	str.w	r3, [sl]
 8003578:	89a3      	ldrh	r3, [r4, #12]
 800357a:	f04f 30ff 	mov.w	r0, #4294967295
 800357e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003582:	81a3      	strh	r3, [r4, #12]
 8003584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003588:	463a      	mov	r2, r7
 800358a:	6921      	ldr	r1, [r4, #16]
 800358c:	f7ff feed 	bl	800336a <memcpy>
 8003590:	89a3      	ldrh	r3, [r4, #12]
 8003592:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800359a:	81a3      	strh	r3, [r4, #12]
 800359c:	6126      	str	r6, [r4, #16]
 800359e:	443e      	add	r6, r7
 80035a0:	6026      	str	r6, [r4, #0]
 80035a2:	4646      	mov	r6, r8
 80035a4:	6165      	str	r5, [r4, #20]
 80035a6:	1bed      	subs	r5, r5, r7
 80035a8:	60a5      	str	r5, [r4, #8]
 80035aa:	4546      	cmp	r6, r8
 80035ac:	bf28      	it	cs
 80035ae:	4646      	movcs	r6, r8
 80035b0:	4649      	mov	r1, r9
 80035b2:	4632      	mov	r2, r6
 80035b4:	6820      	ldr	r0, [r4, #0]
 80035b6:	f000 fabf 	bl	8003b38 <memmove>
 80035ba:	68a3      	ldr	r3, [r4, #8]
 80035bc:	2000      	movs	r0, #0
 80035be:	1b9b      	subs	r3, r3, r6
 80035c0:	60a3      	str	r3, [r4, #8]
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	441e      	add	r6, r3
 80035c6:	6026      	str	r6, [r4, #0]
 80035c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035cc:	462a      	mov	r2, r5
 80035ce:	f000 facf 	bl	8003b70 <_realloc_r>
 80035d2:	4606      	mov	r6, r0
 80035d4:	2800      	cmp	r0, #0
 80035d6:	d1e1      	bne.n	800359c <__ssputs_r+0x70>
 80035d8:	6921      	ldr	r1, [r4, #16]
 80035da:	4650      	mov	r0, sl
 80035dc:	f7ff fefc 	bl	80033d8 <_free_r>
 80035e0:	e7c7      	b.n	8003572 <__ssputs_r+0x46>
	...

080035e4 <_svfiprintf_r>:
 80035e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035e8:	b09d      	sub	sp, #116	; 0x74
 80035ea:	9303      	str	r3, [sp, #12]
 80035ec:	898b      	ldrh	r3, [r1, #12]
 80035ee:	4680      	mov	r8, r0
 80035f0:	061c      	lsls	r4, r3, #24
 80035f2:	460d      	mov	r5, r1
 80035f4:	4616      	mov	r6, r2
 80035f6:	d50f      	bpl.n	8003618 <_svfiprintf_r+0x34>
 80035f8:	690b      	ldr	r3, [r1, #16]
 80035fa:	b96b      	cbnz	r3, 8003618 <_svfiprintf_r+0x34>
 80035fc:	2140      	movs	r1, #64	; 0x40
 80035fe:	f7ff ff37 	bl	8003470 <_malloc_r>
 8003602:	6028      	str	r0, [r5, #0]
 8003604:	6128      	str	r0, [r5, #16]
 8003606:	b928      	cbnz	r0, 8003614 <_svfiprintf_r+0x30>
 8003608:	230c      	movs	r3, #12
 800360a:	f8c8 3000 	str.w	r3, [r8]
 800360e:	f04f 30ff 	mov.w	r0, #4294967295
 8003612:	e0c4      	b.n	800379e <_svfiprintf_r+0x1ba>
 8003614:	2340      	movs	r3, #64	; 0x40
 8003616:	616b      	str	r3, [r5, #20]
 8003618:	2300      	movs	r3, #0
 800361a:	9309      	str	r3, [sp, #36]	; 0x24
 800361c:	2320      	movs	r3, #32
 800361e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003622:	2330      	movs	r3, #48	; 0x30
 8003624:	f04f 0b01 	mov.w	fp, #1
 8003628:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800362c:	4637      	mov	r7, r6
 800362e:	463c      	mov	r4, r7
 8003630:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d13c      	bne.n	80036b2 <_svfiprintf_r+0xce>
 8003638:	ebb7 0a06 	subs.w	sl, r7, r6
 800363c:	d00b      	beq.n	8003656 <_svfiprintf_r+0x72>
 800363e:	4653      	mov	r3, sl
 8003640:	4632      	mov	r2, r6
 8003642:	4629      	mov	r1, r5
 8003644:	4640      	mov	r0, r8
 8003646:	f7ff ff71 	bl	800352c <__ssputs_r>
 800364a:	3001      	adds	r0, #1
 800364c:	f000 80a2 	beq.w	8003794 <_svfiprintf_r+0x1b0>
 8003650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003652:	4453      	add	r3, sl
 8003654:	9309      	str	r3, [sp, #36]	; 0x24
 8003656:	783b      	ldrb	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 809b 	beq.w	8003794 <_svfiprintf_r+0x1b0>
 800365e:	2300      	movs	r3, #0
 8003660:	f04f 32ff 	mov.w	r2, #4294967295
 8003664:	9304      	str	r3, [sp, #16]
 8003666:	9307      	str	r3, [sp, #28]
 8003668:	9205      	str	r2, [sp, #20]
 800366a:	9306      	str	r3, [sp, #24]
 800366c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003670:	931a      	str	r3, [sp, #104]	; 0x68
 8003672:	2205      	movs	r2, #5
 8003674:	7821      	ldrb	r1, [r4, #0]
 8003676:	4850      	ldr	r0, [pc, #320]	; (80037b8 <_svfiprintf_r+0x1d4>)
 8003678:	f000 fa50 	bl	8003b1c <memchr>
 800367c:	1c67      	adds	r7, r4, #1
 800367e:	9b04      	ldr	r3, [sp, #16]
 8003680:	b9d8      	cbnz	r0, 80036ba <_svfiprintf_r+0xd6>
 8003682:	06d9      	lsls	r1, r3, #27
 8003684:	bf44      	itt	mi
 8003686:	2220      	movmi	r2, #32
 8003688:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800368c:	071a      	lsls	r2, r3, #28
 800368e:	bf44      	itt	mi
 8003690:	222b      	movmi	r2, #43	; 0x2b
 8003692:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003696:	7822      	ldrb	r2, [r4, #0]
 8003698:	2a2a      	cmp	r2, #42	; 0x2a
 800369a:	d016      	beq.n	80036ca <_svfiprintf_r+0xe6>
 800369c:	2100      	movs	r1, #0
 800369e:	200a      	movs	r0, #10
 80036a0:	9a07      	ldr	r2, [sp, #28]
 80036a2:	4627      	mov	r7, r4
 80036a4:	783b      	ldrb	r3, [r7, #0]
 80036a6:	3401      	adds	r4, #1
 80036a8:	3b30      	subs	r3, #48	; 0x30
 80036aa:	2b09      	cmp	r3, #9
 80036ac:	d950      	bls.n	8003750 <_svfiprintf_r+0x16c>
 80036ae:	b1c9      	cbz	r1, 80036e4 <_svfiprintf_r+0x100>
 80036b0:	e011      	b.n	80036d6 <_svfiprintf_r+0xf2>
 80036b2:	2b25      	cmp	r3, #37	; 0x25
 80036b4:	d0c0      	beq.n	8003638 <_svfiprintf_r+0x54>
 80036b6:	4627      	mov	r7, r4
 80036b8:	e7b9      	b.n	800362e <_svfiprintf_r+0x4a>
 80036ba:	4a3f      	ldr	r2, [pc, #252]	; (80037b8 <_svfiprintf_r+0x1d4>)
 80036bc:	463c      	mov	r4, r7
 80036be:	1a80      	subs	r0, r0, r2
 80036c0:	fa0b f000 	lsl.w	r0, fp, r0
 80036c4:	4318      	orrs	r0, r3
 80036c6:	9004      	str	r0, [sp, #16]
 80036c8:	e7d3      	b.n	8003672 <_svfiprintf_r+0x8e>
 80036ca:	9a03      	ldr	r2, [sp, #12]
 80036cc:	1d11      	adds	r1, r2, #4
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	9103      	str	r1, [sp, #12]
 80036d2:	2a00      	cmp	r2, #0
 80036d4:	db01      	blt.n	80036da <_svfiprintf_r+0xf6>
 80036d6:	9207      	str	r2, [sp, #28]
 80036d8:	e004      	b.n	80036e4 <_svfiprintf_r+0x100>
 80036da:	4252      	negs	r2, r2
 80036dc:	f043 0302 	orr.w	r3, r3, #2
 80036e0:	9207      	str	r2, [sp, #28]
 80036e2:	9304      	str	r3, [sp, #16]
 80036e4:	783b      	ldrb	r3, [r7, #0]
 80036e6:	2b2e      	cmp	r3, #46	; 0x2e
 80036e8:	d10d      	bne.n	8003706 <_svfiprintf_r+0x122>
 80036ea:	787b      	ldrb	r3, [r7, #1]
 80036ec:	1c79      	adds	r1, r7, #1
 80036ee:	2b2a      	cmp	r3, #42	; 0x2a
 80036f0:	d132      	bne.n	8003758 <_svfiprintf_r+0x174>
 80036f2:	9b03      	ldr	r3, [sp, #12]
 80036f4:	3702      	adds	r7, #2
 80036f6:	1d1a      	adds	r2, r3, #4
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	9203      	str	r2, [sp, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	bfb8      	it	lt
 8003700:	f04f 33ff 	movlt.w	r3, #4294967295
 8003704:	9305      	str	r3, [sp, #20]
 8003706:	4c2d      	ldr	r4, [pc, #180]	; (80037bc <_svfiprintf_r+0x1d8>)
 8003708:	2203      	movs	r2, #3
 800370a:	7839      	ldrb	r1, [r7, #0]
 800370c:	4620      	mov	r0, r4
 800370e:	f000 fa05 	bl	8003b1c <memchr>
 8003712:	b138      	cbz	r0, 8003724 <_svfiprintf_r+0x140>
 8003714:	2340      	movs	r3, #64	; 0x40
 8003716:	1b00      	subs	r0, r0, r4
 8003718:	fa03 f000 	lsl.w	r0, r3, r0
 800371c:	9b04      	ldr	r3, [sp, #16]
 800371e:	3701      	adds	r7, #1
 8003720:	4303      	orrs	r3, r0
 8003722:	9304      	str	r3, [sp, #16]
 8003724:	7839      	ldrb	r1, [r7, #0]
 8003726:	2206      	movs	r2, #6
 8003728:	4825      	ldr	r0, [pc, #148]	; (80037c0 <_svfiprintf_r+0x1dc>)
 800372a:	1c7e      	adds	r6, r7, #1
 800372c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003730:	f000 f9f4 	bl	8003b1c <memchr>
 8003734:	2800      	cmp	r0, #0
 8003736:	d035      	beq.n	80037a4 <_svfiprintf_r+0x1c0>
 8003738:	4b22      	ldr	r3, [pc, #136]	; (80037c4 <_svfiprintf_r+0x1e0>)
 800373a:	b9fb      	cbnz	r3, 800377c <_svfiprintf_r+0x198>
 800373c:	9b03      	ldr	r3, [sp, #12]
 800373e:	3307      	adds	r3, #7
 8003740:	f023 0307 	bic.w	r3, r3, #7
 8003744:	3308      	adds	r3, #8
 8003746:	9303      	str	r3, [sp, #12]
 8003748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800374a:	444b      	add	r3, r9
 800374c:	9309      	str	r3, [sp, #36]	; 0x24
 800374e:	e76d      	b.n	800362c <_svfiprintf_r+0x48>
 8003750:	fb00 3202 	mla	r2, r0, r2, r3
 8003754:	2101      	movs	r1, #1
 8003756:	e7a4      	b.n	80036a2 <_svfiprintf_r+0xbe>
 8003758:	2300      	movs	r3, #0
 800375a:	240a      	movs	r4, #10
 800375c:	4618      	mov	r0, r3
 800375e:	9305      	str	r3, [sp, #20]
 8003760:	460f      	mov	r7, r1
 8003762:	783a      	ldrb	r2, [r7, #0]
 8003764:	3101      	adds	r1, #1
 8003766:	3a30      	subs	r2, #48	; 0x30
 8003768:	2a09      	cmp	r2, #9
 800376a:	d903      	bls.n	8003774 <_svfiprintf_r+0x190>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0ca      	beq.n	8003706 <_svfiprintf_r+0x122>
 8003770:	9005      	str	r0, [sp, #20]
 8003772:	e7c8      	b.n	8003706 <_svfiprintf_r+0x122>
 8003774:	fb04 2000 	mla	r0, r4, r0, r2
 8003778:	2301      	movs	r3, #1
 800377a:	e7f1      	b.n	8003760 <_svfiprintf_r+0x17c>
 800377c:	ab03      	add	r3, sp, #12
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	462a      	mov	r2, r5
 8003782:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <_svfiprintf_r+0x1e4>)
 8003784:	a904      	add	r1, sp, #16
 8003786:	4640      	mov	r0, r8
 8003788:	f3af 8000 	nop.w
 800378c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003790:	4681      	mov	r9, r0
 8003792:	d1d9      	bne.n	8003748 <_svfiprintf_r+0x164>
 8003794:	89ab      	ldrh	r3, [r5, #12]
 8003796:	065b      	lsls	r3, r3, #25
 8003798:	f53f af39 	bmi.w	800360e <_svfiprintf_r+0x2a>
 800379c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800379e:	b01d      	add	sp, #116	; 0x74
 80037a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037a4:	ab03      	add	r3, sp, #12
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	462a      	mov	r2, r5
 80037aa:	4b07      	ldr	r3, [pc, #28]	; (80037c8 <_svfiprintf_r+0x1e4>)
 80037ac:	a904      	add	r1, sp, #16
 80037ae:	4640      	mov	r0, r8
 80037b0:	f000 f884 	bl	80038bc <_printf_i>
 80037b4:	e7ea      	b.n	800378c <_svfiprintf_r+0x1a8>
 80037b6:	bf00      	nop
 80037b8:	08003cde 	.word	0x08003cde
 80037bc:	08003ce4 	.word	0x08003ce4
 80037c0:	08003ce8 	.word	0x08003ce8
 80037c4:	00000000 	.word	0x00000000
 80037c8:	0800352d 	.word	0x0800352d

080037cc <_printf_common>:
 80037cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037d0:	4691      	mov	r9, r2
 80037d2:	461f      	mov	r7, r3
 80037d4:	688a      	ldr	r2, [r1, #8]
 80037d6:	690b      	ldr	r3, [r1, #16]
 80037d8:	4606      	mov	r6, r0
 80037da:	4293      	cmp	r3, r2
 80037dc:	bfb8      	it	lt
 80037de:	4613      	movlt	r3, r2
 80037e0:	f8c9 3000 	str.w	r3, [r9]
 80037e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037e8:	460c      	mov	r4, r1
 80037ea:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037ee:	b112      	cbz	r2, 80037f6 <_printf_common+0x2a>
 80037f0:	3301      	adds	r3, #1
 80037f2:	f8c9 3000 	str.w	r3, [r9]
 80037f6:	6823      	ldr	r3, [r4, #0]
 80037f8:	0699      	lsls	r1, r3, #26
 80037fa:	bf42      	ittt	mi
 80037fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003800:	3302      	addmi	r3, #2
 8003802:	f8c9 3000 	strmi.w	r3, [r9]
 8003806:	6825      	ldr	r5, [r4, #0]
 8003808:	f015 0506 	ands.w	r5, r5, #6
 800380c:	d107      	bne.n	800381e <_printf_common+0x52>
 800380e:	f104 0a19 	add.w	sl, r4, #25
 8003812:	68e3      	ldr	r3, [r4, #12]
 8003814:	f8d9 2000 	ldr.w	r2, [r9]
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	429d      	cmp	r5, r3
 800381c:	db2a      	blt.n	8003874 <_printf_common+0xa8>
 800381e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003822:	6822      	ldr	r2, [r4, #0]
 8003824:	3300      	adds	r3, #0
 8003826:	bf18      	it	ne
 8003828:	2301      	movne	r3, #1
 800382a:	0692      	lsls	r2, r2, #26
 800382c:	d42f      	bmi.n	800388e <_printf_common+0xc2>
 800382e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003832:	4639      	mov	r1, r7
 8003834:	4630      	mov	r0, r6
 8003836:	47c0      	blx	r8
 8003838:	3001      	adds	r0, #1
 800383a:	d022      	beq.n	8003882 <_printf_common+0xb6>
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	68e5      	ldr	r5, [r4, #12]
 8003840:	f003 0306 	and.w	r3, r3, #6
 8003844:	2b04      	cmp	r3, #4
 8003846:	bf18      	it	ne
 8003848:	2500      	movne	r5, #0
 800384a:	f8d9 2000 	ldr.w	r2, [r9]
 800384e:	f04f 0900 	mov.w	r9, #0
 8003852:	bf08      	it	eq
 8003854:	1aad      	subeq	r5, r5, r2
 8003856:	68a3      	ldr	r3, [r4, #8]
 8003858:	6922      	ldr	r2, [r4, #16]
 800385a:	bf08      	it	eq
 800385c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003860:	4293      	cmp	r3, r2
 8003862:	bfc4      	itt	gt
 8003864:	1a9b      	subgt	r3, r3, r2
 8003866:	18ed      	addgt	r5, r5, r3
 8003868:	341a      	adds	r4, #26
 800386a:	454d      	cmp	r5, r9
 800386c:	d11b      	bne.n	80038a6 <_printf_common+0xda>
 800386e:	2000      	movs	r0, #0
 8003870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003874:	2301      	movs	r3, #1
 8003876:	4652      	mov	r2, sl
 8003878:	4639      	mov	r1, r7
 800387a:	4630      	mov	r0, r6
 800387c:	47c0      	blx	r8
 800387e:	3001      	adds	r0, #1
 8003880:	d103      	bne.n	800388a <_printf_common+0xbe>
 8003882:	f04f 30ff 	mov.w	r0, #4294967295
 8003886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800388a:	3501      	adds	r5, #1
 800388c:	e7c1      	b.n	8003812 <_printf_common+0x46>
 800388e:	2030      	movs	r0, #48	; 0x30
 8003890:	18e1      	adds	r1, r4, r3
 8003892:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800389c:	4422      	add	r2, r4
 800389e:	3302      	adds	r3, #2
 80038a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038a4:	e7c3      	b.n	800382e <_printf_common+0x62>
 80038a6:	2301      	movs	r3, #1
 80038a8:	4622      	mov	r2, r4
 80038aa:	4639      	mov	r1, r7
 80038ac:	4630      	mov	r0, r6
 80038ae:	47c0      	blx	r8
 80038b0:	3001      	adds	r0, #1
 80038b2:	d0e6      	beq.n	8003882 <_printf_common+0xb6>
 80038b4:	f109 0901 	add.w	r9, r9, #1
 80038b8:	e7d7      	b.n	800386a <_printf_common+0x9e>
	...

080038bc <_printf_i>:
 80038bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038c0:	4617      	mov	r7, r2
 80038c2:	7e0a      	ldrb	r2, [r1, #24]
 80038c4:	b085      	sub	sp, #20
 80038c6:	2a6e      	cmp	r2, #110	; 0x6e
 80038c8:	4698      	mov	r8, r3
 80038ca:	4606      	mov	r6, r0
 80038cc:	460c      	mov	r4, r1
 80038ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80038d0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80038d4:	f000 80bc 	beq.w	8003a50 <_printf_i+0x194>
 80038d8:	d81a      	bhi.n	8003910 <_printf_i+0x54>
 80038da:	2a63      	cmp	r2, #99	; 0x63
 80038dc:	d02e      	beq.n	800393c <_printf_i+0x80>
 80038de:	d80a      	bhi.n	80038f6 <_printf_i+0x3a>
 80038e0:	2a00      	cmp	r2, #0
 80038e2:	f000 80c8 	beq.w	8003a76 <_printf_i+0x1ba>
 80038e6:	2a58      	cmp	r2, #88	; 0x58
 80038e8:	f000 808a 	beq.w	8003a00 <_printf_i+0x144>
 80038ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038f0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80038f4:	e02a      	b.n	800394c <_printf_i+0x90>
 80038f6:	2a64      	cmp	r2, #100	; 0x64
 80038f8:	d001      	beq.n	80038fe <_printf_i+0x42>
 80038fa:	2a69      	cmp	r2, #105	; 0x69
 80038fc:	d1f6      	bne.n	80038ec <_printf_i+0x30>
 80038fe:	6821      	ldr	r1, [r4, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003906:	d023      	beq.n	8003950 <_printf_i+0x94>
 8003908:	1d11      	adds	r1, r2, #4
 800390a:	6019      	str	r1, [r3, #0]
 800390c:	6813      	ldr	r3, [r2, #0]
 800390e:	e027      	b.n	8003960 <_printf_i+0xa4>
 8003910:	2a73      	cmp	r2, #115	; 0x73
 8003912:	f000 80b4 	beq.w	8003a7e <_printf_i+0x1c2>
 8003916:	d808      	bhi.n	800392a <_printf_i+0x6e>
 8003918:	2a6f      	cmp	r2, #111	; 0x6f
 800391a:	d02a      	beq.n	8003972 <_printf_i+0xb6>
 800391c:	2a70      	cmp	r2, #112	; 0x70
 800391e:	d1e5      	bne.n	80038ec <_printf_i+0x30>
 8003920:	680a      	ldr	r2, [r1, #0]
 8003922:	f042 0220 	orr.w	r2, r2, #32
 8003926:	600a      	str	r2, [r1, #0]
 8003928:	e003      	b.n	8003932 <_printf_i+0x76>
 800392a:	2a75      	cmp	r2, #117	; 0x75
 800392c:	d021      	beq.n	8003972 <_printf_i+0xb6>
 800392e:	2a78      	cmp	r2, #120	; 0x78
 8003930:	d1dc      	bne.n	80038ec <_printf_i+0x30>
 8003932:	2278      	movs	r2, #120	; 0x78
 8003934:	496f      	ldr	r1, [pc, #444]	; (8003af4 <_printf_i+0x238>)
 8003936:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800393a:	e064      	b.n	8003a06 <_printf_i+0x14a>
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003942:	1d11      	adds	r1, r2, #4
 8003944:	6019      	str	r1, [r3, #0]
 8003946:	6813      	ldr	r3, [r2, #0]
 8003948:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800394c:	2301      	movs	r3, #1
 800394e:	e0a3      	b.n	8003a98 <_printf_i+0x1dc>
 8003950:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003954:	f102 0104 	add.w	r1, r2, #4
 8003958:	6019      	str	r1, [r3, #0]
 800395a:	d0d7      	beq.n	800390c <_printf_i+0x50>
 800395c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003960:	2b00      	cmp	r3, #0
 8003962:	da03      	bge.n	800396c <_printf_i+0xb0>
 8003964:	222d      	movs	r2, #45	; 0x2d
 8003966:	425b      	negs	r3, r3
 8003968:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800396c:	4962      	ldr	r1, [pc, #392]	; (8003af8 <_printf_i+0x23c>)
 800396e:	220a      	movs	r2, #10
 8003970:	e017      	b.n	80039a2 <_printf_i+0xe6>
 8003972:	6820      	ldr	r0, [r4, #0]
 8003974:	6819      	ldr	r1, [r3, #0]
 8003976:	f010 0f80 	tst.w	r0, #128	; 0x80
 800397a:	d003      	beq.n	8003984 <_printf_i+0xc8>
 800397c:	1d08      	adds	r0, r1, #4
 800397e:	6018      	str	r0, [r3, #0]
 8003980:	680b      	ldr	r3, [r1, #0]
 8003982:	e006      	b.n	8003992 <_printf_i+0xd6>
 8003984:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003988:	f101 0004 	add.w	r0, r1, #4
 800398c:	6018      	str	r0, [r3, #0]
 800398e:	d0f7      	beq.n	8003980 <_printf_i+0xc4>
 8003990:	880b      	ldrh	r3, [r1, #0]
 8003992:	2a6f      	cmp	r2, #111	; 0x6f
 8003994:	bf14      	ite	ne
 8003996:	220a      	movne	r2, #10
 8003998:	2208      	moveq	r2, #8
 800399a:	4957      	ldr	r1, [pc, #348]	; (8003af8 <_printf_i+0x23c>)
 800399c:	2000      	movs	r0, #0
 800399e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80039a2:	6865      	ldr	r5, [r4, #4]
 80039a4:	2d00      	cmp	r5, #0
 80039a6:	60a5      	str	r5, [r4, #8]
 80039a8:	f2c0 809c 	blt.w	8003ae4 <_printf_i+0x228>
 80039ac:	6820      	ldr	r0, [r4, #0]
 80039ae:	f020 0004 	bic.w	r0, r0, #4
 80039b2:	6020      	str	r0, [r4, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d13f      	bne.n	8003a38 <_printf_i+0x17c>
 80039b8:	2d00      	cmp	r5, #0
 80039ba:	f040 8095 	bne.w	8003ae8 <_printf_i+0x22c>
 80039be:	4675      	mov	r5, lr
 80039c0:	2a08      	cmp	r2, #8
 80039c2:	d10b      	bne.n	80039dc <_printf_i+0x120>
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	07da      	lsls	r2, r3, #31
 80039c8:	d508      	bpl.n	80039dc <_printf_i+0x120>
 80039ca:	6923      	ldr	r3, [r4, #16]
 80039cc:	6862      	ldr	r2, [r4, #4]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	bfde      	ittt	le
 80039d2:	2330      	movle	r3, #48	; 0x30
 80039d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039dc:	ebae 0305 	sub.w	r3, lr, r5
 80039e0:	6123      	str	r3, [r4, #16]
 80039e2:	f8cd 8000 	str.w	r8, [sp]
 80039e6:	463b      	mov	r3, r7
 80039e8:	aa03      	add	r2, sp, #12
 80039ea:	4621      	mov	r1, r4
 80039ec:	4630      	mov	r0, r6
 80039ee:	f7ff feed 	bl	80037cc <_printf_common>
 80039f2:	3001      	adds	r0, #1
 80039f4:	d155      	bne.n	8003aa2 <_printf_i+0x1e6>
 80039f6:	f04f 30ff 	mov.w	r0, #4294967295
 80039fa:	b005      	add	sp, #20
 80039fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a00:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003a04:	493c      	ldr	r1, [pc, #240]	; (8003af8 <_printf_i+0x23c>)
 8003a06:	6822      	ldr	r2, [r4, #0]
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003a0e:	f100 0504 	add.w	r5, r0, #4
 8003a12:	601d      	str	r5, [r3, #0]
 8003a14:	d001      	beq.n	8003a1a <_printf_i+0x15e>
 8003a16:	6803      	ldr	r3, [r0, #0]
 8003a18:	e002      	b.n	8003a20 <_printf_i+0x164>
 8003a1a:	0655      	lsls	r5, r2, #25
 8003a1c:	d5fb      	bpl.n	8003a16 <_printf_i+0x15a>
 8003a1e:	8803      	ldrh	r3, [r0, #0]
 8003a20:	07d0      	lsls	r0, r2, #31
 8003a22:	bf44      	itt	mi
 8003a24:	f042 0220 	orrmi.w	r2, r2, #32
 8003a28:	6022      	strmi	r2, [r4, #0]
 8003a2a:	b91b      	cbnz	r3, 8003a34 <_printf_i+0x178>
 8003a2c:	6822      	ldr	r2, [r4, #0]
 8003a2e:	f022 0220 	bic.w	r2, r2, #32
 8003a32:	6022      	str	r2, [r4, #0]
 8003a34:	2210      	movs	r2, #16
 8003a36:	e7b1      	b.n	800399c <_printf_i+0xe0>
 8003a38:	4675      	mov	r5, lr
 8003a3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8003a3e:	fb02 3310 	mls	r3, r2, r0, r3
 8003a42:	5ccb      	ldrb	r3, [r1, r3]
 8003a44:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2800      	cmp	r0, #0
 8003a4c:	d1f5      	bne.n	8003a3a <_printf_i+0x17e>
 8003a4e:	e7b7      	b.n	80039c0 <_printf_i+0x104>
 8003a50:	6808      	ldr	r0, [r1, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003a58:	6949      	ldr	r1, [r1, #20]
 8003a5a:	d004      	beq.n	8003a66 <_printf_i+0x1aa>
 8003a5c:	1d10      	adds	r0, r2, #4
 8003a5e:	6018      	str	r0, [r3, #0]
 8003a60:	6813      	ldr	r3, [r2, #0]
 8003a62:	6019      	str	r1, [r3, #0]
 8003a64:	e007      	b.n	8003a76 <_printf_i+0x1ba>
 8003a66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a6a:	f102 0004 	add.w	r0, r2, #4
 8003a6e:	6018      	str	r0, [r3, #0]
 8003a70:	6813      	ldr	r3, [r2, #0]
 8003a72:	d0f6      	beq.n	8003a62 <_printf_i+0x1a6>
 8003a74:	8019      	strh	r1, [r3, #0]
 8003a76:	2300      	movs	r3, #0
 8003a78:	4675      	mov	r5, lr
 8003a7a:	6123      	str	r3, [r4, #16]
 8003a7c:	e7b1      	b.n	80039e2 <_printf_i+0x126>
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	1d11      	adds	r1, r2, #4
 8003a82:	6019      	str	r1, [r3, #0]
 8003a84:	6815      	ldr	r5, [r2, #0]
 8003a86:	2100      	movs	r1, #0
 8003a88:	6862      	ldr	r2, [r4, #4]
 8003a8a:	4628      	mov	r0, r5
 8003a8c:	f000 f846 	bl	8003b1c <memchr>
 8003a90:	b108      	cbz	r0, 8003a96 <_printf_i+0x1da>
 8003a92:	1b40      	subs	r0, r0, r5
 8003a94:	6060      	str	r0, [r4, #4]
 8003a96:	6863      	ldr	r3, [r4, #4]
 8003a98:	6123      	str	r3, [r4, #16]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aa0:	e79f      	b.n	80039e2 <_printf_i+0x126>
 8003aa2:	6923      	ldr	r3, [r4, #16]
 8003aa4:	462a      	mov	r2, r5
 8003aa6:	4639      	mov	r1, r7
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	47c0      	blx	r8
 8003aac:	3001      	adds	r0, #1
 8003aae:	d0a2      	beq.n	80039f6 <_printf_i+0x13a>
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	079b      	lsls	r3, r3, #30
 8003ab4:	d507      	bpl.n	8003ac6 <_printf_i+0x20a>
 8003ab6:	2500      	movs	r5, #0
 8003ab8:	f104 0919 	add.w	r9, r4, #25
 8003abc:	68e3      	ldr	r3, [r4, #12]
 8003abe:	9a03      	ldr	r2, [sp, #12]
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	429d      	cmp	r5, r3
 8003ac4:	db05      	blt.n	8003ad2 <_printf_i+0x216>
 8003ac6:	68e0      	ldr	r0, [r4, #12]
 8003ac8:	9b03      	ldr	r3, [sp, #12]
 8003aca:	4298      	cmp	r0, r3
 8003acc:	bfb8      	it	lt
 8003ace:	4618      	movlt	r0, r3
 8003ad0:	e793      	b.n	80039fa <_printf_i+0x13e>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	464a      	mov	r2, r9
 8003ad6:	4639      	mov	r1, r7
 8003ad8:	4630      	mov	r0, r6
 8003ada:	47c0      	blx	r8
 8003adc:	3001      	adds	r0, #1
 8003ade:	d08a      	beq.n	80039f6 <_printf_i+0x13a>
 8003ae0:	3501      	adds	r5, #1
 8003ae2:	e7eb      	b.n	8003abc <_printf_i+0x200>
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1a7      	bne.n	8003a38 <_printf_i+0x17c>
 8003ae8:	780b      	ldrb	r3, [r1, #0]
 8003aea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003aee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003af2:	e765      	b.n	80039c0 <_printf_i+0x104>
 8003af4:	08003d00 	.word	0x08003d00
 8003af8:	08003cef 	.word	0x08003cef

08003afc <_sbrk_r>:
 8003afc:	b538      	push	{r3, r4, r5, lr}
 8003afe:	2300      	movs	r3, #0
 8003b00:	4c05      	ldr	r4, [pc, #20]	; (8003b18 <_sbrk_r+0x1c>)
 8003b02:	4605      	mov	r5, r0
 8003b04:	4608      	mov	r0, r1
 8003b06:	6023      	str	r3, [r4, #0]
 8003b08:	f7ff fb0e 	bl	8003128 <_sbrk>
 8003b0c:	1c43      	adds	r3, r0, #1
 8003b0e:	d102      	bne.n	8003b16 <_sbrk_r+0x1a>
 8003b10:	6823      	ldr	r3, [r4, #0]
 8003b12:	b103      	cbz	r3, 8003b16 <_sbrk_r+0x1a>
 8003b14:	602b      	str	r3, [r5, #0]
 8003b16:	bd38      	pop	{r3, r4, r5, pc}
 8003b18:	20004108 	.word	0x20004108

08003b1c <memchr>:
 8003b1c:	b510      	push	{r4, lr}
 8003b1e:	b2c9      	uxtb	r1, r1
 8003b20:	4402      	add	r2, r0
 8003b22:	4290      	cmp	r0, r2
 8003b24:	4603      	mov	r3, r0
 8003b26:	d101      	bne.n	8003b2c <memchr+0x10>
 8003b28:	2000      	movs	r0, #0
 8003b2a:	bd10      	pop	{r4, pc}
 8003b2c:	781c      	ldrb	r4, [r3, #0]
 8003b2e:	3001      	adds	r0, #1
 8003b30:	428c      	cmp	r4, r1
 8003b32:	d1f6      	bne.n	8003b22 <memchr+0x6>
 8003b34:	4618      	mov	r0, r3
 8003b36:	bd10      	pop	{r4, pc}

08003b38 <memmove>:
 8003b38:	4288      	cmp	r0, r1
 8003b3a:	b510      	push	{r4, lr}
 8003b3c:	eb01 0302 	add.w	r3, r1, r2
 8003b40:	d803      	bhi.n	8003b4a <memmove+0x12>
 8003b42:	1e42      	subs	r2, r0, #1
 8003b44:	4299      	cmp	r1, r3
 8003b46:	d10c      	bne.n	8003b62 <memmove+0x2a>
 8003b48:	bd10      	pop	{r4, pc}
 8003b4a:	4298      	cmp	r0, r3
 8003b4c:	d2f9      	bcs.n	8003b42 <memmove+0xa>
 8003b4e:	1881      	adds	r1, r0, r2
 8003b50:	1ad2      	subs	r2, r2, r3
 8003b52:	42d3      	cmn	r3, r2
 8003b54:	d100      	bne.n	8003b58 <memmove+0x20>
 8003b56:	bd10      	pop	{r4, pc}
 8003b58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b5c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003b60:	e7f7      	b.n	8003b52 <memmove+0x1a>
 8003b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b66:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003b6a:	e7eb      	b.n	8003b44 <memmove+0xc>

08003b6c <__malloc_lock>:
 8003b6c:	4770      	bx	lr

08003b6e <__malloc_unlock>:
 8003b6e:	4770      	bx	lr

08003b70 <_realloc_r>:
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	4607      	mov	r7, r0
 8003b74:	4614      	mov	r4, r2
 8003b76:	460e      	mov	r6, r1
 8003b78:	b921      	cbnz	r1, 8003b84 <_realloc_r+0x14>
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b80:	f7ff bc76 	b.w	8003470 <_malloc_r>
 8003b84:	b922      	cbnz	r2, 8003b90 <_realloc_r+0x20>
 8003b86:	f7ff fc27 	bl	80033d8 <_free_r>
 8003b8a:	4625      	mov	r5, r4
 8003b8c:	4628      	mov	r0, r5
 8003b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b90:	f000 f814 	bl	8003bbc <_malloc_usable_size_r>
 8003b94:	4284      	cmp	r4, r0
 8003b96:	d90f      	bls.n	8003bb8 <_realloc_r+0x48>
 8003b98:	4621      	mov	r1, r4
 8003b9a:	4638      	mov	r0, r7
 8003b9c:	f7ff fc68 	bl	8003470 <_malloc_r>
 8003ba0:	4605      	mov	r5, r0
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	d0f2      	beq.n	8003b8c <_realloc_r+0x1c>
 8003ba6:	4631      	mov	r1, r6
 8003ba8:	4622      	mov	r2, r4
 8003baa:	f7ff fbde 	bl	800336a <memcpy>
 8003bae:	4631      	mov	r1, r6
 8003bb0:	4638      	mov	r0, r7
 8003bb2:	f7ff fc11 	bl	80033d8 <_free_r>
 8003bb6:	e7e9      	b.n	8003b8c <_realloc_r+0x1c>
 8003bb8:	4635      	mov	r5, r6
 8003bba:	e7e7      	b.n	8003b8c <_realloc_r+0x1c>

08003bbc <_malloc_usable_size_r>:
 8003bbc:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003bc0:	2800      	cmp	r0, #0
 8003bc2:	f1a0 0004 	sub.w	r0, r0, #4
 8003bc6:	bfbc      	itt	lt
 8003bc8:	580b      	ldrlt	r3, [r1, r0]
 8003bca:	18c0      	addlt	r0, r0, r3
 8003bcc:	4770      	bx	lr
	...

08003bd0 <_init>:
 8003bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd2:	bf00      	nop
 8003bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bd6:	bc08      	pop	{r3}
 8003bd8:	469e      	mov	lr, r3
 8003bda:	4770      	bx	lr

08003bdc <_fini>:
 8003bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bde:	bf00      	nop
 8003be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003be2:	bc08      	pop	{r3}
 8003be4:	469e      	mov	lr, r3
 8003be6:	4770      	bx	lr
