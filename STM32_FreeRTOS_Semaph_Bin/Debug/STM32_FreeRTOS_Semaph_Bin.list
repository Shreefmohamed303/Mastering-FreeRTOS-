
STM32_FreeRTOS_Semaph_Bin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f90  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080030a0  080030a0  000130a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080031b8  080031b8  000131b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080031bc  080031bc  000131bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  20000000  080031c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003a20  2000007c  0800323c  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20003a9c  0800323c  00023a9c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009356  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001945  00000000  00000000  000293fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000850  00000000  00000000  0002ad40  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000788  00000000  00000000  0002b590  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003f46  00000000  00000000  0002bd18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002e5b  00000000  00000000  0002fc5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00032ab9  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000025b0  00000000  00000000  00032b38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003088 	.word	0x08003088

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08003088 	.word	0x08003088

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000160:	b480      	push	{r7}
 8000162:	b083      	sub	sp, #12
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000168:	4a05      	ldr	r2, [pc, #20]	; (8000180 <NVIC_PriorityGroupConfig+0x20>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000174:	60d3      	str	r3, [r2, #12]
}
 8000176:	bf00      	nop
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	e000ed00 	.word	0xe000ed00

08000184 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000184:	b480      	push	{r7}
 8000186:	b089      	sub	sp, #36	; 0x24
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800018e:	2300      	movs	r3, #0
 8000190:	61fb      	str	r3, [r7, #28]
 8000192:	2300      	movs	r3, #0
 8000194:	613b      	str	r3, [r7, #16]
 8000196:	2300      	movs	r3, #0
 8000198:	61bb      	str	r3, [r7, #24]
 800019a:	2300      	movs	r3, #0
 800019c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800019e:	2300      	movs	r3, #0
 80001a0:	617b      	str	r3, [r7, #20]
 80001a2:	2300      	movs	r3, #0
 80001a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80001a6:	683b      	ldr	r3, [r7, #0]
 80001a8:	78db      	ldrb	r3, [r3, #3]
 80001aa:	f003 030f 	and.w	r3, r3, #15
 80001ae:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	78db      	ldrb	r3, [r3, #3]
 80001b4:	f003 0310 	and.w	r3, r3, #16
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d005      	beq.n	80001c8 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80001bc:	683b      	ldr	r3, [r7, #0]
 80001be:	789b      	ldrb	r3, [r3, #2]
 80001c0:	461a      	mov	r2, r3
 80001c2:	69fb      	ldr	r3, [r7, #28]
 80001c4:	4313      	orrs	r3, r2
 80001c6:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80001c8:	683b      	ldr	r3, [r7, #0]
 80001ca:	881b      	ldrh	r3, [r3, #0]
 80001cc:	b2db      	uxtb	r3, r3
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d044      	beq.n	800025c <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80001d8:	2300      	movs	r3, #0
 80001da:	61bb      	str	r3, [r7, #24]
 80001dc:	e038      	b.n	8000250 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80001de:	2201      	movs	r2, #1
 80001e0:	69bb      	ldr	r3, [r7, #24]
 80001e2:	fa02 f303 	lsl.w	r3, r2, r3
 80001e6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	881b      	ldrh	r3, [r3, #0]
 80001ec:	461a      	mov	r2, r3
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	4013      	ands	r3, r2
 80001f2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80001f4:	693a      	ldr	r2, [r7, #16]
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	429a      	cmp	r2, r3
 80001fa:	d126      	bne.n	800024a <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80001fc:	69bb      	ldr	r3, [r7, #24]
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000202:	220f      	movs	r2, #15
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	fa02 f303 	lsl.w	r3, r2, r3
 800020a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800020c:	68bb      	ldr	r3, [r7, #8]
 800020e:	43db      	mvns	r3, r3
 8000210:	697a      	ldr	r2, [r7, #20]
 8000212:	4013      	ands	r3, r2
 8000214:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000216:	69fa      	ldr	r2, [r7, #28]
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	fa02 f303 	lsl.w	r3, r2, r3
 800021e:	697a      	ldr	r2, [r7, #20]
 8000220:	4313      	orrs	r3, r2
 8000222:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	78db      	ldrb	r3, [r3, #3]
 8000228:	2b28      	cmp	r3, #40	; 0x28
 800022a:	d105      	bne.n	8000238 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800022c:	2201      	movs	r2, #1
 800022e:	69bb      	ldr	r3, [r7, #24]
 8000230:	409a      	lsls	r2, r3
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	615a      	str	r2, [r3, #20]
 8000236:	e008      	b.n	800024a <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	78db      	ldrb	r3, [r3, #3]
 800023c:	2b48      	cmp	r3, #72	; 0x48
 800023e:	d104      	bne.n	800024a <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000240:	2201      	movs	r2, #1
 8000242:	69bb      	ldr	r3, [r7, #24]
 8000244:	409a      	lsls	r2, r3
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800024a:	69bb      	ldr	r3, [r7, #24]
 800024c:	3301      	adds	r3, #1
 800024e:	61bb      	str	r3, [r7, #24]
 8000250:	69bb      	ldr	r3, [r7, #24]
 8000252:	2b07      	cmp	r3, #7
 8000254:	d9c3      	bls.n	80001de <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	697a      	ldr	r2, [r7, #20]
 800025a:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	2bff      	cmp	r3, #255	; 0xff
 8000262:	d946      	bls.n	80002f2 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800026a:	2300      	movs	r3, #0
 800026c:	61bb      	str	r3, [r7, #24]
 800026e:	e03a      	b.n	80002e6 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000270:	69bb      	ldr	r3, [r7, #24]
 8000272:	3308      	adds	r3, #8
 8000274:	2201      	movs	r2, #1
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	881b      	ldrh	r3, [r3, #0]
 8000280:	461a      	mov	r2, r3
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	4013      	ands	r3, r2
 8000286:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000288:	693a      	ldr	r2, [r7, #16]
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	429a      	cmp	r2, r3
 800028e:	d127      	bne.n	80002e0 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000290:	69bb      	ldr	r3, [r7, #24]
 8000292:	009b      	lsls	r3, r3, #2
 8000294:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000296:	220f      	movs	r2, #15
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	fa02 f303 	lsl.w	r3, r2, r3
 800029e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	43db      	mvns	r3, r3
 80002a4:	697a      	ldr	r2, [r7, #20]
 80002a6:	4013      	ands	r3, r2
 80002a8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80002aa:	69fa      	ldr	r2, [r7, #28]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	697a      	ldr	r2, [r7, #20]
 80002b4:	4313      	orrs	r3, r2
 80002b6:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	78db      	ldrb	r3, [r3, #3]
 80002bc:	2b28      	cmp	r3, #40	; 0x28
 80002be:	d105      	bne.n	80002cc <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80002c0:	69bb      	ldr	r3, [r7, #24]
 80002c2:	3308      	adds	r3, #8
 80002c4:	2201      	movs	r2, #1
 80002c6:	409a      	lsls	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	78db      	ldrb	r3, [r3, #3]
 80002d0:	2b48      	cmp	r3, #72	; 0x48
 80002d2:	d105      	bne.n	80002e0 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80002d4:	69bb      	ldr	r3, [r7, #24]
 80002d6:	3308      	adds	r3, #8
 80002d8:	2201      	movs	r2, #1
 80002da:	409a      	lsls	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002e0:	69bb      	ldr	r3, [r7, #24]
 80002e2:	3301      	adds	r3, #1
 80002e4:	61bb      	str	r3, [r7, #24]
 80002e6:	69bb      	ldr	r3, [r7, #24]
 80002e8:	2b07      	cmp	r3, #7
 80002ea:	d9c1      	bls.n	8000270 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	697a      	ldr	r2, [r7, #20]
 80002f0:	605a      	str	r2, [r3, #4]
  }
}
 80002f2:	bf00      	nop
 80002f4:	3724      	adds	r7, #36	; 0x24
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr

080002fc <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	460b      	mov	r3, r1
 8000306:	807b      	strh	r3, [r7, #2]
 8000308:	4613      	mov	r3, r2
 800030a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 800030c:	787b      	ldrb	r3, [r7, #1]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d003      	beq.n	800031a <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000312:	887a      	ldrh	r2, [r7, #2]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 8000318:	e002      	b.n	8000320 <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 800031a:	887a      	ldrh	r2, [r7, #2]
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	615a      	str	r2, [r3, #20]
}
 8000320:	bf00      	nop
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr
	...

0800032c <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800032c:	b480      	push	{r7}
 800032e:	b087      	sub	sp, #28
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	617b      	str	r3, [r7, #20]
 8000338:	2300      	movs	r3, #0
 800033a:	613b      	str	r3, [r7, #16]
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	2300      	movs	r3, #0
 8000342:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000344:	4b4c      	ldr	r3, [pc, #304]	; (8000478 <RCC_GetClocksFreq+0x14c>)
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	f003 030c 	and.w	r3, r3, #12
 800034c:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800034e:	697b      	ldr	r3, [r7, #20]
 8000350:	2b04      	cmp	r3, #4
 8000352:	d007      	beq.n	8000364 <RCC_GetClocksFreq+0x38>
 8000354:	2b08      	cmp	r3, #8
 8000356:	d009      	beq.n	800036c <RCC_GetClocksFreq+0x40>
 8000358:	2b00      	cmp	r3, #0
 800035a:	d133      	bne.n	80003c4 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a47      	ldr	r2, [pc, #284]	; (800047c <RCC_GetClocksFreq+0x150>)
 8000360:	601a      	str	r2, [r3, #0]
      break;
 8000362:	e033      	b.n	80003cc <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a45      	ldr	r2, [pc, #276]	; (800047c <RCC_GetClocksFreq+0x150>)
 8000368:	601a      	str	r2, [r3, #0]
      break;
 800036a:	e02f      	b.n	80003cc <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800036c:	4b42      	ldr	r3, [pc, #264]	; (8000478 <RCC_GetClocksFreq+0x14c>)
 800036e:	685b      	ldr	r3, [r3, #4]
 8000370:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000374:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000376:	4b40      	ldr	r3, [pc, #256]	; (8000478 <RCC_GetClocksFreq+0x14c>)
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800037e:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000380:	693b      	ldr	r3, [r7, #16]
 8000382:	0c9b      	lsrs	r3, r3, #18
 8000384:	3302      	adds	r3, #2
 8000386:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d106      	bne.n	800039c <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800038e:	693b      	ldr	r3, [r7, #16]
 8000390:	4a3b      	ldr	r2, [pc, #236]	; (8000480 <RCC_GetClocksFreq+0x154>)
 8000392:	fb02 f203 	mul.w	r2, r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 800039a:	e017      	b.n	80003cc <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 800039c:	4b36      	ldr	r3, [pc, #216]	; (8000478 <RCC_GetClocksFreq+0x14c>)
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d006      	beq.n	80003b6 <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80003a8:	693b      	ldr	r3, [r7, #16]
 80003aa:	4a35      	ldr	r2, [pc, #212]	; (8000480 <RCC_GetClocksFreq+0x154>)
 80003ac:	fb02 f203 	mul.w	r2, r2, r3
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	601a      	str	r2, [r3, #0]
      break;
 80003b4:	e00a      	b.n	80003cc <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80003b6:	693b      	ldr	r3, [r7, #16]
 80003b8:	4a30      	ldr	r2, [pc, #192]	; (800047c <RCC_GetClocksFreq+0x150>)
 80003ba:	fb02 f203 	mul.w	r2, r2, r3
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	601a      	str	r2, [r3, #0]
      break;
 80003c2:	e003      	b.n	80003cc <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a2d      	ldr	r2, [pc, #180]	; (800047c <RCC_GetClocksFreq+0x150>)
 80003c8:	601a      	str	r2, [r3, #0]
      break;
 80003ca:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80003cc:	4b2a      	ldr	r3, [pc, #168]	; (8000478 <RCC_GetClocksFreq+0x14c>)
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80003d4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	091b      	lsrs	r3, r3, #4
 80003da:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80003dc:	4a29      	ldr	r2, [pc, #164]	; (8000484 <RCC_GetClocksFreq+0x158>)
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	4413      	add	r3, r2
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	40da      	lsrs	r2, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80003f4:	4b20      	ldr	r3, [pc, #128]	; (8000478 <RCC_GetClocksFreq+0x14c>)
 80003f6:	685b      	ldr	r3, [r3, #4]
 80003f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80003fc:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	0a1b      	lsrs	r3, r3, #8
 8000402:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000404:	4a1f      	ldr	r2, [pc, #124]	; (8000484 <RCC_GetClocksFreq+0x158>)
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	4413      	add	r3, r2
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	b2db      	uxtb	r3, r3
 800040e:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	685a      	ldr	r2, [r3, #4]
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	40da      	lsrs	r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800041c:	4b16      	ldr	r3, [pc, #88]	; (8000478 <RCC_GetClocksFreq+0x14c>)
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000424:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	0adb      	lsrs	r3, r3, #11
 800042a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800042c:	4a15      	ldr	r2, [pc, #84]	; (8000484 <RCC_GetClocksFreq+0x158>)
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	4413      	add	r3, r2
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	b2db      	uxtb	r3, r3
 8000436:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	685a      	ldr	r2, [r3, #4]
 800043c:	68bb      	ldr	r3, [r7, #8]
 800043e:	40da      	lsrs	r2, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <RCC_GetClocksFreq+0x14c>)
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800044c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	0b9b      	lsrs	r3, r3, #14
 8000452:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000454:	4a0c      	ldr	r2, [pc, #48]	; (8000488 <RCC_GetClocksFreq+0x15c>)
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	4413      	add	r3, r2
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	b2db      	uxtb	r3, r3
 800045e:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	68da      	ldr	r2, [r3, #12]
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	fbb2 f2f3 	udiv	r2, r2, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	611a      	str	r2, [r3, #16]
}
 800046e:	bf00      	nop
 8000470:	371c      	adds	r7, #28
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	40021000 	.word	0x40021000
 800047c:	007a1200 	.word	0x007a1200
 8000480:	003d0900 	.word	0x003d0900
 8000484:	20000000 	.word	0x20000000
 8000488:	20000010 	.word	0x20000010

0800048c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	460b      	mov	r3, r1
 8000496:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000498:	78fb      	ldrb	r3, [r7, #3]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d006      	beq.n	80004ac <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800049e:	4909      	ldr	r1, [pc, #36]	; (80004c4 <RCC_APB2PeriphClockCmd+0x38>)
 80004a0:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <RCC_APB2PeriphClockCmd+0x38>)
 80004a2:	699a      	ldr	r2, [r3, #24]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4313      	orrs	r3, r2
 80004a8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80004aa:	e006      	b.n	80004ba <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80004ac:	4905      	ldr	r1, [pc, #20]	; (80004c4 <RCC_APB2PeriphClockCmd+0x38>)
 80004ae:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <RCC_APB2PeriphClockCmd+0x38>)
 80004b0:	699a      	ldr	r2, [r3, #24]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	43db      	mvns	r3, r3
 80004b6:	4013      	ands	r3, r2
 80004b8:	618b      	str	r3, [r1, #24]
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	40021000 	.word	0x40021000

080004c8 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08c      	sub	sp, #48	; 0x30
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80004d2:	2300      	movs	r3, #0
 80004d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004d6:	2300      	movs	r3, #0
 80004d8:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 80004da:	2300      	movs	r3, #0
 80004dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 80004de:	2300      	movs	r3, #0
 80004e0:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	8a1b      	ldrh	r3, [r3, #16]
 80004ee:	b29b      	uxth	r3, r3
 80004f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80004f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80004f4:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80004f8:	4013      	ands	r3, r2
 80004fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	88db      	ldrh	r3, [r3, #6]
 8000500:	461a      	mov	r2, r3
 8000502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000504:	4313      	orrs	r3, r2
 8000506:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800050a:	b29a      	uxth	r2, r3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	899b      	ldrh	r3, [r3, #12]
 8000514:	b29b      	uxth	r3, r3
 8000516:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800051a:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 800051e:	4013      	ands	r3, r2
 8000520:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	889a      	ldrh	r2, [r3, #4]
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	891b      	ldrh	r3, [r3, #8]
 800052a:	4313      	orrs	r3, r2
 800052c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000532:	4313      	orrs	r3, r2
 8000534:	b29b      	uxth	r3, r3
 8000536:	461a      	mov	r2, r3
 8000538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800053a:	4313      	orrs	r3, r2
 800053c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800053e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000540:	b29a      	uxth	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	8a9b      	ldrh	r3, [r3, #20]
 800054a:	b29b      	uxth	r3, r3
 800054c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 800054e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000550:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000554:	4013      	ands	r3, r2
 8000556:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	899b      	ldrh	r3, [r3, #12]
 800055c:	461a      	mov	r2, r3
 800055e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000560:	4313      	orrs	r3, r2
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000566:	b29a      	uxth	r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff fedb 	bl	800032c <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000576:	69fb      	ldr	r3, [r7, #28]
 8000578:	4a2e      	ldr	r2, [pc, #184]	; (8000634 <USART_Init+0x16c>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d102      	bne.n	8000584 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	62bb      	str	r3, [r7, #40]	; 0x28
 8000582:	e001      	b.n	8000588 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000584:	693b      	ldr	r3, [r7, #16]
 8000586:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	899b      	ldrh	r3, [r3, #12]
 800058c:	b29b      	uxth	r3, r3
 800058e:	b21b      	sxth	r3, r3
 8000590:	2b00      	cmp	r3, #0
 8000592:	da0c      	bge.n	80005ae <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000596:	4613      	mov	r3, r2
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	4413      	add	r3, r2
 800059c:	009a      	lsls	r2, r3, #2
 800059e:	441a      	add	r2, r3
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
 80005ac:	e00b      	b.n	80005c6 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80005ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005b0:	4613      	mov	r3, r2
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	4413      	add	r3, r2
 80005b6:	009a      	lsls	r2, r3, #2
 80005b8:	441a      	add	r2, r3
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 80005c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c8:	4a1b      	ldr	r2, [pc, #108]	; (8000638 <USART_Init+0x170>)
 80005ca:	fba2 2303 	umull	r2, r3, r2, r3
 80005ce:	095b      	lsrs	r3, r3, #5
 80005d0:	011b      	lsls	r3, r3, #4
 80005d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80005d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005d6:	091b      	lsrs	r3, r3, #4
 80005d8:	2264      	movs	r2, #100	; 0x64
 80005da:	fb02 f303 	mul.w	r3, r2, r3
 80005de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	899b      	ldrh	r3, [r3, #12]
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	b21b      	sxth	r3, r3
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	da0c      	bge.n	800060a <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80005f0:	6a3b      	ldr	r3, [r7, #32]
 80005f2:	00db      	lsls	r3, r3, #3
 80005f4:	3332      	adds	r3, #50	; 0x32
 80005f6:	4a10      	ldr	r2, [pc, #64]	; (8000638 <USART_Init+0x170>)
 80005f8:	fba2 2303 	umull	r2, r3, r2, r3
 80005fc:	095b      	lsrs	r3, r3, #5
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000604:	4313      	orrs	r3, r2
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000608:	e00b      	b.n	8000622 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800060a:	6a3b      	ldr	r3, [r7, #32]
 800060c:	011b      	lsls	r3, r3, #4
 800060e:	3332      	adds	r3, #50	; 0x32
 8000610:	4a09      	ldr	r2, [pc, #36]	; (8000638 <USART_Init+0x170>)
 8000612:	fba2 2303 	umull	r2, r3, r2, r3
 8000616:	095b      	lsrs	r3, r3, #5
 8000618:	f003 030f 	and.w	r3, r3, #15
 800061c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800061e:	4313      	orrs	r3, r2
 8000620:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000624:	b29a      	uxth	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	811a      	strh	r2, [r3, #8]
}
 800062a:	bf00      	nop
 800062c:	3730      	adds	r7, #48	; 0x30
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40013800 	.word	0x40013800
 8000638:	51eb851f 	.word	0x51eb851f

0800063c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	460b      	mov	r3, r1
 8000646:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d008      	beq.n	8000660 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	899b      	ldrh	r3, [r3, #12]
 8000652:	b29b      	uxth	r3, r3
 8000654:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000658:	b29a      	uxth	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 800065e:	e007      	b.n	8000670 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	899b      	ldrh	r3, [r3, #12]
 8000664:	b29b      	uxth	r3, r3
 8000666:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800066a:	b29a      	uxth	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	819a      	strh	r2, [r3, #12]
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr

0800067a <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800067a:	b480      	push	{r7}
 800067c:	b083      	sub	sp, #12
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
 8000682:	460b      	mov	r3, r1
 8000684:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000686:	887b      	ldrh	r3, [r7, #2]
 8000688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800068c:	b29a      	uxth	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	809a      	strh	r2, [r3, #4]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr

0800069c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80006a8:	2300      	movs	r3, #0
 80006aa:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	887b      	ldrh	r3, [r7, #2]
 80006b4:	4013      	ands	r3, r2
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d002      	beq.n	80006c2 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80006bc:	2301      	movs	r3, #1
 80006be:	73fb      	strb	r3, [r7, #15]
 80006c0:	e001      	b.n	80006c6 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80006c2:	2300      	movs	r3, #0
 80006c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr

080006d2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80006d2:	b480      	push	{r7}
 80006d4:	b083      	sub	sp, #12
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f103 0208 	add.w	r2, r3, #8
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f04f 32ff 	mov.w	r2, #4294967295
 80006ea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f103 0208 	add.w	r2, r3, #8
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f103 0208 	add.w	r2, r3, #8
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	689a      	ldr	r2, [r3, #8]
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	683a      	ldr	r2, [r7, #0]
 800074c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	683a      	ldr	r2, [r7, #0]
 8000752:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	1c5a      	adds	r2, r3, #1
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	601a      	str	r2, [r3, #0]
}
 8000764:	bf00      	nop
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr

0800076e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800076e:	b480      	push	{r7}
 8000770:	b085      	sub	sp, #20
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000784:	d103      	bne.n	800078e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	691b      	ldr	r3, [r3, #16]
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	e00c      	b.n	80007a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	3308      	adds	r3, #8
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	e002      	b.n	800079c <vListInsert+0x2e>
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d9f6      	bls.n	8000796 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	685a      	ldr	r2, [r3, #4]
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	683a      	ldr	r2, [r7, #0]
 80007b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	68fa      	ldr	r2, [r7, #12]
 80007bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	683a      	ldr	r2, [r7, #0]
 80007c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	1c5a      	adds	r2, r3, #1
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	601a      	str	r2, [r3, #0]
}
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80007de:	b480      	push	{r7}
 80007e0:	b085      	sub	sp, #20
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	691b      	ldr	r3, [r3, #16]
 80007ea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	6892      	ldr	r2, [r2, #8]
 80007f4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	689b      	ldr	r3, [r3, #8]
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	6852      	ldr	r2, [r2, #4]
 80007fe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	685a      	ldr	r2, [r3, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	429a      	cmp	r2, r3
 8000808:	d103      	bne.n	8000812 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	689a      	ldr	r2, [r3, #8]
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	681b      	ldr	r3, [r3, #0]
}
 8000826:	4618      	mov	r0, r3
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	3b04      	subs	r3, #4
 8000840:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000848:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	3b04      	subs	r3, #4
 800084e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	f023 0201 	bic.w	r2, r3, #1
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	3b04      	subs	r3, #4
 800085e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000860:	4a08      	ldr	r2, [pc, #32]	; (8000884 <pxPortInitialiseStack+0x54>)
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	3b14      	subs	r3, #20
 800086a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	3b20      	subs	r3, #32
 8000876:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000878:	68fb      	ldr	r3, [r7, #12]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	08000889 	.word	0x08000889

08000888 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000892:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000896:	f383 8811 	msr	BASEPRI, r3
 800089a:	f3bf 8f6f 	isb	sy
 800089e:	f3bf 8f4f 	dsb	sy
 80008a2:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80008a4:	bf00      	nop
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d0fc      	beq.n	80008a6 <prvTaskExitError+0x1e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
	...

080008c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <pxCurrentTCBConst2>)
 80008c2:	6819      	ldr	r1, [r3, #0]
 80008c4:	6808      	ldr	r0, [r1, #0]
 80008c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80008ca:	f380 8809 	msr	PSP, r0
 80008ce:	f3bf 8f6f 	isb	sy
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f380 8811 	msr	BASEPRI, r0
 80008da:	f04e 0e0d 	orr.w	lr, lr, #13
 80008de:	4770      	bx	lr

080008e0 <pxCurrentTCBConst2>:
 80008e0:	200038b8 	.word	0x200038b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80008e4:	bf00      	nop
 80008e6:	bf00      	nop

080008e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80008e8:	4806      	ldr	r0, [pc, #24]	; (8000904 <prvPortStartFirstTask+0x1c>)
 80008ea:	6800      	ldr	r0, [r0, #0]
 80008ec:	6800      	ldr	r0, [r0, #0]
 80008ee:	f380 8808 	msr	MSP, r0
 80008f2:	b662      	cpsie	i
 80008f4:	b661      	cpsie	f
 80008f6:	f3bf 8f4f 	dsb	sy
 80008fa:	f3bf 8f6f 	isb	sy
 80008fe:	df00      	svc	0
 8000900:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000902:	bf00      	nop
 8000904:	e000ed08 	.word	0xe000ed08

08000908 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800090c:	4a0c      	ldr	r2, [pc, #48]	; (8000940 <xPortStartScheduler+0x38>)
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <xPortStartScheduler+0x38>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000916:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000918:	4a09      	ldr	r2, [pc, #36]	; (8000940 <xPortStartScheduler+0x38>)
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <xPortStartScheduler+0x38>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000922:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000924:	f000 f888 	bl	8000a38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <xPortStartScheduler+0x3c>)
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800092e:	f7ff ffdb 	bl	80008e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000932:	f001 f8d5 	bl	8001ae0 <vTaskSwitchContext>
	prvTaskExitError();
 8000936:	f7ff ffa7 	bl	8000888 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800093a:	2300      	movs	r3, #0
}
 800093c:	4618      	mov	r0, r3
 800093e:	bd80      	pop	{r7, pc}
 8000940:	e000ed20 	.word	0xe000ed20
 8000944:	20000014 	.word	0x20000014

08000948 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000952:	f383 8811 	msr	BASEPRI, r3
 8000956:	f3bf 8f6f 	isb	sy
 800095a:	f3bf 8f4f 	dsb	sy
 800095e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000960:	4b04      	ldr	r3, [pc, #16]	; (8000974 <vPortEnterCritical+0x2c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	3301      	adds	r3, #1
 8000966:	4a03      	ldr	r2, [pc, #12]	; (8000974 <vPortEnterCritical+0x2c>)
 8000968:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	20000014 	.word	0x20000014

08000978 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <vPortExitCritical+0x2c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	3b01      	subs	r3, #1
 8000984:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <vPortExitCritical+0x2c>)
 8000986:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <vPortExitCritical+0x2c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d104      	bne.n	800099a <vPortExitCritical+0x22>
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	20000014 	.word	0x20000014
	...

080009b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80009b0:	f3ef 8009 	mrs	r0, PSP
 80009b4:	f3bf 8f6f 	isb	sy
 80009b8:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <pxCurrentTCBConst>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80009c0:	6010      	str	r0, [r2, #0]
 80009c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80009c6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80009ca:	f380 8811 	msr	BASEPRI, r0
 80009ce:	f001 f887 	bl	8001ae0 <vTaskSwitchContext>
 80009d2:	f04f 0000 	mov.w	r0, #0
 80009d6:	f380 8811 	msr	BASEPRI, r0
 80009da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80009de:	6819      	ldr	r1, [r3, #0]
 80009e0:	6808      	ldr	r0, [r1, #0]
 80009e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80009e6:	f380 8809 	msr	PSP, r0
 80009ea:	f3bf 8f6f 	isb	sy
 80009ee:	4770      	bx	lr

080009f0 <pxCurrentTCBConst>:
 80009f0:	200038b8 	.word	0x200038b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80009f4:	bf00      	nop
 80009f6:	bf00      	nop

080009f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
	__asm volatile
 80009fe:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000a02:	f383 8811 	msr	BASEPRI, r3
 8000a06:	f3bf 8f6f 	isb	sy
 8000a0a:	f3bf 8f4f 	dsb	sy
 8000a0e:	607b      	str	r3, [r7, #4]
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000a10:	f000 ffbe 	bl	8001990 <xTaskIncrementTick>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d003      	beq.n	8000a22 <SysTick_Handler+0x2a>
		{
      traceISR_EXIT_TO_SCHEDULER();
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <SysTick_Handler+0x3c>)
 8000a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	f383 8811 	msr	BASEPRI, r3
		{
			traceISR_EXIT();
		}
	}
	portENABLE_INTERRUPTS();
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	e000ed04 	.word	0xe000ed04

08000a38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <vPortSetupTimerInterrupt+0x24>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <vPortSetupTimerInterrupt+0x28>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <vPortSetupTimerInterrupt+0x2c>)
 8000a4a:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <vPortSetupTimerInterrupt+0x30>)
 8000a4c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000a4e:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <vPortSetupTimerInterrupt+0x24>)
 8000a50:	2207      	movs	r2, #7
 8000a52:	601a      	str	r2, [r3, #0]
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	e000e010 	.word	0xe000e010
 8000a60:	e000e018 	.word	0xe000e018
 8000a64:	e000e014 	.word	0xe000e014
 8000a68:	0001193f 	.word	0x0001193f

08000a6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8000a78:	f000 feee 	bl	8001858 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000a7c:	4b42      	ldr	r3, [pc, #264]	; (8000b88 <pvPortMalloc+0x11c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d101      	bne.n	8000a88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8000a84:	f000 f8cc 	bl	8000c20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000a88:	4b40      	ldr	r3, [pc, #256]	; (8000b8c <pvPortMalloc+0x120>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d172      	bne.n	8000b7a <pvPortMalloc+0x10e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d00d      	beq.n	8000ab6 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 8000a9a:	2208      	movs	r2, #8
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f003 0307 	and.w	r3, r3, #7
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d004      	beq.n	8000ab6 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f023 0307 	bic.w	r3, r3, #7
 8000ab2:	3308      	adds	r3, #8
 8000ab4:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d05e      	beq.n	8000b7a <pvPortMalloc+0x10e>
 8000abc:	4b34      	ldr	r3, [pc, #208]	; (8000b90 <pvPortMalloc+0x124>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d859      	bhi.n	8000b7a <pvPortMalloc+0x10e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000ac6:	4b33      	ldr	r3, [pc, #204]	; (8000b94 <pvPortMalloc+0x128>)
 8000ac8:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8000aca:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <pvPortMalloc+0x128>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000ad0:	e004      	b.n	8000adc <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	685a      	ldr	r2, [r3, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d203      	bcs.n	8000aee <pvPortMalloc+0x82>
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d1f1      	bne.n	8000ad2 <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000aee:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <pvPortMalloc+0x11c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	697a      	ldr	r2, [r7, #20]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d040      	beq.n	8000b7a <pvPortMalloc+0x10e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2208      	movs	r2, #8
 8000afe:	4413      	add	r3, r2
 8000b00:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	685a      	ldr	r2, [r3, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	1ad2      	subs	r2, r2, r3
 8000b12:	2308      	movs	r3, #8
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d90f      	bls.n	8000b3a <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000b1a:	697a      	ldr	r2, [r7, #20]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4413      	add	r3, r2
 8000b20:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	685a      	ldr	r2, [r3, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	1ad2      	subs	r2, r2, r3
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000b34:	68b8      	ldr	r0, [r7, #8]
 8000b36:	f000 f8d5 	bl	8000ce4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <pvPortMalloc+0x124>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	1ad3      	subs	r3, r2, r3
 8000b44:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <pvPortMalloc+0x124>)
 8000b46:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <pvPortMalloc+0x124>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <pvPortMalloc+0x12c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d203      	bcs.n	8000b5c <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <pvPortMalloc+0x124>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0f      	ldr	r2, [pc, #60]	; (8000b98 <pvPortMalloc+0x12c>)
 8000b5a:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <pvPortMalloc+0x120>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	431a      	orrs	r2, r3
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <pvPortMalloc+0x130>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	3301      	adds	r3, #1
 8000b76:	4a09      	ldr	r2, [pc, #36]	; (8000b9c <pvPortMalloc+0x130>)
 8000b78:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000b7a:	f000 fe7b 	bl	8001874 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200038a0 	.word	0x200038a0
 8000b8c:	200038b4 	.word	0x200038b4
 8000b90:	200038a4 	.word	0x200038a4
 8000b94:	20003898 	.word	0x20003898
 8000b98:	200038a8 	.word	0x200038a8
 8000b9c:	200038ac 	.word	0x200038ac

08000ba0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d02c      	beq.n	8000c0c <vPortFree+0x6c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000bb2:	2308      	movs	r3, #8
 8000bb4:	425b      	negs	r3, r3
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	4413      	add	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	685a      	ldr	r2, [r3, #4]
 8000bc4:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <vPortFree+0x74>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d01e      	beq.n	8000c0c <vPortFree+0x6c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d11a      	bne.n	8000c0c <vPortFree+0x6c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <vPortFree+0x74>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	43db      	mvns	r3, r3
 8000be0:	401a      	ands	r2, r3
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000be6:	f000 fe37 	bl	8001858 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	685a      	ldr	r2, [r3, #4]
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <vPortFree+0x78>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <vPortFree+0x78>)
 8000bf6:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000bf8:	68b8      	ldr	r0, [r7, #8]
 8000bfa:	f000 f873 	bl	8000ce4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8000bfe:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <vPortFree+0x7c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	3301      	adds	r3, #1
 8000c04:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <vPortFree+0x7c>)
 8000c06:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8000c08:	f000 fe34 	bl	8001874 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	200038b4 	.word	0x200038b4
 8000c18:	200038a4 	.word	0x200038a4
 8000c1c:	200038b0 	.word	0x200038b0

08000c20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000c26:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000c2c:	4b27      	ldr	r3, [pc, #156]	; (8000ccc <prvHeapInit+0xac>)
 8000c2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d00c      	beq.n	8000c54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	3307      	adds	r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f023 0307 	bic.w	r3, r3, #7
 8000c46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000c48:	68ba      	ldr	r2, [r7, #8]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	4a1f      	ldr	r2, [pc, #124]	; (8000ccc <prvHeapInit+0xac>)
 8000c50:	4413      	add	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000c58:	4a1d      	ldr	r2, [pc, #116]	; (8000cd0 <prvHeapInit+0xb0>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <prvHeapInit+0xb0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	4413      	add	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000c6c:	2208      	movs	r2, #8
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	1a9b      	subs	r3, r3, r2
 8000c72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f023 0307 	bic.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4a15      	ldr	r2, [pc, #84]	; (8000cd4 <prvHeapInit+0xb4>)
 8000c80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <prvHeapInit+0xb4>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2200      	movs	r2, #0
 8000c88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <prvHeapInit+0xb4>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	1ad2      	subs	r2, r2, r3
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <prvHeapInit+0xb4>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <prvHeapInit+0xb8>)
 8000cae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	4a09      	ldr	r2, [pc, #36]	; (8000cdc <prvHeapInit+0xbc>)
 8000cb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <prvHeapInit+0xc0>)
 8000cba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000cbe:	601a      	str	r2, [r3, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000098 	.word	0x20000098
 8000cd0:	20003898 	.word	0x20003898
 8000cd4:	200038a0 	.word	0x200038a0
 8000cd8:	200038a8 	.word	0x200038a8
 8000cdc:	200038a4 	.word	0x200038a4
 8000ce0:	200038b4 	.word	0x200038b4

08000ce4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000cec:	4b27      	ldr	r3, [pc, #156]	; (8000d8c <prvInsertBlockIntoFreeList+0xa8>)
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	e002      	b.n	8000cf8 <prvInsertBlockIntoFreeList+0x14>
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d3f7      	bcc.n	8000cf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	441a      	add	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d108      	bne.n	8000d26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	441a      	add	r2, r3
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	441a      	add	r2, r3
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d118      	bne.n	8000d6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <prvInsertBlockIntoFreeList+0xac>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d00d      	beq.n	8000d62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	441a      	add	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	e008      	b.n	8000d74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <prvInsertBlockIntoFreeList+0xac>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	e003      	b.n	8000d74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d002      	beq.n	8000d82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000d82:	bf00      	nop
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	20003898 	.word	0x20003898
 8000d90:	200038a0 	.word	0x200038a0

08000d94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8000da2:	f7ff fdd1 	bl	8000948 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dae:	68f9      	ldr	r1, [r7, #12]
 8000db0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000db2:	fb01 f303 	mul.w	r3, r1, r3
 8000db6:	441a      	add	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	68f9      	ldr	r1, [r7, #12]
 8000dd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000dd8:	fb01 f303 	mul.w	r3, r1, r3
 8000ddc:	441a      	add	r2, r3
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	22ff      	movs	r2, #255	; 0xff
 8000de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	22ff      	movs	r2, #255	; 0xff
 8000dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d114      	bne.n	8000e22 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d01a      	beq.n	8000e36 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	3310      	adds	r3, #16
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 fec7 	bl	8001b98 <xTaskRemoveFromEventList>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d012      	beq.n	8000e36 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <xQueueGenericReset+0xb0>)
 8000e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	f3bf 8f4f 	dsb	sy
 8000e1c:	f3bf 8f6f 	isb	sy
 8000e20:	e009      	b.n	8000e36 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	3310      	adds	r3, #16
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fc53 	bl	80006d2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	3324      	adds	r3, #36	; 0x24
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fc4e 	bl	80006d2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000e36:	f7ff fd9f 	bl	8000978 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	e000ed04 	.word	0xe000ed04

08000e48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af02      	add	r7, sp, #8
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	4613      	mov	r3, r2
 8000e54:	71fb      	strb	r3, [r7, #7]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	68ba      	ldr	r2, [r7, #8]
 8000e5a:	fb02 f303 	mul.w	r3, r2, r3
 8000e5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	3348      	adds	r3, #72	; 0x48
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fe01 	bl	8000a6c <pvPortMalloc>
 8000e6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d00d      	beq.n	8000e8e <xQueueGenericCreate+0x46>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3348      	adds	r3, #72	; 0x48
 8000e7a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000e7c:	79fa      	ldrb	r2, [r7, #7]
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	4613      	mov	r3, r2
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	68b9      	ldr	r1, [r7, #8]
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f000 f805 	bl	8000e98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000e8e:	69bb      	ldr	r3, [r7, #24]
	}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3720      	adds	r7, #32
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d103      	bne.n	8000eb4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	e002      	b.n	8000eba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	69b8      	ldr	r0, [r7, #24]
 8000eca:	f7ff ff63 	bl	8000d94 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000eee:	f7ff fd2b 	bl	8000948 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000ef2:	6a3b      	ldr	r3, [r7, #32]
 8000ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ef6:	6a3b      	ldr	r3, [r7, #32]
 8000ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d302      	bcc.n	8000f04 <xQueueGenericSend+0x2c>
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d129      	bne.n	8000f58 <xQueueGenericSend+0x80>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000f04:	683a      	ldr	r2, [r7, #0]
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	6a38      	ldr	r0, [r7, #32]
 8000f0a:	f000 fa10 	bl	800132e <prvCopyDataToQueue>
 8000f0e:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f10:	6a3b      	ldr	r3, [r7, #32]
 8000f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d010      	beq.n	8000f3a <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f18:	6a3b      	ldr	r3, [r7, #32]
 8000f1a:	3324      	adds	r3, #36	; 0x24
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 fe3b 	bl	8001b98 <xTaskRemoveFromEventList>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d013      	beq.n	8000f50 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000f28:	4b3f      	ldr	r3, [pc, #252]	; (8001028 <xQueueGenericSend+0x150>)
 8000f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	f3bf 8f4f 	dsb	sy
 8000f34:	f3bf 8f6f 	isb	sy
 8000f38:	e00a      	b.n	8000f50 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d007      	beq.n	8000f50 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000f40:	4b39      	ldr	r3, [pc, #228]	; (8001028 <xQueueGenericSend+0x150>)
 8000f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	f3bf 8f4f 	dsb	sy
 8000f4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000f50:	f7ff fd12 	bl	8000978 <vPortExitCritical>
				return pdPASS;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e063      	b.n	8001020 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d103      	bne.n	8000f66 <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000f5e:	f7ff fd0b 	bl	8000978 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e05c      	b.n	8001020 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d106      	bne.n	8000f7a <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 fe65 	bl	8001c40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000f76:	2301      	movs	r3, #1
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000f7a:	f7ff fcfd 	bl	8000978 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000f7e:	f000 fc6b 	bl	8001858 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000f82:	f7ff fce1 	bl	8000948 <vPortEnterCritical>
 8000f86:	6a3b      	ldr	r3, [r7, #32]
 8000f88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f92:	d103      	bne.n	8000f9c <xQueueGenericSend+0xc4>
 8000f94:	6a3b      	ldr	r3, [r7, #32]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000f9c:	6a3b      	ldr	r3, [r7, #32]
 8000f9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000fa2:	b25b      	sxtb	r3, r3
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa8:	d103      	bne.n	8000fb2 <xQueueGenericSend+0xda>
 8000faa:	6a3b      	ldr	r3, [r7, #32]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000fb2:	f7ff fce1 	bl	8000978 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000fb6:	1d3a      	adds	r2, r7, #4
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 fe54 	bl	8001c6c <xTaskCheckForTimeOut>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d124      	bne.n	8001014 <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000fca:	6a38      	ldr	r0, [r7, #32]
 8000fcc:	f000 faa7 	bl	800151e <prvIsQueueFull>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d018      	beq.n	8001008 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000fd6:	6a3b      	ldr	r3, [r7, #32]
 8000fd8:	3310      	adds	r3, #16
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	4611      	mov	r1, r2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 fdc4 	bl	8001b6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000fe4:	6a38      	ldr	r0, [r7, #32]
 8000fe6:	f000 fa32 	bl	800144e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000fea:	f000 fc43 	bl	8001874 <xTaskResumeAll>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f47f af7c 	bne.w	8000eee <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <xQueueGenericSend+0x150>)
 8000ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	f3bf 8f4f 	dsb	sy
 8001002:	f3bf 8f6f 	isb	sy
 8001006:	e772      	b.n	8000eee <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001008:	6a38      	ldr	r0, [r7, #32]
 800100a:	f000 fa20 	bl	800144e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800100e:	f000 fc31 	bl	8001874 <xTaskResumeAll>
 8001012:	e76c      	b.n	8000eee <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001014:	6a38      	ldr	r0, [r7, #32]
 8001016:	f000 fa1a 	bl	800144e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800101a:	f000 fc2b 	bl	8001874 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800101e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001020:	4618      	mov	r0, r3
 8001022:	3728      	adds	r7, #40	; 0x28
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	e000ed04 	.word	0xe000ed04

0800102c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001038:	2300      	movs	r3, #0
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	623b      	str	r3, [r7, #32]
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001040:	f7ff fc82 	bl	8000948 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001044:	6a3b      	ldr	r3, [r7, #32]
 8001046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001048:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d01f      	beq.n	8001090 <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001050:	68b9      	ldr	r1, [r7, #8]
 8001052:	6a38      	ldr	r0, [r7, #32]
 8001054:	f000 f9d5 	bl	8001402 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	1e5a      	subs	r2, r3, #1
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001060:	6a3b      	ldr	r3, [r7, #32]
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00f      	beq.n	8001088 <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001068:	6a3b      	ldr	r3, [r7, #32]
 800106a:	3310      	adds	r3, #16
 800106c:	4618      	mov	r0, r3
 800106e:	f000 fd93 	bl	8001b98 <xTaskRemoveFromEventList>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d007      	beq.n	8001088 <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001078:	4b3c      	ldr	r3, [pc, #240]	; (800116c <xQueueReceive+0x140>)
 800107a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	f3bf 8f4f 	dsb	sy
 8001084:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001088:	f7ff fc76 	bl	8000978 <vPortExitCritical>
				return pdPASS;
 800108c:	2301      	movs	r3, #1
 800108e:	e069      	b.n	8001164 <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d103      	bne.n	800109e <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001096:	f7ff fc6f 	bl	8000978 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800109a:	2300      	movs	r3, #0
 800109c:	e062      	b.n	8001164 <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d106      	bne.n	80010b2 <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 fdc9 	bl	8001c40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80010ae:	2301      	movs	r3, #1
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80010b2:	f7ff fc61 	bl	8000978 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80010b6:	f000 fbcf 	bl	8001858 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80010ba:	f7ff fc45 	bl	8000948 <vPortEnterCritical>
 80010be:	6a3b      	ldr	r3, [r7, #32]
 80010c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010c4:	b25b      	sxtb	r3, r3
 80010c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ca:	d103      	bne.n	80010d4 <xQueueReceive+0xa8>
 80010cc:	6a3b      	ldr	r3, [r7, #32]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80010d4:	6a3b      	ldr	r3, [r7, #32]
 80010d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e0:	d103      	bne.n	80010ea <xQueueReceive+0xbe>
 80010e2:	6a3b      	ldr	r3, [r7, #32]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80010ea:	f7ff fc45 	bl	8000978 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80010ee:	1d3a      	adds	r2, r7, #4
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4611      	mov	r1, r2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 fdb8 	bl	8001c6c <xTaskCheckForTimeOut>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d123      	bne.n	800114a <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001102:	6a38      	ldr	r0, [r7, #32]
 8001104:	f000 f9f5 	bl	80014f2 <prvIsQueueEmpty>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d017      	beq.n	800113e <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800110e:	6a3b      	ldr	r3, [r7, #32]
 8001110:	3324      	adds	r3, #36	; 0x24
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	4611      	mov	r1, r2
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fd28 	bl	8001b6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800111c:	6a38      	ldr	r0, [r7, #32]
 800111e:	f000 f996 	bl	800144e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001122:	f000 fba7 	bl	8001874 <xTaskResumeAll>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d189      	bne.n	8001040 <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <xQueueReceive+0x140>)
 800112e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	f3bf 8f4f 	dsb	sy
 8001138:	f3bf 8f6f 	isb	sy
 800113c:	e780      	b.n	8001040 <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800113e:	6a38      	ldr	r0, [r7, #32]
 8001140:	f000 f985 	bl	800144e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001144:	f000 fb96 	bl	8001874 <xTaskResumeAll>
 8001148:	e77a      	b.n	8001040 <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800114a:	6a38      	ldr	r0, [r7, #32]
 800114c:	f000 f97f 	bl	800144e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001150:	f000 fb90 	bl	8001874 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001154:	6a38      	ldr	r0, [r7, #32]
 8001156:	f000 f9cc 	bl	80014f2 <prvIsQueueEmpty>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	f43f af6f 	beq.w	8001040 <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001162:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001164:	4618      	mov	r0, r3
 8001166:	3728      	adds	r7, #40	; 0x28
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	e000ed04 	.word	0xe000ed04

08001170 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8001182:	2300      	movs	r3, #0
 8001184:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001186:	f7ff fbdf 	bl	8000948 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800118e:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d024      	beq.n	80011e0 <xQueueSemaphoreTake+0x70>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	1e5a      	subs	r2, r3, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d104      	bne.n	80011b0 <xQueueSemaphoreTake+0x40>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80011a6:	f000 ffb1 	bl	800210c <pvTaskIncrementMutexHeldCount>
 80011aa:	4602      	mov	r2, r0
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00f      	beq.n	80011d8 <xQueueSemaphoreTake+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	3310      	adds	r3, #16
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 fceb 	bl	8001b98 <xTaskRemoveFromEventList>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d007      	beq.n	80011d8 <xQueueSemaphoreTake+0x68>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80011c8:	4b4c      	ldr	r3, [pc, #304]	; (80012fc <xQueueSemaphoreTake+0x18c>)
 80011ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	f3bf 8f4f 	dsb	sy
 80011d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80011d8:	f7ff fbce 	bl	8000978 <vPortExitCritical>
				return pdPASS;
 80011dc:	2301      	movs	r3, #1
 80011de:	e089      	b.n	80012f4 <xQueueSemaphoreTake+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d103      	bne.n	80011ee <xQueueSemaphoreTake+0x7e>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80011e6:	f7ff fbc7 	bl	8000978 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e082      	b.n	80012f4 <xQueueSemaphoreTake+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d106      	bne.n	8001202 <xQueueSemaphoreTake+0x92>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fd21 	bl	8001c40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80011fe:	2301      	movs	r3, #1
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001202:	f7ff fbb9 	bl	8000978 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001206:	f000 fb27 	bl	8001858 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800120a:	f7ff fb9d 	bl	8000948 <vPortEnterCritical>
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001214:	b25b      	sxtb	r3, r3
 8001216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121a:	d103      	bne.n	8001224 <xQueueSemaphoreTake+0xb4>
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800122a:	b25b      	sxtb	r3, r3
 800122c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001230:	d103      	bne.n	800123a <xQueueSemaphoreTake+0xca>
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800123a:	f7ff fb9d 	bl	8000978 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800123e:	463a      	mov	r2, r7
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4611      	mov	r1, r2
 8001246:	4618      	mov	r0, r3
 8001248:	f000 fd10 	bl	8001c6c <xTaskCheckForTimeOut>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d132      	bne.n	80012b8 <xQueueSemaphoreTake+0x148>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001252:	69f8      	ldr	r0, [r7, #28]
 8001254:	f000 f94d 	bl	80014f2 <prvIsQueueEmpty>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d026      	beq.n	80012ac <xQueueSemaphoreTake+0x13c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d109      	bne.n	800127a <xQueueSemaphoreTake+0x10a>
					{
						taskENTER_CRITICAL();
 8001266:	f7ff fb6f 	bl	8000948 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	4618      	mov	r0, r3
 8001270:	f000 fe04 	bl	8001e7c <xTaskPriorityInherit>
 8001274:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8001276:	f7ff fb7f 	bl	8000978 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3324      	adds	r3, #36	; 0x24
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f000 fc72 	bl	8001b6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001288:	69f8      	ldr	r0, [r7, #28]
 800128a:	f000 f8e0 	bl	800144e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800128e:	f000 faf1 	bl	8001874 <xTaskResumeAll>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	f47f af76 	bne.w	8001186 <xQueueSemaphoreTake+0x16>
				{
					portYIELD_WITHIN_API();
 800129a:	4b18      	ldr	r3, [pc, #96]	; (80012fc <xQueueSemaphoreTake+0x18c>)
 800129c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	f3bf 8f4f 	dsb	sy
 80012a6:	f3bf 8f6f 	isb	sy
 80012aa:	e76c      	b.n	8001186 <xQueueSemaphoreTake+0x16>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80012ac:	69f8      	ldr	r0, [r7, #28]
 80012ae:	f000 f8ce 	bl	800144e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80012b2:	f000 fadf 	bl	8001874 <xTaskResumeAll>
 80012b6:	e766      	b.n	8001186 <xQueueSemaphoreTake+0x16>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80012b8:	69f8      	ldr	r0, [r7, #28]
 80012ba:	f000 f8c8 	bl	800144e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80012be:	f000 fad9 	bl	8001874 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80012c2:	69f8      	ldr	r0, [r7, #28]
 80012c4:	f000 f915 	bl	80014f2 <prvIsQueueEmpty>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f43f af5b 	beq.w	8001186 <xQueueSemaphoreTake+0x16>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80012d0:	6a3b      	ldr	r3, [r7, #32]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00d      	beq.n	80012f2 <xQueueSemaphoreTake+0x182>
					{
						taskENTER_CRITICAL();
 80012d6:	f7ff fb37 	bl	8000948 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80012da:	69f8      	ldr	r0, [r7, #28]
 80012dc:	f000 f810 	bl	8001300 <prvGetDisinheritPriorityAfterTimeout>
 80012e0:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	6979      	ldr	r1, [r7, #20]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 fea1 	bl	8002030 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80012ee:	f7ff fb43 	bl	8000978 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80012f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3728      	adds	r7, #40	; 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	e000ed04 	.word	0xe000ed04

08001300 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130c:	2b00      	cmp	r3, #0
 800130e:	d006      	beq.n	800131e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f1c3 0305 	rsb	r3, r3, #5
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	e001      	b.n	8001322 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8001322:	68fb      	ldr	r3, [r7, #12]
	}
 8001324:	4618      	mov	r0, r3
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr

0800132e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001342:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	2b00      	cmp	r3, #0
 800134a:	d10d      	bne.n	8001368 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d14d      	bne.n	80013f0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	4618      	mov	r0, r3
 800135a:	f000 fe05 	bl	8001f68 <xTaskPriorityDisinherit>
 800135e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	e043      	b.n	80013f0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d119      	bne.n	80013a2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6858      	ldr	r0, [r3, #4]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	461a      	mov	r2, r3
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	f001 fa0f 	bl	800279c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	441a      	add	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	429a      	cmp	r2, r3
 8001396:	d32b      	bcc.n	80013f0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	e026      	b.n	80013f0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	68d8      	ldr	r0, [r3, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	461a      	mov	r2, r3
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	f001 f9f5 	bl	800279c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	425b      	negs	r3, r3
 80013bc:	441a      	add	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d207      	bcs.n	80013de <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	425b      	negs	r3, r3
 80013d8:	441a      	add	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d105      	bne.n	80013f0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d002      	beq.n	80013f0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80013f8:	697b      	ldr	r3, [r7, #20]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	2b00      	cmp	r3, #0
 8001412:	d018      	beq.n	8001446 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	441a      	add	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	429a      	cmp	r2, r3
 800142c:	d303      	bcc.n	8001436 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68d9      	ldr	r1, [r3, #12]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	461a      	mov	r2, r3
 8001440:	6838      	ldr	r0, [r7, #0]
 8001442:	f001 f9ab 	bl	800279c <memcpy>
	}
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b084      	sub	sp, #16
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001456:	f7ff fa77 	bl	8000948 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001460:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001462:	e011      	b.n	8001488 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	2b00      	cmp	r3, #0
 800146a:	d012      	beq.n	8001492 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3324      	adds	r3, #36	; 0x24
 8001470:	4618      	mov	r0, r3
 8001472:	f000 fb91 	bl	8001b98 <xTaskRemoveFromEventList>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800147c:	f000 fc3c 	bl	8001cf8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	3b01      	subs	r3, #1
 8001484:	b2db      	uxtb	r3, r3
 8001486:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148c:	2b00      	cmp	r3, #0
 800148e:	dce9      	bgt.n	8001464 <prvUnlockQueue+0x16>
 8001490:	e000      	b.n	8001494 <prvUnlockQueue+0x46>
					break;
 8001492:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	22ff      	movs	r2, #255	; 0xff
 8001498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800149c:	f7ff fa6c 	bl	8000978 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80014a0:	f7ff fa52 	bl	8000948 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014aa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80014ac:	e011      	b.n	80014d2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d012      	beq.n	80014dc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3310      	adds	r3, #16
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 fb6c 	bl	8001b98 <xTaskRemoveFromEventList>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80014c6:	f000 fc17 	bl	8001cf8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80014ca:	7bbb      	ldrb	r3, [r7, #14]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80014d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	dce9      	bgt.n	80014ae <prvUnlockQueue+0x60>
 80014da:	e000      	b.n	80014de <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80014dc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	22ff      	movs	r2, #255	; 0xff
 80014e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80014e6:	f7ff fa47 	bl	8000978 <vPortExitCritical>
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80014fa:	f7ff fa25 	bl	8000948 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001506:	2301      	movs	r3, #1
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	e001      	b.n	8001510 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001510:	f7ff fa32 	bl	8000978 <vPortExitCritical>

	return xReturn;
 8001514:	68fb      	ldr	r3, [r7, #12]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b084      	sub	sp, #16
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001526:	f7ff fa0f 	bl	8000948 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001532:	429a      	cmp	r2, r3
 8001534:	d102      	bne.n	800153c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001536:	2301      	movs	r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	e001      	b.n	8001540 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001540:	f7ff fa1a 	bl	8000978 <vPortExitCritical>

	return xReturn;
 8001544:	68fb      	ldr	r3, [r7, #12]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800154e:	b580      	push	{r7, lr}
 8001550:	b08c      	sub	sp, #48	; 0x30
 8001552:	af04      	add	r7, sp, #16
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	4613      	mov	r3, r2
 800155c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fa82 	bl	8000a6c <pvPortMalloc>
 8001568:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00e      	beq.n	800158e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001570:	2054      	movs	r0, #84	; 0x54
 8001572:	f7ff fa7b 	bl	8000a6c <pvPortMalloc>
 8001576:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	631a      	str	r2, [r3, #48]	; 0x30
 8001584:	e005      	b.n	8001592 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001586:	6978      	ldr	r0, [r7, #20]
 8001588:	f7ff fb0a 	bl	8000ba0 <vPortFree>
 800158c:	e001      	b.n	8001592 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d013      	beq.n	80015c0 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001598:	88fa      	ldrh	r2, [r7, #6]
 800159a:	2300      	movs	r3, #0
 800159c:	9303      	str	r3, [sp, #12]
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	9302      	str	r3, [sp, #8]
 80015a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a4:	9301      	str	r3, [sp, #4]
 80015a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f000 f80e 	bl	80015d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80015b4:	69f8      	ldr	r0, [r7, #28]
 80015b6:	f000 f88b 	bl	80016d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80015ba:	2301      	movs	r3, #1
 80015bc:	61bb      	str	r3, [r7, #24]
 80015be:	e002      	b.n	80015c6 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80015c0:	f04f 33ff 	mov.w	r3, #4294967295
 80015c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80015c6:	69bb      	ldr	r3, [r7, #24]
	}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3720      	adds	r7, #32
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80015de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	461a      	mov	r2, r3
 80015e8:	21a5      	movs	r1, #165	; 0xa5
 80015ea:	f001 f8e2 	bl	80027b2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80015ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015f8:	3b01      	subs	r3, #1
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	f023 0307 	bic.w	r3, r3, #7
 8001606:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d01f      	beq.n	800164e <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	e012      	b.n	800163a <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	4413      	add	r3, r2
 800161a:	7819      	ldrb	r1, [r3, #0]
 800161c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	4413      	add	r3, r2
 8001622:	3334      	adds	r3, #52	; 0x34
 8001624:	460a      	mov	r2, r1
 8001626:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001628:	68ba      	ldr	r2, [r7, #8]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	4413      	add	r3, r2
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d006      	beq.n	8001642 <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	3301      	adds	r3, #1
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	2b0f      	cmp	r3, #15
 800163e:	d9e9      	bls.n	8001614 <prvInitialiseNewTask+0x44>
 8001640:	e000      	b.n	8001644 <prvInitialiseNewTask+0x74>
			{
				break;
 8001642:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800164c:	e003      	b.n	8001656 <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800164e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	2b04      	cmp	r3, #4
 800165a:	d901      	bls.n	8001660 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800165c:	2304      	movs	r3, #4
 800165e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001662:	6a3a      	ldr	r2, [r7, #32]
 8001664:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001668:	6a3a      	ldr	r2, [r7, #32]
 800166a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800166c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166e:	2200      	movs	r2, #0
 8001670:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001674:	3304      	adds	r3, #4
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff f84a 	bl	8000710 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800167c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167e:	3318      	adds	r3, #24
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff f845 	bl	8000710 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001688:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800168a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	f1c3 0205 	rsb	r2, r3, #5
 8001692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001694:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800169a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800169c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169e:	2200      	movs	r2, #0
 80016a0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80016a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	68f9      	ldr	r1, [r7, #12]
 80016ae:	6938      	ldr	r0, [r7, #16]
 80016b0:	f7ff f8be 	bl	8000830 <pxPortInitialiseStack>
 80016b4:	4602      	mov	r2, r0
 80016b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80016c6:	bf00      	nop
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80016d8:	f7ff f936 	bl	8000948 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80016dc:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <prvAddNewTaskToReadyList+0xb8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	3301      	adds	r3, #1
 80016e2:	4a29      	ldr	r2, [pc, #164]	; (8001788 <prvAddNewTaskToReadyList+0xb8>)
 80016e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80016e6:	4b29      	ldr	r3, [pc, #164]	; (800178c <prvAddNewTaskToReadyList+0xbc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d109      	bne.n	8001702 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80016ee:	4a27      	ldr	r2, [pc, #156]	; (800178c <prvAddNewTaskToReadyList+0xbc>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80016f4:	4b24      	ldr	r3, [pc, #144]	; (8001788 <prvAddNewTaskToReadyList+0xb8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d110      	bne.n	800171e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80016fc:	f000 fb22 	bl	8001d44 <prvInitialiseTaskLists>
 8001700:	e00d      	b.n	800171e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001702:	4b23      	ldr	r3, [pc, #140]	; (8001790 <prvAddNewTaskToReadyList+0xc0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d109      	bne.n	800171e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <prvAddNewTaskToReadyList+0xbc>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	429a      	cmp	r2, r3
 8001716:	d802      	bhi.n	800171e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001718:	4a1c      	ldr	r2, [pc, #112]	; (800178c <prvAddNewTaskToReadyList+0xbc>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800171e:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <prvAddNewTaskToReadyList+0xc4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	4a1b      	ldr	r2, [pc, #108]	; (8001794 <prvAddNewTaskToReadyList+0xc4>)
 8001726:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	2201      	movs	r2, #1
 800172e:	409a      	lsls	r2, r3
 8001730:	4b19      	ldr	r3, [pc, #100]	; (8001798 <prvAddNewTaskToReadyList+0xc8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4313      	orrs	r3, r2
 8001736:	4a18      	ldr	r2, [pc, #96]	; (8001798 <prvAddNewTaskToReadyList+0xc8>)
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4a15      	ldr	r2, [pc, #84]	; (800179c <prvAddNewTaskToReadyList+0xcc>)
 8001748:	441a      	add	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3304      	adds	r3, #4
 800174e:	4619      	mov	r1, r3
 8001750:	4610      	mov	r0, r2
 8001752:	f7fe ffe9 	bl	8000728 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001756:	f7ff f90f 	bl	8000978 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <prvAddNewTaskToReadyList+0xc0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00e      	beq.n	8001780 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <prvAddNewTaskToReadyList+0xbc>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176c:	429a      	cmp	r2, r3
 800176e:	d207      	bcs.n	8001780 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <prvAddNewTaskToReadyList+0xd0>)
 8001772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	f3bf 8f4f 	dsb	sy
 800177c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20003990 	.word	0x20003990
 800178c:	200038b8 	.word	0x200038b8
 8001790:	2000399c 	.word	0x2000399c
 8001794:	200039ac 	.word	0x200039ac
 8001798:	20003998 	.word	0x20003998
 800179c:	200038bc 	.word	0x200038bc
 80017a0:	e000ed04 	.word	0xe000ed04

080017a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d008      	beq.n	80017c8 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 80017b6:	f000 f84f 	bl	8001858 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80017ba:	2100      	movs	r1, #0
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 fcb9 	bl	8002134 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80017c2:	f000 f857 	bl	8001874 <xTaskResumeAll>
 80017c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d107      	bne.n	80017de <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <vTaskDelay+0x44>)
 80017d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	f3bf 8f4f 	dsb	sy
 80017da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	e000ed04 	.word	0xe000ed04

080017ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80017f2:	4b13      	ldr	r3, [pc, #76]	; (8001840 <vTaskStartScheduler+0x54>)
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	2300      	movs	r3, #0
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2300      	movs	r3, #0
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	4911      	ldr	r1, [pc, #68]	; (8001844 <vTaskStartScheduler+0x58>)
 8001800:	4811      	ldr	r0, [pc, #68]	; (8001848 <vTaskStartScheduler+0x5c>)
 8001802:	f7ff fea4 	bl	800154e <xTaskCreate>
 8001806:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d114      	bne.n	8001838 <vTaskStartScheduler+0x4c>
	__asm volatile
 800180e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001812:	f383 8811 	msr	BASEPRI, r3
 8001816:	f3bf 8f6f 	isb	sy
 800181a:	f3bf 8f4f 	dsb	sy
 800181e:	603b      	str	r3, [r7, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001820:	4b0a      	ldr	r3, [pc, #40]	; (800184c <vTaskStartScheduler+0x60>)
 8001822:	f04f 32ff 	mov.w	r2, #4294967295
 8001826:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <vTaskStartScheduler+0x64>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <vTaskStartScheduler+0x68>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001834:	f7ff f868 	bl	8000908 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200039b4 	.word	0x200039b4
 8001844:	080030a0 	.word	0x080030a0
 8001848:	08001d11 	.word	0x08001d11
 800184c:	200039b0 	.word	0x200039b0
 8001850:	2000399c 	.word	0x2000399c
 8001854:	20003994 	.word	0x20003994

08001858 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <vTaskSuspendAll+0x18>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	3301      	adds	r3, #1
 8001862:	4a03      	ldr	r2, [pc, #12]	; (8001870 <vTaskSuspendAll+0x18>)
 8001864:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	200039b8 	.word	0x200039b8

08001874 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001882:	f7ff f861 	bl	8000948 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001886:	4b39      	ldr	r3, [pc, #228]	; (800196c <xTaskResumeAll+0xf8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	3b01      	subs	r3, #1
 800188c:	4a37      	ldr	r2, [pc, #220]	; (800196c <xTaskResumeAll+0xf8>)
 800188e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001890:	4b36      	ldr	r3, [pc, #216]	; (800196c <xTaskResumeAll+0xf8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d161      	bne.n	800195c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001898:	4b35      	ldr	r3, [pc, #212]	; (8001970 <xTaskResumeAll+0xfc>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d05d      	beq.n	800195c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80018a0:	e02e      	b.n	8001900 <xTaskResumeAll+0x8c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80018a2:	4b34      	ldr	r3, [pc, #208]	; (8001974 <xTaskResumeAll+0x100>)
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	3318      	adds	r3, #24
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe ff95 	bl	80007de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	3304      	adds	r3, #4
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe ff90 	bl	80007de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	2201      	movs	r2, #1
 80018c4:	409a      	lsls	r2, r3
 80018c6:	4b2c      	ldr	r3, [pc, #176]	; (8001978 <xTaskResumeAll+0x104>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	4a2a      	ldr	r2, [pc, #168]	; (8001978 <xTaskResumeAll+0x104>)
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4a27      	ldr	r2, [pc, #156]	; (800197c <xTaskResumeAll+0x108>)
 80018de:	441a      	add	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3304      	adds	r3, #4
 80018e4:	4619      	mov	r1, r3
 80018e6:	4610      	mov	r0, r2
 80018e8:	f7fe ff1e 	bl	8000728 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018f0:	4b23      	ldr	r3, [pc, #140]	; (8001980 <xTaskResumeAll+0x10c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d302      	bcc.n	8001900 <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
 80018fa:	4b22      	ldr	r3, [pc, #136]	; (8001984 <xTaskResumeAll+0x110>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001900:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <xTaskResumeAll+0x100>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1cc      	bne.n	80018a2 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800190e:	f000 fa95 	bl	8001e3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001912:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <xTaskResumeAll+0x114>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d010      	beq.n	8001940 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800191e:	f000 f837 	bl	8001990 <xTaskIncrementTick>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
 8001928:	4b16      	ldr	r3, [pc, #88]	; (8001984 <xTaskResumeAll+0x110>)
 800192a:	2201      	movs	r2, #1
 800192c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3b01      	subs	r3, #1
 8001932:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f1      	bne.n	800191e <xTaskResumeAll+0xaa>

						xPendedTicks = 0;
 800193a:	4b13      	ldr	r3, [pc, #76]	; (8001988 <xTaskResumeAll+0x114>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001940:	4b10      	ldr	r3, [pc, #64]	; (8001984 <xTaskResumeAll+0x110>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d009      	beq.n	800195c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001948:	2301      	movs	r3, #1
 800194a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800194c:	4b0f      	ldr	r3, [pc, #60]	; (800198c <xTaskResumeAll+0x118>)
 800194e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	f3bf 8f4f 	dsb	sy
 8001958:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800195c:	f7ff f80c 	bl	8000978 <vPortExitCritical>

	return xAlreadyYielded;
 8001960:	68bb      	ldr	r3, [r7, #8]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200039b8 	.word	0x200039b8
 8001970:	20003990 	.word	0x20003990
 8001974:	20003950 	.word	0x20003950
 8001978:	20003998 	.word	0x20003998
 800197c:	200038bc 	.word	0x200038bc
 8001980:	200038b8 	.word	0x200038b8
 8001984:	200039a4 	.word	0x200039a4
 8001988:	200039a0 	.word	0x200039a0
 800198c:	e000ed04 	.word	0xe000ed04

08001990 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800199a:	4b46      	ldr	r3, [pc, #280]	; (8001ab4 <xTaskIncrementTick+0x124>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d17d      	bne.n	8001a9e <xTaskIncrementTick+0x10e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80019a2:	4b45      	ldr	r3, [pc, #276]	; (8001ab8 <xTaskIncrementTick+0x128>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	3301      	adds	r3, #1
 80019a8:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80019aa:	4a43      	ldr	r2, [pc, #268]	; (8001ab8 <xTaskIncrementTick+0x128>)
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d110      	bne.n	80019d8 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 80019b6:	4b41      	ldr	r3, [pc, #260]	; (8001abc <xTaskIncrementTick+0x12c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	4b40      	ldr	r3, [pc, #256]	; (8001ac0 <xTaskIncrementTick+0x130>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a3e      	ldr	r2, [pc, #248]	; (8001abc <xTaskIncrementTick+0x12c>)
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	4a3e      	ldr	r2, [pc, #248]	; (8001ac0 <xTaskIncrementTick+0x130>)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	4b3e      	ldr	r3, [pc, #248]	; (8001ac4 <xTaskIncrementTick+0x134>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3301      	adds	r3, #1
 80019d0:	4a3c      	ldr	r2, [pc, #240]	; (8001ac4 <xTaskIncrementTick+0x134>)
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	f000 fa32 	bl	8001e3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80019d8:	4b3b      	ldr	r3, [pc, #236]	; (8001ac8 <xTaskIncrementTick+0x138>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d348      	bcc.n	8001a74 <xTaskIncrementTick+0xe4>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019e2:	4b36      	ldr	r3, [pc, #216]	; (8001abc <xTaskIncrementTick+0x12c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d104      	bne.n	80019f6 <xTaskIncrementTick+0x66>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019ec:	4b36      	ldr	r3, [pc, #216]	; (8001ac8 <xTaskIncrementTick+0x138>)
 80019ee:	f04f 32ff 	mov.w	r2, #4294967295
 80019f2:	601a      	str	r2, [r3, #0]
					break;
 80019f4:	e03e      	b.n	8001a74 <xTaskIncrementTick+0xe4>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019f6:	4b31      	ldr	r3, [pc, #196]	; (8001abc <xTaskIncrementTick+0x12c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d203      	bcs.n	8001a16 <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001a0e:	4a2e      	ldr	r2, [pc, #184]	; (8001ac8 <xTaskIncrementTick+0x138>)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001a14:	e02e      	b.n	8001a74 <xTaskIncrementTick+0xe4>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fedf 	bl	80007de <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d004      	beq.n	8001a32 <xTaskIncrementTick+0xa2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	3318      	adds	r3, #24
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fed6 	bl	80007de <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a36:	2201      	movs	r2, #1
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	4b24      	ldr	r3, [pc, #144]	; (8001acc <xTaskIncrementTick+0x13c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	4a22      	ldr	r2, [pc, #136]	; (8001acc <xTaskIncrementTick+0x13c>)
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <xTaskIncrementTick+0x140>)
 8001a52:	441a      	add	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	3304      	adds	r3, #4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	f7fe fe64 	bl	8000728 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a64:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <xTaskIncrementTick+0x144>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d3b9      	bcc.n	80019e2 <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a72:	e7b6      	b.n	80019e2 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001a74:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <xTaskIncrementTick+0x144>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a7a:	4915      	ldr	r1, [pc, #84]	; (8001ad0 <xTaskIncrementTick+0x140>)
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d901      	bls.n	8001a90 <xTaskIncrementTick+0x100>
			{
				xSwitchRequired = pdTRUE;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <xTaskIncrementTick+0x148>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d007      	beq.n	8001aa8 <xTaskIncrementTick+0x118>
			{
				xSwitchRequired = pdTRUE;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	e004      	b.n	8001aa8 <xTaskIncrementTick+0x118>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <xTaskIncrementTick+0x14c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	4a0d      	ldr	r2, [pc, #52]	; (8001adc <xTaskIncrementTick+0x14c>)
 8001aa6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001aa8:	697b      	ldr	r3, [r7, #20]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200039b8 	.word	0x200039b8
 8001ab8:	20003994 	.word	0x20003994
 8001abc:	20003948 	.word	0x20003948
 8001ac0:	2000394c 	.word	0x2000394c
 8001ac4:	200039a8 	.word	0x200039a8
 8001ac8:	200039b0 	.word	0x200039b0
 8001acc:	20003998 	.word	0x20003998
 8001ad0:	200038bc 	.word	0x200038bc
 8001ad4:	200038b8 	.word	0x200038b8
 8001ad8:	200039a4 	.word	0x200039a4
 8001adc:	200039a0 	.word	0x200039a0

08001ae0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001ae6:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <vTaskSwitchContext+0x78>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001aee:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <vTaskSwitchContext+0x7c>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001af4:	e02a      	b.n	8001b4c <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 8001af6:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <vTaskSwitchContext+0x7c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001afc:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <vTaskSwitchContext+0x80>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	fab3 f383 	clz	r3, r3
 8001b08:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	f1c3 031f 	rsb	r3, r3, #31
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4a11      	ldr	r2, [pc, #68]	; (8001b64 <vTaskSwitchContext+0x84>)
 8001b1e:	4413      	add	r3, r2
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	3308      	adds	r3, #8
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d104      	bne.n	8001b42 <vTaskSwitchContext+0x62>
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <vTaskSwitchContext+0x88>)
 8001b4a:	6013      	str	r3, [r2, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	200039b8 	.word	0x200039b8
 8001b5c:	200039a4 	.word	0x200039a4
 8001b60:	20003998 	.word	0x20003998
 8001b64:	200038bc 	.word	0x200038bc
 8001b68:	200038b8 	.word	0x200038b8

08001b6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <vTaskPlaceOnEventList+0x28>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	3318      	adds	r3, #24
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7fe fdf5 	bl	800076e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001b84:	2101      	movs	r1, #1
 8001b86:	6838      	ldr	r0, [r7, #0]
 8001b88:	f000 fad4 	bl	8002134 <prvAddCurrentTaskToDelayedList>
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	200038b8 	.word	0x200038b8

08001b98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	3318      	adds	r3, #24
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fe16 	bl	80007de <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001bb2:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <xTaskRemoveFromEventList+0x90>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d11c      	bne.n	8001bf4 <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fe0d 	bl	80007de <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc8:	2201      	movs	r2, #1
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <xTaskRemoveFromEventList+0x94>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	4a16      	ldr	r2, [pc, #88]	; (8001c2c <xTaskRemoveFromEventList+0x94>)
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4a13      	ldr	r2, [pc, #76]	; (8001c30 <xTaskRemoveFromEventList+0x98>)
 8001be4:	441a      	add	r2, r3
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	3304      	adds	r3, #4
 8001bea:	4619      	mov	r1, r3
 8001bec:	4610      	mov	r0, r2
 8001bee:	f7fe fd9b 	bl	8000728 <vListInsertEnd>
 8001bf2:	e005      	b.n	8001c00 <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	3318      	adds	r3, #24
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	480e      	ldr	r0, [pc, #56]	; (8001c34 <xTaskRemoveFromEventList+0x9c>)
 8001bfc:	f7fe fd94 	bl	8000728 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <xTaskRemoveFromEventList+0xa0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d905      	bls.n	8001c1a <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <xTaskRemoveFromEventList+0xa4>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	e001      	b.n	8001c1e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	200039b8 	.word	0x200039b8
 8001c2c:	20003998 	.word	0x20003998
 8001c30:	200038bc 	.word	0x200038bc
 8001c34:	20003950 	.word	0x20003950
 8001c38:	200038b8 	.word	0x200038b8
 8001c3c:	200039a4 	.word	0x200039a4

08001c40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <vTaskInternalSetTimeOutState+0x24>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <vTaskInternalSetTimeOutState+0x28>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	605a      	str	r2, [r3, #4]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	200039a8 	.word	0x200039a8
 8001c68:	20003994 	.word	0x20003994

08001c6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8001c76:	f7fe fe67 	bl	8000948 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <xTaskCheckForTimeOut+0x84>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c92:	d102      	bne.n	8001c9a <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	e023      	b.n	8001ce2 <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <xTaskCheckForTimeOut+0x88>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d007      	beq.n	8001cb6 <xTaskCheckForTimeOut+0x4a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d802      	bhi.n	8001cb6 <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	e015      	b.n	8001ce2 <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d90b      	bls.n	8001cd8 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	1ad2      	subs	r2, r2, r3
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ffb7 	bl	8001c40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	e004      	b.n	8001ce2 <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8001ce2:	f7fe fe49 	bl	8000978 <vPortExitCritical>

	return xReturn;
 8001ce6:	697b      	ldr	r3, [r7, #20]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20003994 	.word	0x20003994
 8001cf4:	200039a8 	.word	0x200039a8

08001cf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <vTaskMissedYield+0x14>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	601a      	str	r2, [r3, #0]
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	200039a4 	.word	0x200039a4

08001d10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001d18:	f000 f854 	bl	8001dc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001d1c:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <prvIdleTask+0x2c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d907      	bls.n	8001d34 <prvIdleTask+0x24>
			{
				taskYIELD();
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <prvIdleTask+0x30>)
 8001d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	f3bf 8f4f 	dsb	sy
 8001d30:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8001d34:	f000 fbea 	bl	800250c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8001d38:	e7ee      	b.n	8001d18 <prvIdleTask+0x8>
 8001d3a:	bf00      	nop
 8001d3c:	200038bc 	.word	0x200038bc
 8001d40:	e000ed04 	.word	0xe000ed04

08001d44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	e00c      	b.n	8001d6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <prvInitialiseTaskLists+0x60>)
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fcb7 	bl	80006d2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3301      	adds	r3, #1
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d9ef      	bls.n	8001d50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001d70:	480d      	ldr	r0, [pc, #52]	; (8001da8 <prvInitialiseTaskLists+0x64>)
 8001d72:	f7fe fcae 	bl	80006d2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001d76:	480d      	ldr	r0, [pc, #52]	; (8001dac <prvInitialiseTaskLists+0x68>)
 8001d78:	f7fe fcab 	bl	80006d2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001d7c:	480c      	ldr	r0, [pc, #48]	; (8001db0 <prvInitialiseTaskLists+0x6c>)
 8001d7e:	f7fe fca8 	bl	80006d2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001d82:	480c      	ldr	r0, [pc, #48]	; (8001db4 <prvInitialiseTaskLists+0x70>)
 8001d84:	f7fe fca5 	bl	80006d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001d88:	480b      	ldr	r0, [pc, #44]	; (8001db8 <prvInitialiseTaskLists+0x74>)
 8001d8a:	f7fe fca2 	bl	80006d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <prvInitialiseTaskLists+0x78>)
 8001d90:	4a05      	ldr	r2, [pc, #20]	; (8001da8 <prvInitialiseTaskLists+0x64>)
 8001d92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001d94:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <prvInitialiseTaskLists+0x7c>)
 8001d96:	4a05      	ldr	r2, [pc, #20]	; (8001dac <prvInitialiseTaskLists+0x68>)
 8001d98:	601a      	str	r2, [r3, #0]
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200038bc 	.word	0x200038bc
 8001da8:	20003920 	.word	0x20003920
 8001dac:	20003934 	.word	0x20003934
 8001db0:	20003950 	.word	0x20003950
 8001db4:	20003964 	.word	0x20003964
 8001db8:	2000397c 	.word	0x2000397c
 8001dbc:	20003948 	.word	0x20003948
 8001dc0:	2000394c 	.word	0x2000394c

08001dc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001dca:	e019      	b.n	8001e00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001dcc:	f7fe fdbc 	bl	8000948 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <prvCheckTasksWaitingTermination+0x4c>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3304      	adds	r3, #4
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fcfe 	bl	80007de <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001de2:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <prvCheckTasksWaitingTermination+0x50>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <prvCheckTasksWaitingTermination+0x50>)
 8001dea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <prvCheckTasksWaitingTermination+0x54>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	4a09      	ldr	r2, [pc, #36]	; (8001e18 <prvCheckTasksWaitingTermination+0x54>)
 8001df4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001df6:	f7fe fdbf 	bl	8000978 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f80e 	bl	8001e1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <prvCheckTasksWaitingTermination+0x54>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1e1      	bne.n	8001dcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20003964 	.word	0x20003964
 8001e14:	20003990 	.word	0x20003990
 8001e18:	20003978 	.word	0x20003978

08001e1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe feb9 	bl	8000ba0 <vPortFree>
			vPortFree( pxTCB );
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7fe feb6 	bl	8000ba0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e42:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <prvResetNextTaskUnblockTime+0x38>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d104      	bne.n	8001e56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <prvResetNextTaskUnblockTime+0x3c>)
 8001e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001e54:	e008      	b.n	8001e68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <prvResetNextTaskUnblockTime+0x38>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	4a04      	ldr	r2, [pc, #16]	; (8001e78 <prvResetNextTaskUnblockTime+0x3c>)
 8001e66:	6013      	str	r3, [r2, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20003948 	.word	0x20003948
 8001e78:	200039b0 	.word	0x200039b0

08001e7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d05e      	beq.n	8001f50 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e96:	4b31      	ldr	r3, [pc, #196]	; (8001f5c <xTaskPriorityInherit+0xe0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d24e      	bcs.n	8001f3e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	db06      	blt.n	8001eb6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ea8:	4b2c      	ldr	r3, [pc, #176]	; (8001f5c <xTaskPriorityInherit+0xe0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eae:	f1c3 0205 	rsb	r2, r3, #5
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	6959      	ldr	r1, [r3, #20]
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4a26      	ldr	r2, [pc, #152]	; (8001f60 <xTaskPriorityInherit+0xe4>)
 8001ec8:	4413      	add	r3, r2
 8001eca:	4299      	cmp	r1, r3
 8001ecc:	d12f      	bne.n	8001f2e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fc83 	bl	80007de <uxListRemove>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10a      	bne.n	8001ef4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43da      	mvns	r2, r3
 8001eea:	4b1e      	ldr	r3, [pc, #120]	; (8001f64 <xTaskPriorityInherit+0xe8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	4a1c      	ldr	r2, [pc, #112]	; (8001f64 <xTaskPriorityInherit+0xe8>)
 8001ef2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001ef4:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <xTaskPriorityInherit+0xe0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvReaddTaskToReadyList( pxMutexHolderTCB );
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f02:	2201      	movs	r2, #1
 8001f04:	409a      	lsls	r2, r3
 8001f06:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <xTaskPriorityInherit+0xe8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	4a15      	ldr	r2, [pc, #84]	; (8001f64 <xTaskPriorityInherit+0xe8>)
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4a10      	ldr	r2, [pc, #64]	; (8001f60 <xTaskPriorityInherit+0xe4>)
 8001f1e:	441a      	add	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	3304      	adds	r3, #4
 8001f24:	4619      	mov	r1, r3
 8001f26:	4610      	mov	r0, r2
 8001f28:	f7fe fbfe 	bl	8000728 <vListInsertEnd>
 8001f2c:	e004      	b.n	8001f38 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <xTaskPriorityInherit+0xe0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	e008      	b.n	8001f50 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <xTaskPriorityInherit+0xe0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d201      	bcs.n	8001f50 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001f50:	68fb      	ldr	r3, [r7, #12]
	}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200038b8 	.word	0x200038b8
 8001f60:	200038bc 	.word	0x200038bc
 8001f64:	20003998 	.word	0x20003998

08001f68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d04f      	beq.n	800201e <xTaskPriorityDisinherit+0xb6>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f82:	1e5a      	subs	r2, r3, #1
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d044      	beq.n	800201e <xTaskPriorityDisinherit+0xb6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d140      	bne.n	800201e <xTaskPriorityDisinherit+0xb6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fc1c 	bl	80007de <uxListRemove>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d115      	bne.n	8001fd8 <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb0:	491d      	ldr	r1, [pc, #116]	; (8002028 <xTaskPriorityDisinherit+0xc0>)
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10a      	bne.n	8001fd8 <xTaskPriorityDisinherit+0x70>
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43da      	mvns	r2, r3
 8001fce:	4b17      	ldr	r3, [pc, #92]	; (800202c <xTaskPriorityDisinherit+0xc4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	4a15      	ldr	r2, [pc, #84]	; (800202c <xTaskPriorityDisinherit+0xc4>)
 8001fd6:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	f1c3 0205 	rsb	r2, r3, #5
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	; (800202c <xTaskPriorityDisinherit+0xc4>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	4a0c      	ldr	r2, [pc, #48]	; (800202c <xTaskPriorityDisinherit+0xc4>)
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4a07      	ldr	r2, [pc, #28]	; (8002028 <xTaskPriorityDisinherit+0xc0>)
 800200c:	441a      	add	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	3304      	adds	r3, #4
 8002012:	4619      	mov	r1, r3
 8002014:	4610      	mov	r0, r2
 8002016:	f7fe fb87 	bl	8000728 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800201a:	2301      	movs	r3, #1
 800201c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800201e:	68fb      	ldr	r3, [r7, #12]
	}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	200038bc 	.word	0x200038bc
 800202c:	20003998 	.word	0x20003998

08002030 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800203e:	2301      	movs	r3, #1
 8002040:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d058      	beq.n	80020fa <vTaskPriorityDisinheritAfterTimeout+0xca>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d202      	bcs.n	8002058 <vTaskPriorityDisinheritAfterTimeout+0x28>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	e002      	b.n	800205e <vTaskPriorityDisinheritAfterTimeout+0x2e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205c:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	429a      	cmp	r2, r3
 8002066:	d048      	beq.n	80020fa <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	429a      	cmp	r2, r3
 8002070:	d143      	bne.n	80020fa <vTaskPriorityDisinheritAfterTimeout+0xca>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002076:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b00      	cmp	r3, #0
 8002084:	db04      	blt.n	8002090 <vTaskPriorityDisinheritAfterTimeout+0x60>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f1c3 0205 	rsb	r2, r3, #5
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	6959      	ldr	r1, [r3, #20]
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4a19      	ldr	r2, [pc, #100]	; (8002104 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 80020a0:	4413      	add	r3, r2
 80020a2:	4299      	cmp	r1, r3
 80020a4:	d129      	bne.n	80020fa <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	3304      	adds	r3, #4
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe fb97 	bl	80007de <uxListRemove>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10a      	bne.n	80020cc <vTaskPriorityDisinheritAfterTimeout+0x9c>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ba:	2201      	movs	r2, #1
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43da      	mvns	r2, r3
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4013      	ands	r3, r2
 80020c8:	4a0f      	ldr	r2, [pc, #60]	; (8002108 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 80020ca:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	2201      	movs	r2, #1
 80020d2:	409a      	lsls	r2, r3
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4313      	orrs	r3, r2
 80020da:	4a0b      	ldr	r2, [pc, #44]	; (8002108 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4a06      	ldr	r2, [pc, #24]	; (8002104 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 80020ec:	441a      	add	r2, r3
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	3304      	adds	r3, #4
 80020f2:	4619      	mov	r1, r3
 80020f4:	4610      	mov	r0, r2
 80020f6:	f7fe fb17 	bl	8000728 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80020fa:	bf00      	nop
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200038bc 	.word	0x200038bc
 8002108:	20003998 	.word	0x20003998

0800210c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002110:	4b07      	ldr	r3, [pc, #28]	; (8002130 <pvTaskIncrementMutexHeldCount+0x24>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d004      	beq.n	8002122 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8002118:	4b05      	ldr	r3, [pc, #20]	; (8002130 <pvTaskIncrementMutexHeldCount+0x24>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800211e:	3201      	adds	r2, #1
 8002120:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8002122:	4b03      	ldr	r3, [pc, #12]	; (8002130 <pvTaskIncrementMutexHeldCount+0x24>)
 8002124:	681b      	ldr	r3, [r3, #0]
	}
 8002126:	4618      	mov	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	200038b8 	.word	0x200038b8

08002134 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800213e:	4b29      	ldr	r3, [pc, #164]	; (80021e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002144:	4b28      	ldr	r3, [pc, #160]	; (80021e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	3304      	adds	r3, #4
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe fb47 	bl	80007de <uxListRemove>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10b      	bne.n	800216e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002156:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	2201      	movs	r2, #1
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43da      	mvns	r2, r3
 8002164:	4b21      	ldr	r3, [pc, #132]	; (80021ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4013      	ands	r3, r2
 800216a:	4a20      	ldr	r2, [pc, #128]	; (80021ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800216c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002174:	d10a      	bne.n	800218c <prvAddCurrentTaskToDelayedList+0x58>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d007      	beq.n	800218c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800217c:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	3304      	adds	r3, #4
 8002182:	4619      	mov	r1, r3
 8002184:	481a      	ldr	r0, [pc, #104]	; (80021f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002186:	f7fe facf 	bl	8000728 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800218a:	e026      	b.n	80021da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002194:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d209      	bcs.n	80021b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021a4:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	3304      	adds	r3, #4
 80021ae:	4619      	mov	r1, r3
 80021b0:	4610      	mov	r0, r2
 80021b2:	f7fe fadc 	bl	800076e <vListInsert>
}
 80021b6:	e010      	b.n	80021da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021b8:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	3304      	adds	r3, #4
 80021c2:	4619      	mov	r1, r3
 80021c4:	4610      	mov	r0, r2
 80021c6:	f7fe fad2 	bl	800076e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80021ca:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d202      	bcs.n	80021da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80021d4:	4a09      	ldr	r2, [pc, #36]	; (80021fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	6013      	str	r3, [r2, #0]
}
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20003994 	.word	0x20003994
 80021e8:	200038b8 	.word	0x200038b8
 80021ec:	20003998 	.word	0x20003998
 80021f0:	2000397c 	.word	0x2000397c
 80021f4:	2000394c 	.word	0x2000394c
 80021f8:	20003948 	.word	0x20003948
 80021fc:	200039b0 	.word	0x200039b0

08002200 <main>:
/* this is the queue which manager uses to put the work ticket id */
xQueueHandle xWorkQueue;

/*****************************Main Function****************************/
int main(void)
{
 8002200:	b5b0      	push	{r4, r5, r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af02      	add	r7, sp, #8
	// Initializations
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8002206:	f44f 7040 	mov.w	r0, #768	; 0x300
 800220a:	f7fd ffa9 	bl	8000160 <NVIC_PriorityGroupConfig>
	prvSetupHardware();
 800220e:	f000 f8dd 	bl	80023cc <prvSetupHardware>


	printmsg("\r\nThis is Binary Semaphore Project\r\n");
 8002212:	4826      	ldr	r0, [pc, #152]	; (80022ac <main+0xac>)
 8002214:	f000 f8e2 	bl	80023dc <printmsg>

	/* Before a semaphore is used it must be explicitly created.
	 * In this example a binary semaphore is created .
	 */
	vSemaphoreCreateBinary( xWork );
 8002218:	2203      	movs	r2, #3
 800221a:	2100      	movs	r1, #0
 800221c:	2001      	movs	r0, #1
 800221e:	f7fe fe13 	bl	8000e48 <xQueueGenericCreate>
 8002222:	4602      	mov	r2, r0
 8002224:	4b22      	ldr	r3, [pc, #136]	; (80022b0 <main+0xb0>)
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	4b21      	ldr	r3, [pc, #132]	; (80022b0 <main+0xb0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d006      	beq.n	800223e <main+0x3e>
 8002230:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <main+0xb0>)
 8002232:	6818      	ldr	r0, [r3, #0]
 8002234:	2300      	movs	r3, #0
 8002236:	2200      	movs	r2, #0
 8002238:	2100      	movs	r1, #0
 800223a:	f7fe fe4d 	bl	8000ed8 <xQueueGenericSend>

	/* The queue is created to hold a maximum of 1 Element. */
    xWorkQueue = xQueueCreate( 1, sizeof( unsigned int ) );
 800223e:	2200      	movs	r2, #0
 8002240:	2104      	movs	r1, #4
 8002242:	2001      	movs	r0, #1
 8002244:	f7fe fe00 	bl	8000e48 <xQueueGenericCreate>
 8002248:	4602      	mov	r2, r0
 800224a:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <main+0xb4>)
 800224c:	601a      	str	r2, [r3, #0]

	// check if the Creation of the Queue is successful or not

    /* Check the semaphore and queue was created successfully. */
    if( (xWork != NULL) && (xWorkQueue != NULL) )
 800224e:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <main+0xb0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d01c      	beq.n	8002290 <main+0x90>
 8002256:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <main+0xb4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d018      	beq.n	8002290 <main+0x90>

		/* Create the 'Manager' task.
		 *  This is the task that will be synchronized with the Employee task.
		 *  The Manager task is created with a high priority
		 */
        xTaskCreate( vManagerTask, "Manager", 300, NULL, 3, NULL );
 800225e:	2300      	movs	r3, #0
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	2303      	movs	r3, #3
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	2300      	movs	r3, #0
 8002268:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800226c:	4912      	ldr	r1, [pc, #72]	; (80022b8 <main+0xb8>)
 800226e:	4813      	ldr	r0, [pc, #76]	; (80022bc <main+0xbc>)
 8002270:	f7ff f96d 	bl	800154e <xTaskCreate>

        /* Create a employee task with less priority than manager */
        xTaskCreate( vEmployeeTask, "Employee", 300, NULL, 1, NULL );
 8002274:	2300      	movs	r3, #0
 8002276:	9301      	str	r3, [sp, #4]
 8002278:	2301      	movs	r3, #1
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	2300      	movs	r3, #0
 800227e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002282:	490f      	ldr	r1, [pc, #60]	; (80022c0 <main+0xc0>)
 8002284:	480f      	ldr	r0, [pc, #60]	; (80022c4 <main+0xc4>)
 8002286:	f7ff f962 	bl	800154e <xTaskCreate>

        /* Start the scheduler so the created tasks start executing. */
        vTaskStartScheduler();
 800228a:	f7ff faaf 	bl	80017ec <vTaskStartScheduler>
 800228e:	e00c      	b.n	80022aa <main+0xaa>
    }
	else
	{
	    sprintf(usr_msg,"Queue/Sema create failed.. \r\n");
 8002290:	4a0d      	ldr	r2, [pc, #52]	; (80022c8 <main+0xc8>)
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <main+0xcc>)
 8002294:	4614      	mov	r4, r2
 8002296:	461d      	mov	r5, r3
 8002298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800229a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800229c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80022a0:	c407      	stmia	r4!, {r0, r1, r2}
 80022a2:	8023      	strh	r3, [r4, #0]
	    printmsg(usr_msg);
 80022a4:	4808      	ldr	r0, [pc, #32]	; (80022c8 <main+0xc8>)
 80022a6:	f000 f899 	bl	80023dc <printmsg>
	}
    /* If all is well we will never reach here as the scheduler will now be
    running the tasks.  If we do reach here then it is likely that there was
    insufficient heap memory available for a resource to be created. */

	while(1);
 80022aa:	e7fe      	b.n	80022aa <main+0xaa>
 80022ac:	080030a8 	.word	0x080030a8
 80022b0:	20003a94 	.word	0x20003a94
 80022b4:	20003a90 	.word	0x20003a90
 80022b8:	080030d0 	.word	0x080030d0
 80022bc:	080022d1 	.word	0x080022d1
 80022c0:	080030d8 	.word	0x080030d8
 80022c4:	08002365 	.word	0x08002365
 80022c8:	200039bc 	.word	0x200039bc
 80022cc:	080030e4 	.word	0x080030e4

080022d0 <vManagerTask>:
}


/***************************** Task Handler Definition****************************/
void vManagerTask( void *pvParameters )
{
 80022d0:	b5b0      	push	{r4, r5, r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	 portBASE_TYPE xStatus;

   /* The semaphore is created in the 'empty' state, meaning the semaphore must
	 first be given using the xSemaphoreGive() API function before it
	 can subsequently be taken (obtained) */
   xSemaphoreGive( xWork);
 80022d8:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <vManagerTask+0x80>)
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	2300      	movs	r3, #0
 80022de:	2200      	movs	r2, #0
 80022e0:	2100      	movs	r1, #0
 80022e2:	f7fe fdf9 	bl	8000ed8 <xQueueGenericSend>

   while(1)
   {
       /* get a work ticket id(some random number) */
       xWorkTicketId = ( rand() & 0x1FF );
 80022e6:	f000 fa6d 	bl	80027c4 <rand>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022f0:	60bb      	str	r3, [r7, #8]

		/* Sends work ticket id to the work queue */
       //Post an item on back of the queue
		xStatus = xQueueSend( xWorkQueue, &xWorkTicketId , portMAX_DELAY );
 80022f2:	4b18      	ldr	r3, [pc, #96]	; (8002354 <vManagerTask+0x84>)
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	f107 0108 	add.w	r1, r7, #8
 80022fa:	2300      	movs	r3, #0
 80022fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002300:	f7fe fdea 	bl	8000ed8 <xQueueGenericSend>
 8002304:	60f8      	str	r0, [r7, #12]

		if( xStatus != pdPASS )
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d010      	beq.n	800232e <vManagerTask+0x5e>
		{
			sprintf(usr_msg,"Could not send to the queue.\r\n");
 800230c:	4a12      	ldr	r2, [pc, #72]	; (8002358 <vManagerTask+0x88>)
 800230e:	4b13      	ldr	r3, [pc, #76]	; (800235c <vManagerTask+0x8c>)
 8002310:	4614      	mov	r4, r2
 8002312:	461d      	mov	r5, r3
 8002314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002318:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800231c:	c407      	stmia	r4!, {r0, r1, r2}
 800231e:	8023      	strh	r3, [r4, #0]
 8002320:	3402      	adds	r4, #2
 8002322:	0c1b      	lsrs	r3, r3, #16
 8002324:	7023      	strb	r3, [r4, #0]
		    printmsg(usr_msg);
 8002326:	480c      	ldr	r0, [pc, #48]	; (8002358 <vManagerTask+0x88>)
 8002328:	f000 f858 	bl	80023dc <printmsg>
 800232c:	e7db      	b.n	80022e6 <vManagerTask+0x16>

		}else
		{
			/* Manager notifying the employee by "Giving" semaphore */
			xSemaphoreGive( xWork);
 800232e:	4b08      	ldr	r3, [pc, #32]	; (8002350 <vManagerTask+0x80>)
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	2300      	movs	r3, #0
 8002334:	2200      	movs	r2, #0
 8002336:	2100      	movs	r1, #0
 8002338:	f7fe fdce 	bl	8000ed8 <xQueueGenericSend>
			/* after assigning the work , just yield the processor because nothing to do */
			taskYIELD();
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <vManagerTask+0x90>)
 800233e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	f3bf 8f4f 	dsb	sy
 8002348:	f3bf 8f6f 	isb	sy
       xWorkTicketId = ( rand() & 0x1FF );
 800234c:	e7cb      	b.n	80022e6 <vManagerTask+0x16>
 800234e:	bf00      	nop
 8002350:	20003a94 	.word	0x20003a94
 8002354:	20003a90 	.word	0x20003a90
 8002358:	200039bc 	.word	0x200039bc
 800235c:	08003104 	.word	0x08003104
 8002360:	e000ed04 	.word	0xe000ed04

08002364 <vEmployeeTask>:
		}
   }
}

static void vEmployeeTask( void *pvParameters )
{
 8002364:	b5b0      	push	{r4, r5, r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
		 * if it is available that means there is a task assigned by manager,
		 * otherwise employee task will be blocked
		 * second Argument is BlockTime it will be zero
		 * Block Time: if the Semaphore is Not Available,then how long this task has to block
		 */
		xSemaphoreTake( xWork, 0 );
 800236c:	4b13      	ldr	r3, [pc, #76]	; (80023bc <vEmployeeTask+0x58>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe fefc 	bl	8001170 <xQueueSemaphoreTake>

		/* get the ticket id from the work queue */
		xStatus = xQueueReceive( xWorkQueue, &xWorkTicketId, 0 );
 8002378:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <vEmployeeTask+0x5c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f107 010b 	add.w	r1, r7, #11
 8002380:	2200      	movs	r2, #0
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe fe52 	bl	800102c <xQueueReceive>
 8002388:	60f8      	str	r0, [r7, #12]

		if( xStatus == pdPASS )
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d104      	bne.n	800239a <vEmployeeTask+0x36>
		{
		  /* employee may decode the xWorkTicketId in this function to do the work*/
			EmployeeDoWork(xWorkTicketId);
 8002390:	7afb      	ldrb	r3, [r7, #11]
 8002392:	4618      	mov	r0, r3
 8002394:	f000 f8c2 	bl	800251c <EmployeeDoWork>
 8002398:	e7e8      	b.n	800236c <vEmployeeTask+0x8>
		}
		else
		{
			/* We did not receive anything from the queue.  This must be an error as this task should only run when the manager assigns at least one work. */
			sprintf(usr_msg,"Employee task : Queue is empty , nothing to do.\r\n");
 800239a:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <vEmployeeTask+0x60>)
 800239c:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <vEmployeeTask+0x64>)
 800239e:	4614      	mov	r4, r2
 80023a0:	461d      	mov	r5, r3
 80023a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ae:	682b      	ldr	r3, [r5, #0]
 80023b0:	8023      	strh	r3, [r4, #0]
		    printmsg(usr_msg);
 80023b2:	4804      	ldr	r0, [pc, #16]	; (80023c4 <vEmployeeTask+0x60>)
 80023b4:	f000 f812 	bl	80023dc <printmsg>
		xSemaphoreTake( xWork, 0 );
 80023b8:	e7d8      	b.n	800236c <vEmployeeTask+0x8>
 80023ba:	bf00      	nop
 80023bc:	20003a94 	.word	0x20003a94
 80023c0:	20003a90 	.word	0x20003a90
 80023c4:	200039bc 	.word	0x200039bc
 80023c8:	08003124 	.word	0x08003124

080023cc <prvSetupHardware>:
    }
}
/*****************************FUNCTION Definition****************************/

static void prvSetupHardware(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
	//Setup GPIO
	prvGPIOSetup();
 80023d0:	f000 f86c 	bl	80024ac <prvGPIOSetup>

	//setup UART_1
	prvUARTSetup();
 80023d4:	f000 f82a 	bl	800242c <prvUARTSetup>
}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}

080023dc <printmsg>:

void printmsg(char *msg)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i<strlen(msg) ; i++)
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	e013      	b.n	8002412 <printmsg+0x36>
	{
		//polling to check that the Date Register is Empty
		while(USART_GetFlagStatus(USART1, USART_FLAG_TXE)!=SET);
 80023ea:	bf00      	nop
 80023ec:	2180      	movs	r1, #128	; 0x80
 80023ee:	480e      	ldr	r0, [pc, #56]	; (8002428 <printmsg+0x4c>)
 80023f0:	f7fe f954 	bl	800069c <USART_GetFlagStatus>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d1f8      	bne.n	80023ec <printmsg+0x10>
		//put our mesg in the UART Data Register
		USART_SendData(USART1,msg[i]);
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4413      	add	r3, r2
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	b29b      	uxth	r3, r3
 8002404:	4619      	mov	r1, r3
 8002406:	4808      	ldr	r0, [pc, #32]	; (8002428 <printmsg+0x4c>)
 8002408:	f7fe f937 	bl	800067a <USART_SendData>
	for(uint32_t i=0 ; i<strlen(msg) ; i++)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	3301      	adds	r3, #1
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7fd fe9c 	bl	8000150 <strlen>
 8002418:	4602      	mov	r2, r0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	429a      	cmp	r2, r3
 800241e:	d8e4      	bhi.n	80023ea <printmsg+0xe>
	}

}
 8002420:	bf00      	nop
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40013800 	.word	0x40013800

0800242c <prvUARTSetup>:

void prvUARTSetup()
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
    USART_InitTypeDef usart1_init_struct;
    /* Bit configuration structure for GPIOA PIN9 and PIN10 */
    GPIO_InitTypeDef gpioa_init_struct;

    /* Enalbe clock for USART1, AFIO and GPIOA */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_AFIO |
 8002432:	2101      	movs	r1, #1
 8002434:	f244 0005 	movw	r0, #16389	; 0x4005
 8002438:	f7fe f828 	bl	800048c <RCC_APB2PeriphClockCmd>
                           RCC_APB2Periph_GPIOA, ENABLE);

    /* GPIOA PIN9 alternative function Tx */
    gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
 800243c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002440:	80bb      	strh	r3, [r7, #4]
    gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 8002442:	2303      	movs	r3, #3
 8002444:	71bb      	strb	r3, [r7, #6]
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
 8002446:	2318      	movs	r3, #24
 8002448:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &gpioa_init_struct);
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	4619      	mov	r1, r3
 800244e:	4815      	ldr	r0, [pc, #84]	; (80024a4 <prvUARTSetup+0x78>)
 8002450:	f7fd fe98 	bl	8000184 <GPIO_Init>

    /* GPIOA PIN9 alternative function Rx */
    gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
 8002454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002458:	80bb      	strh	r3, [r7, #4]
    gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 800245a:	2303      	movs	r3, #3
 800245c:	71bb      	strb	r3, [r7, #6]
    gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800245e:	2304      	movs	r3, #4
 8002460:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &gpioa_init_struct);
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	4619      	mov	r1, r3
 8002466:	480f      	ldr	r0, [pc, #60]	; (80024a4 <prvUARTSetup+0x78>)
 8002468:	f7fd fe8c 	bl	8000184 <GPIO_Init>

    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);
 800246c:	2101      	movs	r1, #1
 800246e:	480e      	ldr	r0, [pc, #56]	; (80024a8 <prvUARTSetup+0x7c>)
 8002470:	f7fe f8e4 	bl	800063c <USART_Cmd>
    /* Baud rate 9600, 8-bit data, One stop bit
     * No parity, Do both Rx and Tx, No HW flow control
     */
    usart1_init_struct.USART_BaudRate = 9600;
 8002474:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002478:	60bb      	str	r3, [r7, #8]
    usart1_init_struct.USART_WordLength = USART_WordLength_8b;
 800247a:	2300      	movs	r3, #0
 800247c:	81bb      	strh	r3, [r7, #12]
    usart1_init_struct.USART_StopBits = USART_StopBits_1;
 800247e:	2300      	movs	r3, #0
 8002480:	81fb      	strh	r3, [r7, #14]
    usart1_init_struct.USART_Parity = USART_Parity_No ;
 8002482:	2300      	movs	r3, #0
 8002484:	823b      	strh	r3, [r7, #16]
    usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002486:	230c      	movs	r3, #12
 8002488:	827b      	strh	r3, [r7, #18]
    usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800248a:	2300      	movs	r3, #0
 800248c:	82bb      	strh	r3, [r7, #20]
    USART_Init(USART1,&usart1_init_struct);
 800248e:	f107 0308 	add.w	r3, r7, #8
 8002492:	4619      	mov	r1, r3
 8002494:	4804      	ldr	r0, [pc, #16]	; (80024a8 <prvUARTSetup+0x7c>)
 8002496:	f7fe f817 	bl	80004c8 <USART_Init>
}
 800249a:	bf00      	nop
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40010800 	.word	0x40010800
 80024a8:	40013800 	.word	0x40013800

080024ac <prvGPIOSetup>:

void prvGPIOSetup(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
	//Enable The clok for GPIOA , GPIOC
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
 80024b2:	2101      	movs	r1, #1
 80024b4:	2004      	movs	r0, #4
 80024b6:	f7fd ffe9 	bl	800048c <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC,ENABLE);
 80024ba:	2101      	movs	r1, #1
 80024bc:	2010      	movs	r0, #16
 80024be:	f7fd ffe5 	bl	800048c <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef led_init , Button_init ;

	//initialize the LED PC13
	led_init.GPIO_Mode = GPIO_Mode_Out_PP ;
 80024c2:	2310      	movs	r3, #16
 80024c4:	71fb      	strb	r3, [r7, #7]
	led_init.GPIO_Pin = GPIO_Pin_13 ;
 80024c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ca:	80bb      	strh	r3, [r7, #4]
	led_init.GPIO_Speed = GPIO_Speed_2MHz ;
 80024cc:	2302      	movs	r3, #2
 80024ce:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC,&led_init);
 80024d0:	1d3b      	adds	r3, r7, #4
 80024d2:	4619      	mov	r1, r3
 80024d4:	480b      	ldr	r0, [pc, #44]	; (8002504 <prvGPIOSetup+0x58>)
 80024d6:	f7fd fe55 	bl	8000184 <GPIO_Init>

	// turn OFF The LED at the First ** LED is Active LOW **
	GPIO_WriteBit(GPIOC,GPIO_Pin_13,Bit_SET);
 80024da:	2201      	movs	r2, #1
 80024dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024e0:	4808      	ldr	r0, [pc, #32]	; (8002504 <prvGPIOSetup+0x58>)
 80024e2:	f7fd ff0b 	bl	80002fc <GPIO_WriteBit>

	//initialize the Button PA5
	Button_init.GPIO_Mode = GPIO_Mode_IPD ; // input pull down
 80024e6:	2328      	movs	r3, #40	; 0x28
 80024e8:	70fb      	strb	r3, [r7, #3]
	Button_init.GPIO_Pin = GPIO_Pin_5 ;
 80024ea:	2320      	movs	r3, #32
 80024ec:	803b      	strh	r3, [r7, #0]
	Button_init.GPIO_Speed = GPIO_Speed_2MHz ;
 80024ee:	2302      	movs	r3, #2
 80024f0:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOA,&Button_init);
 80024f2:	463b      	mov	r3, r7
 80024f4:	4619      	mov	r1, r3
 80024f6:	4804      	ldr	r0, [pc, #16]	; (8002508 <prvGPIOSetup+0x5c>)
 80024f8:	f7fd fe44 	bl	8000184 <GPIO_Init>
}
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40011000 	.word	0x40011000
 8002508:	40010800 	.word	0x40010800

0800250c <vApplicationIdleHook>:
}

/*****************************Call Back Functions****************************/

void vApplicationIdleHook(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8002510:	bf30      	wfi
	// send the cpu to the Normal Sleep
	__WFI();
}
 8002512:	bf00      	nop
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
	...

0800251c <EmployeeDoWork>:

void EmployeeDoWork(unsigned char TicketId)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
	/* implement the work according to TickedID */
	sprintf(usr_msg,"Employee task : Working on Ticked id : %d\r\n",TicketId);
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	461a      	mov	r2, r3
 800252a:	4907      	ldr	r1, [pc, #28]	; (8002548 <EmployeeDoWork+0x2c>)
 800252c:	4807      	ldr	r0, [pc, #28]	; (800254c <EmployeeDoWork+0x30>)
 800252e:	f000 f983 	bl	8002838 <siprintf>
	printmsg(usr_msg);
 8002532:	4806      	ldr	r0, [pc, #24]	; (800254c <EmployeeDoWork+0x30>)
 8002534:	f7ff ff52 	bl	80023dc <printmsg>
	vTaskDelay(pdMS_TO_TICKS(500));
 8002538:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800253c:	f7ff f932 	bl	80017a4 <vTaskDelay>
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	08003158 	.word	0x08003158
 800254c:	200039bc 	.word	0x200039bc

08002550 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002588 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002554:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002556:	e003      	b.n	8002560 <LoopCopyDataInit>

08002558 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002558:	4b0c      	ldr	r3, [pc, #48]	; (800258c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 800255a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800255c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800255e:	3104      	adds	r1, #4

08002560 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002560:	480b      	ldr	r0, [pc, #44]	; (8002590 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8002562:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8002564:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002566:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002568:	d3f6      	bcc.n	8002558 <CopyDataInit>
	ldr	r2, =_sbss
 800256a:	4a0b      	ldr	r2, [pc, #44]	; (8002598 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 800256c:	e002      	b.n	8002574 <LoopFillZerobss>

0800256e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800256e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002570:	f842 3b04 	str.w	r3, [r2], #4

08002574 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002574:	4b09      	ldr	r3, [pc, #36]	; (800259c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8002576:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002578:	d3f9      	bcc.n	800256e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800257a:	f000 f831 	bl	80025e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800257e:	f000 f8e9 	bl	8002754 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002582:	f7ff fe3d 	bl	8002200 <main>
	bx	lr
 8002586:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002588:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 800258c:	080031c0 	.word	0x080031c0
	ldr	r0, =_sdata
 8002590:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002594:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8002598:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 800259c:	20003a9c 	.word	0x20003a9c

080025a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025a0:	e7fe      	b.n	80025a0 <ADC1_2_IRQHandler>
	...

080025a4 <_sbrk>:
	errno = ENOSYS;
	return -1;
}

void * _sbrk(int32_t incr)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 80025ac:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <_sbrk+0x34>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d102      	bne.n	80025ba <_sbrk+0x16>
		heap_end = & end;
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <_sbrk+0x34>)
 80025b6:	4a09      	ldr	r2, [pc, #36]	; (80025dc <_sbrk+0x38>)
 80025b8:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 80025ba:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <_sbrk+0x34>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <_sbrk+0x34>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4413      	add	r3, r2
 80025c8:	4a03      	ldr	r2, [pc, #12]	; (80025d8 <_sbrk+0x34>)
 80025ca:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 80025cc:	68fb      	ldr	r3, [r7, #12]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	20003a84 	.word	0x20003a84
 80025dc:	20003a9c 	.word	0x20003a9c

080025e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80025e4:	4a15      	ldr	r2, [pc, #84]	; (800263c <SystemInit+0x5c>)
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <SystemInit+0x5c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80025f0:	4912      	ldr	r1, [pc, #72]	; (800263c <SystemInit+0x5c>)
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <SystemInit+0x5c>)
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	4b12      	ldr	r3, [pc, #72]	; (8002640 <SystemInit+0x60>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80025fc:	4a0f      	ldr	r2, [pc, #60]	; (800263c <SystemInit+0x5c>)
 80025fe:	4b0f      	ldr	r3, [pc, #60]	; (800263c <SystemInit+0x5c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800260a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800260c:	4a0b      	ldr	r2, [pc, #44]	; (800263c <SystemInit+0x5c>)
 800260e:	4b0b      	ldr	r3, [pc, #44]	; (800263c <SystemInit+0x5c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002616:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002618:	4a08      	ldr	r2, [pc, #32]	; (800263c <SystemInit+0x5c>)
 800261a:	4b08      	ldr	r3, [pc, #32]	; (800263c <SystemInit+0x5c>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002622:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <SystemInit+0x5c>)
 8002626:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800262a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800262c:	f000 f80c 	bl	8002648 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002630:	4b04      	ldr	r3, [pc, #16]	; (8002644 <SystemInit+0x64>)
 8002632:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002636:	609a      	str	r2, [r3, #8]
#endif 
}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000
 8002640:	f8ff0000 	.word	0xf8ff0000
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800264c:	f000 f802 	bl	8002654 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}

08002654 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	607b      	str	r3, [r7, #4]
 800265e:	2300      	movs	r3, #0
 8002660:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002662:	4a3a      	ldr	r2, [pc, #232]	; (800274c <SetSysClockTo72+0xf8>)
 8002664:	4b39      	ldr	r3, [pc, #228]	; (800274c <SetSysClockTo72+0xf8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800266c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800266e:	4b37      	ldr	r3, [pc, #220]	; (800274c <SetSysClockTo72+0xf8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3301      	adds	r3, #1
 800267c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d103      	bne.n	800268c <SetSysClockTo72+0x38>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800268a:	d1f0      	bne.n	800266e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800268c:	4b2f      	ldr	r3, [pc, #188]	; (800274c <SetSysClockTo72+0xf8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002698:	2301      	movs	r3, #1
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	e001      	b.n	80026a2 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800269e:	2300      	movs	r3, #0
 80026a0:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d14b      	bne.n	8002740 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80026a8:	4a29      	ldr	r2, [pc, #164]	; (8002750 <SetSysClockTo72+0xfc>)
 80026aa:	4b29      	ldr	r3, [pc, #164]	; (8002750 <SetSysClockTo72+0xfc>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f043 0310 	orr.w	r3, r3, #16
 80026b2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80026b4:	4a26      	ldr	r2, [pc, #152]	; (8002750 <SetSysClockTo72+0xfc>)
 80026b6:	4b26      	ldr	r3, [pc, #152]	; (8002750 <SetSysClockTo72+0xfc>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 0303 	bic.w	r3, r3, #3
 80026be:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80026c0:	4a23      	ldr	r2, [pc, #140]	; (8002750 <SetSysClockTo72+0xfc>)
 80026c2:	4b23      	ldr	r3, [pc, #140]	; (8002750 <SetSysClockTo72+0xfc>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f043 0302 	orr.w	r3, r3, #2
 80026ca:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80026cc:	4a1f      	ldr	r2, [pc, #124]	; (800274c <SetSysClockTo72+0xf8>)
 80026ce:	4b1f      	ldr	r3, [pc, #124]	; (800274c <SetSysClockTo72+0xf8>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80026d4:	4a1d      	ldr	r2, [pc, #116]	; (800274c <SetSysClockTo72+0xf8>)
 80026d6:	4b1d      	ldr	r3, [pc, #116]	; (800274c <SetSysClockTo72+0xf8>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80026dc:	4a1b      	ldr	r2, [pc, #108]	; (800274c <SetSysClockTo72+0xf8>)
 80026de:	4b1b      	ldr	r3, [pc, #108]	; (800274c <SetSysClockTo72+0xf8>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026e6:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80026e8:	4a18      	ldr	r2, [pc, #96]	; (800274c <SetSysClockTo72+0xf8>)
 80026ea:	4b18      	ldr	r3, [pc, #96]	; (800274c <SetSysClockTo72+0xf8>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80026f2:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80026f4:	4a15      	ldr	r2, [pc, #84]	; (800274c <SetSysClockTo72+0xf8>)
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <SetSysClockTo72+0xf8>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80026fe:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002700:	4a12      	ldr	r2, [pc, #72]	; (800274c <SetSysClockTo72+0xf8>)
 8002702:	4b12      	ldr	r3, [pc, #72]	; (800274c <SetSysClockTo72+0xf8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800270a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800270c:	bf00      	nop
 800270e:	4b0f      	ldr	r3, [pc, #60]	; (800274c <SetSysClockTo72+0xf8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f9      	beq.n	800270e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800271a:	4a0c      	ldr	r2, [pc, #48]	; (800274c <SetSysClockTo72+0xf8>)
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <SetSysClockTo72+0xf8>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f023 0303 	bic.w	r3, r3, #3
 8002724:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8002726:	4a09      	ldr	r2, [pc, #36]	; (800274c <SetSysClockTo72+0xf8>)
 8002728:	4b08      	ldr	r3, [pc, #32]	; (800274c <SetSysClockTo72+0xf8>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f043 0302 	orr.w	r3, r3, #2
 8002730:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8002732:	bf00      	nop
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <SetSysClockTo72+0xf8>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 030c 	and.w	r3, r3, #12
 800273c:	2b08      	cmp	r3, #8
 800273e:	d1f9      	bne.n	8002734 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
 8002750:	40022000 	.word	0x40022000

08002754 <__libc_init_array>:
 8002754:	b570      	push	{r4, r5, r6, lr}
 8002756:	2500      	movs	r5, #0
 8002758:	4e0c      	ldr	r6, [pc, #48]	; (800278c <__libc_init_array+0x38>)
 800275a:	4c0d      	ldr	r4, [pc, #52]	; (8002790 <__libc_init_array+0x3c>)
 800275c:	1ba4      	subs	r4, r4, r6
 800275e:	10a4      	asrs	r4, r4, #2
 8002760:	42a5      	cmp	r5, r4
 8002762:	d109      	bne.n	8002778 <__libc_init_array+0x24>
 8002764:	f000 fc90 	bl	8003088 <_init>
 8002768:	2500      	movs	r5, #0
 800276a:	4e0a      	ldr	r6, [pc, #40]	; (8002794 <__libc_init_array+0x40>)
 800276c:	4c0a      	ldr	r4, [pc, #40]	; (8002798 <__libc_init_array+0x44>)
 800276e:	1ba4      	subs	r4, r4, r6
 8002770:	10a4      	asrs	r4, r4, #2
 8002772:	42a5      	cmp	r5, r4
 8002774:	d105      	bne.n	8002782 <__libc_init_array+0x2e>
 8002776:	bd70      	pop	{r4, r5, r6, pc}
 8002778:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800277c:	4798      	blx	r3
 800277e:	3501      	adds	r5, #1
 8002780:	e7ee      	b.n	8002760 <__libc_init_array+0xc>
 8002782:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002786:	4798      	blx	r3
 8002788:	3501      	adds	r5, #1
 800278a:	e7f2      	b.n	8002772 <__libc_init_array+0x1e>
 800278c:	080031b8 	.word	0x080031b8
 8002790:	080031b8 	.word	0x080031b8
 8002794:	080031b8 	.word	0x080031b8
 8002798:	080031bc 	.word	0x080031bc

0800279c <memcpy>:
 800279c:	b510      	push	{r4, lr}
 800279e:	1e43      	subs	r3, r0, #1
 80027a0:	440a      	add	r2, r1
 80027a2:	4291      	cmp	r1, r2
 80027a4:	d100      	bne.n	80027a8 <memcpy+0xc>
 80027a6:	bd10      	pop	{r4, pc}
 80027a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80027ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80027b0:	e7f7      	b.n	80027a2 <memcpy+0x6>

080027b2 <memset>:
 80027b2:	4603      	mov	r3, r0
 80027b4:	4402      	add	r2, r0
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d100      	bne.n	80027bc <memset+0xa>
 80027ba:	4770      	bx	lr
 80027bc:	f803 1b01 	strb.w	r1, [r3], #1
 80027c0:	e7f9      	b.n	80027b6 <memset+0x4>
	...

080027c4 <rand>:
 80027c4:	4b19      	ldr	r3, [pc, #100]	; (800282c <rand+0x68>)
 80027c6:	b510      	push	{r4, lr}
 80027c8:	681c      	ldr	r4, [r3, #0]
 80027ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027cc:	b9d3      	cbnz	r3, 8002804 <rand+0x40>
 80027ce:	2018      	movs	r0, #24
 80027d0:	f000 f856 	bl	8002880 <malloc>
 80027d4:	f243 330e 	movw	r3, #13070	; 0x330e
 80027d8:	63a0      	str	r0, [r4, #56]	; 0x38
 80027da:	8003      	strh	r3, [r0, #0]
 80027dc:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80027e0:	8043      	strh	r3, [r0, #2]
 80027e2:	f241 2334 	movw	r3, #4660	; 0x1234
 80027e6:	8083      	strh	r3, [r0, #4]
 80027e8:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80027ec:	80c3      	strh	r3, [r0, #6]
 80027ee:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80027f2:	8103      	strh	r3, [r0, #8]
 80027f4:	2305      	movs	r3, #5
 80027f6:	8143      	strh	r3, [r0, #10]
 80027f8:	230b      	movs	r3, #11
 80027fa:	2201      	movs	r2, #1
 80027fc:	8183      	strh	r3, [r0, #12]
 80027fe:	2300      	movs	r3, #0
 8002800:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002804:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002806:	480a      	ldr	r0, [pc, #40]	; (8002830 <rand+0x6c>)
 8002808:	690a      	ldr	r2, [r1, #16]
 800280a:	694b      	ldr	r3, [r1, #20]
 800280c:	4350      	muls	r0, r2
 800280e:	4c09      	ldr	r4, [pc, #36]	; (8002834 <rand+0x70>)
 8002810:	fb04 0003 	mla	r0, r4, r3, r0
 8002814:	fba2 2304 	umull	r2, r3, r2, r4
 8002818:	3201      	adds	r2, #1
 800281a:	4403      	add	r3, r0
 800281c:	f143 0300 	adc.w	r3, r3, #0
 8002820:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002824:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8002828:	bd10      	pop	{r4, pc}
 800282a:	bf00      	nop
 800282c:	20000018 	.word	0x20000018
 8002830:	5851f42d 	.word	0x5851f42d
 8002834:	4c957f2d 	.word	0x4c957f2d

08002838 <siprintf>:
 8002838:	b40e      	push	{r1, r2, r3}
 800283a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800283e:	b500      	push	{lr}
 8002840:	b09c      	sub	sp, #112	; 0x70
 8002842:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002846:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800284a:	9104      	str	r1, [sp, #16]
 800284c:	9107      	str	r1, [sp, #28]
 800284e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002852:	ab1d      	add	r3, sp, #116	; 0x74
 8002854:	9002      	str	r0, [sp, #8]
 8002856:	9006      	str	r0, [sp, #24]
 8002858:	4808      	ldr	r0, [pc, #32]	; (800287c <siprintf+0x44>)
 800285a:	f853 2b04 	ldr.w	r2, [r3], #4
 800285e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002862:	6800      	ldr	r0, [r0, #0]
 8002864:	a902      	add	r1, sp, #8
 8002866:	9301      	str	r3, [sp, #4]
 8002868:	f000 f918 	bl	8002a9c <_svfiprintf_r>
 800286c:	2200      	movs	r2, #0
 800286e:	9b02      	ldr	r3, [sp, #8]
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	b01c      	add	sp, #112	; 0x70
 8002874:	f85d eb04 	ldr.w	lr, [sp], #4
 8002878:	b003      	add	sp, #12
 800287a:	4770      	bx	lr
 800287c:	20000018 	.word	0x20000018

08002880 <malloc>:
 8002880:	4b02      	ldr	r3, [pc, #8]	; (800288c <malloc+0xc>)
 8002882:	4601      	mov	r1, r0
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	f000 b84f 	b.w	8002928 <_malloc_r>
 800288a:	bf00      	nop
 800288c:	20000018 	.word	0x20000018

08002890 <_free_r>:
 8002890:	b538      	push	{r3, r4, r5, lr}
 8002892:	4605      	mov	r5, r0
 8002894:	2900      	cmp	r1, #0
 8002896:	d043      	beq.n	8002920 <_free_r+0x90>
 8002898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800289c:	1f0c      	subs	r4, r1, #4
 800289e:	2b00      	cmp	r3, #0
 80028a0:	bfb8      	it	lt
 80028a2:	18e4      	addlt	r4, r4, r3
 80028a4:	f000 fbbe 	bl	8003024 <__malloc_lock>
 80028a8:	4a1e      	ldr	r2, [pc, #120]	; (8002924 <_free_r+0x94>)
 80028aa:	6813      	ldr	r3, [r2, #0]
 80028ac:	4610      	mov	r0, r2
 80028ae:	b933      	cbnz	r3, 80028be <_free_r+0x2e>
 80028b0:	6063      	str	r3, [r4, #4]
 80028b2:	6014      	str	r4, [r2, #0]
 80028b4:	4628      	mov	r0, r5
 80028b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028ba:	f000 bbb4 	b.w	8003026 <__malloc_unlock>
 80028be:	42a3      	cmp	r3, r4
 80028c0:	d90b      	bls.n	80028da <_free_r+0x4a>
 80028c2:	6821      	ldr	r1, [r4, #0]
 80028c4:	1862      	adds	r2, r4, r1
 80028c6:	4293      	cmp	r3, r2
 80028c8:	bf01      	itttt	eq
 80028ca:	681a      	ldreq	r2, [r3, #0]
 80028cc:	685b      	ldreq	r3, [r3, #4]
 80028ce:	1852      	addeq	r2, r2, r1
 80028d0:	6022      	streq	r2, [r4, #0]
 80028d2:	6063      	str	r3, [r4, #4]
 80028d4:	6004      	str	r4, [r0, #0]
 80028d6:	e7ed      	b.n	80028b4 <_free_r+0x24>
 80028d8:	4613      	mov	r3, r2
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	b10a      	cbz	r2, 80028e2 <_free_r+0x52>
 80028de:	42a2      	cmp	r2, r4
 80028e0:	d9fa      	bls.n	80028d8 <_free_r+0x48>
 80028e2:	6819      	ldr	r1, [r3, #0]
 80028e4:	1858      	adds	r0, r3, r1
 80028e6:	42a0      	cmp	r0, r4
 80028e8:	d10b      	bne.n	8002902 <_free_r+0x72>
 80028ea:	6820      	ldr	r0, [r4, #0]
 80028ec:	4401      	add	r1, r0
 80028ee:	1858      	adds	r0, r3, r1
 80028f0:	4282      	cmp	r2, r0
 80028f2:	6019      	str	r1, [r3, #0]
 80028f4:	d1de      	bne.n	80028b4 <_free_r+0x24>
 80028f6:	6810      	ldr	r0, [r2, #0]
 80028f8:	6852      	ldr	r2, [r2, #4]
 80028fa:	4401      	add	r1, r0
 80028fc:	6019      	str	r1, [r3, #0]
 80028fe:	605a      	str	r2, [r3, #4]
 8002900:	e7d8      	b.n	80028b4 <_free_r+0x24>
 8002902:	d902      	bls.n	800290a <_free_r+0x7a>
 8002904:	230c      	movs	r3, #12
 8002906:	602b      	str	r3, [r5, #0]
 8002908:	e7d4      	b.n	80028b4 <_free_r+0x24>
 800290a:	6820      	ldr	r0, [r4, #0]
 800290c:	1821      	adds	r1, r4, r0
 800290e:	428a      	cmp	r2, r1
 8002910:	bf01      	itttt	eq
 8002912:	6811      	ldreq	r1, [r2, #0]
 8002914:	6852      	ldreq	r2, [r2, #4]
 8002916:	1809      	addeq	r1, r1, r0
 8002918:	6021      	streq	r1, [r4, #0]
 800291a:	6062      	str	r2, [r4, #4]
 800291c:	605c      	str	r4, [r3, #4]
 800291e:	e7c9      	b.n	80028b4 <_free_r+0x24>
 8002920:	bd38      	pop	{r3, r4, r5, pc}
 8002922:	bf00      	nop
 8002924:	20003a88 	.word	0x20003a88

08002928 <_malloc_r>:
 8002928:	b570      	push	{r4, r5, r6, lr}
 800292a:	1ccd      	adds	r5, r1, #3
 800292c:	f025 0503 	bic.w	r5, r5, #3
 8002930:	3508      	adds	r5, #8
 8002932:	2d0c      	cmp	r5, #12
 8002934:	bf38      	it	cc
 8002936:	250c      	movcc	r5, #12
 8002938:	2d00      	cmp	r5, #0
 800293a:	4606      	mov	r6, r0
 800293c:	db01      	blt.n	8002942 <_malloc_r+0x1a>
 800293e:	42a9      	cmp	r1, r5
 8002940:	d903      	bls.n	800294a <_malloc_r+0x22>
 8002942:	230c      	movs	r3, #12
 8002944:	6033      	str	r3, [r6, #0]
 8002946:	2000      	movs	r0, #0
 8002948:	bd70      	pop	{r4, r5, r6, pc}
 800294a:	f000 fb6b 	bl	8003024 <__malloc_lock>
 800294e:	4a23      	ldr	r2, [pc, #140]	; (80029dc <_malloc_r+0xb4>)
 8002950:	6814      	ldr	r4, [r2, #0]
 8002952:	4621      	mov	r1, r4
 8002954:	b991      	cbnz	r1, 800297c <_malloc_r+0x54>
 8002956:	4c22      	ldr	r4, [pc, #136]	; (80029e0 <_malloc_r+0xb8>)
 8002958:	6823      	ldr	r3, [r4, #0]
 800295a:	b91b      	cbnz	r3, 8002964 <_malloc_r+0x3c>
 800295c:	4630      	mov	r0, r6
 800295e:	f000 fb29 	bl	8002fb4 <_sbrk_r>
 8002962:	6020      	str	r0, [r4, #0]
 8002964:	4629      	mov	r1, r5
 8002966:	4630      	mov	r0, r6
 8002968:	f000 fb24 	bl	8002fb4 <_sbrk_r>
 800296c:	1c43      	adds	r3, r0, #1
 800296e:	d126      	bne.n	80029be <_malloc_r+0x96>
 8002970:	230c      	movs	r3, #12
 8002972:	4630      	mov	r0, r6
 8002974:	6033      	str	r3, [r6, #0]
 8002976:	f000 fb56 	bl	8003026 <__malloc_unlock>
 800297a:	e7e4      	b.n	8002946 <_malloc_r+0x1e>
 800297c:	680b      	ldr	r3, [r1, #0]
 800297e:	1b5b      	subs	r3, r3, r5
 8002980:	d41a      	bmi.n	80029b8 <_malloc_r+0x90>
 8002982:	2b0b      	cmp	r3, #11
 8002984:	d90f      	bls.n	80029a6 <_malloc_r+0x7e>
 8002986:	600b      	str	r3, [r1, #0]
 8002988:	18cc      	adds	r4, r1, r3
 800298a:	50cd      	str	r5, [r1, r3]
 800298c:	4630      	mov	r0, r6
 800298e:	f000 fb4a 	bl	8003026 <__malloc_unlock>
 8002992:	f104 000b 	add.w	r0, r4, #11
 8002996:	1d23      	adds	r3, r4, #4
 8002998:	f020 0007 	bic.w	r0, r0, #7
 800299c:	1ac3      	subs	r3, r0, r3
 800299e:	d01b      	beq.n	80029d8 <_malloc_r+0xb0>
 80029a0:	425a      	negs	r2, r3
 80029a2:	50e2      	str	r2, [r4, r3]
 80029a4:	bd70      	pop	{r4, r5, r6, pc}
 80029a6:	428c      	cmp	r4, r1
 80029a8:	bf0b      	itete	eq
 80029aa:	6863      	ldreq	r3, [r4, #4]
 80029ac:	684b      	ldrne	r3, [r1, #4]
 80029ae:	6013      	streq	r3, [r2, #0]
 80029b0:	6063      	strne	r3, [r4, #4]
 80029b2:	bf18      	it	ne
 80029b4:	460c      	movne	r4, r1
 80029b6:	e7e9      	b.n	800298c <_malloc_r+0x64>
 80029b8:	460c      	mov	r4, r1
 80029ba:	6849      	ldr	r1, [r1, #4]
 80029bc:	e7ca      	b.n	8002954 <_malloc_r+0x2c>
 80029be:	1cc4      	adds	r4, r0, #3
 80029c0:	f024 0403 	bic.w	r4, r4, #3
 80029c4:	42a0      	cmp	r0, r4
 80029c6:	d005      	beq.n	80029d4 <_malloc_r+0xac>
 80029c8:	1a21      	subs	r1, r4, r0
 80029ca:	4630      	mov	r0, r6
 80029cc:	f000 faf2 	bl	8002fb4 <_sbrk_r>
 80029d0:	3001      	adds	r0, #1
 80029d2:	d0cd      	beq.n	8002970 <_malloc_r+0x48>
 80029d4:	6025      	str	r5, [r4, #0]
 80029d6:	e7d9      	b.n	800298c <_malloc_r+0x64>
 80029d8:	bd70      	pop	{r4, r5, r6, pc}
 80029da:	bf00      	nop
 80029dc:	20003a88 	.word	0x20003a88
 80029e0:	20003a8c 	.word	0x20003a8c

080029e4 <__ssputs_r>:
 80029e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029e8:	688e      	ldr	r6, [r1, #8]
 80029ea:	4682      	mov	sl, r0
 80029ec:	429e      	cmp	r6, r3
 80029ee:	460c      	mov	r4, r1
 80029f0:	4691      	mov	r9, r2
 80029f2:	4698      	mov	r8, r3
 80029f4:	d835      	bhi.n	8002a62 <__ssputs_r+0x7e>
 80029f6:	898a      	ldrh	r2, [r1, #12]
 80029f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80029fc:	d031      	beq.n	8002a62 <__ssputs_r+0x7e>
 80029fe:	2302      	movs	r3, #2
 8002a00:	6825      	ldr	r5, [r4, #0]
 8002a02:	6909      	ldr	r1, [r1, #16]
 8002a04:	1a6f      	subs	r7, r5, r1
 8002a06:	6965      	ldr	r5, [r4, #20]
 8002a08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a0c:	fb95 f5f3 	sdiv	r5, r5, r3
 8002a10:	f108 0301 	add.w	r3, r8, #1
 8002a14:	443b      	add	r3, r7
 8002a16:	429d      	cmp	r5, r3
 8002a18:	bf38      	it	cc
 8002a1a:	461d      	movcc	r5, r3
 8002a1c:	0553      	lsls	r3, r2, #21
 8002a1e:	d531      	bpl.n	8002a84 <__ssputs_r+0xa0>
 8002a20:	4629      	mov	r1, r5
 8002a22:	f7ff ff81 	bl	8002928 <_malloc_r>
 8002a26:	4606      	mov	r6, r0
 8002a28:	b950      	cbnz	r0, 8002a40 <__ssputs_r+0x5c>
 8002a2a:	230c      	movs	r3, #12
 8002a2c:	f8ca 3000 	str.w	r3, [sl]
 8002a30:	89a3      	ldrh	r3, [r4, #12]
 8002a32:	f04f 30ff 	mov.w	r0, #4294967295
 8002a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a3a:	81a3      	strh	r3, [r4, #12]
 8002a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a40:	463a      	mov	r2, r7
 8002a42:	6921      	ldr	r1, [r4, #16]
 8002a44:	f7ff feaa 	bl	800279c <memcpy>
 8002a48:	89a3      	ldrh	r3, [r4, #12]
 8002a4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a52:	81a3      	strh	r3, [r4, #12]
 8002a54:	6126      	str	r6, [r4, #16]
 8002a56:	443e      	add	r6, r7
 8002a58:	6026      	str	r6, [r4, #0]
 8002a5a:	4646      	mov	r6, r8
 8002a5c:	6165      	str	r5, [r4, #20]
 8002a5e:	1bed      	subs	r5, r5, r7
 8002a60:	60a5      	str	r5, [r4, #8]
 8002a62:	4546      	cmp	r6, r8
 8002a64:	bf28      	it	cs
 8002a66:	4646      	movcs	r6, r8
 8002a68:	4649      	mov	r1, r9
 8002a6a:	4632      	mov	r2, r6
 8002a6c:	6820      	ldr	r0, [r4, #0]
 8002a6e:	f000 fabf 	bl	8002ff0 <memmove>
 8002a72:	68a3      	ldr	r3, [r4, #8]
 8002a74:	2000      	movs	r0, #0
 8002a76:	1b9b      	subs	r3, r3, r6
 8002a78:	60a3      	str	r3, [r4, #8]
 8002a7a:	6823      	ldr	r3, [r4, #0]
 8002a7c:	441e      	add	r6, r3
 8002a7e:	6026      	str	r6, [r4, #0]
 8002a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a84:	462a      	mov	r2, r5
 8002a86:	f000 facf 	bl	8003028 <_realloc_r>
 8002a8a:	4606      	mov	r6, r0
 8002a8c:	2800      	cmp	r0, #0
 8002a8e:	d1e1      	bne.n	8002a54 <__ssputs_r+0x70>
 8002a90:	6921      	ldr	r1, [r4, #16]
 8002a92:	4650      	mov	r0, sl
 8002a94:	f7ff fefc 	bl	8002890 <_free_r>
 8002a98:	e7c7      	b.n	8002a2a <__ssputs_r+0x46>
	...

08002a9c <_svfiprintf_r>:
 8002a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aa0:	b09d      	sub	sp, #116	; 0x74
 8002aa2:	9303      	str	r3, [sp, #12]
 8002aa4:	898b      	ldrh	r3, [r1, #12]
 8002aa6:	4680      	mov	r8, r0
 8002aa8:	061c      	lsls	r4, r3, #24
 8002aaa:	460d      	mov	r5, r1
 8002aac:	4616      	mov	r6, r2
 8002aae:	d50f      	bpl.n	8002ad0 <_svfiprintf_r+0x34>
 8002ab0:	690b      	ldr	r3, [r1, #16]
 8002ab2:	b96b      	cbnz	r3, 8002ad0 <_svfiprintf_r+0x34>
 8002ab4:	2140      	movs	r1, #64	; 0x40
 8002ab6:	f7ff ff37 	bl	8002928 <_malloc_r>
 8002aba:	6028      	str	r0, [r5, #0]
 8002abc:	6128      	str	r0, [r5, #16]
 8002abe:	b928      	cbnz	r0, 8002acc <_svfiprintf_r+0x30>
 8002ac0:	230c      	movs	r3, #12
 8002ac2:	f8c8 3000 	str.w	r3, [r8]
 8002ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8002aca:	e0c4      	b.n	8002c56 <_svfiprintf_r+0x1ba>
 8002acc:	2340      	movs	r3, #64	; 0x40
 8002ace:	616b      	str	r3, [r5, #20]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8002ad4:	2320      	movs	r3, #32
 8002ad6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ada:	2330      	movs	r3, #48	; 0x30
 8002adc:	f04f 0b01 	mov.w	fp, #1
 8002ae0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ae4:	4637      	mov	r7, r6
 8002ae6:	463c      	mov	r4, r7
 8002ae8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d13c      	bne.n	8002b6a <_svfiprintf_r+0xce>
 8002af0:	ebb7 0a06 	subs.w	sl, r7, r6
 8002af4:	d00b      	beq.n	8002b0e <_svfiprintf_r+0x72>
 8002af6:	4653      	mov	r3, sl
 8002af8:	4632      	mov	r2, r6
 8002afa:	4629      	mov	r1, r5
 8002afc:	4640      	mov	r0, r8
 8002afe:	f7ff ff71 	bl	80029e4 <__ssputs_r>
 8002b02:	3001      	adds	r0, #1
 8002b04:	f000 80a2 	beq.w	8002c4c <_svfiprintf_r+0x1b0>
 8002b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b0a:	4453      	add	r3, sl
 8002b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8002b0e:	783b      	ldrb	r3, [r7, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 809b 	beq.w	8002c4c <_svfiprintf_r+0x1b0>
 8002b16:	2300      	movs	r3, #0
 8002b18:	f04f 32ff 	mov.w	r2, #4294967295
 8002b1c:	9304      	str	r3, [sp, #16]
 8002b1e:	9307      	str	r3, [sp, #28]
 8002b20:	9205      	str	r2, [sp, #20]
 8002b22:	9306      	str	r3, [sp, #24]
 8002b24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b28:	931a      	str	r3, [sp, #104]	; 0x68
 8002b2a:	2205      	movs	r2, #5
 8002b2c:	7821      	ldrb	r1, [r4, #0]
 8002b2e:	4850      	ldr	r0, [pc, #320]	; (8002c70 <_svfiprintf_r+0x1d4>)
 8002b30:	f000 fa50 	bl	8002fd4 <memchr>
 8002b34:	1c67      	adds	r7, r4, #1
 8002b36:	9b04      	ldr	r3, [sp, #16]
 8002b38:	b9d8      	cbnz	r0, 8002b72 <_svfiprintf_r+0xd6>
 8002b3a:	06d9      	lsls	r1, r3, #27
 8002b3c:	bf44      	itt	mi
 8002b3e:	2220      	movmi	r2, #32
 8002b40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b44:	071a      	lsls	r2, r3, #28
 8002b46:	bf44      	itt	mi
 8002b48:	222b      	movmi	r2, #43	; 0x2b
 8002b4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b4e:	7822      	ldrb	r2, [r4, #0]
 8002b50:	2a2a      	cmp	r2, #42	; 0x2a
 8002b52:	d016      	beq.n	8002b82 <_svfiprintf_r+0xe6>
 8002b54:	2100      	movs	r1, #0
 8002b56:	200a      	movs	r0, #10
 8002b58:	9a07      	ldr	r2, [sp, #28]
 8002b5a:	4627      	mov	r7, r4
 8002b5c:	783b      	ldrb	r3, [r7, #0]
 8002b5e:	3401      	adds	r4, #1
 8002b60:	3b30      	subs	r3, #48	; 0x30
 8002b62:	2b09      	cmp	r3, #9
 8002b64:	d950      	bls.n	8002c08 <_svfiprintf_r+0x16c>
 8002b66:	b1c9      	cbz	r1, 8002b9c <_svfiprintf_r+0x100>
 8002b68:	e011      	b.n	8002b8e <_svfiprintf_r+0xf2>
 8002b6a:	2b25      	cmp	r3, #37	; 0x25
 8002b6c:	d0c0      	beq.n	8002af0 <_svfiprintf_r+0x54>
 8002b6e:	4627      	mov	r7, r4
 8002b70:	e7b9      	b.n	8002ae6 <_svfiprintf_r+0x4a>
 8002b72:	4a3f      	ldr	r2, [pc, #252]	; (8002c70 <_svfiprintf_r+0x1d4>)
 8002b74:	463c      	mov	r4, r7
 8002b76:	1a80      	subs	r0, r0, r2
 8002b78:	fa0b f000 	lsl.w	r0, fp, r0
 8002b7c:	4318      	orrs	r0, r3
 8002b7e:	9004      	str	r0, [sp, #16]
 8002b80:	e7d3      	b.n	8002b2a <_svfiprintf_r+0x8e>
 8002b82:	9a03      	ldr	r2, [sp, #12]
 8002b84:	1d11      	adds	r1, r2, #4
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	9103      	str	r1, [sp, #12]
 8002b8a:	2a00      	cmp	r2, #0
 8002b8c:	db01      	blt.n	8002b92 <_svfiprintf_r+0xf6>
 8002b8e:	9207      	str	r2, [sp, #28]
 8002b90:	e004      	b.n	8002b9c <_svfiprintf_r+0x100>
 8002b92:	4252      	negs	r2, r2
 8002b94:	f043 0302 	orr.w	r3, r3, #2
 8002b98:	9207      	str	r2, [sp, #28]
 8002b9a:	9304      	str	r3, [sp, #16]
 8002b9c:	783b      	ldrb	r3, [r7, #0]
 8002b9e:	2b2e      	cmp	r3, #46	; 0x2e
 8002ba0:	d10d      	bne.n	8002bbe <_svfiprintf_r+0x122>
 8002ba2:	787b      	ldrb	r3, [r7, #1]
 8002ba4:	1c79      	adds	r1, r7, #1
 8002ba6:	2b2a      	cmp	r3, #42	; 0x2a
 8002ba8:	d132      	bne.n	8002c10 <_svfiprintf_r+0x174>
 8002baa:	9b03      	ldr	r3, [sp, #12]
 8002bac:	3702      	adds	r7, #2
 8002bae:	1d1a      	adds	r2, r3, #4
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	9203      	str	r2, [sp, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	bfb8      	it	lt
 8002bb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8002bbc:	9305      	str	r3, [sp, #20]
 8002bbe:	4c2d      	ldr	r4, [pc, #180]	; (8002c74 <_svfiprintf_r+0x1d8>)
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	7839      	ldrb	r1, [r7, #0]
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f000 fa05 	bl	8002fd4 <memchr>
 8002bca:	b138      	cbz	r0, 8002bdc <_svfiprintf_r+0x140>
 8002bcc:	2340      	movs	r3, #64	; 0x40
 8002bce:	1b00      	subs	r0, r0, r4
 8002bd0:	fa03 f000 	lsl.w	r0, r3, r0
 8002bd4:	9b04      	ldr	r3, [sp, #16]
 8002bd6:	3701      	adds	r7, #1
 8002bd8:	4303      	orrs	r3, r0
 8002bda:	9304      	str	r3, [sp, #16]
 8002bdc:	7839      	ldrb	r1, [r7, #0]
 8002bde:	2206      	movs	r2, #6
 8002be0:	4825      	ldr	r0, [pc, #148]	; (8002c78 <_svfiprintf_r+0x1dc>)
 8002be2:	1c7e      	adds	r6, r7, #1
 8002be4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002be8:	f000 f9f4 	bl	8002fd4 <memchr>
 8002bec:	2800      	cmp	r0, #0
 8002bee:	d035      	beq.n	8002c5c <_svfiprintf_r+0x1c0>
 8002bf0:	4b22      	ldr	r3, [pc, #136]	; (8002c7c <_svfiprintf_r+0x1e0>)
 8002bf2:	b9fb      	cbnz	r3, 8002c34 <_svfiprintf_r+0x198>
 8002bf4:	9b03      	ldr	r3, [sp, #12]
 8002bf6:	3307      	adds	r3, #7
 8002bf8:	f023 0307 	bic.w	r3, r3, #7
 8002bfc:	3308      	adds	r3, #8
 8002bfe:	9303      	str	r3, [sp, #12]
 8002c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c02:	444b      	add	r3, r9
 8002c04:	9309      	str	r3, [sp, #36]	; 0x24
 8002c06:	e76d      	b.n	8002ae4 <_svfiprintf_r+0x48>
 8002c08:	fb00 3202 	mla	r2, r0, r2, r3
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	e7a4      	b.n	8002b5a <_svfiprintf_r+0xbe>
 8002c10:	2300      	movs	r3, #0
 8002c12:	240a      	movs	r4, #10
 8002c14:	4618      	mov	r0, r3
 8002c16:	9305      	str	r3, [sp, #20]
 8002c18:	460f      	mov	r7, r1
 8002c1a:	783a      	ldrb	r2, [r7, #0]
 8002c1c:	3101      	adds	r1, #1
 8002c1e:	3a30      	subs	r2, #48	; 0x30
 8002c20:	2a09      	cmp	r2, #9
 8002c22:	d903      	bls.n	8002c2c <_svfiprintf_r+0x190>
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0ca      	beq.n	8002bbe <_svfiprintf_r+0x122>
 8002c28:	9005      	str	r0, [sp, #20]
 8002c2a:	e7c8      	b.n	8002bbe <_svfiprintf_r+0x122>
 8002c2c:	fb04 2000 	mla	r0, r4, r0, r2
 8002c30:	2301      	movs	r3, #1
 8002c32:	e7f1      	b.n	8002c18 <_svfiprintf_r+0x17c>
 8002c34:	ab03      	add	r3, sp, #12
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	462a      	mov	r2, r5
 8002c3a:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <_svfiprintf_r+0x1e4>)
 8002c3c:	a904      	add	r1, sp, #16
 8002c3e:	4640      	mov	r0, r8
 8002c40:	f3af 8000 	nop.w
 8002c44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002c48:	4681      	mov	r9, r0
 8002c4a:	d1d9      	bne.n	8002c00 <_svfiprintf_r+0x164>
 8002c4c:	89ab      	ldrh	r3, [r5, #12]
 8002c4e:	065b      	lsls	r3, r3, #25
 8002c50:	f53f af39 	bmi.w	8002ac6 <_svfiprintf_r+0x2a>
 8002c54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c56:	b01d      	add	sp, #116	; 0x74
 8002c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c5c:	ab03      	add	r3, sp, #12
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	462a      	mov	r2, r5
 8002c62:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <_svfiprintf_r+0x1e4>)
 8002c64:	a904      	add	r1, sp, #16
 8002c66:	4640      	mov	r0, r8
 8002c68:	f000 f884 	bl	8002d74 <_printf_i>
 8002c6c:	e7ea      	b.n	8002c44 <_svfiprintf_r+0x1a8>
 8002c6e:	bf00      	nop
 8002c70:	08003184 	.word	0x08003184
 8002c74:	0800318a 	.word	0x0800318a
 8002c78:	0800318e 	.word	0x0800318e
 8002c7c:	00000000 	.word	0x00000000
 8002c80:	080029e5 	.word	0x080029e5

08002c84 <_printf_common>:
 8002c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c88:	4691      	mov	r9, r2
 8002c8a:	461f      	mov	r7, r3
 8002c8c:	688a      	ldr	r2, [r1, #8]
 8002c8e:	690b      	ldr	r3, [r1, #16]
 8002c90:	4606      	mov	r6, r0
 8002c92:	4293      	cmp	r3, r2
 8002c94:	bfb8      	it	lt
 8002c96:	4613      	movlt	r3, r2
 8002c98:	f8c9 3000 	str.w	r3, [r9]
 8002c9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ca0:	460c      	mov	r4, r1
 8002ca2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ca6:	b112      	cbz	r2, 8002cae <_printf_common+0x2a>
 8002ca8:	3301      	adds	r3, #1
 8002caa:	f8c9 3000 	str.w	r3, [r9]
 8002cae:	6823      	ldr	r3, [r4, #0]
 8002cb0:	0699      	lsls	r1, r3, #26
 8002cb2:	bf42      	ittt	mi
 8002cb4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002cb8:	3302      	addmi	r3, #2
 8002cba:	f8c9 3000 	strmi.w	r3, [r9]
 8002cbe:	6825      	ldr	r5, [r4, #0]
 8002cc0:	f015 0506 	ands.w	r5, r5, #6
 8002cc4:	d107      	bne.n	8002cd6 <_printf_common+0x52>
 8002cc6:	f104 0a19 	add.w	sl, r4, #25
 8002cca:	68e3      	ldr	r3, [r4, #12]
 8002ccc:	f8d9 2000 	ldr.w	r2, [r9]
 8002cd0:	1a9b      	subs	r3, r3, r2
 8002cd2:	429d      	cmp	r5, r3
 8002cd4:	db2a      	blt.n	8002d2c <_printf_common+0xa8>
 8002cd6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002cda:	6822      	ldr	r2, [r4, #0]
 8002cdc:	3300      	adds	r3, #0
 8002cde:	bf18      	it	ne
 8002ce0:	2301      	movne	r3, #1
 8002ce2:	0692      	lsls	r2, r2, #26
 8002ce4:	d42f      	bmi.n	8002d46 <_printf_common+0xc2>
 8002ce6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cea:	4639      	mov	r1, r7
 8002cec:	4630      	mov	r0, r6
 8002cee:	47c0      	blx	r8
 8002cf0:	3001      	adds	r0, #1
 8002cf2:	d022      	beq.n	8002d3a <_printf_common+0xb6>
 8002cf4:	6823      	ldr	r3, [r4, #0]
 8002cf6:	68e5      	ldr	r5, [r4, #12]
 8002cf8:	f003 0306 	and.w	r3, r3, #6
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	bf18      	it	ne
 8002d00:	2500      	movne	r5, #0
 8002d02:	f8d9 2000 	ldr.w	r2, [r9]
 8002d06:	f04f 0900 	mov.w	r9, #0
 8002d0a:	bf08      	it	eq
 8002d0c:	1aad      	subeq	r5, r5, r2
 8002d0e:	68a3      	ldr	r3, [r4, #8]
 8002d10:	6922      	ldr	r2, [r4, #16]
 8002d12:	bf08      	it	eq
 8002d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	bfc4      	itt	gt
 8002d1c:	1a9b      	subgt	r3, r3, r2
 8002d1e:	18ed      	addgt	r5, r5, r3
 8002d20:	341a      	adds	r4, #26
 8002d22:	454d      	cmp	r5, r9
 8002d24:	d11b      	bne.n	8002d5e <_printf_common+0xda>
 8002d26:	2000      	movs	r0, #0
 8002d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	4652      	mov	r2, sl
 8002d30:	4639      	mov	r1, r7
 8002d32:	4630      	mov	r0, r6
 8002d34:	47c0      	blx	r8
 8002d36:	3001      	adds	r0, #1
 8002d38:	d103      	bne.n	8002d42 <_printf_common+0xbe>
 8002d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d42:	3501      	adds	r5, #1
 8002d44:	e7c1      	b.n	8002cca <_printf_common+0x46>
 8002d46:	2030      	movs	r0, #48	; 0x30
 8002d48:	18e1      	adds	r1, r4, r3
 8002d4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d54:	4422      	add	r2, r4
 8002d56:	3302      	adds	r3, #2
 8002d58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d5c:	e7c3      	b.n	8002ce6 <_printf_common+0x62>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	4622      	mov	r2, r4
 8002d62:	4639      	mov	r1, r7
 8002d64:	4630      	mov	r0, r6
 8002d66:	47c0      	blx	r8
 8002d68:	3001      	adds	r0, #1
 8002d6a:	d0e6      	beq.n	8002d3a <_printf_common+0xb6>
 8002d6c:	f109 0901 	add.w	r9, r9, #1
 8002d70:	e7d7      	b.n	8002d22 <_printf_common+0x9e>
	...

08002d74 <_printf_i>:
 8002d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d78:	4617      	mov	r7, r2
 8002d7a:	7e0a      	ldrb	r2, [r1, #24]
 8002d7c:	b085      	sub	sp, #20
 8002d7e:	2a6e      	cmp	r2, #110	; 0x6e
 8002d80:	4698      	mov	r8, r3
 8002d82:	4606      	mov	r6, r0
 8002d84:	460c      	mov	r4, r1
 8002d86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d88:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002d8c:	f000 80bc 	beq.w	8002f08 <_printf_i+0x194>
 8002d90:	d81a      	bhi.n	8002dc8 <_printf_i+0x54>
 8002d92:	2a63      	cmp	r2, #99	; 0x63
 8002d94:	d02e      	beq.n	8002df4 <_printf_i+0x80>
 8002d96:	d80a      	bhi.n	8002dae <_printf_i+0x3a>
 8002d98:	2a00      	cmp	r2, #0
 8002d9a:	f000 80c8 	beq.w	8002f2e <_printf_i+0x1ba>
 8002d9e:	2a58      	cmp	r2, #88	; 0x58
 8002da0:	f000 808a 	beq.w	8002eb8 <_printf_i+0x144>
 8002da4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002da8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002dac:	e02a      	b.n	8002e04 <_printf_i+0x90>
 8002dae:	2a64      	cmp	r2, #100	; 0x64
 8002db0:	d001      	beq.n	8002db6 <_printf_i+0x42>
 8002db2:	2a69      	cmp	r2, #105	; 0x69
 8002db4:	d1f6      	bne.n	8002da4 <_printf_i+0x30>
 8002db6:	6821      	ldr	r1, [r4, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002dbe:	d023      	beq.n	8002e08 <_printf_i+0x94>
 8002dc0:	1d11      	adds	r1, r2, #4
 8002dc2:	6019      	str	r1, [r3, #0]
 8002dc4:	6813      	ldr	r3, [r2, #0]
 8002dc6:	e027      	b.n	8002e18 <_printf_i+0xa4>
 8002dc8:	2a73      	cmp	r2, #115	; 0x73
 8002dca:	f000 80b4 	beq.w	8002f36 <_printf_i+0x1c2>
 8002dce:	d808      	bhi.n	8002de2 <_printf_i+0x6e>
 8002dd0:	2a6f      	cmp	r2, #111	; 0x6f
 8002dd2:	d02a      	beq.n	8002e2a <_printf_i+0xb6>
 8002dd4:	2a70      	cmp	r2, #112	; 0x70
 8002dd6:	d1e5      	bne.n	8002da4 <_printf_i+0x30>
 8002dd8:	680a      	ldr	r2, [r1, #0]
 8002dda:	f042 0220 	orr.w	r2, r2, #32
 8002dde:	600a      	str	r2, [r1, #0]
 8002de0:	e003      	b.n	8002dea <_printf_i+0x76>
 8002de2:	2a75      	cmp	r2, #117	; 0x75
 8002de4:	d021      	beq.n	8002e2a <_printf_i+0xb6>
 8002de6:	2a78      	cmp	r2, #120	; 0x78
 8002de8:	d1dc      	bne.n	8002da4 <_printf_i+0x30>
 8002dea:	2278      	movs	r2, #120	; 0x78
 8002dec:	496f      	ldr	r1, [pc, #444]	; (8002fac <_printf_i+0x238>)
 8002dee:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002df2:	e064      	b.n	8002ebe <_printf_i+0x14a>
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002dfa:	1d11      	adds	r1, r2, #4
 8002dfc:	6019      	str	r1, [r3, #0]
 8002dfe:	6813      	ldr	r3, [r2, #0]
 8002e00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e04:	2301      	movs	r3, #1
 8002e06:	e0a3      	b.n	8002f50 <_printf_i+0x1dc>
 8002e08:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002e0c:	f102 0104 	add.w	r1, r2, #4
 8002e10:	6019      	str	r1, [r3, #0]
 8002e12:	d0d7      	beq.n	8002dc4 <_printf_i+0x50>
 8002e14:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	da03      	bge.n	8002e24 <_printf_i+0xb0>
 8002e1c:	222d      	movs	r2, #45	; 0x2d
 8002e1e:	425b      	negs	r3, r3
 8002e20:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002e24:	4962      	ldr	r1, [pc, #392]	; (8002fb0 <_printf_i+0x23c>)
 8002e26:	220a      	movs	r2, #10
 8002e28:	e017      	b.n	8002e5a <_printf_i+0xe6>
 8002e2a:	6820      	ldr	r0, [r4, #0]
 8002e2c:	6819      	ldr	r1, [r3, #0]
 8002e2e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002e32:	d003      	beq.n	8002e3c <_printf_i+0xc8>
 8002e34:	1d08      	adds	r0, r1, #4
 8002e36:	6018      	str	r0, [r3, #0]
 8002e38:	680b      	ldr	r3, [r1, #0]
 8002e3a:	e006      	b.n	8002e4a <_printf_i+0xd6>
 8002e3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e40:	f101 0004 	add.w	r0, r1, #4
 8002e44:	6018      	str	r0, [r3, #0]
 8002e46:	d0f7      	beq.n	8002e38 <_printf_i+0xc4>
 8002e48:	880b      	ldrh	r3, [r1, #0]
 8002e4a:	2a6f      	cmp	r2, #111	; 0x6f
 8002e4c:	bf14      	ite	ne
 8002e4e:	220a      	movne	r2, #10
 8002e50:	2208      	moveq	r2, #8
 8002e52:	4957      	ldr	r1, [pc, #348]	; (8002fb0 <_printf_i+0x23c>)
 8002e54:	2000      	movs	r0, #0
 8002e56:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002e5a:	6865      	ldr	r5, [r4, #4]
 8002e5c:	2d00      	cmp	r5, #0
 8002e5e:	60a5      	str	r5, [r4, #8]
 8002e60:	f2c0 809c 	blt.w	8002f9c <_printf_i+0x228>
 8002e64:	6820      	ldr	r0, [r4, #0]
 8002e66:	f020 0004 	bic.w	r0, r0, #4
 8002e6a:	6020      	str	r0, [r4, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d13f      	bne.n	8002ef0 <_printf_i+0x17c>
 8002e70:	2d00      	cmp	r5, #0
 8002e72:	f040 8095 	bne.w	8002fa0 <_printf_i+0x22c>
 8002e76:	4675      	mov	r5, lr
 8002e78:	2a08      	cmp	r2, #8
 8002e7a:	d10b      	bne.n	8002e94 <_printf_i+0x120>
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	07da      	lsls	r2, r3, #31
 8002e80:	d508      	bpl.n	8002e94 <_printf_i+0x120>
 8002e82:	6923      	ldr	r3, [r4, #16]
 8002e84:	6862      	ldr	r2, [r4, #4]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	bfde      	ittt	le
 8002e8a:	2330      	movle	r3, #48	; 0x30
 8002e8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e94:	ebae 0305 	sub.w	r3, lr, r5
 8002e98:	6123      	str	r3, [r4, #16]
 8002e9a:	f8cd 8000 	str.w	r8, [sp]
 8002e9e:	463b      	mov	r3, r7
 8002ea0:	aa03      	add	r2, sp, #12
 8002ea2:	4621      	mov	r1, r4
 8002ea4:	4630      	mov	r0, r6
 8002ea6:	f7ff feed 	bl	8002c84 <_printf_common>
 8002eaa:	3001      	adds	r0, #1
 8002eac:	d155      	bne.n	8002f5a <_printf_i+0x1e6>
 8002eae:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb2:	b005      	add	sp, #20
 8002eb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002eb8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002ebc:	493c      	ldr	r1, [pc, #240]	; (8002fb0 <_printf_i+0x23c>)
 8002ebe:	6822      	ldr	r2, [r4, #0]
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002ec6:	f100 0504 	add.w	r5, r0, #4
 8002eca:	601d      	str	r5, [r3, #0]
 8002ecc:	d001      	beq.n	8002ed2 <_printf_i+0x15e>
 8002ece:	6803      	ldr	r3, [r0, #0]
 8002ed0:	e002      	b.n	8002ed8 <_printf_i+0x164>
 8002ed2:	0655      	lsls	r5, r2, #25
 8002ed4:	d5fb      	bpl.n	8002ece <_printf_i+0x15a>
 8002ed6:	8803      	ldrh	r3, [r0, #0]
 8002ed8:	07d0      	lsls	r0, r2, #31
 8002eda:	bf44      	itt	mi
 8002edc:	f042 0220 	orrmi.w	r2, r2, #32
 8002ee0:	6022      	strmi	r2, [r4, #0]
 8002ee2:	b91b      	cbnz	r3, 8002eec <_printf_i+0x178>
 8002ee4:	6822      	ldr	r2, [r4, #0]
 8002ee6:	f022 0220 	bic.w	r2, r2, #32
 8002eea:	6022      	str	r2, [r4, #0]
 8002eec:	2210      	movs	r2, #16
 8002eee:	e7b1      	b.n	8002e54 <_printf_i+0xe0>
 8002ef0:	4675      	mov	r5, lr
 8002ef2:	fbb3 f0f2 	udiv	r0, r3, r2
 8002ef6:	fb02 3310 	mls	r3, r2, r0, r3
 8002efa:	5ccb      	ldrb	r3, [r1, r3]
 8002efc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002f00:	4603      	mov	r3, r0
 8002f02:	2800      	cmp	r0, #0
 8002f04:	d1f5      	bne.n	8002ef2 <_printf_i+0x17e>
 8002f06:	e7b7      	b.n	8002e78 <_printf_i+0x104>
 8002f08:	6808      	ldr	r0, [r1, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002f10:	6949      	ldr	r1, [r1, #20]
 8002f12:	d004      	beq.n	8002f1e <_printf_i+0x1aa>
 8002f14:	1d10      	adds	r0, r2, #4
 8002f16:	6018      	str	r0, [r3, #0]
 8002f18:	6813      	ldr	r3, [r2, #0]
 8002f1a:	6019      	str	r1, [r3, #0]
 8002f1c:	e007      	b.n	8002f2e <_printf_i+0x1ba>
 8002f1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f22:	f102 0004 	add.w	r0, r2, #4
 8002f26:	6018      	str	r0, [r3, #0]
 8002f28:	6813      	ldr	r3, [r2, #0]
 8002f2a:	d0f6      	beq.n	8002f1a <_printf_i+0x1a6>
 8002f2c:	8019      	strh	r1, [r3, #0]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	4675      	mov	r5, lr
 8002f32:	6123      	str	r3, [r4, #16]
 8002f34:	e7b1      	b.n	8002e9a <_printf_i+0x126>
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	1d11      	adds	r1, r2, #4
 8002f3a:	6019      	str	r1, [r3, #0]
 8002f3c:	6815      	ldr	r5, [r2, #0]
 8002f3e:	2100      	movs	r1, #0
 8002f40:	6862      	ldr	r2, [r4, #4]
 8002f42:	4628      	mov	r0, r5
 8002f44:	f000 f846 	bl	8002fd4 <memchr>
 8002f48:	b108      	cbz	r0, 8002f4e <_printf_i+0x1da>
 8002f4a:	1b40      	subs	r0, r0, r5
 8002f4c:	6060      	str	r0, [r4, #4]
 8002f4e:	6863      	ldr	r3, [r4, #4]
 8002f50:	6123      	str	r3, [r4, #16]
 8002f52:	2300      	movs	r3, #0
 8002f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f58:	e79f      	b.n	8002e9a <_printf_i+0x126>
 8002f5a:	6923      	ldr	r3, [r4, #16]
 8002f5c:	462a      	mov	r2, r5
 8002f5e:	4639      	mov	r1, r7
 8002f60:	4630      	mov	r0, r6
 8002f62:	47c0      	blx	r8
 8002f64:	3001      	adds	r0, #1
 8002f66:	d0a2      	beq.n	8002eae <_printf_i+0x13a>
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	079b      	lsls	r3, r3, #30
 8002f6c:	d507      	bpl.n	8002f7e <_printf_i+0x20a>
 8002f6e:	2500      	movs	r5, #0
 8002f70:	f104 0919 	add.w	r9, r4, #25
 8002f74:	68e3      	ldr	r3, [r4, #12]
 8002f76:	9a03      	ldr	r2, [sp, #12]
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	429d      	cmp	r5, r3
 8002f7c:	db05      	blt.n	8002f8a <_printf_i+0x216>
 8002f7e:	68e0      	ldr	r0, [r4, #12]
 8002f80:	9b03      	ldr	r3, [sp, #12]
 8002f82:	4298      	cmp	r0, r3
 8002f84:	bfb8      	it	lt
 8002f86:	4618      	movlt	r0, r3
 8002f88:	e793      	b.n	8002eb2 <_printf_i+0x13e>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	464a      	mov	r2, r9
 8002f8e:	4639      	mov	r1, r7
 8002f90:	4630      	mov	r0, r6
 8002f92:	47c0      	blx	r8
 8002f94:	3001      	adds	r0, #1
 8002f96:	d08a      	beq.n	8002eae <_printf_i+0x13a>
 8002f98:	3501      	adds	r5, #1
 8002f9a:	e7eb      	b.n	8002f74 <_printf_i+0x200>
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1a7      	bne.n	8002ef0 <_printf_i+0x17c>
 8002fa0:	780b      	ldrb	r3, [r1, #0]
 8002fa2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fa6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002faa:	e765      	b.n	8002e78 <_printf_i+0x104>
 8002fac:	080031a6 	.word	0x080031a6
 8002fb0:	08003195 	.word	0x08003195

08002fb4 <_sbrk_r>:
 8002fb4:	b538      	push	{r3, r4, r5, lr}
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	4c05      	ldr	r4, [pc, #20]	; (8002fd0 <_sbrk_r+0x1c>)
 8002fba:	4605      	mov	r5, r0
 8002fbc:	4608      	mov	r0, r1
 8002fbe:	6023      	str	r3, [r4, #0]
 8002fc0:	f7ff faf0 	bl	80025a4 <_sbrk>
 8002fc4:	1c43      	adds	r3, r0, #1
 8002fc6:	d102      	bne.n	8002fce <_sbrk_r+0x1a>
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	b103      	cbz	r3, 8002fce <_sbrk_r+0x1a>
 8002fcc:	602b      	str	r3, [r5, #0]
 8002fce:	bd38      	pop	{r3, r4, r5, pc}
 8002fd0:	20003a98 	.word	0x20003a98

08002fd4 <memchr>:
 8002fd4:	b510      	push	{r4, lr}
 8002fd6:	b2c9      	uxtb	r1, r1
 8002fd8:	4402      	add	r2, r0
 8002fda:	4290      	cmp	r0, r2
 8002fdc:	4603      	mov	r3, r0
 8002fde:	d101      	bne.n	8002fe4 <memchr+0x10>
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	bd10      	pop	{r4, pc}
 8002fe4:	781c      	ldrb	r4, [r3, #0]
 8002fe6:	3001      	adds	r0, #1
 8002fe8:	428c      	cmp	r4, r1
 8002fea:	d1f6      	bne.n	8002fda <memchr+0x6>
 8002fec:	4618      	mov	r0, r3
 8002fee:	bd10      	pop	{r4, pc}

08002ff0 <memmove>:
 8002ff0:	4288      	cmp	r0, r1
 8002ff2:	b510      	push	{r4, lr}
 8002ff4:	eb01 0302 	add.w	r3, r1, r2
 8002ff8:	d803      	bhi.n	8003002 <memmove+0x12>
 8002ffa:	1e42      	subs	r2, r0, #1
 8002ffc:	4299      	cmp	r1, r3
 8002ffe:	d10c      	bne.n	800301a <memmove+0x2a>
 8003000:	bd10      	pop	{r4, pc}
 8003002:	4298      	cmp	r0, r3
 8003004:	d2f9      	bcs.n	8002ffa <memmove+0xa>
 8003006:	1881      	adds	r1, r0, r2
 8003008:	1ad2      	subs	r2, r2, r3
 800300a:	42d3      	cmn	r3, r2
 800300c:	d100      	bne.n	8003010 <memmove+0x20>
 800300e:	bd10      	pop	{r4, pc}
 8003010:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003014:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003018:	e7f7      	b.n	800300a <memmove+0x1a>
 800301a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800301e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003022:	e7eb      	b.n	8002ffc <memmove+0xc>

08003024 <__malloc_lock>:
 8003024:	4770      	bx	lr

08003026 <__malloc_unlock>:
 8003026:	4770      	bx	lr

08003028 <_realloc_r>:
 8003028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302a:	4607      	mov	r7, r0
 800302c:	4614      	mov	r4, r2
 800302e:	460e      	mov	r6, r1
 8003030:	b921      	cbnz	r1, 800303c <_realloc_r+0x14>
 8003032:	4611      	mov	r1, r2
 8003034:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003038:	f7ff bc76 	b.w	8002928 <_malloc_r>
 800303c:	b922      	cbnz	r2, 8003048 <_realloc_r+0x20>
 800303e:	f7ff fc27 	bl	8002890 <_free_r>
 8003042:	4625      	mov	r5, r4
 8003044:	4628      	mov	r0, r5
 8003046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003048:	f000 f814 	bl	8003074 <_malloc_usable_size_r>
 800304c:	4284      	cmp	r4, r0
 800304e:	d90f      	bls.n	8003070 <_realloc_r+0x48>
 8003050:	4621      	mov	r1, r4
 8003052:	4638      	mov	r0, r7
 8003054:	f7ff fc68 	bl	8002928 <_malloc_r>
 8003058:	4605      	mov	r5, r0
 800305a:	2800      	cmp	r0, #0
 800305c:	d0f2      	beq.n	8003044 <_realloc_r+0x1c>
 800305e:	4631      	mov	r1, r6
 8003060:	4622      	mov	r2, r4
 8003062:	f7ff fb9b 	bl	800279c <memcpy>
 8003066:	4631      	mov	r1, r6
 8003068:	4638      	mov	r0, r7
 800306a:	f7ff fc11 	bl	8002890 <_free_r>
 800306e:	e7e9      	b.n	8003044 <_realloc_r+0x1c>
 8003070:	4635      	mov	r5, r6
 8003072:	e7e7      	b.n	8003044 <_realloc_r+0x1c>

08003074 <_malloc_usable_size_r>:
 8003074:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003078:	2800      	cmp	r0, #0
 800307a:	f1a0 0004 	sub.w	r0, r0, #4
 800307e:	bfbc      	itt	lt
 8003080:	580b      	ldrlt	r3, [r1, r0]
 8003082:	18c0      	addlt	r0, r0, r3
 8003084:	4770      	bx	lr
	...

08003088 <_init>:
 8003088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308a:	bf00      	nop
 800308c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800308e:	bc08      	pop	{r3}
 8003090:	469e      	mov	lr, r3
 8003092:	4770      	bx	lr

08003094 <_fini>:
 8003094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003096:	bf00      	nop
 8003098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800309a:	bc08      	pop	{r3}
 800309c:	469e      	mov	lr, r3
 800309e:	4770      	bx	lr
